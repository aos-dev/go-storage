// Code generated by go generate internal/cmd; DO NOT EDIT.
package types

import (
    "fmt"
)

{{- range $k, $infos := .InfosMap }}
    {{ $serviceName := $k | toCamel }}

type {{ $serviceName }} struct {
    {{- range $_, $v := $infos }}
    {{ $v.TypeName }} {{ $v.Type }}
    {{- end }}

     bit uint64
    m map[string]interface{}
}

    {{- range $k, $v := $infos }}
{{- if $v.Export }}
func (m {{ $serviceName }}) Get{{ $v.DisplayName }}() {{ $v.Type }} {
    return m.{{ $v.TypeName }}
}

func (m {{ $serviceName }}) Set{{ $v.DisplayName }}(v {{ $v.Type }}) {
    m.{{ $v.TypeName }} = v
}
{{- else }}

func (m {{ $serviceName }}) Get{{ $v.DisplayName }}() ({{ $v.Type }}, bool) {
    if m.bit & (1<<{{ $k }}) == 1 {
        return m.{{ $v.TypeName }}, true
    }
    {{- if $v.ZeroValue }}
        return {{ $v.ZeroValue }}, false
    {{- else }}
        return {{ $v.Type | zeroValue }}, false
    {{- end }}
}

func (m {{ $serviceName }}) MustGet{{ $v.DisplayName }}() {{ $v.Type }} {
    if m.bit & (1<<{{ $k }}) != 1 {
        panic(fmt.Sprintf("{{ $serviceName | toKebab }} {{ $v.Name }} is not set"))
    }
    return m.{{ $v.TypeName }}
}

func (m {{ $serviceName }}) Set{{ $v.DisplayName }}(v {{ $v.Type }}) {
    m.{{ $v.TypeName }} = v
    m.bit |= 1<<{{ $k }}
}
{{- end }}
    {{- end }}
{{- end }}