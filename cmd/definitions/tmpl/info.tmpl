// Code generated by go generate internal/cmd; DO NOT EDIT.
package types

import (
    "fmt"
)

{{- range $k, $infos := .InfosMap }}
{{ $serviceName := $k | toCamel }}

// Field index in {{$serviceName}} bit
const (
{{- range $k, $v := $infos }}
    {{$serviceName}}Index{{ $v.Name | toPascal }} = 1<<{{ $k }}
{{- end }}
)

type {{ $serviceName | toPascal }} struct {
    {{- range $_, $v := $infos }}
    {{ $v.TypeName }} {{ $v.Type }}
    {{- end }}

    // bit used as a bitmap for object value, 0 means not set, 1 means set
    bit uint64
    m map[string]interface{}
}

    {{- range $k, $v := $infos }}
{{- if $v.Export }}
func (m *{{ $serviceName | toPascal }}) Get{{ $v.DisplayName }}() {{ $v.Type }} {
    return m.{{ $v.TypeName }}
}

func (m *{{ $serviceName | toPascal }}) Set{{ $v.DisplayName }}(v {{ $v.Type }}) *{{ $serviceName | toPascal }} {
    m.{{ $v.TypeName }} = v
    return m
}
{{- else }}

func (m *{{ $serviceName | toPascal }}) Get{{ $v.DisplayName }}() ({{ $v.Type }}, bool) {
    if m.bit & {{$serviceName}}Index{{ $v.Name | toPascal }} != 0 {
        return m.{{ $v.TypeName }}, true
    }
    return {{ $v.Type | zeroValue }}, false
}

func (m *{{ $serviceName | toPascal }}) MustGet{{ $v.DisplayName }}() {{ $v.Type }} {
    if m.bit & {{$serviceName}}Index{{ $v.Name | toPascal }} == 0 {
        panic(fmt.Sprintf("{{ $serviceName | toKebab }} {{ $v.Name }} is not set"))
    }
    return m.{{ $v.TypeName }}
}

func (m *{{ $serviceName | toPascal }}) Set{{ $v.DisplayName }}(v {{ $v.Type }}) *{{ $serviceName | toPascal }} {
    m.{{ $v.TypeName }} = v
    m.bit |= {{$serviceName}}Index{{ $v.Name | toPascal }}
    return m
}
{{- end }}
    {{- end }}
{{- end }}