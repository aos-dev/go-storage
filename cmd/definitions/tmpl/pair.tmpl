// Code generated by go generate internal/cmd; DO NOT EDIT.
package pairs

import (
    "context"

    "github.com/aos-dev/go-storage/v2/pkg/endpoint"
    "github.com/aos-dev/go-storage/v2/pkg/credential"
    "github.com/aos-dev/go-storage/v2/pkg/httpclient"
    . "github.com/aos-dev/go-storage/v2/types"
)

{{- range $_, $v := .Pairs }}
{{- $pname := $v.Name | toCamel }}
// With{{ $pname }} will apply {{ $v.Name }} value to Options
{{ $v.Description }}
func With{{ $pname }}(v {{ $v.Type }}) Pair {
    return Pair{
        Key: "{{ $v.Name }}",
        Value: v,
    }
}
{{- end }}

// Parse will parse a k-v map to pairs slice.
func Parse(m map[string]interface{}) ([]Pair, error) {
    pairs := make([]Pair, 0, len(m))

    var err error

    for k, v := range m {
        var pv interface{}
        switch k {
        {{- range $_, $v := .Pairs }}
            case "{{ $v.Name }}":
                switch rv := v.(type) {
                case {{ $v.Type }}:
                    pv = rv
                {{- if $v.Parser }}
                case string:
                    pv, err = {{$v.Parser}}(rv)
                    if err != nil {
                        return nil, &Error{
                        Op: "parse",
                        Err: err,
                        Key: "{{ $v.Name }}",
                        Type: "{{ $v.Type }}",
                        Value: v,
                    }
                }
                {{- end }}
                default:
                    return nil, &Error{
                        Op: "parse",
                        Err: ErrPairTypeMismatch,
                        Key: "{{ $v.Name }}",
                        Type: "{{ $v.Type }}",
                        Value: v,
                    }
            }
        {{- end }}
            default:
                continue
        }
        pairs = append(pairs, Pair{Key: k, Value: pv})
    }

    return pairs, nil
}
