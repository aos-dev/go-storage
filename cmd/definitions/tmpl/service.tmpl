// Code generated by go generate via internal/cmd/service; DO NOT EDIT.
package {{ .Name }}

import (
    "context"
    "io"

    "github.com/aos-dev/go-storage/v2/pkg/endpoint"
    "github.com/aos-dev/go-storage/v2/pkg/credential"
    "github.com/aos-dev/go-storage/v2/pkg/httpclient"
    "github.com/aos-dev/go-storage/v2/services"
    . "github.com/aos-dev/go-storage/v2/types"
    ps "github.com/aos-dev/go-storage/v2/pairs"
)

var _ credential.Provider
var _ endpoint.Provider
var _ Storager
var _ services.ServiceError
var _ httpclient.Options

// Type is the type for {{ .Name }}
const Type = "{{ .Name }}"

// Service available pairs.
const (
{{- range $_, $v := .Pairs }}
    {{- if not $v.Global }}
    {{- $pname := $v.Name | toPascal }}
    // {{ $pname }} will {{ $v.Description }}
    Pair{{ $pname }} = "{{ $.Name }}_{{ $v.Name }}"
    {{- end }}
{{- end }}
)

// Service available infos.
const (
{{- range $_, $v := .Infos }}
    {{- if not $v.Global }}
    {{- $pname := $v.Name | toPascal }}
    {{- if $v.DisplayName }}
        {{- $pname = $v.DisplayName }}
    {{- end }}
    Info{{ $v.Scope | toPascal }}{{ $v.Category | toPascal }}{{ $pname }} = "{{ $.Name }}-{{ $v.Name }}"
    {{- end }}
{{- end }}
)

{{- range $_, $v := .Pairs }}
{{- if not $v.Global }}
{{- $pname := $v.Name | toPascal }}
// With{{ $pname }} will apply {{ $v.Name }} value to Options
// This pair is used to {{ $v.Description }}
func With{{ $pname }}(v {{ $v.Type }}) Pair {
        return Pair{
        Key: Pair{{ $pname }},
        Value: v,
    }
}
{{- end }}
{{- end }}


{{- range $_, $v := .Infos }}
    {{- if not $v.Global }}
    {{ $pname := $v.Name | toPascal }}
    {{- if $v.DisplayName }}
        {{ $pname = $v.DisplayName }}
    {{- end }}
    {{ $serviceName := printf "%s%s" ($v.Scope | toPascal) ($v.Category | toPascal) }}
    // Get{{ $pname }} will get {{ $v.Name }} value from metadata.
    func Get{{ $pname }}(m {{ $serviceName }}) ({{ $v.Type }}, bool)  {
    v, ok := m.Get(Info{{ $serviceName }}{{ $pname }})
    if !ok {
    {{- if $v.ZeroValue }}
        return {{ $v.ZeroValue }}, false
    {{- else }}
        return {{ $v.Type | zeroValue }}, false
    {{- end }}
    }
    return v.({{ $v.Type }}), true
    }

    // set{{ $v.Name }} will set {{ $v.Name }} value into metadata.
    func set{{ $pname }}(m {{ $serviceName }}, v {{ $v.Type }}) {{ $serviceName }} {
    return m.Set(Info{{ $serviceName }}{{ $pname }}, v)
    }
    {{- end }}
{{- end }}

{{- range $_, $v := .Namespaces }}
    {{- template "pair" makeSlice ( $v.Name | toPascal ) $v.New }}
    {{- template "pairs" makeSlice $v.Name $v.Funcs }}
    {{- template "functions" makeSlice $v.Name $v.Funcs }}
{{- end }}

{{- define "pairs" }}
    {{- $pn := index . 0 | toPascal }}
    {{- $data := index . 1 }}

    {{- range $_, $v := $data }}
        {{- template "pair" makeSlice $pn $v}}
    {{- end }}
{{- end}}

{{- define "pair" }}
    {{- $pn := index . 0 }}
    {{- $fn := index . 1 }}

    {{- $fnk := $fn.Name | toPascal }}

    // pair{{ $pn }}{{ $fnk }}Map holds all available pairs
    var pair{{ $pn }}{{ $fnk }}Map = map[string]struct{}{
        // Required pairs
        {{- range $_, $pair := $fn.Required }}
        {{ $pair.FullName }}: struct{}{},
        {{- end }}
        // Optional pairs
        {{- range $_, $pair := $fn.Optional }}
        {{ $pair.FullName }}: struct{}{},
        {{- end }}
        // Generated pairs
        {{- range $_, $pair := $fn.Generated }}
        {{ $pair.FullName }}: struct{}{},
        {{- end }}
    }

    // pair{{ $pn }}{{ $fnk }} is the parsed struct
    type pair{{ $pn }}{{ $fnk }} struct {
        pairs []Pair

        // Required pairs
        {{- range $_, $pair := $fn.Required }}
        {{ $pair.Name | toPascal }}    {{ $pair.Type }}
        {{- end }}
        // Optional pairs
        {{- range $_, $pair := $fn.Optional }}
        Has{{ $pair.Name | toPascal }}   bool
        {{ $pair.Name | toPascal }}      {{ $pair.Type }}
        {{- end }}
        // Generated pairs
        {{- range $_, $pair := $fn.Generated }}
        {{- if not $pair.Default }}
        Has{{ $pair.Name | toPascal }}   bool
        {{- end }}
        {{ $pair.Name | toPascal }}    {{ $pair.Type }}
        {{- end }}
    }

    // parsePair{{ $pn }}{{ $fnk }} will parse *Pair slice into *pair{{ $pn }}{{ $fnk }}
    func parsePair{{ $pn }}{{ $fnk }}(opts []Pair) (*pair{{ $pn }}{{ $fnk }}, error) {
    result := &pair{{ $pn }}{{ $fnk }}{
        pairs: opts,
    }

    values := make(map[string]interface{})
    for _, v := range opts {
        {{- if not (hasPrefix $fnk "New") }}
        if _, ok := pair{{ $pn }}{{ $fnk }}Map[v.Key]; !ok {
            return nil, services.NewPairUnsupportedError(v)
        }
        {{- end }}
        values[v.Key] = v.Value
    }

    {{- if or $fn.Required $fn.Optional $fn.Generated }}
    var v interface{}
    var ok bool
    {{- end }}

    // Handle required pairs
    {{- range $_, $pair := $fn.Required }}
        {{- $pkey := $pair.Name | toPascal }}
        v, ok = values[{{- $pair.FullName -}}]
        if !ok {
            return nil, services.NewPairRequiredError({{- $pair.FullName -}})
        }
        if ok {
            result.{{ $pkey }} = v.({{ $pair.Type }})
        }
    {{- end }}
    // Handle optional pairs
    {{- range $_, $pair := $fn.Optional }}
        {{- $pkey := $pair.Name | toPascal }}
        v, ok = values[{{- $pair.FullName -}}]
        if ok {
        result.Has{{ $pkey }} = true
        result.{{ $pkey }} = v.({{ $pair.Type }})
        }
    {{- end }}
    // Handle generated pairs
    {{- range $_, $pair := $fn.Generated }}
        {{- $pkey := $pair.Name | toPascal }}
        v, ok = values[{{- $pair.FullName -}}]
        if ok {
        {{- if not $pair.Default }}
            result.Has{{ $pkey }} = true
        {{- end }}
        result.{{ $pkey }} = v.({{ $pair.Type }})
        }
        {{- if $pair.Default }}
            if !ok {
            result.{{ $pkey }} = {{ $pair.Default }}
            }
        {{- end }}
    {{- end }}

    return result, nil
    }
{{- end }}

{{- define "functions" }}
    {{- $pn := index . 0 | toPascal }}
    {{- $data := index . 1 }}

    {{- range $_, $v := $data }}
        {{- template "function" makeSlice $pn $v}}
    {{- end }}
{{- end }}

{{- define "function" }}
    {{- $pn := index . 0 }}
    {{- $fn := index . 1 }}

    {{ $fnk := $fn.Name | toPascal }}

    // {{ $fnk }} {{ $fn.Description }}
    //
    // This function will create a context by default.
    func (s *{{$pn}}) {{ $fnk }}({{$fn.Params.String}}) ({{$fn.Results.String}}) {
        ctx := context.Background()
        return s.{{ $fnk }}WithContext(ctx, {{$fn.Params.Caller}})
    }

    // {{ $fnk }}WithContext {{ $fn.Description }}
    func (s *{{$pn}}) {{ $fnk }}WithContext(ctx context.Context, {{$fn.Params.String}}) ({{$fn.Results.String}}) {
        defer func(){
            {{- $path := $fn.Params.PathCaller }}
            {{- if and (eq $path "") (eq $pn "Service") }}
                {{ $path = ",\"\"" }}
            {{- end }}
            err = s.formatError(services.Op{{ $fnk }}, err {{ $path }} )
        }()
        var opt *pair{{ $pn }}{{ $fnk }}
        opt, err = parsePair{{ $pn }}{{ $fnk }}(pairs)
        if err != nil {
            return
        }

        return s.{{  $fn.Name | toCamel }}(ctx, {{$fn.Params.TrimLast.CallerEndswithComma}} opt)
    }
{{- end }}