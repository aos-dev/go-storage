// Code generated by go generate via cmd/definitions; DO NOT EDIT.
package {{ .Name }}

import (
    "context"
    "io"

    "github.com/aos-dev/go-storage/v3/pkg/endpoint"
    "github.com/aos-dev/go-storage/v3/pkg/credential"
    "github.com/aos-dev/go-storage/v3/pkg/httpclient"
    "github.com/aos-dev/go-storage/v3/services"
    . "github.com/aos-dev/go-storage/v3/types"
)

var _ credential.Provider
var _ endpoint.Value
var _ Storager
var _ services.ServiceError
var _ httpclient.Options

// Type is the type for {{ .Name }}
const Type = "{{ .Name }}"

// Service available pairs.
const (
{{- range $_, $v := .Pairs }}
    {{- if not $v.Global }}
    {{ $v.Description }}
    {{ $v.FullName }} = "{{ $.Name }}_{{ $v.Name }}"
    {{- end }}
{{- end }}
)

// ObjectMetadata stores service metadata for object.
type ObjectMetadata struct {
{{- range $_, $v := .Infos }}
    {{- if not $v.Global }}
    {{- $pname := $v.Name | toPascal }}
    {{- if $v.DisplayName }}
        {{- $pname = $v.DisplayName }}
    {{- end }}
    {{ $v.Description }}
    {{ $pname }} {{ $v.Type }}
    {{- end }}
{{- end }}
}

// GetObjectMetadata will get ObjectMetadata from Object.
//
// - This function should not be called by service implementer.
// - The returning ObjectMetadata is read only and should not be modified.
func GetObjectMetadata(o *Object) ObjectMetadata {
    om, ok := o.GetServiceMetadata()
    if ok {
        return om.(ObjectMetadata)
    }
    return ObjectMetadata{}
}

// setObjectMetadata will set ObjectMetadata into Object.
//
// - This function should only be called once, please make sure all data has been written before set.
func setObjectMetadata(o *Object, om ObjectMetadata) {
    o.SetServiceMetadata(om)
}

{{- range $_, $v := .Pairs }}
{{- if not $v.Global }}
{{- $pname := $v.Name | toPascal }}
// With{{ $pname }} will apply {{ $v.Name }} value to Options.
//
{{ $v.Description }}
func With{{ $pname }}(v {{ $v.Type }}) Pair {
        return Pair{
        Key: {{ $v.FullName }},
        Value: v,
    }
}
{{- end }}
{{- end }}

{{- range $_, $v := .Namespaces }}
    {{- template "pair_new" makeSlice ( $v.Name | toPascal ) $v.New }}
    {{- template "pairs" makeSlice $v.Name $v.Funcs }}
    {{- template "functions" makeSlice $v.Name $v.Funcs }}
{{- end }}

{{- define "pairs" }}
    {{- $pn := index . 0 | toPascal }}
    {{- $data := index . 1 }}

// Default{{ $pn }}Pairs is default pairs for specific action
type Default{{ $pn }}Pairs struct {
    {{- range $_, $v := $data }}
    {{ $v.Name | toPascal }} []Pair
    {{- end }}
}

    {{- range $_, $v := $data }}
        {{- template "pair" makeSlice $pn $v}}
    {{- end }}
{{- end }}

{{- define "pair_new" }}
{{- $pn := index . 0 }}
{{- $fn := index . 1 }}

{{- $fnk := $fn.Name | toPascal }}

// pair{{ $pn }}{{ $fnk }} is the parsed struct
type pair{{ $pn }}{{$fnk}} struct {
    pairs []Pair

    // Required pairs
    {{- range $_, $pair := $fn.Required }}
    Has{{ $pair.Name | toPascal }}   bool
    {{ $pair.Name | toPascal }}    {{ $pair.Type }}
    {{- end }}
    // Optional pairs
    {{- range $_, $pair := $fn.Optional }}
    Has{{ $pair.Name | toPascal }}   bool
    {{ $pair.Name | toPascal }}      {{ $pair.Type }}
    {{- end }}
    // Generated pairs
    {{- range $_, $pair := $fn.Generated }}
    Has{{ $pair.Name | toPascal }}   bool
    {{ $pair.Name | toPascal }}    {{ $pair.Type }}
    {{- end }}
}

// parsePair{{ $pn }}{{ $fnk }} will parse Pair slice into *pair{{ $pn }}{{ $fnk }}
func parsePair{{ $pn }}{{ $fnk }}(opts []Pair) (pair{{ $pn }}{{ $fnk }}, error) {
    result := pair{{ $pn }}{{ $fnk }}{
        pairs: opts,
    }

    for _, v := range opts {
        switch v.Key {
        // Required pairs
        {{- range $_, $pair := $fn.Required }}
        case {{ $pair.FullName }}:
            if result.Has{{ $pair.Name | toPascal }} {
                continue
            }
            result.Has{{ $pair.Name | toPascal }} = true
            result.{{ $pair.Name | toPascal }} = v.Value.({{ $pair.Type }})
        {{- end }}
        // Optional pairs
        {{- range $_, $pair := $fn.Optional }}
        case {{ $pair.FullName }}:
            if result.Has{{ $pair.Name | toPascal }} {
                continue
            }
            result.Has{{ $pair.Name | toPascal }} = true
            result.{{ $pair.Name | toPascal }} = v.Value.({{ $pair.Type }})
        {{- end }}
        // Generated pairs
        {{- range $_, $pair := $fn.Generated }}
        case {{ $pair.FullName }}:
            value, ok := convert{{ $fnk }}{{ $pair.Name | toPascal }}(v.Value.({{ $pair.Type }}))
            if ok {
                if result.Has{{ $pair.Name | toPascal }} {
                    continue
                }
                result.Has{{ $pair.Name | toPascal }} = true
                result.{{ $pair.Name | toPascal }} = value
            } else {
                result.Has{{ $pair.Name | toPascal }} = false
            }
        {{- end }}
        }
    }

    {{- range $_, $pair := $fn.Required }}
    if !result.Has{{ $pair.Name | toPascal }} {
        return pair{{ $pn }}{{ $fnk }}{}, services.PairRequiredError{ Keys:[]string{ {{- $pair.FullName -}} } }
    }
    {{- end }}

    return result, nil
}
{{- end }}

{{- define "pair" }}
{{- $pn := index . 0 }}
{{- $fn := index . 1 }}

{{- $fnk := $fn.Name | toPascal }}

// pair{{ $pn }}{{ $fnk }} is the parsed struct
type pair{{ $pn }}{{ $fnk }} struct {
    pairs []Pair

    // Required pairs
    {{- range $_, $pair := $fn.Required }}
    Has{{ $pair.Name | toPascal }}   bool
    {{ $pair.Name | toPascal }}    {{ $pair.Type }}
    {{- end }}
    // Optional pairs
    {{- range $_, $pair := $fn.Optional }}
    Has{{ $pair.Name | toPascal }}   bool
    {{ $pair.Name | toPascal }}      {{ $pair.Type }}
    {{- end }}
    // Generated pairs
    {{- range $_, $pair := $fn.Generated }}
    Has{{ $pair.Name | toPascal }}   bool
    {{ $pair.Name | toPascal }}    {{ $pair.Type }}
    {{- end }}
}

// parsePair{{ $pn }}{{ $fnk }} will parse Pair slice into *pair{{ $pn }}{{ $fnk }}
func (s *{{ $pn }})parsePair{{ $pn }}{{ $fnk }}(opts []Pair) (pair{{ $pn }}{{ $fnk }}, error) {
    result := pair{{ $pn }}{{ $fnk }}{
        pairs: opts,
    }

    for _, v := range opts {
        switch v.Key {
        // Required pairs
        {{- range $_, $pair := $fn.Required }}
        case {{ $pair.FullName }}:
            result.Has{{ $pair.Name | toPascal }} = true
            result.{{ $pair.Name | toPascal }} = v.Value.({{ $pair.Type }})
        {{- end }}
        // Optional pairs
        {{- range $_, $pair := $fn.Optional }}
        case {{ $pair.FullName }}:
            result.Has{{ $pair.Name | toPascal }} = true
            result.{{ $pair.Name | toPascal }} = v.Value.({{ $pair.Type }})
        {{- end }}
        // Generated pairs
        {{- range $_, $pair := $fn.Generated }}
        case {{ $pair.FullName }}:
            value, ok := s.convert{{ $fnk }}{{ $pair.Name | toPascal }}(v.Value.({{ $pair.Type }}))
            if ok {
                result.Has{{ $pair.Name | toPascal }} = true
                result.{{ $pair.Name | toPascal }} = value
            } else {
                 {{if ne $pn "Service" }}
                if s.pairPolicy.All || s.pairPolicy.{{ $fnk }} || s.pairPolicy.{{ $fnk }}{{ $pair.Name | toPascal }} {
                    return pair{{ $pn }}{{ $fnk }}{}, services.PairUnsupportedError{Pair:v}
                }
                {{else}}
                result.Has{{ $pair.Name | toPascal }} = false
                {{end}}
            }
        {{- end }}
        default:
            {{if ne $pn "Service" }}
            if s.pairPolicy.All || s.pairPolicy.{{ $fnk }} {
                return pair{{ $pn }}{{ $fnk }}{}, services.PairUnsupportedError{Pair:v}
            }
            {{else}}
                continue
            {{end}}
        }
    }

    {{- range $_, $pair := $fn.Required }}
    if !result.Has{{ $pair.Name | toPascal }} {
        return pair{{ $pn }}{{ $fnk }}{}, services.PairRequiredError{Keys:[]string{ {{- $pair.FullName -}} }}
    }
    {{- end }}

    return result, nil
}
{{- end }}

{{- define "functions" }}
    {{- $pn := index . 0 | toPascal }}
    {{- $data := index . 1 }}

    {{- range $_, $v := $data }}
        {{- if $v.Local }}
        {{- template "local_function" makeSlice $pn $v}}
        {{- else }}
        {{- template "function" makeSlice $pn $v}}
        {{- end }}
    {{- end }}
{{- end }}

{{- define "function" }}
    {{- $pn := index . 0 }}
    {{- $fn := index . 1 }}

    {{ $fnk := $fn.Name | toPascal }}

    // {{ $fnk }} {{ $fn.Description }}
    //
    // This function will create a context by default.
    func (s *{{$pn}}) {{ $fnk }}({{$fn.Params.String}}) ({{$fn.Results.String}}) {
        ctx := context.Background()
        return s.{{ $fnk }}WithContext(ctx, {{$fn.Params.Caller}})
    }

    // {{ $fnk }}WithContext {{ $fn.Description }}
    func (s *{{$pn}}) {{ $fnk }}WithContext(ctx context.Context, {{$fn.Params.String}}) ({{$fn.Results.String}}) {
        defer func(){
            {{- $path := $fn.Params.PathCaller }}
            {{- if and (eq $path "") (eq $pn "Service") }}
                {{ $path = ",\"\"" }}
            {{- end }}
            err = s.formatError("{{$fn.Name}}", err {{ $path }} )
        }()

        {{- template "mode_check" makeSlice $fn.ObjectMode $fn.Params.ObjectParamName }}

        pairs = append(pairs, s.defaultPairs.{{ $fnk }}...)
        var opt pair{{ $pn }}{{ $fnk }}

        opt, err = s.parsePair{{ $pn }}{{ $fnk }}(pairs)
        if err != nil {
            return
        }

        return s.{{  $fn.Name | toCamel }}(ctx, {{$fn.Params.TrimLast.CallerEndswithComma}} opt)
    }
{{- end }}

{{- define "local_function" }}
    {{- $pn := index . 0 }}
    {{- $fn := index . 1 }}

    {{ $fnk := $fn.Name | toPascal }}

    // {{ $fnk }} {{ $fn.Description }}
    //
    // This function will create a context by default.
    func (s *{{$pn}}) {{ $fnk }}({{$fn.Params.String}}) ({{$fn.Results.String}}) {
        pairs = append(pairs, s.defaultPairs.{{ $fnk }}...)
        var opt pair{{ $pn }}{{ $fnk }}

        // Ignore error while handling local funtions.
        opt, _ = s.parsePair{{ $pn }}{{ $fnk }}(pairs)

        return s.{{  $fn.Name | toCamel }}({{$fn.Params.TrimLast.CallerEndswithComma}} opt)
    }
{{- end }}

{{- define "mode_check" }}
    {{- $mode := index . 0 | toPascal }}
    {{- $o := index . 1 }}
    {{- if ne $mode ""}}
    if !{{ $o }}.Mode.Is{{ $mode }}() {
        err = services.ObjectModeInvalidError{Expected: Mode{{ $mode }}, Actual: o.Mode}
        return
    }
    {{- end }}
{{- end }}

func init() {
    {{- range $_, $v := .Namespaces }}
        services.Register{{ $v.Name | toPascal }}r(Type, New{{ $v.Name | toPascal }}r)
    {{- end }}
}
