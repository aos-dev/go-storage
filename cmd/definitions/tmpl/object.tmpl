// Code generated by go generate internal/cmd; DO NOT EDIT.
package types

import (
    "fmt"
    "time"
    "sync"
)

// Field index in object bit
const (
{{- range $k, $v := .ObjectMeta }}
    objectIndex{{ $v.Name | toPascal }} uint64 = 1<<{{ $k }}
{{- end }}
)

// Object is the smallest unit in go-storage.
//
// NOTES:
//   - Object's fields SHOULD not be changed outside services.
//   - Object CANNOT be copied
//   - Object is concurrent safe.
type Object struct {
{{- range $k, $v := .ObjectMeta }}
    {{- if $v.Description }}
     // {{ $v.Description }}
    {{- end }}
    {{ $v.TypeName }} {{ $v.Type }}
{{- end }}

	// client is the client in which Object is alive.
	client Storager

    // bit used as a bitmap for object value, 0 means not set, 1 means set
    bit uint64
	done uint32
	m    sync.Mutex
}


{{- range $k, $v := .ObjectMeta }}
{{- if $v.Export }}
func (o *Object) Get{{ $v.DisplayName }}() {{ $v.Type }} {
    return o.{{ $v.TypeName }}
}

func (o *Object) Set{{ $v.DisplayName }}(v {{ $v.Type }}) *Object {
    o.{{ $v.TypeName }} = v
    return o
}
{{- else }}

func (o *Object) Get{{ $v.DisplayName }}() ({{ $v.Type }}, bool) {
    o.stat()

    if o.bit & objectIndex{{ $v.Name | toPascal }} != 0 {
        return o.{{ $v.TypeName }}, true
    }

    return {{ $v.Type | zeroValue }}, false
}

func (o *Object) MustGet{{ $v.DisplayName }}() {{ $v.Type }} {
    o.stat()

    if o.bit & objectIndex{{ $v.Name | toPascal }} == 0 {
        panic(fmt.Sprintf("object {{ $v.Name }} is not set"))
    }
    return o.{{ $v.TypeName }}
}

func (o *Object) Set{{ $v.DisplayName }}(v {{ $v.Type }}) *Object {
    o.{{ $v.TypeName }} = v
    o.bit |= objectIndex{{ $v.Name | toPascal }}
    return o
}
{{- end }}
{{- end }}

func (o *Object) clone(xo *Object) {
    {{- range $k, $v := .ObjectMeta }}
    o.{{ $v.TypeName }} = xo.{{ $v.TypeName }}
    {{- end }}

    o.bit = xo.bit
}