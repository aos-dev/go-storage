// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/function.tmpl (258B)
// tmpl/info.tmpl (1.802kB)
// tmpl/object.tmpl (1.902kB)
// tmpl/operation.tmpl (1.109kB)
// tmpl/pair.tmpl (1.929kB)
// tmpl/service.tmpl (8.909kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x4a\xc4\x40\x10\x45\xf7\x39\xc5\x67\xc8\x22\x33\x68\x1f\x40\x70\x15\x74\x25\x32\xa8\x17\x28\xda\x1e\x6d\x4c\x55\x9a\x54\x05\x07\xda\xba\xbb\xf4\x44\x04\x5d\x15\xd4\xff\xbc\xff\x6a\xbd\x46\x7f\x92\x0f\xdc\xdc\xa2\x0f\xf7\xab\xc4\xf0\x48\x9c\xf0\x05\x9b\x47\xe2\x34\xc1\xbd\x3b\xad\x12\x31\x28\x0e\xb5\xa2\xbf\xe4\x5a\x28\x6e\xa5\x23\x69\xa4\xd6\xda\xa3\xd6\x46\x72\x1f\xa2\x9d\x11\x67\xb1\x74\xb6\x30\x6e\xf7\xaa\xa5\x1b\xff\x48\x0b\xb1\x86\x97\x25\xf3\x03\xa9\x85\x67\x5b\xb2\xbc\xdd\xc9\xab\x7e\x66\x7b\x1f\x67\x66\x72\xc7\x5c\x0c\x87\x42\x79\xf9\xb7\xe9\xde\x1e\xcd\xf8\xef\xfa\xf0\xcb\x7f\x4a\xba\x4e\xa6\x3f\xdc\x8b\x58\x07\x00\x85\x24\xc7\x61\x97\xb9\x4c\x89\x93\x18\xb2\xed\xf6\x9d\x7f\x07\x00\x00\xff\xff\x5b\xb1\x71\xf7\x02\x01\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf3, 0x17, 0x45, 0xc4, 0x8, 0xb1, 0x57, 0xf3, 0x99, 0x7b, 0x1f, 0xcd, 0xe4, 0x30, 0x7e, 0x3, 0x30, 0xba, 0x28, 0xed, 0x36, 0x1c, 0xd3, 0x4a, 0x24, 0xfc, 0x10, 0x73, 0xfe, 0xf7, 0xda, 0x75}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x51\x6f\xd3\x3e\x14\xc5\xdf\xfd\x29\xce\xbf\xaa\xfe\x6a\x50\xd7\x6c\x12\xe2\x01\xd6\xa7\x6d\xa0\x09\x6d\x43\xda\xc4\x03\x08\x21\x37\xb9\xa9\x4c\x63\x3b\xb2\x9d\x68\x25\xcd\x77\x47\x76\xb2\xb6\x29\x5d\xa1\x88\x17\xde\xec\xd8\xbe\xe7\xe7\xe3\x73\x13\xc7\xb8\xd0\x29\x61\x4e\x8a\x0c\x77\x94\x62\xb6\xc4\x5c\xaf\xe7\x10\xca\x91\x51\x3c\x8f\x13\x99\xbe\xc1\xe5\x1d\x6e\xef\x1e\x70\x75\x79\xfd\x30\x61\x05\x4f\x16\x7c\x4e\x70\xcb\x82\x2c\x63\x42\x16\xda\x38\x8c\x18\x00\x0c\x32\xe9\x06\x2c\x62\xac\xae\x4f\x60\xb8\x9a\x13\x86\x8b\x31\x86\x42\x65\xda\xe2\xf5\x14\x93\x6b\x3f\xba\xe1\x05\x9a\x86\xd5\x35\x86\x96\x4c\x25\x12\xba\xe5\x92\xfc\xfa\x70\x81\x15\x9c\xbe\xe0\x92\x72\xbf\x85\xc5\x31\xde\x0a\xca\x53\x08\x95\xd2\x23\x84\x42\x5d\x6f\x1f\x6a\x1a\xcc\x84\x63\x89\x56\xd6\x43\xec\xe8\x56\xa1\x66\xab\xde\x34\x01\x71\xf7\xf8\xb5\xaf\xeb\x49\xaa\x49\x80\xf0\xf2\x1f\xb8\x4d\xb8\xd7\xc7\x14\x67\xe7\xe7\x7e\x75\xd1\x02\x9f\x80\x54\xea\x87\x11\x63\xde\x00\xec\xde\xa1\x7f\xdc\x3a\x53\x26\x0e\x75\xa7\xbc\x66\xfb\xfa\x1c\x9b\xc7\x78\x58\x16\x6d\xad\xa6\xd9\xfa\xb2\xd9\xb3\x66\x08\xf3\x38\xf6\x06\xa0\xb4\x94\x82\x5b\x70\x3f\x93\xbc\x40\xa6\x0d\xf4\xec\x1b\x25\x0e\x15\xcf\x4b\x1a\xe3\x14\x92\xb8\xb2\x50\xda\xc1\x92\x1b\xe3\xac\xfb\x60\xc9\x85\x52\xa1\x8e\x50\xee\xd5\xcb\x30\x95\x90\xbc\xf8\x6c\x9d\x11\x6a\xfe\x25\x04\x22\xe3\x09\xd5\x0d\xeb\x94\x0f\x7b\xed\x57\x45\xe6\xe9\xaf\x1e\x43\x42\x9a\x86\x65\xa5\x4a\x30\x92\x78\x71\xd0\xb5\x08\xef\xc8\xb5\x17\xbf\x14\xb6\xc8\xf9\xb2\x73\x63\x14\xf5\xfd\xe8\x7c\x35\xe4\x4a\xa3\x20\x27\x3f\xd9\xe7\x49\x7f\x57\xf3\xfe\x19\xcd\xaa\xaf\x19\xfd\xa2\x50\xc7\xb4\x07\x06\x53\x54\x3d\x5e\xd6\x05\x2a\xb7\x81\xf5\x2f\xb8\x33\xea\xa1\x8e\x31\xd3\x3a\x8f\x3a\x22\x91\x41\x4e\xfc\x0b\xff\x7f\x64\x0b\xfc\x37\xc5\x69\x57\xe3\xb0\xdb\x63\x38\x53\x52\xd8\xb8\x89\x6a\x1b\x81\x4f\x64\xf4\x47\x9f\xc2\xa7\x14\x6f\x55\x6a\xeb\x6c\xef\x18\x23\xe3\xb9\xa5\x4d\xdc\x3b\x87\xf6\x1e\x0c\x97\x5d\xe1\xfb\xa1\xf3\x6d\xbb\x1c\x61\xf1\x4d\x69\xdd\x71\x21\xfc\x63\x7b\xa7\x7d\x7b\x0b\xae\x44\x32\xca\xa4\x9b\xdc\x17\x46\x28\x97\x8d\x06\xfb\x58\xdf\xd3\x8c\xcf\x36\x3f\x88\xa7\x88\x89\x75\x77\x0f\xa2\x68\xeb\x25\xfe\xb5\x16\x69\xad\x5c\x4d\x8f\xf3\x72\x6f\x77\xb5\x6f\xbf\x13\x85\xcd\xf0\x47\x00\x00\x00\xff\xff\xc9\xe7\x0b\xe2\x0a\x07\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd, 0xa2, 0xdc, 0xf4, 0x79, 0x9b, 0xb4, 0x94, 0xfb, 0x8a, 0xe3, 0xb3, 0xca, 0x75, 0x5b, 0x39, 0x8, 0x1a, 0xc4, 0x69, 0x74, 0x63, 0x42, 0x82, 0xec, 0xa5, 0xc6, 0xc, 0xe0, 0x35, 0x8a, 0x7d}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x4d\x6f\xe3\x36\x10\x3d\x9b\xbf\xe2\xd5\x08\x0a\xa9\x70\xa5\xa4\x2d\x7a\x68\xe3\x53\x92\x16\x39\x24\x29\x90\xa0\x87\x16\x7b\xa0\xa5\x91\xc3\x8d\x44\x0a\xe4\xc8\x6b\xaf\xa2\xff\xbe\x20\x25\x7f\x25\xde\xc0\xc1\x5e\xf6\x64\x0e\x39\xf3\xe6\xe3\xbd\xb1\xd2\x14\x17\x26\x27\xcc\x49\x93\x95\x4c\x39\x66\x2b\xcc\xcd\xc6\x86\xd2\x4c\x56\xcb\x32\xcd\xaa\xfc\x4f\x5c\xde\xe1\xf6\xee\x01\x57\x97\xd7\x0f\x89\xa8\x65\xf6\x24\xe7\x04\x5e\xd5\xe4\x84\x50\x55\x6d\x2c\x23\x12\x00\x30\x2e\x2a\x1e\xf7\x27\x56\x15\x0d\x47\xb7\xd2\xd9\x58\xc4\x42\xa4\x29\xfe\x52\x54\xe6\x50\x3a\xa7\x25\x94\x86\x99\x7d\xa4\x8c\x31\x53\x2c\x32\xa3\x9d\xc7\x69\xdb\x9f\x61\xa5\x9e\x13\x4e\x9e\x26\x38\x59\xe0\x8f\x29\x92\xbb\xe0\x77\x43\x2c\xd1\x75\x01\xb5\x8f\xbc\xf6\x40\x6d\x8b\x93\x45\x72\x2b\x2b\xc2\x33\xd8\xfc\x23\x5d\x26\x4b\x74\x1d\xa6\x38\x3b\x3f\xf7\xaf\x4f\x3e\xca\x03\x93\xce\xfd\x31\x16\xc2\x97\x8f\x1e\x16\x8e\x6d\x93\x31\xda\x63\x73\x7b\x37\x55\xf8\xa4\x17\xa6\xaa\x48\xf3\xfa\x01\x69\x8a\xbe\x9a\x17\x0f\x3b\xb9\x7b\xd3\xfb\x3c\xac\x6a\x0a\x55\x77\xdd\xce\xcd\x8b\x52\xc5\x28\x4d\x91\x95\xca\x83\x29\x07\x7e\xa4\x8d\xa5\xf1\xe9\x51\x65\x8f\xeb\x2e\x94\x83\x2c\xd5\x82\x12\x31\x1a\x3c\xee\xd9\x58\x39\x27\x1b\x30\x2a\x38\x36\x96\x5c\xf8\xf1\x04\x5a\x2a\x03\xf5\x15\xb1\xcc\x25\xcb\x24\x94\xe6\x2d\x54\xb2\xfe\xdf\xb1\x55\x7a\xfe\x21\x28\xa1\x90\x19\xb5\x9d\x10\x43\x8b\x33\xc5\x68\x1c\xe5\x90\x0e\xd2\x5b\x95\xac\x51\x18\xbb\xa6\x73\x21\xcb\x86\x26\x38\x45\x45\x52\x3b\x68\xc3\x70\xc4\x13\x9c\x0d\x17\x8e\x38\x40\x05\x1c\xa5\xf9\xf7\xdf\xc4\x28\x37\x9a\x82\xf1\xeb\x2f\x62\x54\xf9\x57\x2f\x9b\xe4\xa6\x61\x5a\x8a\x4e\x88\x63\xb8\xd9\xf2\x72\xb5\x0c\xaa\xec\x3a\x51\x34\x3a\x43\x64\xf0\x53\xef\x1a\xe3\x6f\xe2\x7e\xd8\x97\xca\xd5\xa5\x5c\x0d\x0c\x44\xf1\x3e\x07\x68\x43\x89\x96\xb8\xb1\x1a\x26\x79\x45\x99\x2f\xea\x15\xf8\xfd\x57\xc0\x17\xfb\xe0\xf1\x3a\x62\xc8\x72\x00\x1e\x53\x2c\xf6\x2a\x10\x83\x2c\x4a\x17\xb2\xbf\xa7\xb1\x68\x2f\xf9\x04\x33\x63\xca\x78\x93\xda\xb1\xe4\x28\xee\xc9\x55\x05\x4c\xe2\x69\xf9\xf1\xa8\x05\xfb\x61\x8a\xd3\x01\xe7\xed\x61\x4d\xc0\xb6\xa1\xe0\x38\xc8\x68\xcb\xd5\x7f\x64\xcd\xbf\x5e\x31\x9b\x2d\xda\x42\xf5\x40\xbb\x1e\x13\x14\xb2\x74\xb4\xdd\xaa\x61\x1e\x07\x03\x43\xc7\xcf\xf8\xfc\x56\x7c\xbf\x66\x87\x06\x7a\xd3\x38\x7e\x9f\x5a\xbe\x69\x98\xd3\xfd\x61\xd6\x52\xab\x2c\x2a\x2a\x4e\xee\x6b\xab\x34\x17\xd1\x78\x58\xaf\x1d\x84\xae\xf3\x6b\x3f\x2c\xd8\x38\x8e\x87\x09\x7f\x1f\xca\xed\x9b\x7f\x9e\x1e\xd3\xfd\x41\xa9\xf7\xd4\xec\xfe\x19\xbe\x2a\x3b\x2b\x8d\xa6\x68\xb9\x73\xd3\x6e\xa8\x3d\xe6\x2b\x72\xb0\xfc\xe5\xa1\xa1\xbd\x10\xcc\x10\x1e\xfe\x2e\x43\x84\x3f\x89\x9d\xbe\xc3\xa5\xff\xb0\x75\x5f\x02\x00\x00\xff\xff\x89\x2a\x06\x6f\x6e\x07\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb5, 0x31, 0x99, 0x29, 0x2, 0xc4, 0x9b, 0xd3, 0x91, 0x35, 0x57, 0x52, 0xe1, 0x99, 0xff, 0xb1, 0xec, 0xc7, 0x4, 0x8a, 0x19, 0xaa, 0xa6, 0x88, 0xca, 0x41, 0x3a, 0x9a, 0x1b, 0x95, 0x45, 0x67}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\x4f\xeb\xd4\x30\x10\xbd\xe7\x53\x0c\xa5\x87\x16\xd6\xf6\x2e\x78\x10\xff\x80\x17\x2d\x7a\xf0\x28\xd9\xec\xb4\x0e\xb6\x4d\x4c\xb2\xcb\x2e\x31\xdf\x5d\x92\xa6\xa5\x5b\xba\xac\xc8\xef\x96\xcc\x9b\xf7\xe6\x65\xf2\x14\x17\xbf\x78\x87\x60\x6f\x0a\x0d\x63\x34\x28\xa9\x2d\x14\x0c\x00\x20\x13\x72\xb4\x78\xb5\xd9\x74\x23\x99\xb1\x92\x31\xe7\x5e\x81\xe6\x63\x87\x90\xff\x38\x40\x4e\xf0\xfa\x0d\x54\x9f\x46\x8b\xba\xe5\x02\x0d\x78\xcf\x9c\x83\x9c\xaa\xf7\x68\x84\x26\x65\x49\x8e\xa1\x18\x26\x40\x42\xc8\xa8\x9e\xdf\x3e\xf3\x01\xc1\x7b\xa0\x99\x0c\x2e\x4e\x0a\x13\xa8\x05\xa9\xa1\xc0\xdf\xa1\x3f\x36\x66\x06\xf5\x85\x04\xea\xac\xdc\xd4\xad\xd4\xbc\x0b\x75\xef\x23\xff\x9b\xd5\x34\x76\x45\x09\x26\x1e\x16\x4d\x1c\x4f\xc1\xc8\x72\x5f\xbd\x02\x87\x23\x9e\xc2\x4b\x72\xaa\x3e\xc4\x73\xd2\x9a\x7a\x53\xc3\xc6\xf8\x03\xe1\xb5\xae\x54\x49\xf4\x8b\x32\x33\xa3\xae\xa3\xa2\x54\x93\xff\x3f\x60\x65\xc3\x8d\xe0\x7d\xd8\x45\x42\x36\xbb\x9b\x5d\xec\x72\x8a\x84\x7c\x94\x7a\xe0\xb6\xe1\x9a\x0f\x61\x56\x09\xf7\xc0\x57\x34\xe7\xde\x9a\xef\x64\x7f\x36\xd3\xa7\xdf\xad\x2f\x0b\x94\xa7\xfe\x02\xfb\xdd\x94\x8a\xff\xb1\xba\xa2\x17\xc2\x5e\x21\x05\xac\x4a\xb5\xc3\x0b\xbf\xc4\xb9\xf9\x6b\x3c\x5b\xff\x53\x8c\x62\xc3\x49\x37\xb2\x27\x71\x0b\x39\x39\x0b\x9b\xd2\xf7\xb6\xef\xe1\x28\x65\xff\x8f\x41\xa7\x16\x46\xdc\x09\x69\x80\xeb\x1a\x14\x27\x6d\xa0\x95\x7a\x9d\x72\xb7\xf4\xdf\x6d\x67\x3b\x71\x2f\x3c\x8f\x93\xb3\x6b\xfa\x12\x15\xa4\xaa\x9a\xe8\xe3\x99\x48\x00\x2e\x1b\xdd\x45\x36\x6d\xef\xe9\xd1\xb3\xbf\x01\x00\x00\xff\xff\xce\x1e\x6e\xf5\x55\x04\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd3, 0xc, 0xf7, 0x3d, 0x63, 0x22, 0xe7, 0x8f, 0x9e, 0xdb, 0xf8, 0x26, 0x3c, 0x34, 0xd7, 0xca, 0xba, 0x28, 0x89, 0xe5, 0xc3, 0x64, 0xb3, 0x43, 0x96, 0x9d, 0xdd, 0x5, 0x25, 0x36, 0xfa, 0x6c}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\xcc\x0a\xc6\x42\x02\x64\x69\xb1\x47\x2d\x7c\xda\xf8\x50\x14\x8d\x73\x08\xda\x43\x10\x14\x0c\x35\x96\x09\x51\x24\x41\xd1\x4c\x0d\x55\xff\xbd\x20\x29\xab\xf2\x57\xd0\x1c\x7a\xe8\x9c\xcc\x99\x37\xc3\x37\x6f\x46\x74\x51\xc0\xff\xb2\x42\xa8\x51\xa0\x26\x06\x2b\x78\x39\x40\x2d\xa7\x33\x30\x61\x50\x0b\xc2\x0b\xda\x56\xff\xc1\xdd\x06\xee\x37\x8f\xb0\xbe\xfb\xf0\x98\x47\x8a\xd0\x86\xd4\x08\x8a\x30\xdd\x45\x11\x6b\x95\xd4\x06\x92\x08\x00\x20\xa6\x52\x18\xfc\x66\xe2\x28\x1c\x6b\x66\x76\xfb\x97\x9c\xca\xb6\x20\xb2\x5b\x56\x68\x8b\x5a\x2e\x3b\x23\x35\xa9\xb1\xb0\xff\x16\xaa\xa9\x0b\x14\x95\x92\x4c\x98\xf8\x1d\x39\x54\x63\x85\xc2\x30\xc2\xdf\x93\xb5\x33\x46\x51\xce\xf0\x78\x57\xfe\x0b\x79\xe6\xa0\xb0\x8b\xa3\x34\x8a\xfa\x7e\x09\x9a\x88\x1a\x61\xf1\x35\x83\x85\x85\x72\x05\xf9\x83\x53\x01\x86\xc1\x47\x17\x4a\x90\x16\x9d\x7f\x61\xf3\x7b\xf7\xf3\x3b\x18\xf9\x40\x3a\x4a\xb8\xc3\x14\x05\x7c\x61\x66\xd7\xf7\x47\xe4\x30\xc0\x2b\xe3\x1c\x88\x52\xfc\x00\xce\x3f\xe6\x0d\x03\x58\xc2\xf7\x08\x46\xc2\x46\x19\x26\x45\x17\x85\xf0\x1d\x76\x54\x33\xef\x72\x25\xb7\x7b\x41\x2f\x8a\x26\x76\xac\xf5\x78\x50\xee\x9c\x82\xa3\x09\xbd\x6f\x5a\xa3\xd9\x6b\xe1\x3d\xc1\xe1\xec\x23\x1e\x4a\x88\x4f\x08\xc4\xd9\x14\xfd\xec\xa8\x94\x60\x83\x67\x88\x42\xb7\x28\x2a\xc7\xc0\x75\xf5\x40\x74\x87\xa1\x15\xe5\x7f\x12\x68\x96\x16\x5a\xa2\x5c\x03\x7e\x53\xa0\xe3\x8c\x62\x1e\x08\x7b\x7c\xd2\x3a\xc0\x53\x67\x34\x13\xf5\xb3\xdf\xb8\x2d\xa1\xd8\x0f\x29\x24\x4f\xcf\x8e\x5f\x06\xa8\xb5\xd4\xe9\xc8\x3c\xd4\x29\x57\xd0\x92\x06\x27\xc8\x3f\x19\x70\x14\x49\x9b\xa6\x61\xe9\x2c\xd1\x2e\x2d\xa4\x06\xd7\x56\x6a\x68\x32\xf0\x13\x0b\x13\x6c\xe1\x67\xef\x2e\x41\x59\x98\x11\x98\x42\xdd\x2b\x33\x74\x07\xcd\x0c\xfd\xf6\x16\xc0\xcc\x28\xe9\xf0\x5c\xd3\xf2\x04\x31\xbb\x42\xfb\x42\x36\x4f\xdc\xbe\xa5\xb3\xfb\x4e\xaa\x9d\x4c\xf5\xb2\x96\x17\xc9\xc2\x0a\xb4\xbd\x88\x39\xde\x6c\xeb\xd2\xbd\xf8\xfa\x9c\xed\x74\x47\x98\xc7\xad\xe2\x7e\x24\xb0\x82\xbe\x9f\x2a\x0d\x43\xa2\x6d\x7a\x15\xcf\xb6\x1e\xfe\xd7\x0a\x04\xe3\x57\x9a\x3a\xda\xb8\x93\x82\xf1\x0c\xfe\x5e\xbb\xc1\xdd\xc6\x6e\x54\x09\xb1\xdf\xb2\xd9\x86\x9e\xdb\x5a\xeb\xd2\x5d\x7d\x1b\xf1\xf6\xc6\x9f\x9b\x93\x7c\x82\x8f\xfa\xbf\x01\x3f\xfd\x60\xce\xed\x52\xf8\x4b\xcf\xec\x03\x3b\x0f\x55\xb8\x25\x7b\x6e\xae\x4f\xe8\xf7\x28\xb9\xd6\xda\xad\xb8\x6b\xfc\x13\xeb\x5a\x62\xe8\xee\x0f\x50\x76\x38\xf9\x68\xaf\xa8\x79\x53\x49\xf7\x37\xc6\xc4\x1e\xa3\xcb\x52\xe1\x11\x5a\xb9\x27\x1b\x45\x95\xf8\x63\x16\x5e\x53\xdf\x78\x93\x1d\x39\x2a\x3b\xa4\xe3\x83\x39\x7f\x78\xc7\x0c\xc1\x78\x34\x44\x3f\x02\x00\x00\xff\xff\x4b\x4f\x1d\x61\x89\x07\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xca, 0xe6, 0x96, 0xac, 0xdc, 0x65, 0xfa, 0x30, 0xe3, 0xf2, 0xd3, 0x24, 0xf4, 0xbd, 0xa1, 0xc5, 0x36, 0xd3, 0x53, 0xfc, 0xad, 0x83, 0x56, 0xd8, 0xdd, 0x1, 0xad, 0x32, 0x4e, 0x21, 0xdf, 0x48}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x6f\xdb\xb8\x1d\x7f\xef\x4f\xf1\xaf\xe0\x0e\x52\xa1\x48\xdb\x5e\x66\xf0\x8b\x2d\xed\xb2\xa2\x43\x12\x2c\xd9\x15\xb8\xeb\x21\x60\x24\xca\xe6\x45\x22\x55\x92\x56\xe2\x73\xf4\xdd\x0f\x7c\x90\x44\xc9\x92\x63\x17\xc5\xf5\x0e\x4d\x5e\x04\x32\xf9\x7f\x7e\xe2\x4f\x54\x1c\xc3\x19\x4b\x31\x2c\x31\xc5\x1c\x49\x9c\xc2\xdd\x06\x96\xac\xfd\x0d\x15\x41\x40\xa8\xc4\x9c\xa2\x3c\x4e\x8a\x34\x16\x98\x57\x24\xc1\xff\x80\xb7\x97\x70\x71\x79\x03\xef\xde\xbe\xbf\x89\x66\x25\x4a\xee\xd1\x12\xc3\x76\x0b\xd1\x05\x2a\x30\xd4\xf5\x6c\x46\x8a\x92\x71\x09\xfe\x0c\x00\xc0\x4b\x18\x95\xf8\x51\x7a\xe6\x17\x61\xde\xcc\x3c\x2d\x89\x5c\xad\xef\xa2\x84\x15\x31\x62\xe2\x24\xc5\x55\xbc\x64\x27\x42\x32\x8e\x96\x38\xae\xfe\x1e\x97\xf7\xcb\x18\xd3\xb4\x64\x84\x36\xdc\x07\xf1\x24\x1c\xa7\x98\x4a\x82\xf2\x63\xb8\x56\x52\x96\x49\x4e\xf0\xe1\xba\x6c\x44\x84\xa1\x8f\x0e\xe0\x90\x9b\x52\x91\x07\xb3\x59\x85\x38\xdc\x42\x67\x69\x74\xc5\x59\x45\x52\xcc\xed\x4e\xe3\xf7\x70\xfd\xda\x08\x6b\x7e\x36\x26\x44\xd7\xe6\xe1\x1d\xe7\xac\xd9\xeb\x1c\x8a\x2e\x4b\x49\x18\x15\xb3\x59\x1c\xc3\xcd\xa6\xc4\x40\x04\xc8\x15\x06\x65\x0f\x64\x8c\xf7\xd2\x97\x30\x2a\xa4\x21\x5b\x80\xe7\xec\x78\x9a\xdf\x6a\x02\x54\x21\x92\xa3\xbb\x1c\x43\x89\x08\x17\x91\xe5\xf3\x67\xdb\xed\x09\x70\x44\x97\x18\xe6\xb7\x21\xcc\x2b\x38\x5d\x40\x74\xa5\x68\x94\x74\x15\x2a\x45\x41\x32\xa0\x4c\xc2\xbc\x8a\xce\x73\x76\x87\xf2\x6e\x4f\xad\xbd\xc5\x22\xe1\x44\x5b\xdd\xdf\xf8\xf7\x3a\xcf\xad\x39\xd6\xba\x79\x63\xde\xad\xa1\x68\x8d\x6d\x34\x61\x9a\x2a\x19\xce\x63\x30\x7b\xc6\xc8\x29\x03\xd5\xfa\xbc\xa4\x4a\xc3\xe9\xa2\x55\xf6\x04\x92\x5d\x21\x91\x18\x9a\x38\x86\x8f\x44\xae\x94\x31\x86\xb2\xae\xe1\x81\xe4\x39\xa0\xb2\xcc\x37\xd0\x33\x12\x2a\x94\xaf\x31\x48\x06\x4d\x86\x46\xdd\xcf\xd6\x34\xd9\x11\xea\x57\x56\x96\xce\x54\x5d\x07\xa0\xcc\x87\xad\xf6\x5b\xfd\x71\x2c\xd7\x9c\xea\xd5\x6e\xf1\x03\xde\x9c\xee\x86\x32\x6c\xf7\x7f\x50\x06\x9d\x42\x65\x56\xea\x59\x2f\x6e\xce\xe3\x44\x04\xdf\xd3\x8c\x1d\x9c\xe6\x67\x02\xe9\x88\x50\x21\x21\xa2\xcc\xd1\xa6\x29\xd2\xc6\xde\x4e\xce\x62\x82\xca\x31\xba\x61\xb0\x5d\x73\x61\xd5\x97\x9c\x50\x99\x81\xf7\x5a\xbc\x16\x1e\xf8\xf3\x2a\xba\x4e\x58\xe9\x9a\x13\xe8\xd5\x33\x24\xf1\x92\xf1\x4d\x6f\xa3\x6f\x28\xfe\x0c\x2d\xbb\xc7\xee\x7e\xc1\x89\xf4\x86\xe6\xba\xda\x17\xe0\x5d\xf6\xa9\x06\xe6\xc6\x31\x9c\x63\xb9\x5b\x4c\x4b\x2c\x47\x4b\x29\xe3\xac\x80\x02\x4b\x94\x22\x89\x22\x2d\x42\x57\xcf\x40\x88\x5f\xc0\x9b\xa1\x2d\xaa\x84\xfc\x5e\x49\x85\x70\xc7\x58\x1e\x80\x2d\xaa\x2a\x04\x76\xaf\x02\x56\x44\xe7\x58\xfa\xbd\xe6\x3b\xe9\x37\x5f\xa0\x19\x48\x06\xaf\xd8\xbd\xe5\xee\x52\xf9\x23\xe6\x4c\xd7\x99\x1b\x19\x5b\xad\x46\x8c\x4b\x11\x42\x86\x72\x81\xbb\xe0\xe4\x62\x9a\x51\x1b\xfe\x04\xbf\xee\xe3\xef\x82\x6b\xfe\x5b\x01\x55\xd4\x77\x3e\x08\x41\xf2\x35\xb6\x84\x4d\x32\x84\x89\x63\x17\x76\x9d\x0d\x31\x91\x0d\x42\x25\x1b\xcb\x86\x38\x24\x1b\x21\xec\x74\xf8\x08\x95\x8d\xae\x75\xa2\x88\xae\x9f\xc9\x4c\x08\x55\xe0\x38\x3f\xd1\xdd\xa3\xcd\xad\x44\x88\x12\x25\xb8\xd7\xe1\x12\x17\x65\xae\x10\x83\xa7\xce\x81\x5b\x8a\x1f\x3c\x28\xd0\x3d\xbe\xce\xd5\x29\xe1\x8f\x35\x77\xa0\x17\xf1\xc3\xb4\x18\xe1\xca\x68\x24\xe8\x99\x45\x93\x09\xed\x2a\xb0\x7a\x86\x3e\xc7\x3a\xf4\x33\xc5\x19\xa1\x9d\x5e\x47\xf8\xbc\xa4\xca\x71\x42\x53\xfc\x08\x11\xfc\x75\x62\x40\xcd\x55\x76\x5d\xc2\xbf\x69\xd9\xcd\xf6\x30\x8e\x86\xbc\x37\x14\x86\xee\xf7\x5c\x28\x29\xcc\xab\xdd\xe9\x60\x1f\xc7\xbc\x30\x49\xe8\xce\xab\xbe\x13\xcd\x7a\x46\x77\x6d\xb6\x1b\xba\xcb\xe7\x19\x1d\x1b\xcb\xea\x80\x53\x4a\x4c\x01\x43\x5d\xab\x07\xc5\x52\xd7\x0d\xac\x28\x11\x17\x38\x05\x21\xf9\x3a\x91\x33\x0d\x32\x06\x1c\x8a\xa1\xae\x2d\x85\x2d\x61\x1d\x7f\xf8\xe9\x67\x75\x60\xb5\xfd\xf6\x3f\xfc\x79\x4d\x38\x4e\xcd\xee\x58\x4c\xd5\x46\x63\x6e\x4b\x6d\xc3\xf5\x1f\x24\xb4\x52\x44\xf8\x88\x2b\x00\x7a\xbe\x75\xe7\xd1\x24\x59\xb7\x6d\x5b\x71\x62\x54\x9b\x53\x1c\xe5\x87\x59\xdb\x52\x7f\x6d\x6b\x0f\xb6\xf7\xbc\x45\xff\x07\x19\xdc\x91\xff\xde\xf1\x6d\xca\x8e\x0b\x7c\x35\x51\x7b\x7a\x10\x6b\x0a\x03\x84\x84\xee\x1e\x3d\x81\xdf\x4c\xd4\xab\x01\x56\xfb\xa4\xfa\xac\x94\x4d\x4d\x06\xe0\x4f\x09\x0a\x01\x2b\xe0\x1d\xb4\xc3\x58\xac\x73\xa9\xa2\xf6\x97\x09\x86\x0e\x90\xe9\xc0\x9f\x82\xd2\x13\xba\x67\x8d\x42\xe5\xb7\xea\x08\x38\x5d\xd8\x74\x68\x53\x3a\x46\xf1\x40\x64\xb2\x82\x2a\xfa\x80\x37\xce\xf2\x78\xcf\x1c\xd9\x37\xea\x2f\x41\x02\x77\x79\x71\xc0\xe2\x69\x4b\xd2\xf9\x1a\x3d\x53\x09\x8b\xee\x2c\x1d\x30\xee\xe7\xaa\x22\x7d\x8c\x9b\xa3\xd9\x2d\x90\xa0\xe7\x96\x53\xd5\xd3\x9d\x78\x64\x37\xfe\xf9\x63\x30\xd6\xdd\xc7\x76\xf8\x11\x51\xd0\x90\xa7\x81\x88\x09\xa3\x15\xe6\xd2\xa9\xf8\x69\x1f\xfd\x69\x0f\x83\x9e\x06\x92\x41\x0b\x27\xbf\x4a\xfc\x0f\xcf\x81\xb2\xaf\xc7\x5a\x1b\x20\xba\x6b\xcc\xc1\xd6\x74\xb0\xb4\x95\xb9\x2f\xa1\xb5\x3b\x1d\x8e\xe8\x65\x05\xc2\x0f\x33\x69\xe7\xd5\x91\x92\x3c\xec\xae\x18\x2e\xf0\x83\x1a\x83\x8d\x7c\x7d\xd5\xe0\x1b\x84\xd1\xab\x8b\x93\xa6\x32\x77\xa6\xb8\x8b\x54\x8d\x49\xa1\xd2\x31\xdb\x8f\xc9\xfe\xd8\x48\xa6\xe5\x78\xc1\x32\x2f\x58\xe6\x9b\x63\x19\x5f\x98\x77\x44\xbd\x19\xbc\x20\x9b\x17\x64\xf3\x82\x6c\xbe\x32\xb2\x11\xd1\x77\x8c\x6d\xb6\x5b\x92\x01\x35\x97\x12\x9e\xfd\x12\xd0\xbb\xe0\x74\xdc\x11\x91\xd2\x79\xc5\x72\x92\x6c\xa2\x7f\xe6\x39\x3c\x3d\xf5\xd7\x9c\x81\x37\xbd\x75\x18\x60\xe9\x3b\x3d\x0d\x5e\xfe\x4f\xc5\xba\x2c\x19\x97\x0d\x7e\xa9\x82\x1d\x19\xbb\xce\x6c\xb7\x2a\x1e\x23\x5e\x7e\x39\xd4\xb3\x62\xf5\xfd\xcd\xb8\xf2\x91\xca\x4f\x71\x86\xd6\xb9\xec\x17\xe7\x41\x29\x39\x32\x1d\x63\x65\xf8\xe5\x41\xad\x67\x07\x05\x33\x61\x54\x12\x3a\x28\xc5\x61\x8c\xbe\x4b\x14\xec\x5c\x6d\x7e\xeb\xdb\xc9\xc6\x94\x23\x6e\x28\x27\xdd\xd9\xef\x8d\xbb\x37\x06\xf0\xc1\x42\xad\x67\x30\x3e\x98\x13\xc3\x2d\x6e\xfd\x38\xf6\x89\x31\x8e\x1b\xf2\x9b\x15\x11\xd0\xd8\x69\xe0\x58\xc2\xb1\x8a\x00\x02\xfb\x3d\x1b\xee\x36\x4d\x43\x3a\x37\xfb\x06\x80\xcd\x4b\x5a\xd7\x81\xa3\xd4\xd7\x57\x9e\xd1\x15\xe2\xa8\x10\xd1\xb5\xe4\x84\x2e\xed\xf7\x16\x53\xad\xaa\x0c\xdc\x8d\xae\x0a\x13\xf9\x68\x5f\xa8\x95\xd6\xe8\x5f\x28\xb9\x5f\x72\xb6\xa6\xa9\x1f\x0c\x2b\x55\x38\x3d\xfc\x91\xc8\xd5\x99\xe1\xf1\x13\xf9\x18\x42\xcf\x82\x33\x94\xe7\x98\x77\x25\xba\x1b\x26\x87\x7f\x4f\xc4\xf6\xf9\x3c\xb0\xa0\xf5\xc0\xae\x0d\x2c\x3a\x2a\x26\x29\xce\x30\xd7\xca\xfd\x60\x3b\x98\x17\xba\x13\xe5\xaa\xa9\x09\x2b\xfe\x0a\xc9\x95\x71\x7a\x38\x1a\xed\x77\x29\x44\x53\xf0\xf1\x67\xcb\xec\x79\x81\xfd\xe5\x0c\xd5\x60\xec\xa0\x33\xa3\x44\xae\x60\x01\x5e\xf8\xc9\xfb\xe4\xed\xcc\xde\x91\x41\xae\xfe\x30\xe7\xa0\xd0\x44\xc6\x78\x81\xa4\x99\x23\x9e\x71\x5d\xd5\xb1\xfe\x54\xa3\x68\x5a\x05\x75\x0d\x5d\xc6\x6b\x27\xfb\x15\xe2\x0a\x42\x4f\xbf\x1a\x34\x84\xac\x94\x61\xab\x77\xef\xcb\x81\x86\x55\x9d\x06\x92\x69\xb6\x57\x0b\x35\xa8\x06\xa7\x83\xa9\x3d\x67\x40\x8f\x56\x65\xbf\x3f\xcf\x50\x81\x35\x3a\xda\xad\xcc\x1b\x4e\x8a\xff\x22\x21\x6d\x89\xbe\xa3\xa9\x7a\x1d\x58\x9d\xb1\xa2\x40\x75\xad\x5c\x68\x6a\xb6\x8b\xeb\x6f\x01\x00\x00\xff\xff\xe2\x22\x7c\x5a\xcd\x22\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2a, 0x33, 0xd7, 0xab, 0x92, 0x24, 0x5, 0xbb, 0xce, 0x6b, 0x4c, 0x18, 0x82, 0xd9, 0x28, 0x65, 0xe2, 0x9e, 0xef, 0x24, 0x29, 0x5a, 0xf1, 0x77, 0xd5, 0x2a, 0x7, 0xcb, 0x67, 0xec, 0x97, 0x52}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl":  {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl":      {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl":    {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl":      {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl":   {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
