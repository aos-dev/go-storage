// Code generated by go-bindata. DO NOT EDIT.
// sources:
// cmd/definitions/tmpl/function.tmpl (331B)
// cmd/definitions/tmpl/info.tmpl (1.699kB)
// cmd/definitions/tmpl/object.tmpl (1.908kB)
// cmd/definitions/tmpl/operation.tmpl (1.02kB)
// cmd/definitions/tmpl/pair.tmpl (483B)
// cmd/definitions/tmpl/service.tmpl (8.328kB)

// +build tools

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcf\x4a\xc4\x30\x10\xc6\xef\x7d\x8a\x8f\x25\x87\xae\xac\x79\x00\xc1\x53\x51\x10\x44\x16\xf5\x2e\x43\x36\x5d\x83\xcd\xa4\x24\xd3\xba\x10\xf3\xee\x92\x56\x5d\x3c\xec\x29\x21\xbf\xc9\xf7\x67\x72\xbe\x46\x24\x3e\x5a\xa8\xb7\x1d\xd4\x8c\x9b\x5b\x28\x7d\x3f\xb1\x49\x28\xa5\xa9\xd8\xf5\xe0\x20\x50\xb3\x7e\xf0\xe3\x60\xbd\x65\xb1\x87\x5f\xa8\x7a\xfe\x58\xfe\xcc\xfa\x89\xbc\xc5\x17\x24\x74\xe4\xed\x50\x07\xfa\x89\x0d\xda\x84\xab\x9c\xa1\xce\x7c\x4f\xc9\x50\x1d\xd8\x22\xe7\x2a\x50\x4a\x6b\xe4\x04\x13\x58\xec\x49\x74\xb7\x9e\xbb\x4a\x67\xbd\xa7\x48\x3e\xe9\xd7\xe8\xfc\x23\x25\xd1\x2f\x12\x1d\x1f\xef\xf8\x90\x3e\x9d\xbc\x77\xc1\x7b\x2a\x05\x61\x14\x8c\xe4\xe2\x05\xa7\xfa\x5c\x93\xfe\xb7\x6f\x17\x83\x67\x9b\xa6\x41\xd2\x8f\xf0\x92\xaa\x01\x80\x91\xd8\x99\x76\x53\xbb\xbb\x73\xf1\xcd\xb6\x59\x9b\x5b\xfe\x5b\xc2\x7a\xfd\x0e\x00\x00\xff\xff\x82\x2d\x89\x00\x4b\x01\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x25, 0x98, 0x85, 0xde, 0x73, 0x92, 0x3e, 0x34, 0xfd, 0x5c, 0x89, 0x97, 0xfb, 0x2b, 0x5d, 0x52, 0x16, 0x41, 0x2, 0xff, 0x19, 0xfd, 0x26, 0xae, 0xa6, 0x51, 0x78, 0xad, 0x39, 0xa0, 0xe, 0x5a}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xf5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x93\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\x64\x27\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x93\xa6\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x63\xb1\xc6\x52\x6f\x62\x08\xe5\xc8\x28\x5e\xa6\x99\xcc\xdf\xe1\xf4\x0a\x97\x57\x37\x38\x3b\x3d\xbf\x99\xb1\x8a\x67\x2b\xbe\x24\xb8\x75\x45\x96\x31\x21\x2b\x6d\x1c\x26\x0c\x00\x46\x85\x74\x23\x96\x30\xd6\xb6\x07\x30\x5c\x2d\x09\xe3\xd5\x14\x63\xa1\x0a\x6d\xf1\x76\x8e\xd9\x79\x58\x5d\xf0\x0a\xde\xb3\xb6\xc5\xd8\x92\x69\x44\x46\x97\x5c\x52\xd8\x1f\xaf\x70\x07\xa7\x4f\xb8\xa4\x32\x1c\x61\x69\x8a\xf7\x82\xca\x1c\x42\xe5\x74\x0b\xa1\xd0\xb6\xdb\x49\xde\x63\x21\x1c\xcb\xb4\xb2\x01\x62\x47\xb7\x89\x35\x3b\x75\xef\x23\xe2\x6e\xfa\x79\xa8\x1b\x48\x9a\x59\x84\x08\xf2\x9f\xb8\xcd\x78\xd0\xc7\x1c\x47\xc7\xc7\x61\x77\xd5\x01\x1f\x80\x54\x1e\x96\x09\x63\xc1\x00\xec\xf6\x30\x4c\xb7\xce\xd4\x99\x43\xdb\x2b\x6f\xd8\xbe\x3d\xc5\x16\x30\x6e\xd6\x55\x57\xcb\xfb\xad\x2f\xf7\x67\x36\x0c\x31\x4e\xd3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\x17\xdf\x29\x73\x68\x78\x59\xd3\x14\x87\x90\xc4\x95\x85\xd2\x0e\x96\xdc\x14\x47\xfd\x07\x4b\x2e\x96\x8a\x75\x84\x72\x6f\x5e\xc7\x50\x42\xf2\xea\x8b\x75\x46\xa8\xe5\xd7\x38\x10\x05\xcf\xa8\xf5\xac\x57\x7e\xde\xeb\xb0\x2b\x8a\x40\x7f\x76\x1b\x27\xc4\x7b\x56\xd4\x2a\xc3\x44\xe2\xd5\xb3\xae\x25\xf8\x40\xae\x6b\xfc\x54\xd8\xaa\xe4\xeb\xde\x8d\x49\x32\xf4\xa3\xf7\xd5\x90\xab\x8d\x82\x9c\x3d\xb0\x2f\x90\xfe\xa9\xe6\xf5\x13\x9a\xcd\x50\x33\xf9\x4d\xa1\x9e\xe9\x11\x18\xcc\xd1\x0c\x78\x59\x3f\x50\xa5\x8d\xac\xff\xc0\x9d\xc9\x00\x75\x8a\x85\xd6\x65\xd2\x13\x89\x02\x72\x16\x6e\xf8\xe5\x9e\x4f\xe0\xc5\x1c\x87\x7d\x8d\xe7\xdd\x9e\xc2\x99\x9a\xe2\x41\xbf\xdd\xe8\x16\xd4\x1d\x7e\x90\xd1\x9f\xc3\x3c\xc6\x84\x82\x97\x96\xf6\xb9\xa5\x8b\xda\xba\xfd\xa6\xe3\xaf\xfb\x9e\x0f\xfb\xae\xb8\x12\xd9\xa4\x90\x6e\x76\x5d\x19\xa1\x5c\x31\x19\x3d\xc6\xfa\x91\x16\x7c\x71\xff\x72\x7f\xdd\xbd\xd8\x3c\xbb\x51\x92\x3c\xb4\xe8\xbf\x99\xdd\xce\xca\xbb\xf9\x7e\x5e\x3e\x3a\xf6\xdd\x3f\x6c\xe7\x97\x76\xbf\xfc\x19\x00\x00\xff\xff\x1a\xaf\xa4\x3e\xa3\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbe, 0xfc, 0x4d, 0xd5, 0xaa, 0x43, 0xd, 0x38, 0x2a, 0xe9, 0x1b, 0x28, 0x33, 0xa1, 0xf, 0x25, 0xb3, 0x72, 0xf8, 0xb5, 0xf, 0xf, 0x28, 0x3d, 0xdd, 0x4d, 0x3d, 0x95, 0x9e, 0xd1, 0x56, 0x3e}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x41\x8f\xeb\x34\x10\x3e\xd7\xbf\xe2\xa3\x5a\x41\x82\xba\xc9\x7b\x80\x38\x3c\x5e\x0f\xe8\x75\x81\x95\xd8\x16\xa9\x85\xbb\xeb\x4c\x5a\xb3\x89\x1d\xd9\x93\xd2\xd2\xcd\x7f\x47\x4e\xd2\x25\xdd\x2d\xa8\x2b\x2e\xdc\x3c\x9e\x99\xcf\xf3\x7d\x33\xb6\xd3\x14\x9f\x6c\x46\xd8\x90\x21\x27\x99\x32\xac\x0f\xd8\xd8\x67\x1b\xda\x30\x39\x23\x8b\x54\x95\xd9\x77\x98\x2d\x30\x5f\xac\x70\x37\xbb\x5f\x25\xa2\x92\xea\x51\x6e\x08\x7c\xa8\xc8\x0b\xa1\xcb\xca\x3a\x46\x24\x00\x60\x9c\x97\x3c\xee\x56\xac\x4b\xea\x97\xfe\x60\xd4\x58\xc4\x42\xa4\x29\x7e\xd0\x54\x64\xd0\x26\xa3\x3d\xb4\x81\x5d\xff\x4e\x8a\xb1\xd6\x2c\x94\x35\x3e\xe0\x1c\x8f\xb7\x70\xd2\x6c\x08\x37\x8f\x13\xdc\xec\xf0\x61\x8a\x64\xd1\xc6\x3d\x10\x4b\x34\x4d\x8b\xda\x65\xde\x07\xa0\xe3\x11\x37\xbb\x64\x2e\x4b\xc2\x13\xd8\xfe\x22\xbd\x92\x05\x9a\x06\xb5\x36\xfc\xed\x37\x98\xe2\xfd\xc7\x8f\x21\xe8\x31\x24\x07\x7c\x32\x59\x58\x76\x25\x75\xd8\xd0\x1e\xbc\x25\xf8\x52\x16\x05\x79\x46\x6d\x34\x87\x12\x37\xf6\xd6\xb3\x75\x72\x43\x89\x48\xd3\x90\x30\x5f\xac\xee\x96\x1f\xc2\x0a\xb8\xed\xd3\xbf\xf0\xc8\x03\x35\x8f\xe5\x4f\x8b\x5f\x7f\x9e\xc1\x58\xc6\x9a\xa0\xb6\x81\x4a\x06\x5b\xb3\xd7\x19\xc1\x93\xdb\x69\x45\x3e\x39\x4f\xc7\xa7\xef\xe7\x41\xe2\x90\x61\x2b\x4d\xd9\x0b\xb7\xf6\x50\xd6\xa8\xda\x39\x32\x0c\x2f\x73\x4a\x44\x68\xc0\xc9\xef\xd9\xd5\x8a\x71\xbc\x56\xbd\x10\xa6\xf3\x20\xdb\x8c\xbc\x72\xba\x62\x6d\xcd\xc9\x89\x34\x45\xa7\xe9\x05\xe7\x40\xbe\xce\x0c\x71\xab\x43\x45\xad\xfe\x4d\x33\xd8\x79\xa1\xb6\x18\xa5\x29\x54\xa1\x03\x83\x5e\xec\x93\x65\xf0\xc7\x56\xab\xed\x80\xad\x2c\xf4\x8e\x12\x31\xea\x23\x96\x5d\x07\x9c\x10\x7d\x7d\x6b\xcd\xa8\x3d\x65\x90\x1e\x32\x58\xa5\xac\x90\x5b\x77\x9a\xa8\x9d\x2c\x6a\x9a\xe0\x1d\x4a\x92\xc6\xb7\xdd\xf0\xc4\x13\xbc\xef\x37\x3c\x71\x0b\xd5\xe2\xb4\x63\x22\x46\x99\x35\xd4\x1a\x5f\x7f\x25\x46\x65\xf0\x86\xc9\x4d\x1e\x6a\xa6\xbd\x68\x84\xb8\x46\xdc\xbf\x85\xbd\xdb\xb7\x17\xa3\x69\x44\x5e\x1b\x85\xc8\xe2\xcb\x2e\x34\xc6\x8f\xc4\xbd\xbe\xda\x57\x85\x3c\xf4\xd2\x45\xf1\xb9\x78\x38\xb6\x25\x3a\xe2\xda\x19\xd8\xe4\x95\xd6\xa1\xa8\x57\xe0\xcb\x7f\x00\xdf\x9d\x83\xc7\xa7\x8c\xfe\x94\x0b\xf0\x98\x62\x77\x56\x81\xe8\xfb\x59\xf8\xf6\xf4\xb7\x10\x8b\xce\x0e\x9f\x60\x6d\x6d\x11\x3f\x1f\xed\x59\x72\x14\x77\xcd\xd5\x39\x6c\x12\xda\xf2\xf9\x55\x77\xfc\xb3\x29\xde\xf5\x38\xff\x2e\xd6\x04\xec\x6a\x6a\x03\x1b\x31\xa4\x35\xa8\xec\x09\x7f\x92\xb3\xbf\x85\xd9\x69\x33\x72\x59\x78\xba\xa8\xf2\x43\xed\xf9\x6d\x6d\xfc\x4f\x2c\xa7\xe7\x2c\x2b\x69\xb4\x8a\xf2\x92\x93\x65\xe5\xb4\xe1\x3c\x1a\xf7\x73\x3f\x40\x68\x9a\x70\x91\xfa\xc9\x1f\xc7\x71\x4f\xfd\xff\x31\x52\x1d\xf9\xa7\xe9\x35\xec\x2f\xce\x60\xf7\xa6\x0c\x9f\x97\x57\x65\xab\xc2\x1a\x8a\xf6\x83\x9d\xe3\xf3\x13\x76\xcd\x0f\x73\xb1\xfc\xfd\x25\xd1\x5e\x3c\x8c\x03\x86\x6d\x42\xf8\xde\x9a\xbf\x02\x00\x00\xff\xff\xe0\xaf\xa2\xb9\x74\x07\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0xa8, 0x6e, 0xe2, 0x32, 0xf5, 0x94, 0xf, 0x33, 0xa9, 0x21, 0x65, 0x6b, 0xd, 0xec, 0xdc, 0x2d, 0xd5, 0xda, 0x1d, 0xb8, 0xc7, 0xec, 0x5a, 0xa5, 0x69, 0xb8, 0x45, 0x20, 0x16, 0x5, 0x35}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xcd\x6a\xe3\x30\x10\xbe\xeb\x29\x06\xe3\x83\x0d\x59\xfb\xbe\xb0\x87\x65\x97\x42\x2f\xad\x69\x0f\x3d\x16\x55\x95\xdd\xa1\xb6\xa5\x4a\x4a\x48\x50\xf5\xee\x65\x64\x25\x38\xc6\x25\xa5\xf4\x66\xcf\xcf\xf7\xa3\xf9\x34\x17\xaf\xbc\x93\xe0\x0e\x5a\x5a\xc6\x70\xd0\xca\x38\x28\x18\x00\x40\x26\xd4\xe8\xe4\xde\x65\xd3\x1f\xaa\x8c\x95\x8c\x79\xff\x0b\x0c\x1f\x3b\x09\xf9\xe3\x06\x72\x84\xdf\x7f\xa0\xba\x1e\x9d\x34\x2d\x17\xd2\x42\x08\xcc\x7b\xc8\xb1\xfa\x2f\xad\x30\xa8\x1d\xaa\x91\x8a\xc4\x00\xa9\x83\x56\xf7\xfc\x70\xc3\x07\x09\x21\x00\x1e\x97\xc1\x47\x26\x62\xc0\x16\x94\x81\x42\xbe\xd1\x7c\x1c\xcc\xac\x34\x3b\x14\xd2\x64\xe5\xa2\xee\x94\xe1\x1d\xd5\x43\x88\xfb\xf7\xce\xe0\xd8\x15\x25\xd8\xf8\x71\xc2\x94\xe3\x33\x09\x49\xff\x73\x13\x4a\x93\x8b\x1c\xab\x5b\x1d\x0d\xd0\x44\x5d\x47\xb5\x4a\x4f\x34\xef\xe0\x54\xc3\xad\xe0\x3d\x49\x4e\x9d\x85\xc5\x04\xbc\xbe\x53\xa4\xce\x95\x32\x03\x77\x0d\x37\x7c\x20\xae\x12\xce\x1b\x77\xd2\x6e\x7b\x67\x1f\xd0\xbd\x34\xd3\x6d\xce\x5c\x66\xb4\x72\x51\x1f\x6d\xff\x9b\x8e\xf7\x1d\xa9\xb3\xf5\x42\xb8\x3d\xa4\x1c\x54\xa9\xb6\xf9\x61\x27\xde\x1f\x4f\x13\xd8\xfc\x4e\x31\x31\x0d\x47\xd3\xa8\x1e\xc5\x81\xce\xb9\x15\x2e\x85\xe4\x6f\xdf\xc3\x93\x52\xfd\x17\xf3\x88\x2d\x8c\x72\x25\x4b\xd4\xae\x6b\xd0\x1c\x8d\x85\x56\x99\x79\x18\xfd\x69\xfe\xec\x75\x96\x8c\x6b\xe1\xf9\x3c\x39\xab\xa2\x77\x11\x41\xe9\xaa\x89\x3a\x2e\x81\x50\x63\xb7\xc0\x3d\xc1\xa6\xd7\xbb\xf8\x19\xd8\x47\x00\x00\x00\xff\xff\xf0\x4f\x23\x75\xfc\x03\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xac, 0x77, 0x38, 0x72, 0x67, 0x12, 0xac, 0x40, 0x5c, 0xb6, 0x92, 0x9, 0x6e, 0xd8, 0xf4, 0xde, 0x4d, 0x9e, 0x30, 0x85, 0x95, 0xa4, 0xa1, 0x26, 0x9b, 0x9c, 0xa9, 0xe4, 0xd9, 0x43, 0xc0, 0x37}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x31\x6b\xfb\x30\x10\xc5\x77\x7d\x8a\x87\xf1\x90\x40\x62\x0d\xff\x2d\x7f\x3a\x35\x1d\x4a\x21\xc9\x10\xda\xb1\x28\xf2\x55\x11\xb1\x25\x21\x9f\xdd\x1a\xd7\xdf\xbd\xc8\x4e\x03\xa5\x4b\x35\xe9\x7e\xef\xde\xe3\x9d\x94\xb8\xf7\x25\xc1\x90\xa3\xa8\x98\x4a\x9c\x7a\x18\x7f\x9b\x61\x1d\x53\x74\xaa\x92\xba\x2e\xff\x63\xbb\xc7\x6e\x7f\xc4\xc3\xf6\xf1\x58\x88\xa0\xf4\x45\x19\x42\x50\x36\x36\x42\xd8\x3a\xf8\xc8\x58\x08\x00\xc8\xb4\x77\x4c\x1f\x9c\x89\x79\x34\x96\xcf\xed\xa9\xd0\xbe\x96\xca\x37\xeb\x92\x3a\x69\xfc\xba\x61\x1f\x95\x21\xd9\xfd\x93\xe1\x62\xe4\x99\x39\xe8\xca\x92\xe3\x6c\x72\x15\x7f\xf0\x71\x1f\xa8\xc9\x84\x58\x0a\x31\x0c\x6b\x44\xe5\x0c\x21\x7f\x5d\x21\xef\xb0\xb9\x43\x71\x48\xe5\x30\x8e\x93\x9a\x07\xa7\x6a\x4a\x3c\xef\x8a\x5d\xfa\x7e\x82\xfd\x41\x35\x5a\x55\x69\x47\x4a\xbc\x58\x3e\x0f\xc3\xf7\xe6\x38\xe2\xdd\x56\x15\x54\x08\x55\x8f\xc4\xaf\xbe\x71\x44\xa7\xaa\x96\xc0\x1e\xfb\xc0\xd6\xbb\x46\xcc\xf2\x96\x1a\x1d\xed\x84\x52\xe4\x5b\xeb\xf4\xaf\xd0\x45\x77\xcd\x3a\xf6\x21\xcd\x4b\xa4\x9a\x18\xa6\xab\x23\x71\x1b\xdd\x44\x66\x90\xde\x13\xf5\x1b\x64\x3f\x0a\x64\xab\x9b\xfa\x9c\xaa\x6c\xd0\xcd\x64\x14\xf3\xb5\xe4\xca\xd4\xe0\x2b\x00\x00\xff\xff\x26\xdf\x18\x87\xe3\x01\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0x2f, 0x7a, 0x10, 0x8b, 0x7, 0xa5, 0x4, 0xf7, 0x8a, 0x7d, 0x60, 0x9f, 0xd0, 0xf9, 0xb1, 0xc1, 0xc9, 0x4b, 0x3d, 0x79, 0xdb, 0xc, 0xf8, 0x51, 0xfd, 0xe7, 0xd, 0x79, 0x8d, 0x96, 0x48}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5d\x6f\xdb\x36\x17\xbe\xd7\xaf\x38\x15\x7c\x21\x15\x8e\xf4\xbe\xd8\x5d\x86\x5c\x6c\x69\xd7\x15\xdd\x5a\xa3\xc9\xd6\x8b\x75\x08\x18\x89\xb2\x89\xd0\xa4\x4a\xd2\x4a\x0c\x57\xff\x7d\xe0\x87\x24\x4a\x96\x1c\x7b\x2b\xd6\x0d\x8b\x6f\x2c\x93\xe7\xf3\xe1\x73\x8e\x8e\xe4\x34\x85\x4b\x9e\x63\x58\x62\x86\x05\x52\x38\x87\xdb\x2d\x2c\x79\xfb\x1b\x2a\x82\x80\x30\x85\x05\x43\x34\xcd\xd6\x79\x2a\xb1\xa8\x48\x86\xbf\x85\x17\xef\xe0\xed\xbb\x6b\x78\xf9\xe2\xf5\x75\x12\x94\x28\xbb\x43\x4b\x0c\xbb\x1d\x24\x6f\xd1\x1a\x43\x5d\x07\x01\x59\x97\x5c\x28\x88\x02\x00\x80\x30\xe3\x4c\xe1\x07\x15\xda\x5f\x84\x87\x81\xbd\x5a\x12\xb5\xda\xdc\x26\x19\x5f\xa7\x88\xcb\xb3\x1c\x57\xe9\x92\x9f\x49\xc5\x05\x5a\xe2\xb4\xfa\x26\x2d\xef\x96\x29\x66\x79\xc9\x09\x6b\xb4\x8f\xd2\xc9\x04\xce\x31\x53\x04\xd1\x53\xb4\x56\x4a\x95\x19\x25\xf8\x78\x5f\x0e\x11\x69\xe5\x93\x23\x34\xd4\xb6\xd4\xe2\x71\x10\x54\x48\xc0\x0d\x74\x91\x26\x0b\xc1\x2b\x92\x63\xe1\x76\x9a\xbc\x93\x5f\x11\xdd\x60\xb7\x78\x65\x2d\x35\x32\x8d\xff\xe4\xca\x5e\xbc\x14\x82\x37\x7b\x5d\x36\xc9\xbb\x52\x11\xce\x64\x10\xa4\x29\x5c\x6f\x4b\x0c\x44\x82\x5a\x61\xd0\xc1\x40\xc1\x45\xef\xec\x32\xce\xa4\xb2\x62\x17\x10\x7a\x3b\xa1\xd1\x77\x9e\x00\x55\x88\x50\x74\x4b\x31\x94\x88\x08\x99\x38\xbd\x28\xd8\xed\xce\x40\x20\xb6\xc4\x30\xbb\x99\xc3\xac\x82\xf3\x0b\x48\x16\x5a\x46\x5b\xd7\x38\x69\x09\x52\x00\xe3\x0a\x66\x55\xf2\x8a\xf2\x5b\x44\xbb\x3d\xbd\xf6\x02\xcb\x4c\x10\x13\x75\x7f\xe3\x87\x0d\xa5\x2e\x1c\x17\xdd\xac\x09\xef\xc6\x4a\xb4\xc1\x36\x9e\x30\xcb\xb5\x0d\xef\x32\x9e\x48\x64\x8d\x15\xca\x91\x42\x8f\xe4\xf2\x9a\x15\xfc\xe8\x5c\x4a\xa6\xe3\x39\xbf\x68\x43\xfb\x0c\x8a\x2f\x90\xcc\x7c\x31\x63\x42\xa7\x4d\x64\x49\xd1\xb6\x39\x09\x70\x9f\xce\xce\xc5\x84\x94\x97\xdc\x41\x10\x7f\x76\x19\x76\x16\xf7\x71\x3c\x3b\x05\xc7\x47\x4e\x7b\x0a\x1d\xbd\xfe\x18\x34\x69\x0a\x1f\x88\x5a\xf5\x42\xbd\x27\x94\x02\x2a\x4b\xba\x85\x5e\x94\x50\xe9\x1a\x01\xc5\xa1\xa1\xfa\x28\x04\xc5\x86\x65\x7b\x46\xa3\xca\xd9\x32\x94\xaf\xeb\x18\x74\xf8\xb0\x6b\xe1\x17\x58\x6d\x04\x33\xab\xdd\xe2\x1b\xbc\x3d\xdf\xe7\xe4\xbc\xdd\x37\x45\x7b\x0e\x95\x5d\xa9\x83\x1e\x70\xde\xe5\x38\x80\xda\x9c\x2c\x51\x86\x7b\x3c\x53\x78\x5d\x52\xdd\x99\x43\x5d\x72\x37\x0c\xdf\x87\xb0\x46\x77\xf8\x8a\x6a\x1e\x47\x63\x38\xc6\x66\x11\xdf\x4f\x9b\x91\xbe\x8d\xc6\x82\xc9\x8a\x65\x13\xde\x35\x8c\x06\xe5\xc7\x54\x87\x79\xe6\xb8\x20\xac\xf3\xeb\x19\x9f\x95\x4c\x27\x4e\x58\x8e\x1f\x20\x81\xff\x4d\x94\xc9\x4c\x93\xd7\x17\xfc\xbf\xb1\xdd\x6c\x0f\x71\xb4\xe2\xbd\x4a\x1a\xa6\xdf\x4b\xa1\x64\x30\xab\xf6\x4b\xca\x5d\x8e\x65\x61\x0f\xa1\x63\x74\x3f\x89\x66\xbd\x60\xfb\x31\xbb\x8d\x3b\x13\x67\xc1\xc6\x2a\x40\x97\x80\x76\x62\xd9\x0a\x75\xad\x2f\xb4\x4a\x5d\x37\x1d\xbc\x44\x42\xe2\x1c\xa4\x12\x9b\x4c\x05\xa6\x9f\x0f\x34\xb4\x42\x5d\x3b\x09\xc7\x6a\x83\x3f\xfc\xf6\xbb\xa6\xb4\x45\x2f\x4d\xe1\x3d\xfe\xb4\x21\x02\xe7\x76\x77\x0c\x53\xbd\xd1\x84\xdb\x4a\x3b\xb8\x7e\x44\xd2\x38\x45\x44\x8c\xa4\x02\x00\xb7\x9c\xd3\xae\x2b\x4e\x8a\x75\xdb\xae\x1c\xc7\xfa\x5b\x9a\xba\x3a\x47\xf4\xb8\x68\x5b\xe9\x2f\x1d\xed\xd1\xf1\xbe\x6a\xa7\xac\xa3\x02\xee\xc4\xff\x6e\x7c\x1b\xda\x09\x89\x17\x13\xdc\x33\x5d\xd8\x48\xd8\x56\x29\x4d\xf5\x10\xa6\x38\x3c\x9f\xe0\xab\x6d\xbd\x87\xac\x46\xbc\x54\x0d\x27\x63\x88\x26\xec\xcc\x01\xeb\x11\x27\x76\x44\x16\x58\x6e\xa8\xd2\xa0\x4d\xc8\x77\x0d\xdb\xc0\x7e\x0e\xda\x4b\xd3\x93\xcd\x97\x1e\x7f\x6e\xe6\x60\xfa\x85\x3d\x0c\x13\x48\xa7\x28\xef\x89\xca\x56\x50\x25\x6f\xf0\xd6\x5b\x1e\xaf\x98\x13\xab\x46\x7f\x32\x24\x71\x77\x2a\xde\xcd\xe4\xbc\x15\xe9\x52\x4d\x1e\xe1\xc1\x05\x28\xb1\xc1\x63\x8a\x87\xb5\x2a\x3b\x65\x26\xd1\x90\x1e\x71\x2f\x2d\x8f\xd3\xd3\x75\x78\x62\x2d\xfe\xfb\x31\x18\xab\xed\x53\xeb\xfb\x04\x14\xcc\xac\x33\x07\x6e\x6e\x1d\x19\x67\x15\x16\xca\x63\xfc\x74\x8e\xd1\x74\x86\x71\xcf\x03\x29\xb4\xf5\x5d\x6f\xed\x2f\xe1\x7f\xfc\x19\x98\x67\x1d\x5f\xad\x06\x4c\x35\x2c\x7b\xf6\x8e\x8e\xa6\x40\x54\x0e\x6c\x1e\x3a\xd0\xda\xef\x0e\x27\xd4\x32\x29\xe0\xd9\x71\x21\xed\x8d\x96\x53\xcd\xab\x9e\x77\x4f\x78\x6f\xf1\xbd\x6e\x8d\x8d\x57\xf3\xa4\x17\xd9\xa9\xa3\xc7\x96\xb3\x86\xaf\x7b\x9d\x3d\xf0\x3c\xda\x40\xe7\xc0\x08\x0d\x0e\xcf\x69\xff\xec\xe9\xa6\xd5\x78\x9a\x6f\x9e\xe6\x9b\xaf\x3e\xdf\x44\x12\x9e\xb7\x9b\xf1\xd3\xb4\xf3\x34\xed\x3c\x4d\x3b\x5f\x74\xda\x91\xc9\x7f\x78\xde\xd9\xed\x48\x01\xcc\xbe\xa6\x08\xdd\xdb\xcb\xd0\x47\xd4\x4b\x47\x26\xda\xe7\x82\x53\x92\x6d\x93\xef\x28\x85\xcf\x9f\xfb\x6b\x5e\xbb\x9b\xde\x3a\x6e\x88\xe9\x27\x7d\xea\x40\xf3\x0b\x93\x9b\xb2\xe4\x42\x35\x33\x4d\x15\xef\x59\xde\x4f\x71\xb7\xd3\x28\x8d\xe4\xfe\xe7\x87\x42\x67\xd6\xbc\xe7\x19\x77\x3e\x52\x0f\x39\x2e\xd0\x86\xaa\x3e\x65\x8f\x3a\xa8\x13\x0f\x69\x8c\x9c\x5f\x1a\xea\x3a\x38\x0a\xe2\x8c\x33\x45\xd8\x80\xb6\x43\xe4\x9e\xa6\xe8\x76\x8a\xf6\x5e\x97\x7e\xed\x37\x9e\x4d\x28\x27\xbc\xf5\x9c\x4c\xe7\x70\x36\xfe\xde\xd8\x03\x02\xb8\x51\xed\x91\x67\x04\xb0\xf7\x1c\xbf\x10\xcc\xe5\xd8\x9f\x1b\x69\xda\x88\x5f\xaf\x88\x84\x26\x4e\x3b\xce\x65\x02\x6b\x04\x10\xb8\xff\x22\xe1\x76\xdb\x14\x6f\x62\x27\xa3\x6e\x80\x9b\x95\xac\xae\x63\xcf\x69\x64\x5e\xa3\x26\x0b\x24\xd0\x5a\x26\x57\x4a\x10\xb6\xd4\x12\x6e\xfd\xbd\xa1\x81\xbf\xd1\x71\x33\x53\x0f\xee\x31\x5d\x7b\x4d\xbe\x47\xd9\xdd\x52\xf0\x0d\xcb\xa3\x78\xc8\x5f\xe9\xd5\xfb\x07\xa2\x56\x97\x56\x27\xca\xd4\xc3\x1c\x7a\x11\x5c\x22\x4a\xb1\xe8\x28\xba\x0f\x93\xa7\x7f\x00\xb1\x43\x39\x0f\x22\x68\x33\x70\x6b\x83\x88\x4e\xc2\x24\xc7\x05\x16\xc6\x79\x14\xef\x06\x5d\xc4\x54\xa2\x5a\x35\x9c\x70\xe6\x17\x48\xad\x6c\xd2\xc3\x36\xea\xfe\x61\x42\x2c\x87\x08\x7f\x72\xca\x61\x18\xbb\x5f\x5e\x03\x8e\xc7\x6e\x95\xb6\xc1\xa8\x15\x5c\x40\x38\xff\x18\x7e\x0c\xf7\xfa\xf4\x48\xd3\xd7\x1f\x2c\x04\xe8\x79\xa4\xe0\x62\x8d\x94\xed\x23\xa1\x4d\x5d\xf3\xb8\xae\x43\x33\xbc\x77\x0e\xea\x1a\xba\x13\xaf\xbd\xd3\xaf\x90\xd0\x43\xf8\x54\xfb\x6a\xe5\x78\xa9\xe6\xad\xdb\x83\xcf\x16\x66\x2e\xeb\x1c\x90\xc2\xa8\x3d\xbb\xd0\x7d\x6a\x70\x23\xb1\xd4\xf3\xba\xf6\x28\x29\xfb\xe5\x79\x89\xd6\xd8\x8c\x57\xfb\xc4\xbc\x16\x64\xfd\x13\x92\xca\x31\xf4\x25\xcb\xf5\xf3\xc4\xea\x92\xaf\xd7\xa8\xae\x75\x0a\x0d\x65\x3b\x58\xff\x08\x00\x00\xff\xff\x4c\x32\x7d\x8c\x88\x20\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0xd, 0x23, 0xe6, 0x30, 0x5d, 0x8, 0x78, 0x79, 0x3d, 0xf6, 0x22, 0xa9, 0x12, 0xf1, 0x93, 0xe7, 0xea, 0xb0, 0x6b, 0xfe, 0xa7, 0xbf, 0x7a, 0xf2, 0x7a, 0x7a, 0x35, 0x1b, 0x8d, 0x8d, 0xe3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl": {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl": {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl": {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl": {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl": {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
