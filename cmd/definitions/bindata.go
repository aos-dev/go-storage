// Code generated by go-bindata. DO NOT EDIT.
// sources:
// cmd/definitions/tmpl/function.tmpl (567B)
// cmd/definitions/tmpl/info.tmpl (1.702kB)
// cmd/definitions/tmpl/object.tmpl (1.907kB)
// cmd/definitions/tmpl/operation.tmpl (1.698kB)
// cmd/definitions/tmpl/pair.tmpl (502B)
// cmd/definitions/tmpl/service.tmpl (11.565kB)

// +build tools

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\x8f\x25\x87\xae\xec\xe6\x07\x08\x9e\x8a\x82\xb0\xc8\xa2\xde\x25\x64\xa7\x6b\xb0\x99\x94\x66\x5a\x17\x62\xfe\xbb\xa4\x55\x17\x11\x0f\xde\x3c\x25\xcc\xcc\x7b\xf3\x3e\x26\xa5\x2d\x06\xc3\x47\x82\x7a\xda\x40\x4d\xb8\xbc\x82\xd2\x37\x23\xdb\x88\x9c\xab\xd2\x76\x2d\x38\x08\xd4\xa4\x6f\x7d\xdf\x91\x27\x16\x3a\x7c\x36\x55\xcb\x2f\xb3\x66\xd2\x77\xc6\x13\xde\x20\xa1\x31\x9e\xba\x65\xa0\x88\xd5\xa4\x77\xc1\x9a\xb9\xd2\x8e\x6c\x51\x47\x5c\xa4\x04\x75\x56\xec\x4d\x5c\x06\xd6\x48\xa9\x58\xe6\x5c\xa7\xa4\x26\xbd\x37\x83\xf1\x51\x3f\x0e\xce\xef\x4c\x14\xfd\x20\x83\xe3\xe3\x35\x1f\xe2\xab\x93\xe7\x26\x78\x6f\x72\x46\xe8\x05\xbd\x71\xc3\x2f\xa6\xa5\x5c\x62\x7e\xdf\xb4\x2c\xb8\xa7\x38\x76\x12\x3f\x8c\xe7\x00\x15\x00\xf4\x86\x9d\xad\x57\x05\xdc\x9d\xa9\x57\xeb\x6a\xa6\xa2\x2e\xd2\x1f\x71\xac\x9c\x60\x03\x0b\x9d\x44\x37\xcb\xbb\xc1\x3f\x66\xdc\x82\xf8\xeb\xca\x3f\xbe\xef\x01\x00\x00\xff\xff\x41\xc8\xae\xbf\x37\x02\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xfc, 0xb, 0xf4, 0xfb, 0xf, 0x94, 0xca, 0x64, 0x7a, 0xb8, 0x48, 0xf9, 0x69, 0xf1, 0x88, 0x46, 0x59, 0xd3, 0xbc, 0x0, 0x4e, 0xe7, 0x8, 0x1e, 0xdf, 0x27, 0x59, 0x81, 0x75, 0x52, 0xa2}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xe5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x92\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\xe4\x24\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x13\xc7\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x23\x5d\x63\xa9\x37\x31\x32\x99\xc7\x39\x15\x42\x09\x27\xb4\xb2\xef\x70\x7a\x85\xcb\xab\x1b\x9c\x9d\x9e\xdf\x2c\x58\xc5\xb3\x15\x5f\x12\xdc\xba\x22\xcb\x98\x90\x95\x36\x0e\x33\x06\x00\x93\x42\xba\x09\x8b\x18\x6b\xdb\x03\x18\xae\x96\x84\xe9\x6a\x8e\xa9\x50\x85\xb6\x78\x9b\x60\x71\x1e\x56\x17\xbc\x82\xf7\xac\x6d\x31\xb5\x64\x1a\x91\xd1\x25\x97\x14\xf6\xa7\x2b\xdc\xc1\xe9\x13\x2e\xa9\x0c\x47\x58\x1c\xe3\xbd\xa0\x32\x87\x50\x39\xdd\x42\x28\xb4\xed\x76\x92\xf7\x48\x85\x63\x99\x56\x36\x40\xec\xe8\x36\x5d\xcd\x5e\xdd\xfb\x0e\x71\x37\xfd\x3c\xd4\x0d\x24\xcd\xa2\x83\x08\xf2\x9f\xb8\xcd\x78\xd0\x47\x82\xa3\xe3\xe3\xb0\xbb\xea\x81\x0f\x40\x2a\x0f\xcb\x88\xb1\x60\x00\x76\x7b\x18\xa7\x5b\x67\xea\xcc\xa1\x1d\x94\x37\x6c\xdf\x9e\x62\x0b\x18\x37\xeb\xaa\xaf\xe5\xfd\xd6\x97\xfb\x33\x1b\x86\x2e\x8e\xe3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\xd3\xef\x94\x39\x34\xbc\xac\x69\x8e\x43\x48\xe2\xca\x42\x69\x07\x4b\x6e\x8e\xa3\xe1\x83\x25\xd7\x95\xea\xea\x08\xe5\xde\xbc\xee\x42\x09\xc9\xab\x2f\xd6\x19\xa1\x96\x5f\x85\x72\x64\x0a\x9e\x51\xeb\xd9\xa0\xfc\xbc\xd7\x61\x57\x14\x81\xfe\xec\xb6\x9b\x10\xef\x59\x51\xab\x0c\x33\x89\x57\xcf\xba\x16\xe1\x03\xb9\xbe\xf1\x53\x61\xab\x92\xaf\x07\x37\x66\xd1\xd8\x8f\xc1\x57\x43\xae\x36\x0a\x72\xf1\xc0\xbe\x40\xfa\xa7\x9a\xd7\x4f\x68\x36\x63\xcd\xe8\x37\x85\x06\xa6\x47\x60\x90\xa0\x19\xf1\xb2\x61\xa0\x4a\xdb\xb1\xfe\x03\x77\x66\x23\xd4\x39\x52\xad\xcb\x68\x20\x12\x05\xe4\x22\xdc\xf0\xcb\x3d\x9f\xc0\x8b\x04\x87\x43\x8d\xe7\xdd\x9e\xc3\x99\x9a\xba\x83\x7e\xbb\xd1\x2d\xa8\x3b\xfc\x20\xa3\x3f\x87\x79\xec\x12\x0a\x5e\x5a\xda\xe7\x96\x2e\x6a\xeb\xf6\x9b\x8e\xbf\xee\x3b\x19\xf7\x5d\x71\x25\xb2\x59\x21\xdd\xe2\xba\x32\x42\xb9\x62\x36\x79\x8c\xf5\x23\xa5\x3c\xbd\x7f\xb9\xbf\xee\x5e\x6c\x9e\xdd\x24\x8a\x1e\x5a\xf4\xdf\xcc\x6e\x6f\xe5\x5d\xb2\x9f\x97\x8f\x8e\x7d\xff\x0f\xdb\xf9\xa5\xdd\x2f\x7f\x06\x00\x00\xff\xff\x26\xf5\xd0\xb3\xa6\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x9d, 0xdc, 0x29, 0x17, 0xc8, 0x8a, 0x14, 0x25, 0x13, 0xa5, 0x85, 0x13, 0x6, 0xf, 0xb3, 0x4a, 0x21, 0xd1, 0x20, 0x4e, 0x6f, 0x92, 0x60, 0xe2, 0x6e, 0x29, 0x96, 0x4a, 0xee, 0x99, 0x66}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6f\xdb\x36\x10\x7e\x36\x7f\xc5\x37\x23\xd8\xa4\xc1\x91\x92\x6d\xd8\x43\x16\x3f\x0c\x71\xb6\x06\x68\xec\x02\x76\xfb\x4e\x53\x27\x9b\x8d\x44\x0a\x24\xe5\xda\x75\xf4\xdf\x0b\x4a\xb2\x23\x27\x4e\xe1\xa0\x2f\x7d\x23\x79\x77\xdf\xdd\xf7\xdd\x91\x8c\x63\xdc\xe8\x84\xb0\x20\x45\x86\x3b\x4a\x30\xdf\x60\xa1\xf7\x7b\x88\x3c\x89\x13\x4a\xa5\x92\x4e\x6a\x65\xff\xc1\x68\x82\xf1\x64\x86\xdb\xd1\xdd\x2c\x62\x05\x17\x0f\x7c\x41\x70\x9b\x82\x2c\x63\x32\x2f\xb4\x71\x08\x18\x00\xf4\xd3\xdc\xf5\x9b\x95\x93\x39\xb5\x4b\xbb\x51\xa2\xcf\x42\xc6\xe2\x18\xff\x49\xca\x12\x48\x95\xd0\x1a\x52\x41\xcf\x3f\x93\x70\x98\x4b\xc7\x84\x56\xd6\xe3\x6c\xb7\xe7\x30\x5c\x2d\x08\x67\x0f\x03\x9c\xad\x70\x35\x44\x34\xa9\xfd\xee\xc9\x71\x54\x55\x8d\xda\x44\xde\x79\xa0\xed\x16\x67\xab\x68\xcc\x73\xc2\x23\x9c\xfe\xc0\xad\xe0\x19\xaa\x0a\xa5\x54\xee\xef\xbf\x30\xc4\xe5\xf5\xb5\x77\x7a\xf0\xc1\x1e\x9f\x54\xe2\x97\x4d\x49\x0d\x36\xa4\x85\x5b\x12\x6c\xce\xb3\x8c\xac\x43\xa9\xa4\xf3\x25\x2e\xf4\xb9\x75\xda\xf0\x05\x45\x2c\x8e\x7d\xc0\x78\x32\xbb\x9d\x5e\xf9\x15\x70\xde\x86\xff\x66\x91\x7a\x6a\x16\xd3\x77\x93\x8f\xef\x47\x50\xda\x61\x4e\x10\x4b\x4f\x25\x81\x2e\x9d\x95\x09\xc1\x92\x59\x49\x41\x36\x3a\x0c\xc7\xcd\xbf\x63\x2f\xb1\x8f\xd0\x85\xa4\xe4\x99\x59\x5a\x08\xad\x44\x69\x0c\x29\x07\xcb\x53\x8a\x98\x6f\xc0\xce\x6e\x9d\x29\x85\xc3\xf6\x54\xf5\xbc\x9b\x4c\xbd\x6c\x23\xb2\xc2\xc8\xc2\x77\xfa\xc9\xf8\xaa\x61\x2f\xdd\x93\xdf\x6c\x53\x50\xad\x7d\x55\x75\x4e\x9e\x29\xcd\x7a\x71\x0c\x91\x49\x5f\x7d\x2b\xf4\x6e\xa7\xf0\x65\x29\xc5\xb2\xc3\x94\x67\x72\x45\x11\xeb\xb5\x1e\xd3\x46\x7d\xc3\xea\xa4\x71\xec\xa7\x05\xa5\xa5\x04\xdc\x82\xfb\x5d\xce\x0b\xa4\xda\xec\xa6\x69\xc5\xb3\x92\x06\xb8\x40\x4e\x5c\xd9\xba\x13\x96\xdc\x00\x97\xed\x81\x25\x57\x43\xd5\x38\xf5\x88\xb0\x5e\xa2\x15\xd5\x9b\x3f\xff\x60\xbd\xdc\x5b\xfd\xd4\x46\xf7\xa5\xa3\x35\xab\x18\x3b\x45\xd8\x27\x51\x6f\xd7\xf5\xa5\xa8\x2a\x96\x96\x4a\x20\xd0\xf8\xbd\x71\x0d\xf1\x3f\xb9\x56\x5f\x69\x8b\x8c\x6f\x5a\xe9\x82\xf0\x50\x3c\x6c\xeb\x12\x0d\xb9\xd2\x28\xe8\xe8\x85\xd6\xbe\xa8\x17\xe0\xd3\x57\xc0\x57\x87\xe0\xe1\x2e\xa2\xcd\x72\x04\x1e\x43\xac\x0e\x2a\x60\x6d\x3f\x33\x5b\x67\x7f\x0b\xb1\xe0\x20\xf9\x00\x73\xad\xb3\x70\x9f\xda\x3a\xee\x82\xb0\x69\xae\x4c\xa1\x23\xdf\x96\x5f\x4f\xba\xdf\xbf\x0c\x71\xd1\xe2\x7c\x5f\xac\x01\x9c\x29\xa9\x76\xac\x58\x97\x56\xa7\xb2\x47\x7c\x25\xa3\x3f\xf9\xd9\xa9\x23\x52\x9e\x59\x3a\xaa\xf2\x7d\x69\xdd\xdb\xda\xf8\x43\x2c\x87\x87\x2c\x0b\xae\xa4\x08\xd2\xdc\x45\xd3\xc2\x48\xe5\xd2\xa0\xdf\xce\x7d\x07\xa1\xaa\xfc\x45\x6a\x27\xbf\x1f\x86\x2d\xf5\x9f\x63\xa4\x1a\xf2\x8f\xc3\x53\xd8\x1f\x9d\xc1\xe6\x4d\xe9\x3e\x2f\x2f\xca\x16\x99\x56\x14\xac\x3b\x27\xdb\xfd\x13\x76\xca\xef\x72\xb4\xfc\xf5\x31\xd1\x9e\x3d\x8c\x1d\x86\x75\x80\xff\xda\xaa\x6f\x01\x00\x00\xff\xff\x94\x03\xb8\x29\x73\x07\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0x64, 0x33, 0x31, 0x2b, 0x9e, 0xa5, 0x1c, 0x46, 0x19, 0x57, 0xa8, 0x78, 0xb3, 0xc9, 0x92, 0xd7, 0x11, 0xee, 0xde, 0xf1, 0xa5, 0xf2, 0x26, 0x22, 0x58, 0x32, 0x8d, 0xfb, 0xb5, 0x58, 0xdc}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4d\x8f\xd3\x30\x10\xbd\xfb\x57\x8c\xac\x1e\x12\x69\x49\xef\x48\x7b\x82\x45\x5a\x09\x75\x2b\x10\xe2\x88\x5c\x67\xda\xb5\x48\x6c\x33\x9e\xec\x87\x82\xff\x3b\xb2\x93\x76\xd3\xaa\x10\x15\x10\xe2\x16\x7b\x66\xde\x9b\xf7\xc6\x13\xaf\xf4\x57\xb5\x43\xe0\x67\x8f\x41\x08\xd3\x7a\x47\x0c\x85\x00\x00\x90\xda\x59\xc6\x27\x96\xc3\xc9\x38\x29\x4a\x21\xfa\xfe\x15\x90\xb2\x3b\x84\xc5\x97\x2b\x58\x18\x78\x7d\x0d\xd5\xad\x65\xa4\xad\xd2\x18\x20\x46\xd1\xf7\xb0\x30\xd5\x5b\x0c\x9a\x8c\x67\xe3\x6c\xba\x4c\x0c\x30\x46\x4c\xf0\x8d\x7a\x5e\xa9\x16\x21\x46\x30\xfb\x62\xe8\x33\x53\x62\x30\x5b\x70\x04\x05\x7e\x4b\xf9\x39\x51\x06\xa4\x07\xa3\x91\x64\x79\x72\xcf\x8e\xd4\x2e\xdd\xc7\x98\xeb\x3f\x32\x19\xbb\x2b\x4a\x08\xf9\xe3\x80\x89\xb6\x4e\x8d\x8c\xe7\xa9\x08\xe7\x93\x8a\x85\xa9\xee\x7c\x16\x90\x32\x96\xcb\xdc\xad\xf3\x03\xcd\x77\x60\xb7\x56\x41\xab\x26\xb5\x3c\x46\x4e\x24\x8e\xc0\xe7\x6b\x8a\x31\xf2\xce\x51\xab\x78\xad\x48\xb5\x89\xab\x84\xe3\xc0\x07\x0c\x5d\xc3\xe1\xb3\xe1\xfb\xf5\x30\x9b\x23\x95\x32\x95\x4c\x5d\xb2\x8e\x73\xf5\x7b\x37\xd0\xcc\xf6\x9e\x90\xdf\x0c\x83\xfd\x1d\x19\x93\xf2\x42\xf3\x13\x8c\x6f\xa4\x1a\xef\xae\xfe\xba\xca\xfd\xd8\x8e\x4f\xf9\xd8\x76\x81\x6f\xda\x0d\xd6\x9f\xac\x69\x7d\x83\x2d\x5a\xc6\xfa\xdc\x1b\x2b\x4a\x11\x85\x58\x2e\x61\x36\x33\x83\xc2\x06\x01\x13\x70\x8d\x35\xb0\x83\x7b\xf5\x80\xb0\x75\xf4\xa8\xa8\x06\xed\x5a\xaf\xd8\x6c\x1a\x84\x03\x96\x4a\xde\x85\x6a\x78\xe4\xf3\x1c\x81\xa9\xd3\x0c\x7d\x14\x62\xdb\x59\x0d\x45\x98\x2f\x2a\x2f\x92\x7b\x29\xf6\xc9\xce\x8c\x9b\x48\xc8\x1d\x59\x90\xb3\x00\x32\xd9\xfb\xeb\x9d\xba\xa0\x99\x7f\xb2\x44\xc7\x3f\x9b\xb3\x6b\x84\x44\x70\x0d\x2b\x7c\xbc\xf3\x48\x79\xc4\x2b\xc7\xb7\x2f\xdd\xdf\x10\x39\x2a\xe4\xb4\xdb\x18\x65\x79\xfa\xc3\x79\x71\x52\x44\xf1\x33\xbe\x0b\xec\xf9\x0f\x76\x73\x34\xef\x4f\x0c\x9a\x38\xb2\x37\x6a\xfa\x75\x70\xef\x47\x00\x00\x00\xff\xff\xbd\xe8\x37\x32\xa2\x06\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc2, 0xaf, 0x9a, 0xb8, 0xf7, 0x9f, 0x1b, 0x53, 0xaa, 0x36, 0x95, 0x6d, 0xe6, 0x56, 0x7d, 0xb9, 0x8e, 0xd7, 0x4, 0x74, 0xce, 0x5b, 0x9, 0x4f, 0xb6, 0x92, 0xc, 0x1e, 0x49, 0x5, 0x4c, 0x4c}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x6b\xe3\x30\x10\x85\xef\xfa\x15\x0f\xe3\x43\x02\x89\x75\xd9\x53\x96\x3d\x6d\xf6\xb0\x14\x92\x1c\x42\x7b\x2c\x8a\x3c\x51\x44\x6c\x49\xc8\x63\xb7\xc6\xf5\x7f\x2f\xb2\x93\x40\xe9\xa5\x3a\xcd\x7c\x33\xef\xf1\x46\x52\xe2\xaf\x2f\x09\x86\x1c\x45\xc5\x54\xe2\xd4\xc3\xf8\x47\x0f\x5d\x97\xb2\xa4\xb3\x75\x96\xad\x77\xcd\x6f\x6c\xf7\xd8\xed\x8f\xf8\xb7\xfd\x7f\x2c\x44\x50\xfa\xaa\x0c\x21\x28\x1b\x1b\x21\x6c\x1d\x7c\x64\x2c\x04\x00\x64\xda\x3b\xa6\x77\xce\xc4\xdc\x1a\xcb\x97\xf6\x54\x68\x5f\xcb\x13\xf5\xde\x95\x0d\xfb\xa8\x0c\x49\xe3\xd7\xf7\xb2\xfb\x25\xc3\xd5\xc8\x0b\x73\xd0\x95\x25\xc7\xd9\xa4\x2d\x7e\xac\xe6\x3e\x50\x93\x09\xb1\x14\x62\x18\xd6\x88\xca\x19\x42\xfe\xba\x42\xde\x61\xf3\x07\xc5\x21\x05\xc5\x38\x4e\xd3\x3c\x38\x55\x53\xe2\x79\x57\xec\x52\xf9\x01\xf6\x07\xd5\x68\x55\xa5\x1d\x29\xf1\x62\xf9\x32\x0c\xf7\xcd\x71\xc4\x9b\xad\x2a\xa8\x10\xaa\x1e\x89\xdf\x74\xe3\x88\x4e\x55\x2d\x81\x3d\xf6\x61\xfa\xa9\x42\x48\x29\xe6\x95\x2d\x35\x3a\xda\x09\x27\xdb\x73\xeb\xf4\x37\xe3\x45\x77\xf3\x3b\xf6\x21\xf5\x4b\xa4\xa8\x18\xa6\xfb\x23\x71\x1b\xdd\x44\x66\x90\xde\x13\xf5\x1b\x64\x5f\x42\x64\xab\xc7\xf4\x39\xc5\xd9\xa0\x9b\xc9\x28\xe6\x8b\xc9\x95\x29\xc1\x67\x00\x00\x00\xff\xff\x81\x9d\x53\x8d\xf6\x01\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1b, 0x1a, 0xbf, 0xf0, 0xe9, 0x47, 0x35, 0xe6, 0xa7, 0xc, 0xe6, 0xba, 0xc0, 0x5e, 0x39, 0xda, 0x2d, 0xb9, 0xd0, 0xee, 0xbc, 0x1, 0xc0, 0xd1, 0x5e, 0xa2, 0xbf, 0x4d, 0xcd, 0x4, 0xe9, 0xc0}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3a\x5b\x8f\xdb\x36\xd6\xef\xfe\x15\xa7\xc6\xa0\xb0\x03\x47\xfa\x3e\x60\x9f\xbc\xf0\x43\x77\x92\x66\x07\x4d\x93\x41\x26\xdd\x3e\xa4\xc5\x80\x96\x8e\x6c\xee\x48\xa4\x4a\xd2\x9e\x0c\x1c\xfd\xf7\xc5\x21\xa9\xbb\xe4\x4b\x36\x8b\x66\x17\x99\x97\x91\xc9\x73\xe7\xb9\x52\x0a\x43\xb8\x96\x31\xc2\x06\x05\x2a\x66\x30\x86\xf5\x13\x6c\x64\xf5\x1b\xf6\x9c\x41\x94\xc5\x61\x8c\x09\x17\xdc\x70\x29\xf4\x5f\xe1\xc5\x5b\x78\xf3\xf6\x3d\xbc\x7c\x71\xf3\x3e\x98\xe4\x2c\x7a\x60\x1b\x84\xc3\x01\x82\x37\x2c\x43\x28\x8a\xc9\x84\x67\xb9\x54\x06\x66\x13\x00\x80\x69\x24\x85\xc1\x8f\x66\xea\x7e\x71\x39\x9d\xb8\xa7\x0d\x37\xdb\xdd\x3a\x88\x64\x16\xae\xf1\x49\x8a\x58\x1b\xa9\xd8\x06\xc3\x8d\x7c\x5e\x3e\xee\xff\x12\xe6\x0f\x9b\x10\x45\x9c\x4b\x2e\x4a\x1a\x17\x60\x46\x0a\x63\x14\x86\xb3\xf4\x72\xdc\xad\x31\x79\x94\x72\xbc\x94\xaf\x46\xb5\xe7\x11\x6a\x87\x15\x9c\x8d\x67\x9e\x72\x42\x9a\x4f\x26\x7b\xa6\xe0\x1e\x6a\xd9\x83\x5b\x25\xf7\x3c\x46\xe5\x77\x4a\x7b\x04\xff\x60\xe9\x0e\xfd\xe2\x9d\xa3\x54\xc2\x94\x52\x04\x77\xee\xe1\xa5\x52\xb2\xdc\xab\x35\x0b\xde\xe6\xf6\x58\x27\x93\x30\x84\xf7\x4f\x39\x02\xd7\x60\xb6\x08\x24\x0c\x24\x52\xb5\x4e\x36\x92\x42\x1b\x07\xb6\x82\x69\x63\x67\x6a\xf1\xdf\xae\xff\x89\x91\xf9\x19\x0d\x8b\x99\x61\x40\xaa\xa1\x2e\x05\x81\xac\x5c\x27\xaa\xd2\x82\x06\x13\xcb\xa6\x87\xa7\x76\x91\x81\xc3\xe4\x70\x78\x0e\x8a\x89\x0d\xc2\xd5\xfd\x02\xae\xf6\xb0\x5c\x41\x70\x23\x12\xa9\x49\x18\x32\x2e\x41\xf0\x04\x84\x34\x70\xb5\x0f\x5e\xa5\x72\xcd\xd2\xe6\xde\x55\x2e\x48\xc0\xe5\x8a\xb6\xad\xac\x9f\xc0\xc8\x5b\xa6\xa3\x36\x1c\x4f\x08\xe0\x05\xd7\x79\xca\x9e\x4a\x6d\xc1\xff\x35\x08\xad\x46\xc0\x08\x04\x45\x5c\xff\xb4\x70\xa8\x23\xc5\xad\x7d\x9b\x1b\x8e\x52\x51\x78\x28\x6b\xcd\x3e\x99\xc6\x63\x61\x8d\xfb\x0a\x4d\xc7\x4e\x8f\x3c\x4d\x61\x83\xa6\x6b\xbf\x44\xc9\xcc\xaf\x05\x93\x30\x24\xe4\xe7\xf0\x7e\xcb\x35\x24\x3b\x11\x59\x71\xf4\x56\xee\xd2\xd8\xda\x6d\x8d\x10\xb1\x34\x75\xc1\x5f\x9e\x15\xcf\xf2\x14\x33\x14\x06\x55\x50\xe2\x23\x28\x34\x3b\x25\xb8\xd8\x74\x39\x72\x0d\x0a\x59\x0c\x52\xa4\x4f\xc0\x44\xdc\xa1\x9f\xc9\x98\x27\x1c\xe3\x60\x42\x02\xf4\x35\x99\x49\x78\xe6\x56\xe6\x5d\xca\x07\x6b\x17\x99\x2d\x40\x3e\xd0\x31\xca\xe0\x15\x1a\xef\xd1\x15\xfa\xdc\x02\xf1\x84\x60\x0e\xd5\xb1\x39\x69\x41\x66\xc1\xac\x4d\xd4\x81\x3b\x8b\x7b\xa0\x36\xc0\xa1\xb4\xb9\x1e\xb6\xb9\xee\xdb\x9c\x0b\x23\xcf\xb3\xb9\xb5\x51\x6d\x74\x29\x22\x5c\x40\x9e\x22\xd3\x08\x19\x7b\x40\xd0\x3b\x85\xc0\xd2\x14\x2c\xe1\x2d\xd3\xb0\x46\x14\xf0\xa8\xb8\x31\x28\x60\x8d\x89\x54\x48\x32\x78\x73\xf6\x84\xac\xcd\xb9\x80\xca\x13\x2a\xe5\x4b\x93\x06\x77\x7d\x43\xca\x6c\x4e\x9a\x0f\xc6\xdd\x2d\xe3\x4a\x97\x9e\x39\x14\x73\xe7\xc4\x5b\x1d\x6b\xd7\x52\x24\x29\x8f\x0c\xad\x86\x21\xbc\xc0\x5c\x61\x44\x35\x68\x09\xbf\x68\x84\x9c\xb8\x05\xbf\x72\xb3\x6d\x85\x0c\x17\xda\x20\x8b\xad\x89\x1b\x11\x12\x86\xd0\x03\xb5\x27\xc5\xf2\x3c\x7d\xf2\x81\xe6\xe3\x15\xf6\x94\x33\x81\x8e\xcb\xa5\x3e\x4f\x6c\x20\x62\xad\x79\xbb\x84\x67\xfb\x76\xe0\xce\x81\x2c\xd3\xf7\x3b\x5a\xad\x17\x7f\xc2\xa7\xa5\xcd\x98\xb5\x20\xd3\x45\xb5\x6b\xd3\xf8\x12\xf6\x0b\xef\x99\xad\xf0\x6f\x3c\xda\xf4\x4d\xa6\xf9\x99\xe5\xb0\x82\x8c\xe5\x1f\xb4\x51\x5c\x6c\x7e\x77\xff\xbc\x14\xc7\xcf\xef\x92\xdc\xd8\x91\xb8\x52\xc1\xeb\xee\x55\x68\xe7\xaa\x41\xee\x44\x41\xe7\x2c\xc2\x96\x08\x06\xb3\x3c\xa5\x46\x63\xca\x29\xd5\x24\xb4\x3f\xb5\x51\x70\x97\x52\x1a\x2a\x59\x5f\xed\x83\x9b\x0a\x60\x98\x40\x82\xcc\xec\xd4\x28\xfa\x8f\x3b\x11\x8d\x60\x92\x3d\xef\x05\x3e\x36\x31\x67\x43\x36\x99\xdb\x45\x7c\x1c\x27\xf3\x19\xdc\xcb\xf4\x70\x12\xb5\xe9\x06\xf4\x6c\x7b\xb2\x8e\xe5\xea\x28\x24\xa3\x73\x11\xe3\x47\x08\xe0\xff\xaa\x75\x0b\xab\x9b\x7b\xff\x4f\x7b\xe4\x55\xb3\x51\xcf\x29\xb1\xbc\xf8\xf7\xcd\x70\x6a\x79\x0c\xac\xe0\x7b\x17\x29\xed\xf5\x43\xaf\xb8\xcd\x47\xb5\xa9\x8f\x71\x4c\x97\x7e\x42\xb9\x4a\x44\x5f\x27\xd7\x59\x78\x71\x8a\xe2\x47\x4f\xb7\x6e\x2e\x48\xa4\xd7\x52\x6a\x7c\x9b\x53\xb3\xcb\xa5\xf8\x21\x4d\x61\x2d\x65\x3a\x6e\x09\x62\xe4\xcd\xd0\x46\x1d\x35\x49\x8b\x5e\xa9\xb0\x0d\x79\xae\xcc\x8e\xa5\x67\x31\x4f\x44\x97\x7b\x99\x47\x13\x11\xdc\xf1\x6c\x97\xda\xe6\xdd\xef\x75\x29\x93\x6c\x89\x38\x57\xb8\x23\xb2\x52\x06\xf9\x2c\x31\x53\x14\x56\x04\x4f\xa7\x2d\xa7\xcd\x93\x63\x22\xf6\xd8\x75\xa4\x1c\x38\xa1\x92\x0b\x5c\xc0\xe6\xa2\xe3\xeb\x65\xbc\x31\x5f\xae\x13\xcb\xa9\xb8\x4c\x44\xdf\x7f\xfd\xc6\x43\xa9\xd6\x40\x86\xa6\xba\x97\x7b\xbd\xac\x97\x3b\x05\x1f\x6c\xa5\x74\x6d\x7c\xce\x94\xc6\xd8\x7b\xbd\x8b\x89\x0e\x06\x21\x14\x45\x3b\x2e\x6c\x2e\x83\x0f\xbf\x93\xd1\x9c\x0b\x84\x21\xbc\xc3\x3f\x76\x5c\x61\xec\x76\x87\x8e\x80\x36\x4a\x71\x2b\x68\x6f\xb1\xbf\x33\x6d\x99\x32\xae\x86\x0c\x0d\x4d\x53\x1f\x03\xab\xb7\x47\x1a\x67\x2f\xad\x2b\xee\x2c\x3d\x4f\xda\x0a\xfa\x4b\x4b\x7b\x5a\xde\xf2\x18\x95\xc6\xdb\x91\xb3\xb4\xad\x8c\x85\x70\xbd\x86\xb6\x45\xc2\xb6\x9c\xcf\x46\xce\xdf\xf5\x2e\xc7\xa8\xce\x64\x6e\xca\x33\x9e\xc3\x6c\x84\xce\x02\x90\xe6\xc6\xb2\x6b\x54\xa8\x77\xa9\x21\xab\x8d\xc0\xd7\x1d\x8f\xb5\xfb\x12\x88\x4b\xd9\xd6\xd8\x7f\x34\xfd\xdd\x2f\xc0\x86\xab\x3b\x0d\x2b\x48\x8d\xa8\x1f\xb9\x89\xb6\xb0\x0f\x7e\xc2\xa7\xc6\xf2\xb0\x07\x5e\xe8\x85\xf4\x17\x51\xa7\x3d\x6d\x9f\x1b\xf5\x36\x15\x80\x1f\x26\x9c\xae\xc1\x09\x57\x38\xb4\xd0\x2c\x7d\x29\x0c\x17\x3b\x6c\x6d\x14\xad\x5f\xe7\x91\x5e\x81\x51\x1d\x32\x1e\xf1\x38\xd6\xde\x5d\x0b\x04\xb3\xae\xeb\xcd\x5b\x26\x6b\xc4\xcb\x78\xcc\x5c\x18\x37\xdf\xec\x3b\x6a\xdf\xa2\x19\x04\x17\xb8\x2c\x4f\xe0\xbb\x4b\x4d\xe5\x47\x90\xb1\x18\x2d\x16\xf5\xed\x10\x85\x7f\xc9\xd2\x5e\x11\x1d\x68\x56\xd1\xcb\x0f\x7e\xa4\x38\x0c\x1c\x25\x14\x95\x36\x30\xd0\x2e\x78\xee\x4e\xe8\x05\x08\x9e\x9e\x28\x92\xae\xdb\x83\x7a\x2e\x39\xd6\xf1\x55\x60\x76\x3c\xee\x95\x4d\xef\xca\x2f\x30\x61\xbb\xd4\x54\xda\xbb\xe9\x87\x6b\xe2\x4b\x1b\xbe\xc4\x51\x32\xd2\x39\x46\x3c\xe1\x11\x30\xdb\x88\x5b\x0a\xb6\x50\x0e\xd3\x68\x15\xca\xc1\x1e\xc4\x0a\xd6\xba\x3f\x1a\xe9\x2e\x7c\x81\x1d\x70\x98\x61\x37\x19\x23\xdf\x1d\x43\x5a\xa3\x44\x2e\xe0\x6a\x7f\xf4\x7e\xa9\x77\x1e\x5f\x77\xc3\x52\x61\x9c\x68\x59\xfe\x8c\xe6\xe4\xbc\xf6\xe4\xeb\x6c\x44\x4e\x48\xd6\x69\xab\xff\x47\x3a\xa4\x99\x86\x67\xd5\xe6\xfc\xbf\xb2\x5f\x0a\x43\xe0\xfa\x17\xa1\x77\x79\x2e\x95\xc1\xd8\x1a\x40\x61\x24\x55\xac\xe1\x71\x8b\x66\x8b\x0a\xa2\x9d\x52\x28\x5c\xda\xa3\x50\xdb\xd5\xf0\x41\x45\xa9\x4f\x66\xb9\x82\x84\xa5\x1a\x27\xa7\xba\xb3\x6f\x3d\xd8\xc5\x3d\xc2\xa0\x9c\x03\x8d\xc3\xb7\xf6\xeb\xcf\x30\x6d\x27\xdd\x7d\x25\x96\x0d\x43\xb8\x49\x60\xa7\x51\x01\x0a\xb6\x4e\xd1\x15\xcd\xbd\x17\xd6\x2a\xe0\xaf\xd0\x16\xf0\x88\x10\x31\xea\x02\xf5\x00\x94\xcd\x8d\xdc\x04\x5d\xe1\x75\x50\x5e\xc1\x05\x9d\x6b\x9f\x4f\x9f\x46\x36\xeb\x6c\x76\x26\xd8\x65\x66\xf9\x6c\x6f\xfa\xd2\x1e\x75\xe6\x19\xf5\xb3\x68\x47\xb6\x01\x47\xf4\x5d\xe9\xf2\x32\x42\x45\x9d\x96\x69\x4a\xe8\xc3\x1f\x8e\x47\x44\x03\x7f\xc4\xb1\x52\x29\x35\x15\x1c\x7f\x95\xd8\xf2\x2d\x5b\x73\xf9\x46\x48\xe5\x8a\x6e\x83\xb9\x1d\x24\x82\xc9\xb0\x5b\xf5\x2f\x5d\xdb\x2e\xd3\xbf\x59\xf5\x45\xfe\xa4\x36\xf5\xa1\x5f\x34\xfe\x74\x05\x3f\xd0\xe2\x72\xdf\xea\xc4\xc3\x10\xae\xb7\x18\x3d\x80\x6a\xdd\x41\x04\xdf\xa6\xb9\xf6\xf5\x7d\xfd\x36\xe3\x8b\x4e\x74\x67\x0f\x42\xee\xe5\xe2\x6b\x19\xb5\x53\x77\x7b\x46\x4a\x69\xfb\xbe\x94\x75\x74\x5a\xaa\xac\x91\xea\xde\xf7\x00\xfd\x17\x38\xa7\xc9\x0c\x5e\x1f\x9f\xb2\xe4\xe7\xce\x62\xe7\x8c\x62\xcd\xd8\x72\x57\xe3\x9d\x17\xa0\xee\x45\x76\xfb\x35\xb6\x0d\xfb\x48\x21\x29\xcf\xc0\x7f\xdc\x03\xeb\xa7\x32\x87\x05\xcd\xc6\xfa\x2a\x17\x45\x31\x6f\x30\x9a\xd9\x0b\xe7\xe0\x96\x29\x96\xe9\xe0\xce\x3a\x25\x41\xf8\xf5\x77\xd6\xcb\x9a\x1b\x2e\x0c\x22\xf3\x91\x74\xf1\xdc\x82\xbf\xb1\xe8\x61\xa3\xe4\x4e\xc4\xfe\xdd\xbf\x77\x52\x1d\xd4\x9c\x7e\xe5\x66\x7b\xed\xe0\x67\x91\xf9\xb8\x80\x16\xe7\x6b\x96\xa6\xa8\x28\xc3\x77\x4d\xd1\xc0\x1b\xb1\xca\x31\xfd\x3a\x5c\x2b\x89\xfd\x5a\x47\x8a\xb3\xf5\x8f\x31\x41\x65\xcf\x60\x36\x6f\x37\xdd\x57\x39\x33\xdb\xf2\x9c\x3d\xd9\x5b\x66\xb6\x4e\xc1\x81\xf0\x60\x22\x86\x19\xfe\xe1\x11\xa7\xd3\xb9\xff\x25\x60\xea\x3f\x07\x98\xce\x9b\x68\x50\x4d\x68\x66\x0b\x2b\x98\x2e\x7e\x9b\xfe\x36\x9d\x76\x09\x77\xea\x19\x2a\x2a\x56\x3a\x48\xa4\xca\x98\xb1\x99\x68\x36\x75\x2a\x92\x2f\x16\xc5\xd4\x0e\x4a\x35\xe1\xa2\x00\xff\x59\xc6\x6c\x5e\x87\xfc\xd8\x2b\x2e\x57\xad\xca\x7e\xa6\x57\x9e\x68\xc0\x11\xd2\xf8\x4a\x16\xd7\xd5\x8a\x45\x06\x52\xfe\x80\x60\xc8\xa5\x6b\x3c\x0f\x5f\x7f\xf5\xe2\x87\x22\xca\xd6\xfd\x66\xa6\x55\xbb\xbe\xff\xfe\x28\xc8\x60\xf9\x72\xd6\x79\x83\x8f\x15\xd8\x1b\x69\x6e\x6a\xe6\x95\xbd\xea\xe0\x2d\x8a\xe9\xbc\x53\x10\x8e\xe4\xec\xf2\x13\x0d\x74\x53\x82\xfb\x00\x44\xc6\x08\xd3\x76\x5e\xce\x68\xad\x9c\x25\x6a\xa8\x7e\x7a\x26\x43\xc8\x80\x36\x83\x1b\x5b\xb5\x2c\x66\x51\xcc\xe6\x3d\xb5\xaa\x5a\x54\x13\xbc\x11\x7b\x96\x72\x5f\x90\x5e\x7e\xcc\x31\xb2\xdf\x79\xd0\x56\x83\xd6\x02\x7e\x88\xc8\x76\x4b\x70\x9c\xba\xf5\xfc\x88\xbe\xee\xf2\x67\x05\x2c\xcf\x51\xc4\x76\x36\xd7\x0b\xd0\x81\x4f\x49\xf6\xe2\xae\x91\x1a\x82\x20\x70\xc6\xdc\x33\x45\xd3\xf4\x58\x69\x75\xc4\x65\x6e\x16\x95\x43\x1f\xbd\x21\xb0\x7c\xab\x8f\x91\x08\xe5\xbb\x15\x15\xcc\x5e\x2d\x6f\x76\x16\x9d\xd4\x55\xe7\xea\x6b\x96\x21\x1d\xc0\x40\xf6\x7a\xaf\x78\xf6\x9a\x69\xe3\xd3\xd8\x4b\x11\xd3\x58\xbe\xbd\x96\x59\xc6\x8a\x82\x24\x9e\x1f\x29\xd2\xdd\xf2\x77\xac\x52\x37\xf7\x86\x0a\x4d\x99\x1d\x4e\x14\x1b\x1f\xb4\x27\x0b\x8e\x83\x2b\xc1\x2f\x2d\x3c\x84\xf6\x1f\x28\x3e\xff\x8e\x87\x9d\xed\x65\x65\x5a\x73\xfd\xb4\xbd\x44\x82\xc7\x2d\x4f\x11\xb6\x4c\xc4\x29\x17\x1b\xb0\xe7\x46\x0a\xfa\xcf\x96\x4a\x34\xeb\xa0\xf7\x67\xbb\x67\xb7\xaf\xb4\x72\x8f\xb8\xde\xc5\x5e\xe7\x1c\xbb\xe9\x79\xf6\x40\xb8\xe0\xa6\xca\x15\x67\x7e\x20\x44\x7f\x55\x32\x79\x87\x1b\xae\x0d\xaa\xb1\xbb\x74\x35\xa3\x91\x6d\x41\x49\x75\x14\x64\x3e\x74\xe3\xd9\xe3\x70\x17\x6d\x31\x63\x9e\x9c\xff\xd6\x8a\xa2\xe9\x5f\x01\x00\x00\xff\xff\x63\x77\x96\xb0\x2d\x2d\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x81, 0x50, 0x73, 0xce, 0x45, 0xd5, 0x2f, 0xe5, 0x55, 0x1b, 0x37, 0x53, 0x2b, 0x10, 0x52, 0xf4, 0x20, 0xb0, 0x79, 0x1, 0x7f, 0x9e, 0xa3, 0xed, 0xb1, 0xb0, 0x67, 0xe, 0x38, 0x4c, 0xdf, 0x88}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl": {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl": {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl": {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl": {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl": {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
