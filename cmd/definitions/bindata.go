// Code generated by go-bindata. DO NOT EDIT.
// sources:
// cmd/definitions/tmpl/function.tmpl (567B)
// cmd/definitions/tmpl/info.tmpl (1.702kB)
// cmd/definitions/tmpl/object.tmpl (1.907kB)
// cmd/definitions/tmpl/operation.tmpl (2.051kB)
// cmd/definitions/tmpl/pair.tmpl (502B)
// cmd/definitions/tmpl/service.tmpl (11.492kB)

// +build tools

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\x8f\x25\x87\xae\xec\xe6\x07\x08\x9e\x8a\x82\xb0\xc8\xa2\xde\x25\x64\xa7\x6b\xb0\x99\x94\x66\x5a\x17\x62\xfe\xbb\xa4\x55\x17\x11\x0f\xde\x3c\x25\xcc\xcc\x7b\xf3\x3e\x26\xa5\x2d\x06\xc3\x47\x82\x7a\xda\x40\x4d\xb8\xbc\x82\xd2\x37\x23\xdb\x88\x9c\xab\xd2\x76\x2d\x38\x08\xd4\xa4\x6f\x7d\xdf\x91\x27\x16\x3a\x7c\x36\x55\xcb\x2f\xb3\x66\xd2\x77\xc6\x13\xde\x20\xa1\x31\x9e\xba\x65\xa0\x88\xd5\xa4\x77\xc1\x9a\xb9\xd2\x8e\x6c\x51\x47\x5c\xa4\x04\x75\x56\xec\x4d\x5c\x06\xd6\x48\xa9\x58\xe6\x5c\xa7\xa4\x26\xbd\x37\x83\xf1\x51\x3f\x0e\xce\xef\x4c\x14\xfd\x20\x83\xe3\xe3\x35\x1f\xe2\xab\x93\xe7\x26\x78\x6f\x72\x46\xe8\x05\xbd\x71\xc3\x2f\xa6\xa5\x5c\x62\x7e\xdf\xb4\x2c\xb8\xa7\x38\x76\x12\x3f\x8c\xe7\x00\x15\x00\xf4\x86\x9d\xad\x57\x05\xdc\x9d\xa9\x57\xeb\x6a\xa6\xa2\x2e\xd2\x1f\x71\xac\x9c\x60\x03\x0b\x9d\x44\x37\xcb\xbb\xc1\x3f\x66\xdc\x82\xf8\xeb\xca\x3f\xbe\xef\x01\x00\x00\xff\xff\x41\xc8\xae\xbf\x37\x02\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xfc, 0xb, 0xf4, 0xfb, 0xf, 0x94, 0xca, 0x64, 0x7a, 0xb8, 0x48, 0xf9, 0x69, 0xf1, 0x88, 0x46, 0x59, 0xd3, 0xbc, 0x0, 0x4e, 0xe7, 0x8, 0x1e, 0xdf, 0x27, 0x59, 0x81, 0x75, 0x52, 0xa2}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xe5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x92\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\xe4\x24\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x13\xc7\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x23\x5d\x63\xa9\x37\x31\x32\x99\xc7\x39\x15\x42\x09\x27\xb4\xb2\xef\x70\x7a\x85\xcb\xab\x1b\x9c\x9d\x9e\xdf\x2c\x58\xc5\xb3\x15\x5f\x12\xdc\xba\x22\xcb\x98\x90\x95\x36\x0e\x33\x06\x00\x93\x42\xba\x09\x8b\x18\x6b\xdb\x03\x18\xae\x96\x84\xe9\x6a\x8e\xa9\x50\x85\xb6\x78\x9b\x60\x71\x1e\x56\x17\xbc\x82\xf7\xac\x6d\x31\xb5\x64\x1a\x91\xd1\x25\x97\x14\xf6\xa7\x2b\xdc\xc1\xe9\x13\x2e\xa9\x0c\x47\x58\x1c\xe3\xbd\xa0\x32\x87\x50\x39\xdd\x42\x28\xb4\xed\x76\x92\xf7\x48\x85\x63\x99\x56\x36\x40\xec\xe8\x36\x5d\xcd\x5e\xdd\xfb\x0e\x71\x37\xfd\x3c\xd4\x0d\x24\xcd\xa2\x83\x08\xf2\x9f\xb8\xcd\x78\xd0\x47\x82\xa3\xe3\xe3\xb0\xbb\xea\x81\x0f\x40\x2a\x0f\xcb\x88\xb1\x60\x00\x76\x7b\x18\xa7\x5b\x67\xea\xcc\xa1\x1d\x94\x37\x6c\xdf\x9e\x62\x0b\x18\x37\xeb\xaa\xaf\xe5\xfd\xd6\x97\xfb\x33\x1b\x86\x2e\x8e\xe3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\xd3\xef\x94\x39\x34\xbc\xac\x69\x8e\x43\x48\xe2\xca\x42\x69\x07\x4b\x6e\x8e\xa3\xe1\x83\x25\xd7\x95\xea\xea\x08\xe5\xde\xbc\xee\x42\x09\xc9\xab\x2f\xd6\x19\xa1\x96\x5f\x85\x72\x64\x0a\x9e\x51\xeb\xd9\xa0\xfc\xbc\xd7\x61\x57\x14\x81\xfe\xec\xb6\x9b\x10\xef\x59\x51\xab\x0c\x33\x89\x57\xcf\xba\x16\xe1\x03\xb9\xbe\xf1\x53\x61\xab\x92\xaf\x07\x37\x66\xd1\xd8\x8f\xc1\x57\x43\xae\x36\x0a\x72\xf1\xc0\xbe\x40\xfa\xa7\x9a\xd7\x4f\x68\x36\x63\xcd\xe8\x37\x85\x06\xa6\x47\x60\x90\xa0\x19\xf1\xb2\x61\xa0\x4a\xdb\xb1\xfe\x03\x77\x66\x23\xd4\x39\x52\xad\xcb\x68\x20\x12\x05\xe4\x22\xdc\xf0\xcb\x3d\x9f\xc0\x8b\x04\x87\x43\x8d\xe7\xdd\x9e\xc3\x99\x9a\xba\x83\x7e\xbb\xd1\x2d\xa8\x3b\xfc\x20\xa3\x3f\x87\x79\xec\x12\x0a\x5e\x5a\xda\xe7\x96\x2e\x6a\xeb\xf6\x9b\x8e\xbf\xee\x3b\x19\xf7\x5d\x71\x25\xb2\x59\x21\xdd\xe2\xba\x32\x42\xb9\x62\x36\x79\x8c\xf5\x23\xa5\x3c\xbd\x7f\xb9\xbf\xee\x5e\x6c\x9e\xdd\x24\x8a\x1e\x5a\xf4\xdf\xcc\x6e\x6f\xe5\x5d\xb2\x9f\x97\x8f\x8e\x7d\xff\x0f\xdb\xf9\xa5\xdd\x2f\x7f\x06\x00\x00\xff\xff\x26\xf5\xd0\xb3\xa6\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x9d, 0xdc, 0x29, 0x17, 0xc8, 0x8a, 0x14, 0x25, 0x13, 0xa5, 0x85, 0x13, 0x6, 0xf, 0xb3, 0x4a, 0x21, 0xd1, 0x20, 0x4e, 0x6f, 0x92, 0x60, 0xe2, 0x6e, 0x29, 0x96, 0x4a, 0xee, 0x99, 0x66}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6f\xdb\x36\x10\x7e\x36\x7f\xc5\x37\x23\xd8\xa4\xc1\x91\x92\x6d\xd8\x43\x16\x3f\x0c\x71\xb6\x06\x68\xec\x02\x76\xfb\x4e\x53\x27\x9b\x8d\x44\x0a\x24\xe5\xda\x75\xf4\xdf\x0b\x4a\xb2\x23\x27\x4e\xe1\xa0\x2f\x7d\x23\x79\x77\xdf\xdd\xf7\xdd\x91\x8c\x63\xdc\xe8\x84\xb0\x20\x45\x86\x3b\x4a\x30\xdf\x60\xa1\xf7\x7b\x88\x3c\x89\x13\x4a\xa5\x92\x4e\x6a\x65\xff\xc1\x68\x82\xf1\x64\x86\xdb\xd1\xdd\x2c\x62\x05\x17\x0f\x7c\x41\x70\x9b\x82\x2c\x63\x32\x2f\xb4\x71\x08\x18\x00\xf4\xd3\xdc\xf5\x9b\x95\x93\x39\xb5\x4b\xbb\x51\xa2\xcf\x42\xc6\xe2\x18\xff\x49\xca\x12\x48\x95\xd0\x1a\x52\x41\xcf\x3f\x93\x70\x98\x4b\xc7\x84\x56\xd6\xe3\x6c\xb7\xe7\x30\x5c\x2d\x08\x67\x0f\x03\x9c\xad\x70\x35\x44\x34\xa9\xfd\xee\xc9\x71\x54\x55\x8d\xda\x44\xde\x79\xa0\xed\x16\x67\xab\x68\xcc\x73\xc2\x23\x9c\xfe\xc0\xad\xe0\x19\xaa\x0a\xa5\x54\xee\xef\xbf\x30\xc4\xe5\xf5\xb5\x77\x7a\xf0\xc1\x1e\x9f\x54\xe2\x97\x4d\x49\x0d\x36\xa4\x85\x5b\x12\x6c\xce\xb3\x8c\xac\x43\xa9\xa4\xf3\x25\x2e\xf4\xb9\x75\xda\xf0\x05\x45\x2c\x8e\x7d\xc0\x78\x32\xbb\x9d\x5e\xf9\x15\x70\xde\x86\xff\x66\x91\x7a\x6a\x16\xd3\x77\x93\x8f\xef\x47\x50\xda\x61\x4e\x10\x4b\x4f\x25\x81\x2e\x9d\x95\x09\xc1\x92\x59\x49\x41\x36\x3a\x0c\xc7\xcd\xbf\x63\x2f\xb1\x8f\xd0\x85\xa4\xe4\x99\x59\x5a\x08\xad\x44\x69\x0c\x29\x07\xcb\x53\x8a\x98\x6f\xc0\xce\x6e\x9d\x29\x85\xc3\xf6\x54\xf5\xbc\x9b\x4c\xbd\x6c\x23\xb2\xc2\xc8\xc2\x77\xfa\xc9\xf8\xaa\x61\x2f\xdd\x93\xdf\x6c\x53\x50\xad\x7d\x55\x75\x4e\x9e\x29\xcd\x7a\x71\x0c\x91\x49\x5f\x7d\x2b\xf4\x6e\xa7\xf0\x65\x29\xc5\xb2\xc3\x94\x67\x72\x45\x11\xeb\xb5\x1e\xd3\x46\x7d\xc3\xea\xa4\x71\xec\xa7\x05\xa5\xa5\x04\xdc\x82\xfb\x5d\xce\x0b\xa4\xda\xec\xa6\x69\xc5\xb3\x92\x06\xb8\x40\x4e\x5c\xd9\xba\x13\x96\xdc\x00\x97\xed\x81\x25\x57\x43\xd5\x38\xf5\x88\xb0\x5e\xa2\x15\xd5\x9b\x3f\xff\x60\xbd\xdc\x5b\xfd\xd4\x46\xf7\xa5\xa3\x35\xab\x18\x3b\x45\xd8\x27\x51\x6f\xd7\xf5\xa5\xa8\x2a\x96\x96\x4a\x20\xd0\xf8\xbd\x71\x0d\xf1\x3f\xb9\x56\x5f\x69\x8b\x8c\x6f\x5a\xe9\x82\xf0\x50\x3c\x6c\xeb\x12\x0d\xb9\xd2\x28\xe8\xe8\x85\xd6\xbe\xa8\x17\xe0\xd3\x57\xc0\x57\x87\xe0\xe1\x2e\xa2\xcd\x72\x04\x1e\x43\xac\x0e\x2a\x60\x6d\x3f\x33\x5b\x67\x7f\x0b\xb1\xe0\x20\xf9\x00\x73\xad\xb3\x70\x9f\xda\x3a\xee\x82\xb0\x69\xae\x4c\xa1\x23\xdf\x96\x5f\x4f\xba\xdf\xbf\x0c\x71\xd1\xe2\x7c\x5f\xac\x01\x9c\x29\xa9\x76\xac\x58\x97\x56\xa7\xb2\x47\x7c\x25\xa3\x3f\xf9\xd9\xa9\x23\x52\x9e\x59\x3a\xaa\xf2\x7d\x69\xdd\xdb\xda\xf8\x43\x2c\x87\x87\x2c\x0b\xae\xa4\x08\xd2\xdc\x45\xd3\xc2\x48\xe5\xd2\xa0\xdf\xce\x7d\x07\xa1\xaa\xfc\x45\x6a\x27\xbf\x1f\x86\x2d\xf5\x9f\x63\xa4\x1a\xf2\x8f\xc3\x53\xd8\x1f\x9d\xc1\xe6\x4d\xe9\x3e\x2f\x2f\xca\x16\x99\x56\x14\xac\x3b\x27\xdb\xfd\x13\x76\xca\xef\x72\xb4\xfc\xf5\x31\xd1\x9e\x3d\x8c\x1d\x86\x75\x80\xff\xda\xaa\x6f\x01\x00\x00\xff\xff\x94\x03\xb8\x29\x73\x07\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0x64, 0x33, 0x31, 0x2b, 0x9e, 0xa5, 0x1c, 0x46, 0x19, 0x57, 0xa8, 0x78, 0xb3, 0xc9, 0x92, 0xd7, 0x11, 0xee, 0xde, 0xf1, 0xa5, 0xf2, 0x26, 0x22, 0x58, 0x32, 0x8d, 0xfb, 0xb5, 0x58, 0xdc}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6f\xd4\x30\x0c\x7e\xcf\xaf\xb0\xaa\x7b\x68\xa5\xd1\xbe\x23\xed\x01\xc1\x90\x26\xa1\xad\x02\x21\x1e\x51\xae\xf5\xdd\x22\xda\x24\x38\xbe\xdb\xa6\x92\xff\x8e\x92\x76\x77\xbd\xd2\x51\x0e\x10\xe2\x2d\x89\xed\xcf\xf6\x97\x7c\xb1\x95\xd5\x17\xb9\x45\xe0\x47\x8b\x4e\x08\xd5\x5a\x43\x0c\xa9\x00\x00\x48\x2a\xa3\x19\x1f\x38\xe9\x77\xca\x24\x22\x13\xa2\xeb\x5e\x00\x49\xbd\x45\x58\x7d\xbe\x80\x95\x82\x97\x97\x90\x5f\x6b\x46\xda\xc8\x0a\x1d\x78\x2f\xba\x0e\x56\x2a\x7f\x83\xae\x22\x65\x59\x19\x1d\x0e\x43\x06\x18\x2c\xca\xd9\x46\x3e\xde\xc8\x16\xc1\x7b\x50\x4f\xc1\xd0\xc5\x4c\x21\x83\xda\x80\x21\x48\xf1\x6b\xf0\x8f\x8e\x89\x43\xda\xab\x0a\x29\xc9\x26\xe7\x6c\x48\x6e\xc3\xb9\xf7\x31\xfe\x03\x93\xd2\xdb\x34\x03\x17\x17\x07\x4c\xd4\x75\x28\x64\xd8\x8f\x9b\x30\x36\x74\xb1\x52\xf9\xad\x8d\x0d\x04\x8f\xa2\x88\xd5\x1a\xdb\xa7\xf9\x06\x6c\x4a\xe9\x2a\xd9\x84\x92\x07\xcb\xa4\xc5\x01\x78\x3e\x26\x1d\x2c\x6f\x0d\xb5\x92\x4b\x49\xb2\x0d\xb9\x32\x38\x35\xbc\x47\xb7\x6b\xd8\x7d\x52\x7c\x57\xf6\x77\x73\xd2\x65\x12\x42\xc6\x2c\x69\xc3\x31\xfa\x9d\xe9\xd3\x2c\xd6\x1e\x90\x5f\xf7\x17\xfb\x3b\x6d\x8c\xc2\xd3\x8a\x1f\x60\x78\x23\xf9\x70\x76\xf1\xd7\xbb\x7c\xba\xb6\xd3\x5d\xdc\xb6\x3b\xc7\x57\xed\x1a\xeb\x8f\x5a\xb5\xb6\xc1\x16\x35\x63\x3d\xf7\xc6\xd2\x4c\x78\x21\x8a\x02\x16\x3d\x23\x28\xac\x11\x30\x00\xd7\x58\x03\x1b\xb8\x93\x7b\x84\x8d\xa1\x7b\x49\x35\x54\xa6\xb5\x92\xd5\xba\x41\x38\x60\xc9\xc0\x9d\xcb\xfb\x47\xbe\x9c\xc3\x31\xed\x2a\x86\xce\x0b\xb1\xd9\xe9\x0a\x52\xb7\x1c\x94\x9d\xd5\xee\xb9\xd8\x13\xcd\x0c\x4a\x24\xe4\x1d\x69\x48\x16\x01\x92\x40\xef\xcf\x35\x75\x46\x31\xff\x44\x44\xa7\x9f\xcd\xac\x8c\x90\x08\x2e\xe1\x06\xef\x6f\x2d\x52\xbc\xe2\x1b\xc3\xd7\xc7\xea\xaf\x88\x0c\xa5\xc9\xb8\x5a\xef\x93\x6c\xfa\xe1\x1c\x99\x14\x5e\x3c\x97\xef\x0c\x7a\xfe\x03\x6d\x0e\xe4\xfd\x09\x41\x23\x46\x9e\x88\x1a\xaf\x8e\xdf\x75\xd4\x54\x29\x15\x95\xa6\x51\xd5\xe3\x41\x3c\x11\xe5\x55\xd3\xc0\xda\x98\xe6\x17\xc7\x52\x60\x1e\x67\x46\x4a\x30\x17\x05\x58\xa9\xc8\x05\xa1\x8f\x67\x52\x77\xf0\x3f\x21\x7b\x9a\x71\x6e\x86\x3c\x3f\x40\x66\x8b\xde\x47\x04\x63\xf3\x32\xd6\xb1\x04\x12\x0c\xfb\x09\xee\x01\xf6\x47\x22\xe7\x97\x5e\x7c\x0f\x00\x00\xff\xff\xb4\x30\x5a\x77\x03\x08\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0x7e, 0x5d, 0x16, 0x44, 0x6e, 0xcf, 0xa, 0x57, 0xf1, 0xe8, 0x1c, 0xfb, 0x8, 0x6e, 0x26, 0x89, 0xc2, 0x13, 0x34, 0xfd, 0xea, 0x2a, 0xe1, 0x4c, 0x12, 0xa1, 0x32, 0x35, 0xc4, 0x9d, 0x75}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x6b\xe3\x30\x10\x85\xef\xfa\x15\x0f\xe3\x43\x02\x89\x75\xd9\x53\x96\x3d\x6d\xf6\xb0\x14\x92\x1c\x42\x7b\x2c\x8a\x3c\x51\x44\x6c\x49\xc8\x63\xb7\xc6\xf5\x7f\x2f\xb2\x93\x40\xe9\xa5\x3a\xcd\x7c\x33\xef\xf1\x46\x52\xe2\xaf\x2f\x09\x86\x1c\x45\xc5\x54\xe2\xd4\xc3\xf8\x47\x0f\x5d\x97\xb2\xa4\xb3\x75\x96\xad\x77\xcd\x6f\x6c\xf7\xd8\xed\x8f\xf8\xb7\xfd\x7f\x2c\x44\x50\xfa\xaa\x0c\x21\x28\x1b\x1b\x21\x6c\x1d\x7c\x64\x2c\x04\x00\x64\xda\x3b\xa6\x77\xce\xc4\xdc\x1a\xcb\x97\xf6\x54\x68\x5f\xcb\x13\xf5\xde\x95\x0d\xfb\xa8\x0c\x49\xe3\xd7\xf7\xb2\xfb\x25\xc3\xd5\xc8\x0b\x73\xd0\x95\x25\xc7\xd9\xa4\x2d\x7e\xac\xe6\x3e\x50\x93\x09\xb1\x14\x62\x18\xd6\x88\xca\x19\x42\xfe\xba\x42\xde\x61\xf3\x07\xc5\x21\x05\xc5\x38\x4e\xd3\x3c\x38\x55\x53\xe2\x79\x57\xec\x52\xf9\x01\xf6\x07\xd5\x68\x55\xa5\x1d\x29\xf1\x62\xf9\x32\x0c\xf7\xcd\x71\xc4\x9b\xad\x2a\xa8\x10\xaa\x1e\x89\xdf\x74\xe3\x88\x4e\x55\x2d\x81\x3d\xf6\x61\xfa\xa9\x42\x48\x29\xe6\x95\x2d\x35\x3a\xda\x09\x27\xdb\x73\xeb\xf4\x37\xe3\x45\x77\xf3\x3b\xf6\x21\xf5\x4b\xa4\xa8\x18\xa6\xfb\x23\x71\x1b\xdd\x44\x66\x90\xde\x13\xf5\x1b\x64\x5f\x42\x64\xab\xc7\xf4\x39\xc5\xd9\xa0\x9b\xc9\x28\xe6\x8b\xc9\x95\x29\xc1\x67\x00\x00\x00\xff\xff\x81\x9d\x53\x8d\xf6\x01\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1b, 0x1a, 0xbf, 0xf0, 0xe9, 0x47, 0x35, 0xe6, 0xa7, 0xc, 0xe6, 0xba, 0xc0, 0x5e, 0x39, 0xda, 0x2d, 0xb9, 0xd0, 0xee, 0xbc, 0x1, 0xc0, 0xd1, 0x5e, 0xa2, 0xbf, 0x4d, 0xcd, 0x4, 0xe9, 0xc0}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x8f\xdb\xb8\xf5\x7f\xf7\xa7\x38\x6b\x0c\x02\x3b\x70\xe8\xff\x1f\xe8\x93\x8b\x79\xd8\x4e\x2e\x1d\x6c\x9a\x0c\x32\x69\xf7\x61\x77\x31\xa0\xa5\x23\x9b\x1d\x8a\xd4\x92\x94\x27\x86\xa3\xef\x5e\xf0\xa2\xbb\xe4\x4b\x9a\x62\xd3\x22\xf3\x32\x32\x79\xce\xe1\x39\x3f\x9e\x1b\x29\x2d\x97\x70\x23\x63\x84\x0d\x0a\x54\xd4\x60\x0c\xeb\x3d\x6c\x64\xf5\x1b\x76\x8c\x42\x94\xc6\xcb\x18\x13\x26\x98\x61\x52\xe8\x3f\xc3\xcb\xf7\xf0\xee\xfd\x47\x78\xf5\xf2\xf6\x23\x99\x64\x34\x7a\xa4\x1b\x84\xc3\x01\xc8\x3b\x9a\x22\x14\xc5\x64\xc2\xd2\x4c\x2a\x03\xb3\x09\x00\xc0\x34\x92\xc2\xe0\x27\x33\xf5\xbf\x98\x9c\x4e\xfc\xd3\x86\x99\x6d\xbe\x26\x91\x4c\x97\x6b\xdc\x4b\x11\x6b\x23\x15\xdd\xe0\x72\x23\x5f\x94\x8f\xbb\x3f\x2d\xb3\xc7\xcd\x12\x45\x9c\x49\x26\x4a\x19\x17\x70\x46\x0a\x63\x14\x86\x51\x7e\x39\xef\xd6\x98\x2c\xe2\x0c\x2f\x5d\x57\xa3\xda\xb1\x08\xb5\xe7\x22\x67\xf3\x99\x7d\x66\x99\xe6\x93\xc9\x8e\x2a\x78\x80\x5a\x77\x72\xa7\xe4\x8e\xc5\xa8\xc2\x4c\x89\x07\xf9\x07\xe5\x39\x86\xc1\x7b\x2f\xa9\xa4\x29\xb5\x20\xf7\xfe\xe1\x95\x52\xb2\x9c\xab\x2d\x23\xef\x33\xb7\xad\x93\xc9\x72\x09\x1f\xf7\x19\x02\xd3\x60\xb6\x08\x56\x19\x48\xa4\x6a\xed\x6c\x24\x85\x36\x9e\xec\x1a\xa6\x8d\x99\xa9\xe3\x0f\x2b\x01\xdd\x51\xc6\xe9\x9a\x23\x64\x94\x29\x4d\x02\xdf\x6c\x72\x38\xbc\x00\x45\xc5\x06\xe1\xea\x61\x01\x57\x3b\x58\x5d\x03\xb9\xb3\x34\x56\xba\x45\xcb\x52\xb0\x04\x84\x34\x70\xb5\x23\x6f\xb8\x5c\x53\x5e\xcf\xd9\xb1\x97\xa8\x23\xc5\x9c\xd6\xed\x89\xd7\x39\xe7\x41\x9d\xa0\xdd\x55\xa9\xde\x83\xa7\xa8\x94\x2d\x57\x42\x11\x5b\x19\x8d\xc7\xb9\x33\xe4\xfd\xfa\x9f\x18\x99\xbf\xa1\xa1\x31\x35\x14\xec\x1e\xa1\x2e\x11\x85\xb4\x1c\xb7\xf0\x48\x47\x4a\x26\x0e\xaf\x1e\x9f\xca\x23\x03\x87\x61\xbb\x6f\x45\x22\xcf\xb4\xfb\x05\x5c\x65\xc2\x2a\xbf\xba\xae\xec\xf8\x0c\x46\xde\x51\x1d\xb5\xe9\x58\xe2\x30\x62\x3a\xe3\x74\x5f\x6e\x1b\x84\xbf\x86\xa0\xeb\x11\xb2\x06\x14\x27\x21\xf7\x92\x8a\x22\x50\x39\xb7\xe8\x8b\x69\x3c\x16\x0e\xdc\x37\x68\x3a\x38\x3d\x31\xce\x61\x83\xa6\x8b\x5f\xa2\x64\x1a\xc6\xc8\x64\xb9\xb4\xcc\x2f\xe0\xe3\x96\x69\x48\x72\x11\x39\x75\xf4\x56\xe6\x3c\x76\xb8\xad\x11\x22\xca\xb9\xcf\x62\xe5\x5e\xb1\x34\xe3\x98\xa2\x30\xa8\x48\xc9\x8f\xa0\xd0\xe4\x4a\x30\xb1\xe9\xae\xc8\x34\x28\xa4\x31\x48\xc1\xf7\x40\x45\xdc\x91\x9f\xca\x98\x25\x0c\x63\x32\xb1\x0a\xf4\x2d\x99\x49\x78\xee\x47\xe6\x5d\xc9\x07\x87\x8b\x4c\x17\x20\x1f\xed\x36\x4a\xf2\x06\x4d\x08\x98\x8a\x7d\xee\x88\x58\x62\x69\x0e\xd5\xb6\x79\x6d\x41\xa6\x64\xd6\x16\xea\xc9\x3d\xe2\x81\xa8\x4d\x70\x28\x31\xd7\xc3\x98\xeb\x3e\xe6\x4c\x18\x79\x1e\xe6\x0e\xa3\x1a\x74\x29\x22\x5c\x40\xc6\x91\x6a\x84\x94\x3e\x22\xe8\x5c\x21\x50\xce\xc1\x09\xde\x52\x0d\x6b\x44\x01\x4f\x8a\x19\x83\x02\xd6\x98\x48\x85\x56\x87\x00\x67\x4f\xc9\x1a\xce\x05\x54\x9e\x50\x19\x5f\x42\x4a\xee\xfb\x40\xca\x74\x6e\x2d\x3f\x9e\x6f\xc6\x62\xee\x9c\x78\x5b\x2e\xe1\x67\x66\xb6\xad\x30\x70\x90\xd2\x2c\xe3\x7b\x68\xe5\x1b\xd8\xd9\x2c\x0d\x16\x57\x9f\x6c\x1d\xb0\x83\xa1\xe5\x70\xe8\x0a\x9e\xed\xda\x11\x36\x07\x6b\x42\xdf\x41\xec\x68\x3d\xf8\x13\xee\x57\xfd\xcc\xb8\xa8\xe6\x5d\xe9\x58\xc1\x6e\x11\x9c\xa8\x15\xa9\x8d\xc7\x61\x10\xad\x38\x9d\xd1\x08\x5b\x19\xcc\x60\x9a\x71\xdb\x38\x4c\x99\x8d\xb8\xc4\xce\x4f\x9d\x33\xdc\x73\x1b\x8d\x25\x26\x57\x3b\x72\x5b\x11\x0c\x0b\x48\x90\x9a\x5c\x8d\xb2\xbf\xce\x45\x34\xc2\x69\x6b\xce\x83\xc0\xa7\x26\xe7\x6c\x68\x1b\xe7\x6e\x10\x9f\xc6\xc5\x7c\xc1\xea\x65\x94\x9c\x64\xed\x42\xec\x7a\xac\x0e\x72\xb5\x33\x5a\xd0\x99\x88\xf1\x13\x10\xf8\xbf\x6a\xdc\xd1\xea\xe6\xdc\xff\xdb\x39\x5b\xe4\x67\x95\x6e\xdd\xbd\x2b\xb9\x82\xfa\x0f\x4d\x67\x6d\x39\x39\x5c\xc3\x33\xef\x87\xed\xf1\x43\x2f\xc7\xcf\x47\xad\xa9\xb7\x71\xcc\x96\x76\x5c\x39\x92\x44\xf4\x6d\xf2\x05\x36\xa8\x53\x14\xaf\x83\xdc\xba\xc6\x5a\x95\xde\x4a\xa9\xf1\x7d\x66\x9b\x57\x26\xc5\x8f\x9c\xc3\x5a\x4a\x3e\x8e\x84\x5d\x28\xc0\xd0\x66\x1d\x85\xa4\x25\xaf\x34\xd8\x85\x13\x53\x26\xa7\xfc\xac\xc5\x13\xd1\x5d\xbd\x2c\xdd\x89\x20\xf7\x2c\xcd\xb9\x6b\xc6\xc3\x5c\x57\xb2\xd5\x2d\x11\xe7\x2a\x77\x44\x57\x9b\x2f\xbe\x48\x4d\x8e\xc2\xa9\x10\xe4\xb4\xf5\x74\x59\x68\x4c\xc5\xde\x72\x1d\x2d\x07\x76\xa8\x5c\x05\x2e\x58\xe6\xa2\xed\xeb\xfc\x1c\x8f\xcc\x3a\xb1\x9c\x8a\xcb\x44\xf4\xfd\x37\x4c\x3c\x96\x66\x0d\x14\x15\x5b\x55\xb2\x60\x97\xf3\x72\x6f\xe0\xa3\xd5\x3c\xb4\xe5\x19\x55\x1a\xe3\xe0\xf5\x3e\x26\x3a\x1c\x96\xa1\x28\xda\x71\xe1\x72\x19\xfc\xf2\x9b\x05\xcd\xbb\xc0\x72\x09\x1f\xf0\xf7\x9c\x29\x8c\xfd\xec\xd0\x16\xd8\x89\x52\xdd\x8a\x3a\x20\xf6\x57\xaa\xdd\xa2\x94\xa9\x21\xa0\xa1\x09\xf5\x31\xb2\x7a\x7a\xa4\x7f\x0c\xda\xfa\xd2\x49\xf9\x79\xda\x56\xd4\x5f\x5b\xdb\xd3\xfa\x96\xdb\xa8\x34\xde\x8d\xec\xa5\x6b\x14\x1c\x85\xaf\xe4\xda\x15\x09\xd7\x79\x3d\x1f\xd9\x7f\xdf\x19\x1c\x93\x3a\x93\x99\x29\xf7\x78\x0e\xb3\x11\x39\x0b\x40\x7b\x0e\x2c\x9b\x27\x85\x3a\xe7\xc6\xa2\x36\x42\x5f\xf7\x13\x0e\xf7\x15\xd8\x55\xca\x96\xc1\xfd\xb3\x87\xa0\x87\x05\xb8\x70\xf5\xbb\xe1\x14\xa9\x19\xf5\x13\x33\xd1\x16\x76\xe4\x27\xdc\x37\x86\x87\x3d\xf0\x42\x2f\xb4\x7f\x91\x6d\x38\xab\x5d\x69\xf4\x3a\xab\x8a\x24\x74\xd5\xde\x5a\x72\xc2\x19\x0e\x2d\x36\xb7\x82\x14\x86\x89\x1c\x5b\x13\x45\xeb\xd7\x79\xa2\xaf\xc1\xa8\x8e\x98\xc0\x78\x9c\x6b\xe7\x0f\xfa\x64\xd6\x75\xbe\x79\x0b\xb4\x46\xc4\x8c\x47\xcd\x85\x91\xf3\x1d\xe1\x23\x08\x17\xcd\x40\xb8\xc0\x6d\x59\x02\x3f\x5c\x0a\x55\x68\xf2\xc7\xe2\xb4\x58\xd4\x37\x3e\x36\x05\x94\x4b\xba\x6b\x9f\x83\x3d\x0d\xe8\xd5\x2f\xbf\x69\xa3\x98\xd8\x1c\xc2\x4d\x40\x6b\x37\x5f\x14\x05\x14\x95\x45\x30\xd0\x36\x04\x0d\xbc\xe2\x0b\x10\x8c\x9f\x28\x96\xbe\xeb\x83\xfa\xe6\xe1\x58\xe7\x57\x91\xb9\xd3\x62\xaf\x7c\x06\x87\x7e\x89\x09\xcd\xb9\xa9\x10\xf0\x87\x39\xa6\xed\xba\x76\x22\x94\x3a\x9b\x94\x74\x86\x11\x4b\x58\x04\xd4\x35\xe4\x4e\x82\x2b\x98\xc3\x32\x5a\x05\x73\xb0\x17\x71\x8a\xb5\xae\x53\x46\xba\x8c\x50\x68\x07\x9c\x66\xd8\x55\xc6\xc4\x77\x8f\x23\xad\x23\x45\x26\xe0\x6a\x77\xf4\xba\xa5\xb7\x1f\xdf\x76\xe3\x52\x71\x9c\x68\x5d\xfe\x88\x26\xe5\xbc\x36\xe5\xdb\x6c\x48\x4e\x68\xd6\x69\xaf\xff\x47\x3a\xa5\x99\x86\xe7\xd5\xe4\xfc\xbf\xb2\x6f\x5a\x2e\x81\xe9\xbf\x0b\x9d\x67\x99\x54\x06\x63\x07\x80\xc2\x48\xaa\x58\xc3\xd3\x16\xcd\x16\x15\x44\xb9\x52\x28\x7c\xda\xb3\xa1\x96\xd7\xf4\xa4\x92\xd4\x17\xb3\xba\x86\x84\x72\x8d\x93\x53\x5d\xda\xf7\x5e\xec\x0b\x3a\x85\x41\x3d\x07\xda\x87\xef\x6d\xd8\x1f\x03\x6e\x27\xe5\x7d\x33\xd8\x2e\x97\x70\x9b\x40\xae\x51\x01\x0a\xba\xe6\xe8\x4b\xe7\x2e\xa8\xeb\x4c\x08\x17\x6a\x0b\x78\x42\x88\xa8\xed\x07\xf5\x00\x95\xcb\x90\xcc\x90\xae\xf2\x9a\x94\x17\x72\xa4\x73\x09\xf4\xf9\xf3\xc8\x64\x9d\xd3\xce\x24\xbb\x0c\x96\x2f\xf6\xa7\xaf\xed\x53\x67\xee\x51\x3f\x97\x76\x74\x1b\x70\xc5\xd0\x9b\xae\x2e\x13\x54\xd4\xc9\xd9\x9e\x17\xfa\xf4\x87\xe3\x31\xd1\xe0\x1f\x71\x2c\x2e\xa5\xb6\x65\x27\x5c\x2c\xb6\x7c\xcb\x55\x5e\xb6\x11\x52\xf9\xd2\xdb\x58\xdc\x1d\x29\xc8\x64\xd8\xad\xfa\x57\xb0\x6d\x97\xe9\xdf\xb3\x86\x52\x7f\xd2\x9a\x7a\xd3\x2f\x3a\x08\x75\x15\x3f\xd8\xc1\xd5\xae\xd5\x8f\x2f\x97\x70\xb3\xc5\xe8\x11\x54\xeb\x46\x82\x7c\x3f\xd7\xf5\x2f\xf4\xeb\xf7\x1b\x5f\xf5\x6c\x77\xf6\x91\xc8\xbf\xe1\x7e\x2b\xa3\x76\x02\x6f\x9f\x96\xb8\x9d\x7e\x28\x75\x1d\x3d\x37\x55\x68\x70\xdd\x7b\x51\xde\x7f\xa5\x73\x5a\xcc\xe0\x85\xf2\x29\x24\xbf\xf4\x54\x76\xce\xa1\xac\x19\x5f\xfe\xb2\xbc\xf3\xc2\xd1\xbf\xe1\x6d\xbf\xdf\x75\xa1\x1f\x29\xb4\xc6\x53\x08\x9f\xef\xc0\x7a\x5f\xe6\x31\xd2\x6c\xb1\xaf\x32\x51\x14\xf3\xc6\x42\x33\x77\x05\x4d\xee\xa8\xa2\xa9\x26\xf7\xce\x31\x2d\x45\x18\xff\xe0\xbc\xac\x39\xe1\x43\x21\x32\x9f\xac\x2d\x61\x35\xf2\x17\x1a\x3d\x6e\x94\xcc\x45\x1c\x5e\x8a\x07\x27\xd5\xa4\x5e\xe9\x67\x66\xb6\x37\x9e\x7e\x16\x99\x4f\x0b\x68\xad\x7c\x43\x39\x47\x65\xb3\x7c\x17\x8a\x06\xdf\x08\x2a\xc7\xec\xeb\xac\x5a\x69\x1c\xc6\x3a\x5a\x9c\x6d\x7f\x8c\x09\x2a\xb7\x07\xb3\x79\xbb\xfd\xbe\xca\xa8\xd9\x96\xfb\x1c\xc4\xde\x51\xb3\xf5\x06\x0e\x84\x07\x15\x31\xcc\xf0\xf7\xc0\x38\x9d\xce\xc3\x2f\x01\xd3\xf0\x9e\x7c\x3a\x6f\xb2\x41\x75\x56\x33\x5b\xb8\x86\xe9\xe2\xd7\xe9\xaf\xd3\x69\x57\x70\xa7\xa6\xa1\xb2\x05\x4b\x93\x44\xaa\x94\x1a\x97\x8d\x66\x53\x6f\xa2\xf5\xc5\xa2\x98\xba\x23\x53\x2d\xb8\x28\x20\x7c\xaf\x30\x9b\xd7\x21\x3f\xf6\xd2\xcb\x57\xac\xb2\xa7\xe9\x95\x28\x7b\xd4\x11\xd2\x84\x6a\x16\xd7\x15\x8b\x46\x06\x38\x7b\x44\x30\xd6\xa5\x6b\xbe\x40\x5f\x7f\x0e\x12\x8e\x47\x36\x63\xf7\x1b\x9a\x56\xfd\x7a\xf6\xec\x28\xc9\x60\x09\xf3\xe8\xbc\xc3\xa7\x8a\xec\x9d\x34\xb7\xf5\xe2\x15\x5e\x75\xf0\x16\xc5\x74\xde\x29\x0a\x47\x72\x76\xf9\xed\x02\xfa\xd3\x82\xff\x32\x42\xc6\x08\xd3\x76\x5e\x4e\xed\x58\x79\xa6\xa8\xa9\xfa\xe9\xd9\x02\x21\x89\x9d\x24\xb7\xae\x72\x39\xce\xa2\x98\xcd\x7b\x66\x55\xf5\xa8\x16\x78\x2b\x76\x94\xb3\x50\x94\x5e\x7d\xca\x30\x32\x18\xaf\xc0\x4e\x35\x64\x2d\xe0\xc7\xc8\x62\xb7\x02\xbf\x52\xb7\xa6\x1f\xb1\xd7\x5f\x03\x5d\x03\xcd\x32\x14\xb1\x3b\xa5\xeb\x05\x68\x12\x52\x92\xbb\xc2\x6b\xa4\x06\x42\x88\x07\x73\x47\x95\x3d\x57\x8f\x95\x57\x2f\x5c\x66\x66\x51\x39\xf4\xd1\xbb\x02\xb7\x6e\xf5\x95\x8e\x65\xf9\xe1\xda\x16\xcc\x5e\x3d\x6f\x76\x17\x9d\xd4\x55\xe7\xea\x1b\x9a\xa2\xdd\x80\x81\xec\xf5\x51\xb1\xf4\x2d\xd5\x26\xa4\xb1\x57\x22\xb6\x07\xf4\xed\x8d\x4c\x53\x5a\x14\x56\xe3\xf9\x91\x22\xdd\x2d\x7f\xc7\x2a\x75\x73\x6e\xa8\xd0\x94\xd9\xe1\x44\xb1\x09\x41\x7b\xb2\xe0\x78\xba\x92\xfc\xd2\xc2\x63\xd9\xfe\x03\xc5\xe7\xdf\xf1\xb0\xb3\xbd\xac\x4c\x6b\xbe\xa7\x76\xd7\x49\xf0\xb4\x65\x1c\x61\x4b\x45\xcc\x99\xd8\x80\xdb\x37\x6b\x60\xf8\x4c\xa8\x64\x73\x0e\xfa\x70\xb6\x7b\x76\x7b\x4b\xa7\xf7\x88\xeb\x5d\xec\x75\xde\xb1\x9b\x9e\xe7\x36\x84\x09\x66\xaa\x5c\x71\xe6\x27\x43\xf6\xaf\x4a\x26\x1f\x70\xc3\xb4\x41\x35\x76\xab\xae\x66\xf6\xd8\xb6\xb0\x49\x75\x94\x64\xde\xbf\x62\xfc\x57\x00\x00\x00\xff\xff\xe3\x01\xde\x31\xe4\x2c\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0xfb, 0xec, 0x92, 0xd, 0xd2, 0xd8, 0x56, 0x13, 0x51, 0xe, 0x37, 0x28, 0xf3, 0x47, 0x48, 0x56, 0x6f, 0x9c, 0xea, 0x3, 0xd3, 0xdb, 0xf, 0xe2, 0xab, 0x92, 0xd, 0x2, 0x75, 0xec, 0x46}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl": {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl": {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl": {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl": {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl": {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
