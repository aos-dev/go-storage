// Code generated by go-bindata. DO NOT EDIT.
// sources:
// cmd/definitions/tmpl/function.tmpl (567B)
// cmd/definitions/tmpl/info.tmpl (1.702kB)
// cmd/definitions/tmpl/object.tmpl (1.907kB)
// cmd/definitions/tmpl/operation.tmpl (1.698kB)
// cmd/definitions/tmpl/pair.tmpl (715B)
// cmd/definitions/tmpl/service.tmpl (11.876kB)

// +build tools

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\x8f\x25\x87\xae\xec\xe6\x07\x08\x9e\x8a\x82\xb0\xc8\xa2\xde\x25\x64\xa7\x6b\xb0\x99\x94\x66\x5a\x17\x62\xfe\xbb\xa4\x55\x17\x11\x0f\xde\x3c\x25\xcc\xcc\x7b\xf3\x3e\x26\xa5\x2d\x06\xc3\x47\x82\x7a\xda\x40\x4d\xb8\xbc\x82\xd2\x37\x23\xdb\x88\x9c\xab\xd2\x76\x2d\x38\x08\xd4\xa4\x6f\x7d\xdf\x91\x27\x16\x3a\x7c\x36\x55\xcb\x2f\xb3\x66\xd2\x77\xc6\x13\xde\x20\xa1\x31\x9e\xba\x65\xa0\x88\xd5\xa4\x77\xc1\x9a\xb9\xd2\x8e\x6c\x51\x47\x5c\xa4\x04\x75\x56\xec\x4d\x5c\x06\xd6\x48\xa9\x58\xe6\x5c\xa7\xa4\x26\xbd\x37\x83\xf1\x51\x3f\x0e\xce\xef\x4c\x14\xfd\x20\x83\xe3\xe3\x35\x1f\xe2\xab\x93\xe7\x26\x78\x6f\x72\x46\xe8\x05\xbd\x71\xc3\x2f\xa6\xa5\x5c\x62\x7e\xdf\xb4\x2c\xb8\xa7\x38\x76\x12\x3f\x8c\xe7\x00\x15\x00\xf4\x86\x9d\xad\x57\x05\xdc\x9d\xa9\x57\xeb\x6a\xa6\xa2\x2e\xd2\x1f\x71\xac\x9c\x60\x03\x0b\x9d\x44\x37\xcb\xbb\xc1\x3f\x66\xdc\x82\xf8\xeb\xca\x3f\xbe\xef\x01\x00\x00\xff\xff\x41\xc8\xae\xbf\x37\x02\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xfc, 0xb, 0xf4, 0xfb, 0xf, 0x94, 0xca, 0x64, 0x7a, 0xb8, 0x48, 0xf9, 0x69, 0xf1, 0x88, 0x46, 0x59, 0xd3, 0xbc, 0x0, 0x4e, 0xe7, 0x8, 0x1e, 0xdf, 0x27, 0x59, 0x81, 0x75, 0x52, 0xa2}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xe5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x92\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\xe4\x24\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x13\xc7\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x23\x5d\x63\xa9\x37\x31\x32\x99\xc7\x39\x15\x42\x09\x27\xb4\xb2\xef\x70\x7a\x85\xcb\xab\x1b\x9c\x9d\x9e\xdf\x2c\x58\xc5\xb3\x15\x5f\x12\xdc\xba\x22\xcb\x98\x90\x95\x36\x0e\x33\x06\x00\x93\x42\xba\x09\x8b\x18\x6b\xdb\x03\x18\xae\x96\x84\xe9\x6a\x8e\xa9\x50\x85\xb6\x78\x9b\x60\x71\x1e\x56\x17\xbc\x82\xf7\xac\x6d\x31\xb5\x64\x1a\x91\xd1\x25\x97\x14\xf6\xa7\x2b\xdc\xc1\xe9\x13\x2e\xa9\x0c\x47\x58\x1c\xe3\xbd\xa0\x32\x87\x50\x39\xdd\x42\x28\xb4\xed\x76\x92\xf7\x48\x85\x63\x99\x56\x36\x40\xec\xe8\x36\x5d\xcd\x5e\xdd\xfb\x0e\x71\x37\xfd\x3c\xd4\x0d\x24\xcd\xa2\x83\x08\xf2\x9f\xb8\xcd\x78\xd0\x47\x82\xa3\xe3\xe3\xb0\xbb\xea\x81\x0f\x40\x2a\x0f\xcb\x88\xb1\x60\x00\x76\x7b\x18\xa7\x5b\x67\xea\xcc\xa1\x1d\x94\x37\x6c\xdf\x9e\x62\x0b\x18\x37\xeb\xaa\xaf\xe5\xfd\xd6\x97\xfb\x33\x1b\x86\x2e\x8e\xe3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\xd3\xef\x94\x39\x34\xbc\xac\x69\x8e\x43\x48\xe2\xca\x42\x69\x07\x4b\x6e\x8e\xa3\xe1\x83\x25\xd7\x95\xea\xea\x08\xe5\xde\xbc\xee\x42\x09\xc9\xab\x2f\xd6\x19\xa1\x96\x5f\x85\x72\x64\x0a\x9e\x51\xeb\xd9\xa0\xfc\xbc\xd7\x61\x57\x14\x81\xfe\xec\xb6\x9b\x10\xef\x59\x51\xab\x0c\x33\x89\x57\xcf\xba\x16\xe1\x03\xb9\xbe\xf1\x53\x61\xab\x92\xaf\x07\x37\x66\xd1\xd8\x8f\xc1\x57\x43\xae\x36\x0a\x72\xf1\xc0\xbe\x40\xfa\xa7\x9a\xd7\x4f\x68\x36\x63\xcd\xe8\x37\x85\x06\xa6\x47\x60\x90\xa0\x19\xf1\xb2\x61\xa0\x4a\xdb\xb1\xfe\x03\x77\x66\x23\xd4\x39\x52\xad\xcb\x68\x20\x12\x05\xe4\x22\xdc\xf0\xcb\x3d\x9f\xc0\x8b\x04\x87\x43\x8d\xe7\xdd\x9e\xc3\x99\x9a\xba\x83\x7e\xbb\xd1\x2d\xa8\x3b\xfc\x20\xa3\x3f\x87\x79\xec\x12\x0a\x5e\x5a\xda\xe7\x96\x2e\x6a\xeb\xf6\x9b\x8e\xbf\xee\x3b\x19\xf7\x5d\x71\x25\xb2\x59\x21\xdd\xe2\xba\x32\x42\xb9\x62\x36\x79\x8c\xf5\x23\xa5\x3c\xbd\x7f\xb9\xbf\xee\x5e\x6c\x9e\xdd\x24\x8a\x1e\x5a\xf4\xdf\xcc\x6e\x6f\xe5\x5d\xb2\x9f\x97\x8f\x8e\x7d\xff\x0f\xdb\xf9\xa5\xdd\x2f\x7f\x06\x00\x00\xff\xff\x26\xf5\xd0\xb3\xa6\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x9d, 0xdc, 0x29, 0x17, 0xc8, 0x8a, 0x14, 0x25, 0x13, 0xa5, 0x85, 0x13, 0x6, 0xf, 0xb3, 0x4a, 0x21, 0xd1, 0x20, 0x4e, 0x6f, 0x92, 0x60, 0xe2, 0x6e, 0x29, 0x96, 0x4a, 0xee, 0x99, 0x66}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6f\xdb\x36\x10\x7e\x36\x7f\xc5\x37\x23\xd8\xa4\xc1\x91\x92\x6d\xd8\x43\x16\x3f\x0c\x71\xb6\x06\x68\xec\x02\x76\xfb\x4e\x53\x27\x9b\x8d\x44\x0a\x24\xe5\xda\x75\xf4\xdf\x0b\x4a\xb2\x23\x27\x4e\xe1\xa0\x2f\x7d\x23\x79\x77\xdf\xdd\xf7\xdd\x91\x8c\x63\xdc\xe8\x84\xb0\x20\x45\x86\x3b\x4a\x30\xdf\x60\xa1\xf7\x7b\x88\x3c\x89\x13\x4a\xa5\x92\x4e\x6a\x65\xff\xc1\x68\x82\xf1\x64\x86\xdb\xd1\xdd\x2c\x62\x05\x17\x0f\x7c\x41\x70\x9b\x82\x2c\x63\x32\x2f\xb4\x71\x08\x18\x00\xf4\xd3\xdc\xf5\x9b\x95\x93\x39\xb5\x4b\xbb\x51\xa2\xcf\x42\xc6\xe2\x18\xff\x49\xca\x12\x48\x95\xd0\x1a\x52\x41\xcf\x3f\x93\x70\x98\x4b\xc7\x84\x56\xd6\xe3\x6c\xb7\xe7\x30\x5c\x2d\x08\x67\x0f\x03\x9c\xad\x70\x35\x44\x34\xa9\xfd\xee\xc9\x71\x54\x55\x8d\xda\x44\xde\x79\xa0\xed\x16\x67\xab\x68\xcc\x73\xc2\x23\x9c\xfe\xc0\xad\xe0\x19\xaa\x0a\xa5\x54\xee\xef\xbf\x30\xc4\xe5\xf5\xb5\x77\x7a\xf0\xc1\x1e\x9f\x54\xe2\x97\x4d\x49\x0d\x36\xa4\x85\x5b\x12\x6c\xce\xb3\x8c\xac\x43\xa9\xa4\xf3\x25\x2e\xf4\xb9\x75\xda\xf0\x05\x45\x2c\x8e\x7d\xc0\x78\x32\xbb\x9d\x5e\xf9\x15\x70\xde\x86\xff\x66\x91\x7a\x6a\x16\xd3\x77\x93\x8f\xef\x47\x50\xda\x61\x4e\x10\x4b\x4f\x25\x81\x2e\x9d\x95\x09\xc1\x92\x59\x49\x41\x36\x3a\x0c\xc7\xcd\xbf\x63\x2f\xb1\x8f\xd0\x85\xa4\xe4\x99\x59\x5a\x08\xad\x44\x69\x0c\x29\x07\xcb\x53\x8a\x98\x6f\xc0\xce\x6e\x9d\x29\x85\xc3\xf6\x54\xf5\xbc\x9b\x4c\xbd\x6c\x23\xb2\xc2\xc8\xc2\x77\xfa\xc9\xf8\xaa\x61\x2f\xdd\x93\xdf\x6c\x53\x50\xad\x7d\x55\x75\x4e\x9e\x29\xcd\x7a\x71\x0c\x91\x49\x5f\x7d\x2b\xf4\x6e\xa7\xf0\x65\x29\xc5\xb2\xc3\x94\x67\x72\x45\x11\xeb\xb5\x1e\xd3\x46\x7d\xc3\xea\xa4\x71\xec\xa7\x05\xa5\xa5\x04\xdc\x82\xfb\x5d\xce\x0b\xa4\xda\xec\xa6\x69\xc5\xb3\x92\x06\xb8\x40\x4e\x5c\xd9\xba\x13\x96\xdc\x00\x97\xed\x81\x25\x57\x43\xd5\x38\xf5\x88\xb0\x5e\xa2\x15\xd5\x9b\x3f\xff\x60\xbd\xdc\x5b\xfd\xd4\x46\xf7\xa5\xa3\x35\xab\x18\x3b\x45\xd8\x27\x51\x6f\xd7\xf5\xa5\xa8\x2a\x96\x96\x4a\x20\xd0\xf8\xbd\x71\x0d\xf1\x3f\xb9\x56\x5f\x69\x8b\x8c\x6f\x5a\xe9\x82\xf0\x50\x3c\x6c\xeb\x12\x0d\xb9\xd2\x28\xe8\xe8\x85\xd6\xbe\xa8\x17\xe0\xd3\x57\xc0\x57\x87\xe0\xe1\x2e\xa2\xcd\x72\x04\x1e\x43\xac\x0e\x2a\x60\x6d\x3f\x33\x5b\x67\x7f\x0b\xb1\xe0\x20\xf9\x00\x73\xad\xb3\x70\x9f\xda\x3a\xee\x82\xb0\x69\xae\x4c\xa1\x23\xdf\x96\x5f\x4f\xba\xdf\xbf\x0c\x71\xd1\xe2\x7c\x5f\xac\x01\x9c\x29\xa9\x76\xac\x58\x97\x56\xa7\xb2\x47\x7c\x25\xa3\x3f\xf9\xd9\xa9\x23\x52\x9e\x59\x3a\xaa\xf2\x7d\x69\xdd\xdb\xda\xf8\x43\x2c\x87\x87\x2c\x0b\xae\xa4\x08\xd2\xdc\x45\xd3\xc2\x48\xe5\xd2\xa0\xdf\xce\x7d\x07\xa1\xaa\xfc\x45\x6a\x27\xbf\x1f\x86\x2d\xf5\x9f\x63\xa4\x1a\xf2\x8f\xc3\x53\xd8\x1f\x9d\xc1\xe6\x4d\xe9\x3e\x2f\x2f\xca\x16\x99\x56\x14\xac\x3b\x27\xdb\xfd\x13\x76\xca\xef\x72\xb4\xfc\xf5\x31\xd1\x9e\x3d\x8c\x1d\x86\x75\x80\xff\xda\xaa\x6f\x01\x00\x00\xff\xff\x94\x03\xb8\x29\x73\x07\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0x64, 0x33, 0x31, 0x2b, 0x9e, 0xa5, 0x1c, 0x46, 0x19, 0x57, 0xa8, 0x78, 0xb3, 0xc9, 0x92, 0xd7, 0x11, 0xee, 0xde, 0xf1, 0xa5, 0xf2, 0x26, 0x22, 0x58, 0x32, 0x8d, 0xfb, 0xb5, 0x58, 0xdc}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4d\x8f\xd3\x30\x10\xbd\xfb\x57\x8c\xac\x1e\x12\x69\x49\xef\x48\x7b\x82\x45\x5a\x09\x75\x2b\x10\xe2\x88\x5c\x67\xda\xb5\x48\x6c\x33\x9e\xec\x87\x82\xff\x3b\xb2\x93\x76\xd3\xaa\x10\x15\x10\xe2\x16\x7b\x66\xde\x9b\xf7\xc6\x13\xaf\xf4\x57\xb5\x43\xe0\x67\x8f\x41\x08\xd3\x7a\x47\x0c\x85\x00\x00\x90\xda\x59\xc6\x27\x96\xc3\xc9\x38\x29\x4a\x21\xfa\xfe\x15\x90\xb2\x3b\x84\xc5\x97\x2b\x58\x18\x78\x7d\x0d\xd5\xad\x65\xa4\xad\xd2\x18\x20\x46\xd1\xf7\xb0\x30\xd5\x5b\x0c\x9a\x8c\x67\xe3\x6c\xba\x4c\x0c\x30\x46\x4c\xf0\x8d\x7a\x5e\xa9\x16\x21\x46\x30\xfb\x62\xe8\x33\x53\x62\x30\x5b\x70\x04\x05\x7e\x4b\xf9\x39\x51\x06\xa4\x07\xa3\x91\x64\x79\x72\xcf\x8e\xd4\x2e\xdd\xc7\x98\xeb\x3f\x32\x19\xbb\x2b\x4a\x08\xf9\xe3\x80\x89\xb6\x4e\x8d\x8c\xe7\xa9\x08\xe7\x93\x8a\x85\xa9\xee\x7c\x16\x90\x32\x96\xcb\xdc\xad\xf3\x03\xcd\x77\x60\xb7\x56\x41\xab\x26\xb5\x3c\x46\x4e\x24\x8e\xc0\xe7\x6b\x8a\x31\xf2\xce\x51\xab\x78\xad\x48\xb5\x89\xab\x84\xe3\xc0\x07\x0c\x5d\xc3\xe1\xb3\xe1\xfb\xf5\x30\x9b\x23\x95\x32\x95\x4c\x5d\xb2\x8e\x73\xf5\x7b\x37\xd0\xcc\xf6\x9e\x90\xdf\x0c\x83\xfd\x1d\x19\x93\xf2\x42\xf3\x13\x8c\x6f\xa4\x1a\xef\xae\xfe\xba\xca\xfd\xd8\x8e\x4f\xf9\xd8\x76\x81\x6f\xda\x0d\xd6\x9f\xac\x69\x7d\x83\x2d\x5a\xc6\xfa\xdc\x1b\x2b\x4a\x11\x85\x58\x2e\x61\x36\x33\x83\xc2\x06\x01\x13\x70\x8d\x35\xb0\x83\x7b\xf5\x80\xb0\x75\xf4\xa8\xa8\x06\xed\x5a\xaf\xd8\x6c\x1a\x84\x03\x96\x4a\xde\x85\x6a\x78\xe4\xf3\x1c\x81\xa9\xd3\x0c\x7d\x14\x62\xdb\x59\x0d\x45\x98\x2f\x2a\x2f\x92\x7b\x29\xf6\xc9\xce\x8c\x9b\x48\xc8\x1d\x59\x90\xb3\x00\x32\xd9\xfb\xeb\x9d\xba\xa0\x99\x7f\xb2\x44\xc7\x3f\x9b\xb3\x6b\x84\x44\x70\x0d\x2b\x7c\xbc\xf3\x48\x79\xc4\x2b\xc7\xb7\x2f\xdd\xdf\x10\x39\x2a\xe4\xb4\xdb\x18\x65\x79\xfa\xc3\x79\x71\x52\x44\xf1\x33\xbe\x0b\xec\xf9\x0f\x76\x73\x34\xef\x4f\x0c\x9a\x38\xb2\x37\x6a\xfa\x75\x70\xef\x47\x00\x00\x00\xff\xff\xbd\xe8\x37\x32\xa2\x06\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc2, 0xaf, 0x9a, 0xb8, 0xf7, 0x9f, 0x1b, 0x53, 0xaa, 0x36, 0x95, 0x6d, 0xe6, 0x56, 0x7d, 0xb9, 0x8e, 0xd7, 0x4, 0x74, 0xce, 0x5b, 0x9, 0x4f, 0xb6, 0x92, 0xc, 0x1e, 0x49, 0x5, 0x4c, 0x4c}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x8e\xd3\x30\x10\x3d\xc7\x5f\xf1\x14\xf5\x90\xa0\x6e\x7c\xe1\x54\xc4\x89\xee\x01\xa1\xdd\xee\xa1\x82\x23\x72\x93\xa9\x6b\xad\x63\x5b\x8e\x1b\x88\x82\xff\x1d\x39\xce\xae\x28\x48\x40\x4e\x9e\x37\x33\x6f\xde\x7b\x0a\xe7\xf8\x60\x3b\x82\x24\x43\x5e\x04\xea\x70\x9a\x20\xed\x6b\x8d\xb6\xef\x78\x47\x67\x65\x54\x50\xd6\x0c\xef\xb0\x3f\xe0\xf1\x70\xc4\xfd\xfe\xe3\xb1\x61\x4e\xb4\xcf\x42\x12\x9c\x50\x7e\x60\x4c\xf5\xce\xfa\x80\x8a\x01\x40\xd9\x5a\x13\xe8\x7b\x28\x73\xe5\xe9\xac\xa9\x0d\x25\xcb\xa5\x54\xe1\x72\x3d\x35\xad\xed\xf9\x89\x26\x6b\xba\x21\x58\x2f\x24\x71\x69\xef\x5e\x9e\xe3\x5b\xee\x9e\x25\xbf\x84\xe0\x5a\xad\xc8\xac\x54\xcd\x7f\x6f\x87\xc9\xd1\x50\x32\x56\x33\x36\xcf\x77\xf0\xc2\x48\xc2\xe6\xeb\x16\x9b\x11\xbb\xf7\x68\x9e\x92\x6c\xc4\xb8\x74\x37\xce\x88\x9e\x12\xbe\x19\x9b\xc7\xf4\xfc\x81\x60\x9f\xc4\xd0\x0a\x9d\x66\x38\xc7\x17\x15\x2e\xf3\xfc\x32\x19\x23\xbe\x29\xad\x21\x9c\xd3\x13\x12\xbe\xee\xc5\x88\x51\xe8\x2b\x21\x58\x1c\xdc\x92\x5b\xc3\x38\x67\x79\x64\x4f\x43\xeb\xd5\x02\x27\xda\xf3\xd5\xb4\x7f\x10\x57\xe3\xca\x77\x9c\x5c\xaa\x6b\x24\xa9\x98\x17\xff\x9e\xc2\xd5\x9b\x05\xc9\x40\xfa\x3e\xd1\xb4\x43\x79\x23\xa2\xdc\xbe\x76\x3f\x27\x39\x3b\x8c\x19\x89\x2c\x3b\x26\xd3\x25\x05\x59\x82\xd4\xf6\x24\xf4\x92\x48\x95\xcf\x3d\x08\x87\x99\x15\xbf\x9c\x7b\x10\x6e\x66\x45\xf1\xf7\x2c\x73\xff\x5f\x69\x16\xc5\x6f\x62\x77\x58\xff\x90\xc5\xf3\xe1\x5c\x55\x6f\x6e\x23\xa8\x8c\xd2\x75\xdd\xdc\x6b\xea\xab\x7a\xbb\x9e\x59\x2d\x14\x91\xc5\x9f\x01\x00\x00\xff\xff\x44\xc8\x7d\x2b\xcb\x02\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x44, 0xe0, 0x9f, 0x23, 0xe4, 0x3f, 0x94, 0x8f, 0x13, 0x89, 0x83, 0x3a, 0xab, 0x7a, 0x1a, 0x7a, 0x74, 0xbf, 0xd, 0x1a, 0x6e, 0xb2, 0x14, 0x21, 0x21, 0x13, 0x71, 0x7c, 0x1c, 0x2, 0x10, 0x65}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6f\xdc\xb8\x11\x7f\xce\xfe\x15\x73\x0b\xe3\x20\x05\x1b\x6d\x0b\xf4\x69\x0b\x3f\x5c\x9d\x5c\x6a\x5c\x12\x1b\x71\xda\x7b\xb8\x3b\x18\x5c\x69\xb4\xcb\x9a\x22\x75\x24\xb5\x8e\xb1\xd1\xff\x5e\xf0\x43\xdf\xd2\x7e\xa4\x29\x2e\x2d\xe2\x17\xaf\xc8\x99\xe1\xf0\xc7\xf9\xa4\xb4\x5c\xc2\x95\x48\x10\x36\xc8\x51\x12\x8d\x09\xac\x9f\x60\x23\xea\x67\xd8\x51\x02\x71\x96\x2c\x13\x4c\x29\xa7\x9a\x0a\xae\xfe\x0a\x2f\x6f\xe0\xdd\xcd\x07\x78\xf5\xf2\xfa\x43\x34\xcb\x49\xfc\x40\x36\x08\xfb\x3d\x44\xef\x48\x86\x50\x96\xb3\x19\xcd\x72\x21\x35\x04\x33\x00\x80\x79\x2c\xb8\xc6\x8f\x7a\xee\x9e\xa8\xf0\x3f\x24\xa6\x0c\x63\x3d\x9f\xb9\xc7\x0d\xd5\xdb\x62\x1d\xc5\x22\x5b\xae\xf1\x49\xf0\x44\x69\x21\xc9\x06\x97\x1b\xf1\xa2\xfa\xb9\xfb\xcb\x32\x7f\xd8\x2c\x91\x27\xb9\xa0\xbc\x92\x78\x06\x67\x2c\x31\x41\xae\x29\x61\xe7\xf3\x6e\xb5\xce\x63\x46\xf1\xec\x75\x09\x95\xea\x3c\x16\x85\x72\x47\x63\xf4\x5c\xd1\xc9\x7c\xfa\x29\x37\x4c\xe1\x6c\xb6\x23\x12\xee\xa1\xd9\x6e\x74\x2b\xc5\x8e\x26\x28\xfd\x4c\x05\x61\xf4\x4f\xc2\x0a\xf4\x83\x77\x4e\x52\x45\x53\x69\x11\xdd\xb9\x1f\xaf\xa4\x14\xd5\x5c\x03\x46\x74\x93\x5b\xbb\x98\xcd\x96\x4b\xf8\xf0\x94\x23\x50\x05\x7a\x8b\x60\x94\x81\x54\xc8\x8e\x69\xc4\x82\x2b\xed\xc8\x2e\x61\xde\x9a\x99\x5b\x7e\xbf\x12\x90\x1d\xa1\x8c\xac\x19\x82\x45\x2f\xf2\x7c\xc1\x6c\xbf\x7f\x01\x92\xf0\x0d\xc2\xc5\xfd\x02\x2e\x76\xb0\xba\x84\xe8\xd6\xd0\x18\xe9\x06\x2d\x43\x41\x53\xe0\x42\xc3\xc5\x2e\x7a\xcd\xc4\x9a\xb0\x66\xce\x8c\xbd\x44\x15\x4b\x6a\xb5\xee\x4e\xfc\x58\x30\xe6\xd5\xf1\xda\x5d\x54\xea\xdd\x3b\x8a\x5a\xd9\x6a\x25\xe4\x89\x91\xd1\xfa\x19\xda\x8d\xdc\xac\xff\x85\xb1\x7e\x8b\x9a\x24\x44\x13\x30\x67\x84\xaa\x42\x14\xb2\x6a\xdc\xc0\x23\x2c\x69\x34\xb3\x78\x0d\xf8\x64\x11\x6b\xd8\x8f\xef\xfb\x9a\xa7\xe2\xc4\x7d\xbf\x80\x8b\x9c\x1b\xe5\x57\x97\xf5\x3e\x3e\x81\x16\xb7\x44\xc5\x5d\x3a\x9a\x5a\x8c\xa8\xca\x19\x79\xaa\x8e\x0d\xfc\x5f\x4b\xd0\xe5\x04\x59\x0b\x8a\xa3\x90\x3b\x49\x65\xe9\xa9\xac\x59\x0c\xc5\xb4\x7e\x96\x16\xdc\xd7\xa8\x7b\x38\x3d\x52\xc6\x60\x83\xba\x8f\x5f\x2a\x45\xe6\xc7\xa2\xd9\x72\x69\x98\x5f\xc0\x87\x2d\x55\x90\x16\x3c\xb6\xea\xa8\xad\x28\x58\x62\x71\x5b\x23\xc4\x84\x31\x17\x06\xab\xb3\xa2\x59\xce\x30\x43\xae\x51\x46\x15\x3f\x82\x44\x5d\x48\x4e\xf9\xa6\xbf\x22\x55\x20\x91\x24\x20\x38\x7b\x02\xc2\x93\x9e\xfc\x4c\x24\x34\xa5\x98\x44\x33\xa3\xc0\x70\x27\x81\x80\xe7\x6e\x24\xec\x4b\xde\x5b\x5c\x44\xb6\x00\xf1\x60\x8e\x51\x44\xaf\x51\x7b\x87\xa9\xd9\x43\x4b\x44\x53\x43\xb3\xaf\x8f\xcd\x69\x0b\x22\x8b\x82\xae\x50\x47\xee\x10\xf7\x44\x5d\x82\x7d\x85\xb9\x1a\xc7\x5c\x0d\x31\xa7\x5c\x8b\xd3\x30\xb7\x18\x35\xa0\x0b\x1e\xe3\x02\x72\x86\x44\x21\x64\xe4\x01\x41\x15\x12\x81\x30\x06\x56\xf0\x96\x28\x58\x23\x72\x78\x94\x54\x6b\xe4\xb0\xc6\x54\x48\x34\x3a\x78\x38\x07\x4a\x36\x70\x2e\xa0\xb6\x84\x7a\xf3\x15\xa4\xd1\xdd\x10\x48\x91\x85\x66\xe7\x87\xe3\xcd\x94\xcf\x9d\xe2\x6f\xcb\x25\xfc\x4c\xf5\xb6\xe3\x06\x16\x52\x92\xe7\xec\x09\x3a\xf1\x06\x76\x26\x4a\x83\xc1\xd5\x05\x5b\x0b\xec\xa8\x6b\x59\x1c\xfa\x82\x83\x5d\xd7\xc3\x42\x30\x5b\x18\x1a\x88\x19\x6d\x06\x7f\xc2\xa7\xd5\x30\x32\x2e\xea\x79\x9b\x3a\x56\xb0\x5b\x78\x23\xea\x78\x6a\xeb\x67\x75\x36\x16\x60\x8b\x5d\x10\xfa\xb8\x6e\x9e\xde\x92\x1c\xf6\xb3\x67\x5e\x85\xce\xf8\x7e\xf6\xec\xd9\xf1\x88\x7f\x2c\xfa\x9d\x1a\x01\x9f\x3d\x9b\x77\xa3\xfc\x0a\x7c\x8d\x62\x71\xbb\x49\x83\xe0\x79\x17\xc6\x80\x53\x16\x86\xd1\x2b\x86\x59\x10\x2e\xbc\xb2\x7e\xd7\xdd\x87\x72\xd2\x98\xcc\x62\x2a\x27\x31\x76\x22\xb9\xc6\x2c\x67\xa6\x02\x9b\x53\x13\x79\x52\x33\x3f\xb7\x4e\x71\xc7\x4c\x54\xaa\xb4\xbc\xd8\x45\xd7\x35\xc1\xb8\x80\x14\x89\x2e\xe4\x24\xfb\x8f\x05\x8f\x27\x38\xcd\x59\xdc\x73\x7c\x6c\x73\x06\x63\xe0\x85\x76\x10\x1f\xa7\xc5\x7c\xc6\xea\x55\xb4\x38\xca\xda\x36\x35\xf3\xdb\x16\xab\x3d\xe4\x1a\xa7\x34\xa0\x53\x9e\xe0\x47\x88\xe0\x4f\xf5\xb8\xa5\x55\xed\xb9\x3f\x9b\x39\x53\xec\x04\xb5\x6e\xfd\xb3\xab\xb8\xbc\xfa\xf7\x6d\xa7\xed\x98\x16\x5c\xc2\xf7\xce\x1f\xbb\xe3\xfb\x41\xae\x0b\x27\x77\xd3\x1c\xe3\xd4\x5e\xba\xd6\x6c\x49\x52\x3e\xdc\x93\x2b\x34\xbc\x3a\x65\xf9\xa3\x97\xdb\xd4\x1a\x46\xa5\x37\x42\x28\xbc\xc9\x4d\x17\x40\x05\xff\x81\x31\x58\x0b\xc1\xa6\x91\x30\x0b\x79\x18\xba\xac\x93\x90\x74\xe4\x55\x1b\xb6\x61\x85\x4a\x5d\x10\x76\xd2\xe2\x29\xef\xaf\x5e\x95\x30\x29\x8f\xee\x68\x56\x30\xdb\xd5\xf8\xb9\xbe\x64\xa3\x5b\xca\x4f\x55\xee\x80\xae\x26\x1c\x7d\x96\x9a\x0c\xb9\x55\xc1\xcb\xe9\xea\x69\xa3\xf1\x94\x8a\x83\xe5\x7a\x5a\x8e\x9c\x50\xb5\x0a\x9c\xb1\xcc\x59\xc7\xd7\x7b\x9c\xf6\xcc\x26\xb0\x1c\xf3\xcb\x94\x0f\xed\xd7\x4f\x3c\x54\xdb\x1a\x09\xe5\x26\xbb\xe6\x7e\x5f\xd6\xca\xdd\x06\x1f\x8c\xe6\xbe\x3d\xc9\x89\x54\x98\x78\xab\x77\x3e\xd1\xe3\x30\x0c\x65\xd9\xf5\x0b\x1b\xcb\xe0\x97\xdf\x0c\x68\xce\x04\x96\x4b\x78\x8f\xbf\x17\x54\x62\xe2\x66\xc7\x8e\xc0\x4c\x54\xea\xd6\xd4\x1e\xb1\xbf\x13\x65\x17\x25\x54\x8e\x01\x0d\x6d\xa8\x0f\x91\x35\xd3\x13\x75\xb4\xd7\xd6\x95\x10\x84\x9d\xa6\x6d\x4d\xfd\xa5\xb5\x3d\xae\x6f\x75\x8c\x52\xe1\xed\xc4\x59\xda\x82\xc9\x52\xb8\x8a\x46\xd9\x24\x61\x2b\xd0\xe7\x13\xe7\xef\xaa\x91\x43\x52\x03\x91\xeb\xea\x8c\x43\x08\x26\xe4\x2c\x00\x4d\x3f\x5c\x15\x91\x12\x55\xc1\xb4\x41\x6d\x82\xbe\xa9\xab\x2c\xee\x2b\x30\xab\x54\xa5\x93\xfd\x67\x9a\xc1\xfb\x05\x58\x77\x75\xa7\x61\x15\x69\x18\xd5\x23\xd5\xf1\x16\x76\xd1\x4f\xf8\xd4\x1a\x1e\xb7\xc0\x33\xad\xd0\xfc\xc5\xa6\xf0\xae\x4f\xa5\x55\xf3\xad\x6a\x12\xdf\x5d\xb8\xdd\x46\x47\x8c\x61\xdf\x61\xb3\x2b\x08\xae\x29\x2f\xb0\x33\x51\x76\x9e\x4e\x13\x7d\x09\x5a\xf6\xc4\x78\xc6\xc3\x5c\x3b\x77\xe1\x11\x05\x7d\xe3\x0b\x3b\xa0\xb5\x3c\x66\xda\x6b\xce\xf4\x9c\x6f\x08\x1f\x40\xb8\x6c\x3b\xc2\x19\x66\x4b\x53\xf8\xee\x5c\xa8\x5a\x9d\xc6\x98\x9f\x96\x8b\xe6\xe6\xcb\x84\x80\x6a\x49\x7b\xfd\xb5\x37\x5d\x91\x5a\xfd\xf2\x9b\xd2\x92\xf2\xcd\xde\x37\x16\x9d\xd3\x7c\x51\x96\x50\xd6\x3b\x82\x91\xb2\xc1\x6b\xe0\x14\x5f\x00\xa7\xec\x48\xb2\x74\x55\x1f\x34\x8d\xcc\xa1\xca\xaf\x26\xb3\x5d\xf3\x20\x7d\x7a\x83\x7e\x89\x29\x29\x98\xae\x11\x70\x2d\x15\x55\x66\x5d\x33\xe1\x53\x9d\x09\x4a\x2a\xc7\x98\xa6\x34\x06\x62\x0b\x72\x2b\xc1\x26\xcc\x71\x19\x9d\x84\x39\x5a\x8b\x58\xc5\x3a\xdd\xd9\x44\x95\xe1\x13\xed\x88\xd1\x8c\x9b\xca\x94\xf8\x7e\x3b\xd2\x69\x29\x72\x0e\x17\xbb\x83\xd7\x4e\x83\xf3\xf8\xba\x0b\x97\x9a\xe3\x48\xe9\xf2\x47\x14\x29\xa7\x95\x29\x5f\x67\x41\x72\x44\xb3\x5e\x79\xfd\x7f\x52\x29\x05\x0a\x9e\xd7\x93\xe1\xff\x64\xdd\xb4\x5c\x02\x55\xff\xe0\xaa\xc8\x73\x21\x35\x26\x16\x00\x89\xb1\x90\x89\x82\xc7\x2d\xea\x2d\x4a\x88\x0b\x29\x91\xbb\xb0\x67\x5c\xad\x68\xe8\xa3\x5a\xd2\x50\xcc\xea\x12\x52\xc2\x14\xce\x8e\x55\x69\xdf\x6a\xb1\xcf\xa8\x14\x46\xf5\x1c\x29\x1f\xbe\x95\x61\x7f\x0c\xb8\xbd\x90\xf7\xd5\x60\xbb\x5c\xc2\x75\x0a\x85\x42\x09\xc8\xc9\x9a\xa1\x4b\x9d\x3b\xaf\xae\xdd\x82\xbf\x50\x5b\xc0\x23\x42\x4c\x4c\x3d\xa8\x46\xa8\x6c\x84\xa4\x3a\xea\x2b\xaf\xa2\xea\x42\x2e\xea\x5d\x02\x7d\xfa\x34\x31\xd9\xc4\xb4\x13\xc9\xce\x83\xe5\xb3\xed\xe9\x4b\xdb\xd4\x89\x67\x34\x8c\xa5\x3d\xdd\x46\x4c\xd1\xd7\xa6\xab\xf3\x04\x95\x4d\x70\x36\xfd\xc2\x90\x7e\x7f\xd8\x27\x5a\xfc\x13\x86\xc5\x84\x50\x26\xed\xf8\x8b\xc5\x8e\x6d\xd9\xcc\x4b\x37\x5c\x48\x97\x7a\x5b\x8b\xdb\x96\x22\x9a\x8d\x9b\xd5\xf0\x0a\xb6\x6b\x32\xc3\x7b\x56\x9f\xea\x8f\xee\xa6\x39\xf4\xb3\x1a\xa1\xbe\xe2\x7b\x33\xb8\xda\x75\xea\xf1\xe5\x12\xae\xb6\x18\x3f\x80\xec\xdc\x48\x44\xdf\xfa\xba\xe1\x85\x7e\xf3\x7e\xe3\x8b\xf6\x76\x27\xb7\x44\xee\x4d\xff\x1b\x11\x0f\x5f\x95\x35\xdd\x12\x33\xd3\xf7\x95\xae\x93\x7d\x53\x8d\x06\x53\x83\x0f\x06\x86\xaf\x74\x8e\x8b\x19\xbd\x50\x3e\x86\xe4\xe7\x76\x65\xa7\x34\x65\x6d\xff\x72\x97\xe5\xbd\x17\xaf\xee\x4d\x77\xf7\x3d\xb7\x75\xfd\x58\xa2\xd9\x3c\x01\xff\x1d\x14\xac\x9f\xaa\x38\x16\xb5\x4b\xec\x8b\x9c\x97\x65\xd8\x5a\x28\xb0\x57\xd0\xd1\x2d\x91\x24\x53\xd1\x9d\x35\x4c\x43\xe1\xc7\xdf\x5b\x2b\x6b\x4f\x38\x57\x88\xf5\x47\xb3\x17\xbf\x5a\xf4\x37\x12\x3f\x6c\xa4\x28\x78\xe2\x3f\x0e\xf0\x46\xaa\xa2\x66\xa5\x9f\xa9\xde\x5e\x39\xfa\x20\xd6\x1f\x17\xd0\x59\xf9\x8a\x30\x86\xd2\x44\xf9\x3e\x14\x2d\xbe\x09\x54\x0e\xed\xaf\xb7\x6a\xad\xb1\x1f\xeb\x69\x71\xf2\xfe\x13\x4c\x51\xda\x33\x08\xc2\x6e\xf9\x7d\x91\x13\xbd\xad\xce\xd9\x8b\xbd\x25\x7a\xeb\x36\x38\xe2\x1e\x84\x27\x10\xe0\xef\x9e\x71\x3e\x0f\xfd\x13\x87\xb9\xff\x5e\x60\x1e\xb6\xd9\xa0\xee\xd5\xf4\x16\x2e\x61\xbe\xf8\x75\xfe\xeb\x7c\xde\x17\xdc\xcb\x69\x28\x4d\xc2\x52\x51\x2a\x64\x46\xb4\x8d\x46\xc1\xdc\x6d\xd1\xd8\x62\x59\xce\x6d\xcb\xd4\x08\x2e\x4b\xf0\xdf\x6d\x04\x61\xe3\xf2\x53\x2f\xbd\x5c\xc6\xaa\x6a\x9a\x41\x8a\x32\xad\x0e\x17\xda\x67\xb3\xa4\xc9\x58\x24\xd6\xc0\xe8\x03\x82\x36\x26\xdd\xf0\x79\xfa\xe6\xb3\x18\xdf\x1e\x99\x88\x3d\x2c\x68\x3a\xf9\xeb\xfb\xef\x0f\x92\x8c\xa6\x30\x87\xce\x3b\x7c\xac\xc9\xde\x09\x7d\xdd\x2c\x5e\xe3\xd5\x38\x6f\x59\xce\xc3\x5e\x52\x38\x10\xb3\xab\x2f\x07\xd0\x75\x0b\xee\x0b\x11\x91\x20\xcc\xbb\x71\x39\x33\x63\x55\x4f\xd1\x50\x0d\xc3\xb3\x01\x42\x44\x66\x32\xba\xb6\x99\xcb\x72\x96\x65\x10\x0e\xb6\x55\xe7\xa3\x46\xe0\x35\xdf\x11\x46\x7d\x52\x7a\xf5\x31\xc7\x58\x63\xb2\x02\x33\xd5\x92\xb5\x80\x1f\x62\x83\xdd\x0a\xdc\x4a\xfd\x9c\x7e\x60\xbf\xee\x1a\xe8\x12\x48\x9e\x23\x4f\x6c\x97\xae\x16\xa0\x22\x1f\x92\xec\x15\x5e\x2b\x34\x44\x51\xe4\xc0\xdc\x11\x69\xfa\xea\xa9\xf4\xea\x84\x8b\x5c\x2f\x6a\x83\x3e\x78\x57\x60\xd7\xad\xbf\x56\x32\x2c\xdf\x5d\x9a\x84\x39\xc8\xe7\xed\xea\xa2\x17\xba\x9a\x58\x7d\x45\x32\x34\x07\x30\x12\xbd\x3e\x48\x9a\xbd\x21\x4a\xfb\x30\xf6\x8a\x27\xa6\x41\xdf\x5e\x89\x2c\x23\x65\x69\x34\x0e\x0f\x24\xe9\x7e\xfa\x3b\x94\xa9\xdb\x73\x63\x89\xa6\x8a\x0e\x47\x92\x8d\x77\xda\xa3\x09\xc7\xd1\x55\xe4\xe7\x26\x1e\xc3\xf6\x5f\x48\x3e\xff\x89\x85\x9d\x6c\x65\x55\x58\x73\x35\xb5\xbd\x4e\x82\xc7\x2d\x65\x08\x5b\xc2\x13\x46\xf9\x06\xec\xb9\x99\x0d\xfa\xcf\xa5\x2a\x36\x6b\xa0\xf7\x27\x9b\x67\xbf\xb6\xb4\x7a\x4f\x98\xde\xd9\x56\xe7\x0c\x7b\xf0\xa1\x14\xe5\x54\xd7\xb1\xe2\xc4\x4f\x86\xcc\x5f\x1d\x4c\xde\xe3\x86\x2a\x8d\x72\xea\x56\x5d\x06\xa6\x6d\x5b\x98\xa0\x3a\x49\x12\x8e\xdd\x7d\xba\x52\xbe\x12\x7f\xd7\x7c\xd0\xf5\x96\xe4\x5e\x66\xf7\x2b\x2f\xe3\x59\xff\x0e\x00\x00\xff\xff\x8c\x4c\xe2\xa0\x64\x2e\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3c, 0xb0, 0xa8, 0xc8, 0xa, 0x3a, 0x97, 0x2e, 0x33, 0x71, 0xf4, 0x81, 0x82, 0x77, 0x92, 0xe1, 0x21, 0x55, 0xba, 0x4, 0xea, 0x64, 0x8f, 0x9c, 0x7b, 0xce, 0xa, 0x5c, 0xa1, 0x89, 0x66, 0xa9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl": {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl": {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl": {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl": {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl": {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
