// Code generated by go-bindata. DO NOT EDIT.
// sources:
// cmd/definitions/tmpl/function.tmpl (567B)
// cmd/definitions/tmpl/info.tmpl (1.702kB)
// cmd/definitions/tmpl/object.tmpl (1.907kB)
// cmd/definitions/tmpl/operation.tmpl (1.698kB)
// cmd/definitions/tmpl/pair.tmpl (502B)
// cmd/definitions/tmpl/service.tmpl (11.358kB)

// +build tools

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\x8f\x25\x87\xae\xec\xe6\x07\x08\x9e\x8a\x82\xb0\xc8\xa2\xde\x25\x64\xa7\x6b\xb0\x99\x94\x66\x5a\x17\x62\xfe\xbb\xa4\x55\x17\x11\x0f\xde\x3c\x25\xcc\xcc\x7b\xf3\x3e\x26\xa5\x2d\x06\xc3\x47\x82\x7a\xda\x40\x4d\xb8\xbc\x82\xd2\x37\x23\xdb\x88\x9c\xab\xd2\x76\x2d\x38\x08\xd4\xa4\x6f\x7d\xdf\x91\x27\x16\x3a\x7c\x36\x55\xcb\x2f\xb3\x66\xd2\x77\xc6\x13\xde\x20\xa1\x31\x9e\xba\x65\xa0\x88\xd5\xa4\x77\xc1\x9a\xb9\xd2\x8e\x6c\x51\x47\x5c\xa4\x04\x75\x56\xec\x4d\x5c\x06\xd6\x48\xa9\x58\xe6\x5c\xa7\xa4\x26\xbd\x37\x83\xf1\x51\x3f\x0e\xce\xef\x4c\x14\xfd\x20\x83\xe3\xe3\x35\x1f\xe2\xab\x93\xe7\x26\x78\x6f\x72\x46\xe8\x05\xbd\x71\xc3\x2f\xa6\xa5\x5c\x62\x7e\xdf\xb4\x2c\xb8\xa7\x38\x76\x12\x3f\x8c\xe7\x00\x15\x00\xf4\x86\x9d\xad\x57\x05\xdc\x9d\xa9\x57\xeb\x6a\xa6\xa2\x2e\xd2\x1f\x71\xac\x9c\x60\x03\x0b\x9d\x44\x37\xcb\xbb\xc1\x3f\x66\xdc\x82\xf8\xeb\xca\x3f\xbe\xef\x01\x00\x00\xff\xff\x41\xc8\xae\xbf\x37\x02\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xfc, 0xb, 0xf4, 0xfb, 0xf, 0x94, 0xca, 0x64, 0x7a, 0xb8, 0x48, 0xf9, 0x69, 0xf1, 0x88, 0x46, 0x59, 0xd3, 0xbc, 0x0, 0x4e, 0xe7, 0x8, 0x1e, 0xdf, 0x27, 0x59, 0x81, 0x75, 0x52, 0xa2}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xe5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x92\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\xe4\x24\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x13\xc7\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x23\x5d\x63\xa9\x37\x31\x32\x99\xc7\x39\x15\x42\x09\x27\xb4\xb2\xef\x70\x7a\x85\xcb\xab\x1b\x9c\x9d\x9e\xdf\x2c\x58\xc5\xb3\x15\x5f\x12\xdc\xba\x22\xcb\x98\x90\x95\x36\x0e\x33\x06\x00\x93\x42\xba\x09\x8b\x18\x6b\xdb\x03\x18\xae\x96\x84\xe9\x6a\x8e\xa9\x50\x85\xb6\x78\x9b\x60\x71\x1e\x56\x17\xbc\x82\xf7\xac\x6d\x31\xb5\x64\x1a\x91\xd1\x25\x97\x14\xf6\xa7\x2b\xdc\xc1\xe9\x13\x2e\xa9\x0c\x47\x58\x1c\xe3\xbd\xa0\x32\x87\x50\x39\xdd\x42\x28\xb4\xed\x76\x92\xf7\x48\x85\x63\x99\x56\x36\x40\xec\xe8\x36\x5d\xcd\x5e\xdd\xfb\x0e\x71\x37\xfd\x3c\xd4\x0d\x24\xcd\xa2\x83\x08\xf2\x9f\xb8\xcd\x78\xd0\x47\x82\xa3\xe3\xe3\xb0\xbb\xea\x81\x0f\x40\x2a\x0f\xcb\x88\xb1\x60\x00\x76\x7b\x18\xa7\x5b\x67\xea\xcc\xa1\x1d\x94\x37\x6c\xdf\x9e\x62\x0b\x18\x37\xeb\xaa\xaf\xe5\xfd\xd6\x97\xfb\x33\x1b\x86\x2e\x8e\xe3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\xd3\xef\x94\x39\x34\xbc\xac\x69\x8e\x43\x48\xe2\xca\x42\x69\x07\x4b\x6e\x8e\xa3\xe1\x83\x25\xd7\x95\xea\xea\x08\xe5\xde\xbc\xee\x42\x09\xc9\xab\x2f\xd6\x19\xa1\x96\x5f\x85\x72\x64\x0a\x9e\x51\xeb\xd9\xa0\xfc\xbc\xd7\x61\x57\x14\x81\xfe\xec\xb6\x9b\x10\xef\x59\x51\xab\x0c\x33\x89\x57\xcf\xba\x16\xe1\x03\xb9\xbe\xf1\x53\x61\xab\x92\xaf\x07\x37\x66\xd1\xd8\x8f\xc1\x57\x43\xae\x36\x0a\x72\xf1\xc0\xbe\x40\xfa\xa7\x9a\xd7\x4f\x68\x36\x63\xcd\xe8\x37\x85\x06\xa6\x47\x60\x90\xa0\x19\xf1\xb2\x61\xa0\x4a\xdb\xb1\xfe\x03\x77\x66\x23\xd4\x39\x52\xad\xcb\x68\x20\x12\x05\xe4\x22\xdc\xf0\xcb\x3d\x9f\xc0\x8b\x04\x87\x43\x8d\xe7\xdd\x9e\xc3\x99\x9a\xba\x83\x7e\xbb\xd1\x2d\xa8\x3b\xfc\x20\xa3\x3f\x87\x79\xec\x12\x0a\x5e\x5a\xda\xe7\x96\x2e\x6a\xeb\xf6\x9b\x8e\xbf\xee\x3b\x19\xf7\x5d\x71\x25\xb2\x59\x21\xdd\xe2\xba\x32\x42\xb9\x62\x36\x79\x8c\xf5\x23\xa5\x3c\xbd\x7f\xb9\xbf\xee\x5e\x6c\x9e\xdd\x24\x8a\x1e\x5a\xf4\xdf\xcc\x6e\x6f\xe5\x5d\xb2\x9f\x97\x8f\x8e\x7d\xff\x0f\xdb\xf9\xa5\xdd\x2f\x7f\x06\x00\x00\xff\xff\x26\xf5\xd0\xb3\xa6\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x9d, 0xdc, 0x29, 0x17, 0xc8, 0x8a, 0x14, 0x25, 0x13, 0xa5, 0x85, 0x13, 0x6, 0xf, 0xb3, 0x4a, 0x21, 0xd1, 0x20, 0x4e, 0x6f, 0x92, 0x60, 0xe2, 0x6e, 0x29, 0x96, 0x4a, 0xee, 0x99, 0x66}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6f\xdb\x36\x10\x7e\x36\x7f\xc5\x37\x23\xd8\xa4\xc1\x91\x92\x6d\xd8\x43\x16\x3f\x0c\x71\xb6\x06\x68\xec\x02\x76\xfb\x4e\x53\x27\x9b\x8d\x44\x0a\x24\xe5\xda\x75\xf4\xdf\x0b\x4a\xb2\x23\x27\x4e\xe1\xa0\x2f\x7d\x23\x79\x77\xdf\xdd\xf7\xdd\x91\x8c\x63\xdc\xe8\x84\xb0\x20\x45\x86\x3b\x4a\x30\xdf\x60\xa1\xf7\x7b\x88\x3c\x89\x13\x4a\xa5\x92\x4e\x6a\x65\xff\xc1\x68\x82\xf1\x64\x86\xdb\xd1\xdd\x2c\x62\x05\x17\x0f\x7c\x41\x70\x9b\x82\x2c\x63\x32\x2f\xb4\x71\x08\x18\x00\xf4\xd3\xdc\xf5\x9b\x95\x93\x39\xb5\x4b\xbb\x51\xa2\xcf\x42\xc6\xe2\x18\xff\x49\xca\x12\x48\x95\xd0\x1a\x52\x41\xcf\x3f\x93\x70\x98\x4b\xc7\x84\x56\xd6\xe3\x6c\xb7\xe7\x30\x5c\x2d\x08\x67\x0f\x03\x9c\xad\x70\x35\x44\x34\xa9\xfd\xee\xc9\x71\x54\x55\x8d\xda\x44\xde\x79\xa0\xed\x16\x67\xab\x68\xcc\x73\xc2\x23\x9c\xfe\xc0\xad\xe0\x19\xaa\x0a\xa5\x54\xee\xef\xbf\x30\xc4\xe5\xf5\xb5\x77\x7a\xf0\xc1\x1e\x9f\x54\xe2\x97\x4d\x49\x0d\x36\xa4\x85\x5b\x12\x6c\xce\xb3\x8c\xac\x43\xa9\xa4\xf3\x25\x2e\xf4\xb9\x75\xda\xf0\x05\x45\x2c\x8e\x7d\xc0\x78\x32\xbb\x9d\x5e\xf9\x15\x70\xde\x86\xff\x66\x91\x7a\x6a\x16\xd3\x77\x93\x8f\xef\x47\x50\xda\x61\x4e\x10\x4b\x4f\x25\x81\x2e\x9d\x95\x09\xc1\x92\x59\x49\x41\x36\x3a\x0c\xc7\xcd\xbf\x63\x2f\xb1\x8f\xd0\x85\xa4\xe4\x99\x59\x5a\x08\xad\x44\x69\x0c\x29\x07\xcb\x53\x8a\x98\x6f\xc0\xce\x6e\x9d\x29\x85\xc3\xf6\x54\xf5\xbc\x9b\x4c\xbd\x6c\x23\xb2\xc2\xc8\xc2\x77\xfa\xc9\xf8\xaa\x61\x2f\xdd\x93\xdf\x6c\x53\x50\xad\x7d\x55\x75\x4e\x9e\x29\xcd\x7a\x71\x0c\x91\x49\x5f\x7d\x2b\xf4\x6e\xa7\xf0\x65\x29\xc5\xb2\xc3\x94\x67\x72\x45\x11\xeb\xb5\x1e\xd3\x46\x7d\xc3\xea\xa4\x71\xec\xa7\x05\xa5\xa5\x04\xdc\x82\xfb\x5d\xce\x0b\xa4\xda\xec\xa6\x69\xc5\xb3\x92\x06\xb8\x40\x4e\x5c\xd9\xba\x13\x96\xdc\x00\x97\xed\x81\x25\x57\x43\xd5\x38\xf5\x88\xb0\x5e\xa2\x15\xd5\x9b\x3f\xff\x60\xbd\xdc\x5b\xfd\xd4\x46\xf7\xa5\xa3\x35\xab\x18\x3b\x45\xd8\x27\x51\x6f\xd7\xf5\xa5\xa8\x2a\x96\x96\x4a\x20\xd0\xf8\xbd\x71\x0d\xf1\x3f\xb9\x56\x5f\x69\x8b\x8c\x6f\x5a\xe9\x82\xf0\x50\x3c\x6c\xeb\x12\x0d\xb9\xd2\x28\xe8\xe8\x85\xd6\xbe\xa8\x17\xe0\xd3\x57\xc0\x57\x87\xe0\xe1\x2e\xa2\xcd\x72\x04\x1e\x43\xac\x0e\x2a\x60\x6d\x3f\x33\x5b\x67\x7f\x0b\xb1\xe0\x20\xf9\x00\x73\xad\xb3\x70\x9f\xda\x3a\xee\x82\xb0\x69\xae\x4c\xa1\x23\xdf\x96\x5f\x4f\xba\xdf\xbf\x0c\x71\xd1\xe2\x7c\x5f\xac\x01\x9c\x29\xa9\x76\xac\x58\x97\x56\xa7\xb2\x47\x7c\x25\xa3\x3f\xf9\xd9\xa9\x23\x52\x9e\x59\x3a\xaa\xf2\x7d\x69\xdd\xdb\xda\xf8\x43\x2c\x87\x87\x2c\x0b\xae\xa4\x08\xd2\xdc\x45\xd3\xc2\x48\xe5\xd2\xa0\xdf\xce\x7d\x07\xa1\xaa\xfc\x45\x6a\x27\xbf\x1f\x86\x2d\xf5\x9f\x63\xa4\x1a\xf2\x8f\xc3\x53\xd8\x1f\x9d\xc1\xe6\x4d\xe9\x3e\x2f\x2f\xca\x16\x99\x56\x14\xac\x3b\x27\xdb\xfd\x13\x76\xca\xef\x72\xb4\xfc\xf5\x31\xd1\x9e\x3d\x8c\x1d\x86\x75\x80\xff\xda\xaa\x6f\x01\x00\x00\xff\xff\x94\x03\xb8\x29\x73\x07\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0x64, 0x33, 0x31, 0x2b, 0x9e, 0xa5, 0x1c, 0x46, 0x19, 0x57, 0xa8, 0x78, 0xb3, 0xc9, 0x92, 0xd7, 0x11, 0xee, 0xde, 0xf1, 0xa5, 0xf2, 0x26, 0x22, 0x58, 0x32, 0x8d, 0xfb, 0xb5, 0x58, 0xdc}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4d\x8f\xd3\x30\x10\xbd\xfb\x57\x8c\xac\x1e\x12\x69\x49\xef\x48\x7b\x82\x45\x5a\x09\x75\x2b\x10\xe2\x88\x5c\x67\xda\xb5\x48\x6c\x33\x9e\xec\x87\x82\xff\x3b\xb2\x93\x76\xd3\xaa\x10\x15\x10\xe2\x16\x7b\x66\xde\x9b\xf7\xc6\x13\xaf\xf4\x57\xb5\x43\xe0\x67\x8f\x41\x08\xd3\x7a\x47\x0c\x85\x00\x00\x90\xda\x59\xc6\x27\x96\xc3\xc9\x38\x29\x4a\x21\xfa\xfe\x15\x90\xb2\x3b\x84\xc5\x97\x2b\x58\x18\x78\x7d\x0d\xd5\xad\x65\xa4\xad\xd2\x18\x20\x46\xd1\xf7\xb0\x30\xd5\x5b\x0c\x9a\x8c\x67\xe3\x6c\xba\x4c\x0c\x30\x46\x4c\xf0\x8d\x7a\x5e\xa9\x16\x21\x46\x30\xfb\x62\xe8\x33\x53\x62\x30\x5b\x70\x04\x05\x7e\x4b\xf9\x39\x51\x06\xa4\x07\xa3\x91\x64\x79\x72\xcf\x8e\xd4\x2e\xdd\xc7\x98\xeb\x3f\x32\x19\xbb\x2b\x4a\x08\xf9\xe3\x80\x89\xb6\x4e\x8d\x8c\xe7\xa9\x08\xe7\x93\x8a\x85\xa9\xee\x7c\x16\x90\x32\x96\xcb\xdc\xad\xf3\x03\xcd\x77\x60\xb7\x56\x41\xab\x26\xb5\x3c\x46\x4e\x24\x8e\xc0\xe7\x6b\x8a\x31\xf2\xce\x51\xab\x78\xad\x48\xb5\x89\xab\x84\xe3\xc0\x07\x0c\x5d\xc3\xe1\xb3\xe1\xfb\xf5\x30\x9b\x23\x95\x32\x95\x4c\x5d\xb2\x8e\x73\xf5\x7b\x37\xd0\xcc\xf6\x9e\x90\xdf\x0c\x83\xfd\x1d\x19\x93\xf2\x42\xf3\x13\x8c\x6f\xa4\x1a\xef\xae\xfe\xba\xca\xfd\xd8\x8e\x4f\xf9\xd8\x76\x81\x6f\xda\x0d\xd6\x9f\xac\x69\x7d\x83\x2d\x5a\xc6\xfa\xdc\x1b\x2b\x4a\x11\x85\x58\x2e\x61\x36\x33\x83\xc2\x06\x01\x13\x70\x8d\x35\xb0\x83\x7b\xf5\x80\xb0\x75\xf4\xa8\xa8\x06\xed\x5a\xaf\xd8\x6c\x1a\x84\x03\x96\x4a\xde\x85\x6a\x78\xe4\xf3\x1c\x81\xa9\xd3\x0c\x7d\x14\x62\xdb\x59\x0d\x45\x98\x2f\x2a\x2f\x92\x7b\x29\xf6\xc9\xce\x8c\x9b\x48\xc8\x1d\x59\x90\xb3\x00\x32\xd9\xfb\xeb\x9d\xba\xa0\x99\x7f\xb2\x44\xc7\x3f\x9b\xb3\x6b\x84\x44\x70\x0d\x2b\x7c\xbc\xf3\x48\x79\xc4\x2b\xc7\xb7\x2f\xdd\xdf\x10\x39\x2a\xe4\xb4\xdb\x18\x65\x79\xfa\xc3\x79\x71\x52\x44\xf1\x33\xbe\x0b\xec\xf9\x0f\x76\x73\x34\xef\x4f\x0c\x9a\x38\xb2\x37\x6a\xfa\x75\x70\xef\x47\x00\x00\x00\xff\xff\xbd\xe8\x37\x32\xa2\x06\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc2, 0xaf, 0x9a, 0xb8, 0xf7, 0x9f, 0x1b, 0x53, 0xaa, 0x36, 0x95, 0x6d, 0xe6, 0x56, 0x7d, 0xb9, 0x8e, 0xd7, 0x4, 0x74, 0xce, 0x5b, 0x9, 0x4f, 0xb6, 0x92, 0xc, 0x1e, 0x49, 0x5, 0x4c, 0x4c}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x6b\xe3\x30\x10\x85\xef\xfa\x15\x0f\xe3\x43\x02\x89\x75\xd9\x53\x96\x3d\x6d\xf6\xb0\x14\x92\x1c\x42\x7b\x2c\x8a\x3c\x51\x44\x6c\x49\xc8\x63\xb7\xc6\xf5\x7f\x2f\xb2\x93\x40\xe9\xa5\x3a\xcd\x7c\x33\xef\xf1\x46\x52\xe2\xaf\x2f\x09\x86\x1c\x45\xc5\x54\xe2\xd4\xc3\xf8\x47\x0f\x5d\x97\xb2\xa4\xb3\x75\x96\xad\x77\xcd\x6f\x6c\xf7\xd8\xed\x8f\xf8\xb7\xfd\x7f\x2c\x44\x50\xfa\xaa\x0c\x21\x28\x1b\x1b\x21\x6c\x1d\x7c\x64\x2c\x04\x00\x64\xda\x3b\xa6\x77\xce\xc4\xdc\x1a\xcb\x97\xf6\x54\x68\x5f\xcb\x13\xf5\xde\x95\x0d\xfb\xa8\x0c\x49\xe3\xd7\xf7\xb2\xfb\x25\xc3\xd5\xc8\x0b\x73\xd0\x95\x25\xc7\xd9\xa4\x2d\x7e\xac\xe6\x3e\x50\x93\x09\xb1\x14\x62\x18\xd6\x88\xca\x19\x42\xfe\xba\x42\xde\x61\xf3\x07\xc5\x21\x05\xc5\x38\x4e\xd3\x3c\x38\x55\x53\xe2\x79\x57\xec\x52\xf9\x01\xf6\x07\xd5\x68\x55\xa5\x1d\x29\xf1\x62\xf9\x32\x0c\xf7\xcd\x71\xc4\x9b\xad\x2a\xa8\x10\xaa\x1e\x89\xdf\x74\xe3\x88\x4e\x55\x2d\x81\x3d\xf6\x61\xfa\xa9\x42\x48\x29\xe6\x95\x2d\x35\x3a\xda\x09\x27\xdb\x73\xeb\xf4\x37\xe3\x45\x77\xf3\x3b\xf6\x21\xf5\x4b\xa4\xa8\x18\xa6\xfb\x23\x71\x1b\xdd\x44\x66\x90\xde\x13\xf5\x1b\x64\x5f\x42\x64\xab\xc7\xf4\x39\xc5\xd9\xa0\x9b\xc9\x28\xe6\x8b\xc9\x95\x29\xc1\x67\x00\x00\x00\xff\xff\x81\x9d\x53\x8d\xf6\x01\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1b, 0x1a, 0xbf, 0xf0, 0xe9, 0x47, 0x35, 0xe6, 0xa7, 0xc, 0xe6, 0xba, 0xc0, 0x5e, 0x39, 0xda, 0x2d, 0xb9, 0xd0, 0xee, 0xbc, 0x1, 0xc0, 0xd1, 0x5e, 0xa2, 0xbf, 0x4d, 0xcd, 0x4, 0xe9, 0xc0}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\x5d\x6f\xdc\xb8\xf1\x7d\x7f\xc5\x9c\x60\x04\xbb\xc1\x46\x6a\x81\x3e\x6d\xe1\x87\xab\x93\x4b\x8d\x4b\x13\x23\xce\xf5\x1e\xee\x0e\x06\x2d\x8d\x76\x59\x4b\xa4\x8e\xe4\xae\x63\x6c\xf4\xdf\x8b\x21\xa9\x6f\x69\x3f\xd2\x14\x97\x16\xf1\x8b\x57\xe4\xcc\x70\xbe\x3f\x28\x45\x11\x5c\xc9\x04\x61\x8d\x02\x15\x33\x98\xc0\xfd\x13\xac\x65\xfd\x0c\x3b\xce\x20\xce\x93\x28\xc1\x94\x0b\x6e\xb8\x14\xfa\xaf\xf0\xf2\x1d\xbc\x7d\xf7\x01\x5e\xbd\xbc\xfe\x10\xce\x0a\x16\x3f\xb0\x35\xc2\x7e\x0f\xe1\x5b\x96\x23\x94\xe5\x6c\xc6\xf3\x42\x2a\x03\xf3\x19\x00\x40\x10\x4b\x61\xf0\xa3\x09\xdc\x13\x97\xc1\xcc\xfd\x5a\x73\xb3\xd9\xde\x87\xb1\xcc\xa3\x7b\x7c\x92\x22\xd1\x46\x2a\xb6\xc6\x68\x2d\x5f\x54\x3f\x77\x7f\x89\x8a\x87\x75\x84\x22\x29\x24\x17\x15\x8d\x33\x30\x63\x85\x09\x0a\xc3\x59\x76\x3e\xee\xc6\x98\x22\xce\x38\x9e\x7b\xae\x46\xb5\xe3\x31\x6a\x87\x15\x9e\x8c\x67\x9e\x0a\x42\x5a\xcc\x66\x3b\xa6\xe0\x0e\x1a\xde\xc3\x1b\x25\x77\x3c\x41\xe5\x77\x2a\x7d\x84\xff\x64\xd9\x16\xfd\xe2\xad\xa3\x54\xc1\x54\x5c\x84\xb7\xee\xc7\x2b\xa5\x64\xb5\xd7\x48\x16\xbe\x2b\xac\x59\x67\xb3\x28\x82\x0f\x4f\x05\x02\xd7\x60\x36\x08\xc4\x0c\xa4\x52\x75\x2c\x1b\x4b\xa1\x8d\x03\xbb\x84\xa0\xb5\x13\x58\xfc\x77\xf7\xff\xc2\xd8\xfc\x03\x0d\x4b\x98\x61\x40\xa2\xa1\xae\x18\x81\xbc\x5a\x27\xaa\xd2\x82\x86\x33\x7b\xcc\x00\x4f\x6d\x63\x03\xfb\xd9\x7e\xff\x02\x14\x13\x6b\x84\x8b\xbb\x25\x5c\xec\x60\x75\x09\xe1\xb5\x48\xa5\x26\x66\x48\xb9\x04\xc1\x53\x10\xd2\xc0\xc5\x2e\x7c\x9d\xc9\x7b\x96\xb5\xf7\x2e\x0a\x41\x0c\xae\x2e\x69\xdb\xf2\xfa\x09\x8c\xbc\x61\x3a\xee\xc2\xf1\x94\x00\x5e\x72\x5d\x64\xec\xa9\x92\x16\xfc\x5f\x8b\xd0\xe5\x04\x18\x81\xa0\x48\x9a\x47\x0b\x87\x3a\x56\xdc\xea\xb7\xbd\xe1\x28\x95\xa5\x87\xb2\xda\x1c\x92\x69\xfd\x2c\xad\x72\x5f\xa3\xe9\xe9\xe9\x91\x67\x19\xac\xd1\xf4\xf5\x97\x2a\x99\xfb\xb5\x70\x16\x45\x84\xfc\x02\x3e\x6c\xb8\x86\x74\x2b\x62\xcb\x8e\xde\xc8\x6d\x96\x58\xbd\xdd\x23\xc4\x2c\xcb\x5c\xf0\x57\xb6\xe2\x79\x91\x61\x8e\xc2\xa0\x0a\x2b\x7c\x04\x85\x66\xab\x04\x17\xeb\xfe\x89\x5c\x83\x42\x96\x80\x14\xd9\x13\x30\x91\xf4\xe8\xe7\x32\xe1\x29\xc7\x24\x9c\x11\x03\x43\x49\xe6\x12\x9e\xbb\x95\x45\x9f\xf2\xde\xea\x45\xe6\x4b\x90\x0f\x64\x46\x19\xbe\x46\xe3\x3d\xba\x46\x5f\x58\x20\x9e\x12\xcc\xbe\x36\x9b\xe3\x16\x64\x1e\xce\xbb\x44\x1d\xb8\xd3\xb8\x07\xea\x02\xec\x2b\x9d\xeb\x71\x9d\xeb\xa1\xce\xb9\x30\xf2\x34\x9d\x5b\x1d\x35\x4a\x97\x22\xc6\x25\x14\x19\x32\x8d\x90\xb3\x07\x04\xbd\x55\x08\x2c\xcb\xc0\x12\xde\x30\x0d\xf7\x88\x02\x1e\x15\x37\x06\x05\xdc\x63\x2a\x15\x12\x0f\x5e\x9d\x03\x26\x1b\x75\x2e\xa1\xf6\x84\x5a\xf8\x4a\xa5\xe1\xed\x50\x91\x32\x5f\x90\xe4\xa3\x71\x77\xc3\xb8\xd2\x95\x67\x8e\xc5\xdc\x29\xf1\xd6\xc4\xda\x95\x14\x69\xc6\x63\x43\xab\x51\x04\x2f\xb1\x50\x18\x53\x0d\x5a\xc1\x4f\x1a\xa1\xa0\xd3\xc2\x9f\xb9\xd9\x74\x42\x86\x0b\x6d\x90\x25\x56\xc5\xad\x08\x89\x22\x18\x80\x5a\x4b\xb1\xa2\xc8\x9e\x7c\xa0\xf9\x78\x85\x1d\xe5\x4c\x20\x73\xb9\xd4\xe7\x89\x8d\x44\xac\x55\x6f\x9f\xf0\x7c\xd7\x0d\xdc\x05\x90\x66\x86\x7e\x47\xab\xcd\xe2\x8f\xf8\xb4\xb2\x19\xb3\x61\x24\x58\xd6\xbb\x36\x8d\xaf\x60\xb7\xf4\x9e\xd9\x09\xff\xd6\xcf\x71\xcb\x10\x3d\x5d\xb0\x18\x3b\x69\xd1\x60\x5e\x64\x54\xc4\x03\x4e\x61\x9c\xd2\x7e\x60\x3d\xec\x36\xa3\x10\xaf\x18\xb9\xd8\x85\xd7\x35\xc0\x38\x81\x14\x99\xd9\xaa\x49\xf4\x1f\xb6\x22\x9e\xc0\x24\x33\xde\x09\x7c\x6c\x63\xce\xc7\x7c\x63\x61\x17\xf1\x71\x9a\xcc\x67\x9c\x5e\x85\xde\x51\xd4\xbe\x8a\x6d\xbf\xd3\xd3\x5c\xe3\xe1\xa4\x74\x2e\x12\xfc\x08\x21\xfc\xa9\x5e\xb7\xb0\xba\xbd\xf7\x67\xda\xa3\x82\x3b\xaf\x79\xeb\xdb\xae\xc2\xf2\xec\xdf\xb5\x5d\xb5\x13\x39\x70\x09\xcf\x9c\x17\x76\xd7\xf7\x83\xc2\xb1\x98\x94\xa6\x31\xe3\x94\x2c\xc3\x60\xbd\x48\xc5\x50\x26\x57\xb5\x3d\x3b\x65\xf9\x83\xa7\xdb\x14\x6e\x62\xe9\x8d\x94\x1a\xdf\x15\xd4\x48\x72\x29\xbe\xcf\x32\xb8\x97\x32\x9b\xd6\x04\x1d\xe4\xd5\xd0\x45\x9d\x54\x49\x87\x5e\x25\xb0\x0d\x27\xae\xcc\x96\x65\x27\x1d\x9e\x8a\xfe\xe9\x55\x8e\x4a\x45\x78\xcb\xf3\x6d\x66\x1b\x63\xbf\xd7\xa7\x4c\xbc\xa5\xe2\x54\xe6\x0e\xf0\x4a\xd9\xe2\xb3\xd8\xcc\x50\x58\x16\x3c\x9d\x2e\x9f\x36\x07\x4d\xb1\x38\x38\xae\xc7\xe5\x88\x85\xaa\x53\xe0\x8c\x63\xce\x32\x5f\xef\x71\x3a\x32\x9b\xc4\x72\x2c\x2e\x53\x31\xf4\x5f\xbf\xf1\x50\x89\x35\x52\xa9\xa8\xa6\x14\x5e\x2e\xeb\xe5\x4e\xc0\x07\x5b\x85\x5c\x8b\x5c\x30\xa5\x31\xf1\x5e\xef\x62\xa2\x87\x41\x08\x65\xd9\x8d\x0b\x9b\xcb\xe0\x97\xdf\x48\x69\xce\x05\xa2\x08\xde\xe3\xef\x5b\xae\x30\x71\xbb\x63\x26\xa0\x8d\x8a\xdd\x1a\xda\x6b\xec\xef\x4c\xdb\x43\x19\x57\x63\x8a\x86\xb6\xaa\x0f\x81\x35\xdb\x13\x4d\xa9\xe7\xd6\x15\x4e\x96\x9d\xc6\x6d\x0d\xfd\xa5\xb9\x3d\xce\x6f\x65\x46\xa5\xf1\x66\xc2\x96\xb6\x4d\xb0\x10\xae\x8e\x6b\x5b\x24\x6c\x3b\xf7\x7c\xc2\xfe\xae\x2f\x38\x44\x75\x2e\x0b\x53\xd9\x78\x01\xf3\x09\x3a\x4b\x40\x9a\xc9\xaa\x8e\x4c\xa1\xde\x66\x86\xb4\x36\x01\xdf\x74\x13\x56\xef\x2b\xa0\x53\xaa\x96\xc1\xfe\xa3\xc9\xea\x6e\x09\x36\x5c\x9d\x35\x2c\x23\x0d\xa2\x7e\xe4\x26\xde\xc0\x2e\xfc\x11\x9f\x5a\xcb\xe3\x1e\x78\xa6\x17\xd2\x5f\x4c\x5d\x6c\xd0\xb5\x5b\x59\x06\xab\x1a\xc0\x37\xea\x4e\xd6\xf0\x88\x2b\xec\x3b\x68\x96\xbe\x14\x86\x8b\x2d\x76\x36\xca\xce\xd3\x69\xa4\x2f\xc1\xa8\x1e\x19\x8f\x78\x18\x6b\xe7\x46\xee\x70\xde\x77\xbd\x45\x47\x65\xad\x78\x99\x8e\x99\x33\xe3\xe6\x9b\x7e\x27\xf5\x5b\xb6\x83\xe0\x0c\x97\xe5\x29\x7c\x77\xae\xaa\x7c\x7b\x3f\x15\xa3\xe5\xb2\xb9\x79\xa1\xf0\xaf\x8e\xb4\xd7\x2f\x7b\x9a\x03\xf4\xea\x97\xdf\xb4\x51\x5c\xac\xf7\x23\xa6\x84\xb2\x96\x06\x46\xda\x05\x7f\xba\x63\x7a\x09\x82\x67\x47\x8a\xa4\xeb\xf6\xa0\xb9\xc6\x38\xd4\xf1\xd5\x60\x76\xf4\x1c\x94\x4d\xef\xca\x2f\x31\x65\xdb\xcc\xd4\xd2\xbb\xc9\x90\x6b\x3a\x97\x36\x7c\x89\xa3\x64\xa4\x0b\x8c\x79\xca\x63\x60\xb6\x11\xb7\x14\x6c\xa1\x1c\xa7\xd1\x29\x94\xa3\x3d\x88\x65\xac\x73\x37\x33\xd1\x5d\xf8\x02\x3b\xe2\x30\xe3\x6e\x32\x45\xbe\x3f\x86\x74\x46\x89\x42\xc0\xc5\xee\xe0\xdd\xcd\xc0\x1e\x5f\x77\xc3\x52\x63\x1c\x69\x59\xfe\x88\xe6\xe4\xb4\xf6\xe4\xeb\x6c\x44\x8e\x70\xd6\x6b\xab\xff\x4f\x3a\xa4\xb9\x86\xe7\xf5\xe6\xe2\x7f\xb2\x5f\x8a\x22\xe0\xfa\x27\xa1\xb7\x45\x21\x95\xc1\xc4\x2a\x40\x61\x2c\x55\xa2\xe1\x71\x83\x66\x83\x0a\xe2\xad\x52\x28\x5c\xda\xa3\x50\xdb\x36\xf0\x61\x4d\x69\x48\x66\x75\x09\x29\xcb\x34\xce\x8e\x75\x67\xdf\x7a\xb0\xb3\x7b\x84\x51\x3e\x47\x1a\x87\x6f\xed\xd7\x1f\xa1\xda\x5e\xba\xfb\x4a\x34\x1b\x45\x70\x9d\xc2\x56\xa3\x02\x14\xec\x3e\x43\x57\x34\x77\x9e\x59\x2b\x80\xbf\x42\x5b\xc2\x23\x42\xcc\xa8\x0b\xd4\x23\x50\x36\x37\x72\x13\xf6\x99\xd7\x61\x75\x05\x17\xf6\xae\x7d\x3e\x7d\x9a\xd8\x6c\xb2\xd9\x89\x60\xe7\xa9\xe5\xb3\xbd\xe9\x4b\x7b\xd4\x89\x36\x1a\x66\xd1\x1e\x6f\x23\x8e\xe8\xbb\xd2\xd5\x79\x84\xca\x26\x2d\xd3\x94\x30\x84\xdf\x1f\x8e\x88\x16\xfe\x84\x63\x65\x52\x6a\x2a\x38\xfe\x2a\xb1\xe3\x5b\xb6\xe6\xf2\xb5\x90\xca\x15\xdd\xd6\xe1\x76\x90\x08\x67\xe3\x6e\x35\xbc\x74\xed\xba\xcc\xf0\x66\xd5\x17\xf9\xa3\xd2\x34\x46\x3f\x6b\xfc\xe9\x33\xbe\xa7\xc5\xd5\xae\xd3\x89\x47\x11\x5c\x6d\x30\x7e\x00\xd5\xb9\x83\x08\xbf\x4d\x73\xdd\xeb\xfb\xe6\x6d\xc6\x17\x9d\xe8\x4e\x1e\x84\xdc\x8b\xbb\x37\x32\xee\xa6\xee\xee\x8c\x94\xd1\xf6\x5d\xc5\xeb\xe4\xb4\x54\x6b\x23\xd3\x83\x77\xed\xc3\x17\x38\xc7\xc9\x8c\x5e\x1f\x1f\xd3\xe4\xe7\xce\x62\xa7\x8c\x62\xed\xd8\x72\x57\xe3\xbd\x97\x8b\xee\x25\x71\xf7\x15\xb1\x0d\xfb\x58\x21\x09\xcf\xc0\x7f\x38\x03\xf7\x4f\x55\x0e\x0b\xdb\x8d\xf5\x45\x21\xca\x72\xd1\x3a\x68\x6e\x2f\x9c\xc3\x1b\xa6\x58\xae\xc3\x5b\xeb\x94\x04\xe1\xd7\xdf\x5b\x2f\x6b\x6f\xb8\x30\x88\xcd\x47\x92\xc5\x9f\x16\xfe\x8d\xc5\x0f\x6b\x25\xb7\x22\xf1\xef\xd5\xbd\x93\xea\xb0\x39\xe9\x67\x6e\x36\x57\x0e\x7e\x1e\x9b\x8f\x4b\xe8\x9c\x7c\xc5\xb2\x0c\x15\x65\xf8\xbe\x2a\x5a\x78\x13\x5a\x39\x24\x5f\xef\xd4\x9a\x63\xbf\xd6\xe3\xe2\x64\xf9\x13\x4c\x51\x59\x1b\xcc\x17\xdd\xa6\xfb\xa2\x60\x66\x53\xd9\xd9\x93\xbd\x61\x66\xe3\x04\x1c\x09\x0f\x26\x12\x98\xe3\xef\x1e\x31\x08\x16\xfe\x49\x40\xe0\x5f\xb5\x07\x8b\x36\x1a\xd4\x13\x9a\xd9\xc0\x25\x04\xcb\x5f\x83\x5f\x83\xa0\x4f\xb8\x57\xcf\x50\x51\xb1\xd2\x61\x2a\x55\xce\x8c\xcd\x44\xf3\xc0\x89\x48\xbe\x58\x96\x81\x1d\x94\x1a\xc2\x65\x09\xfe\x93\x87\xf9\xa2\x09\xf9\xa9\x57\x5c\xae\x5a\x55\xfd\xcc\xa0\x3c\xd1\x80\x23\xa4\xf1\x95\x2c\x69\xaa\x15\x8b\x0d\x64\xfc\x01\xc1\x90\x4b\x37\x78\x1e\xbe\xf9\xa2\xc4\x0f\x45\x94\xad\x87\xcd\x4c\xa7\x76\x3d\x7b\x76\x10\x64\xb4\x7c\x39\xed\xbc\xc5\xc7\x1a\xec\xad\x34\xd7\xcd\xe1\xb5\xbe\x9a\xe0\x2d\xcb\x60\xd1\x2b\x08\x07\x72\x76\xf5\xf9\x03\xba\x29\xc1\x7d\x5c\x21\x13\x84\xa0\x9b\x97\x73\x5a\xab\x66\x89\x06\x6a\x98\x9e\x49\x11\x32\xa4\xcd\xf0\xda\x56\x2d\x8b\x59\x96\xf3\xc5\x40\xac\xba\x16\x35\x04\xaf\xc5\x8e\x65\xdc\x17\xa4\x57\x1f\x0b\x8c\xed\x37\x14\xb4\xd5\xa2\xb5\x84\xef\x63\xd2\xdd\x0a\xdc\x49\xfd\x7a\x7e\x40\x5e\x77\xf9\x73\x09\xac\x28\x50\x24\x76\x36\xd7\x4b\xd0\xa1\x4f\x49\xf6\xe2\xae\x95\x1a\xc2\x30\x74\xca\xdc\x31\x45\xd3\xf4\x54\x69\x75\xc4\x65\x61\x96\xb5\x43\x1f\xbc\x21\xb0\xe7\xd6\x1f\xfa\x10\xca\x77\x97\x54\x30\x07\xb5\xbc\xdd\x59\xf4\x52\x57\x93\xab\xaf\x58\x8e\x64\x80\x91\xec\xf5\x41\xf1\xfc\x0d\xd3\xc6\xa7\xb1\x57\x22\xa1\xb1\x7c\x73\x25\xf3\x9c\x95\x25\x71\xbc\x38\x50\xa4\xfb\xe5\xef\x50\xa5\x6e\xef\x8d\x15\x9a\x2a\x3b\x1c\x29\x36\x3e\x68\x8f\x16\x1c\x07\x57\x81\x9f\x5b\x78\x08\xed\xbf\x50\x7c\xfe\x13\x0f\x3b\xd9\xcb\xaa\xb4\xe6\xfa\x69\x7b\x89\x04\x8f\x1b\x9e\x21\x6c\x98\x48\x32\x2e\xd6\x60\xed\x46\x02\xfa\x4f\x82\x2a\x34\xeb\xa0\x77\x27\xbb\x67\xbf\xaf\xb4\x7c\x4f\xb8\xde\xd9\x5e\xe7\x1c\xbb\xed\x79\xd6\x20\x5c\x70\x53\xe7\x8a\x13\x3f\x10\xa2\xbf\x3a\x99\xbc\xc7\x35\xd7\x06\xd5\xd4\x5d\xba\x9a\xd3\xc8\xb6\xa4\xa4\x3a\x09\xb2\x18\x5e\x2c\xfe\x3b\x00\x00\xff\xff\xd1\x70\x3d\x62\x5e\x2c\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x43, 0x8f, 0xb1, 0xb3, 0x7b, 0xd8, 0xc9, 0x2d, 0xcc, 0xd9, 0x7a, 0x9f, 0x9b, 0x19, 0xe2, 0x8d, 0x7b, 0xb5, 0x49, 0xbd, 0xe0, 0xb7, 0x85, 0x2c, 0x70, 0x3, 0x10, 0xba, 0xd1, 0x1d, 0xdd, 0x56}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl": {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl": {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl": {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl": {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl": {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
