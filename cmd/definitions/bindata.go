// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/function.tmpl (258B)
// tmpl/info.tmpl (1.802kB)
// tmpl/object.tmpl (1.902kB)
// tmpl/operation.tmpl (1.109kB)
// tmpl/pair.tmpl (1.929kB)
// tmpl/service.tmpl (8.637kB)
// ../../definitions/infos.hcl (1.312kB)
// ../../definitions/operations.hcl (4.773kB)
// ../../definitions/pairs.hcl (2.058kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x4a\xc4\x40\x10\x45\xf7\x39\xc5\x67\xc8\x22\x33\x68\x1f\x40\x70\x15\x74\x25\x32\xa8\x17\x28\xda\x1e\x6d\x4c\x55\x9a\x54\x05\x07\xda\xba\xbb\xf4\x44\x04\x5d\x15\xd4\xff\xbc\xff\x6a\xbd\x46\x7f\x92\x0f\xdc\xdc\xa2\x0f\xf7\xab\xc4\xf0\x48\x9c\xf0\x05\x9b\x47\xe2\x34\xc1\xbd\x3b\xad\x12\x31\x28\x0e\xb5\xa2\xbf\xe4\x5a\x28\x6e\xa5\x23\x69\xa4\xd6\xda\xa3\xd6\x46\x72\x1f\xa2\x9d\x11\x67\xb1\x74\xb6\x30\x6e\xf7\xaa\xa5\x1b\xff\x48\x0b\xb1\x86\x97\x25\xf3\x03\xa9\x85\x67\x5b\xb2\xbc\xdd\xc9\xab\x7e\x66\x7b\x1f\x67\x66\x72\xc7\x5c\x0c\x87\x42\x79\xf9\xb7\xe9\xde\x1e\xcd\xf8\xef\xfa\xf0\xcb\x7f\x4a\xba\x4e\xa6\x3f\xdc\x8b\x58\x07\x00\x85\x24\xc7\x61\x97\xb9\x4c\x89\x93\x18\xb2\xed\xf6\x9d\x7f\x07\x00\x00\xff\xff\x5b\xb1\x71\xf7\x02\x01\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf3, 0x17, 0x45, 0xc4, 0x8, 0xb1, 0x57, 0xf3, 0x99, 0x7b, 0x1f, 0xcd, 0xe4, 0x30, 0x7e, 0x3, 0x30, 0xba, 0x28, 0xed, 0x36, 0x1c, 0xd3, 0x4a, 0x24, 0xfc, 0x10, 0x73, 0xfe, 0xf7, 0xda, 0x75}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x51\x6f\xd3\x3e\x14\xc5\xdf\xfd\x29\xce\xbf\xaa\xfe\x6a\x50\xd7\x6c\x12\xe2\x01\xd6\xa7\x6d\xa0\x09\x6d\x43\xda\xc4\x03\x08\x21\x37\xb9\xa9\x4c\x63\x3b\xb2\x9d\x68\x25\xcd\x77\x47\x76\xb2\xb6\x29\x5d\xa1\x88\x17\xde\xec\xd8\xbe\xe7\xe7\xe3\x73\x13\xc7\xb8\xd0\x29\x61\x4e\x8a\x0c\x77\x94\x62\xb6\xc4\x5c\xaf\xe7\x10\xca\x91\x51\x3c\x8f\x13\x99\xbe\xc1\xe5\x1d\x6e\xef\x1e\x70\x75\x79\xfd\x30\x61\x05\x4f\x16\x7c\x4e\x70\xcb\x82\x2c\x63\x42\x16\xda\x38\x8c\x18\x00\x0c\x32\xe9\x06\x2c\x62\xac\xae\x4f\x60\xb8\x9a\x13\x86\x8b\x31\x86\x42\x65\xda\xe2\xf5\x14\x93\x6b\x3f\xba\xe1\x05\x9a\x86\xd5\x35\x86\x96\x4c\x25\x12\xba\xe5\x92\xfc\xfa\x70\x81\x15\x9c\xbe\xe0\x92\x72\xbf\x85\xc5\x31\xde\x0a\xca\x53\x08\x95\xd2\x23\x84\x42\x5d\x6f\x1f\x6a\x1a\xcc\x84\x63\x89\x56\xd6\x43\xec\xe8\x56\xa1\x66\xab\xde\x34\x01\x71\xf7\xf8\xb5\xaf\xeb\x49\xaa\x49\x80\xf0\xf2\x1f\xb8\x4d\xb8\xd7\xc7\x14\x67\xe7\xe7\x7e\x75\xd1\x02\x9f\x80\x54\xea\x87\x11\x63\xde\x00\xec\xde\xa1\x7f\xdc\x3a\x53\x26\x0e\x75\xa7\xbc\x66\xfb\xfa\x1c\x9b\xc7\x78\x58\x16\x6d\xad\xa6\xd9\xfa\xb2\xd9\xb3\x66\x08\xf3\x38\xf6\x06\xa0\xb4\x94\x82\x5b\x70\x3f\x93\xbc\x40\xa6\x0d\xf4\xec\x1b\x25\x0e\x15\xcf\x4b\x1a\xe3\x14\x92\xb8\xb2\x50\xda\xc1\x92\x1b\xe3\xac\xfb\x60\xc9\x85\x52\xa1\x8e\x50\xee\xd5\xcb\x30\x95\x90\xbc\xf8\x6c\x9d\x11\x6a\xfe\x25\x04\x22\xe3\x09\xd5\x0d\xeb\x94\x0f\x7b\xed\x57\x45\xe6\xe9\xaf\x1e\x43\x42\x9a\x86\x65\xa5\x4a\x30\x92\x78\x71\xd0\xb5\x08\xef\xc8\xb5\x17\xbf\x14\xb6\xc8\xf9\xb2\x73\x63\x14\xf5\xfd\xe8\x7c\x35\xe4\x4a\xa3\x20\x27\x3f\xd9\xe7\x49\x7f\x57\xf3\xfe\x19\xcd\xaa\xaf\x19\xfd\xa2\x50\xc7\xb4\x07\x06\x53\x54\x3d\x5e\xd6\x05\x2a\xb7\x81\xf5\x2f\xb8\x33\xea\xa1\x8e\x31\xd3\x3a\x8f\x3a\x22\x91\x41\x4e\xfc\x0b\xff\x7f\x64\x0b\xfc\x37\xc5\x69\x57\xe3\xb0\xdb\x63\x38\x53\x52\xd8\xb8\x89\x6a\x1b\x81\x4f\x64\xf4\x47\x9f\xc2\xa7\x14\x6f\x55\x6a\xeb\x6c\xef\x18\x23\xe3\xb9\xa5\x4d\xdc\x3b\x87\xf6\x1e\x0c\x97\x5d\xe1\xfb\xa1\xf3\x6d\xbb\x1c\x61\xf1\x4d\x69\xdd\x71\x21\xfc\x63\x7b\xa7\x7d\x7b\x0b\xae\x44\x32\xca\xa4\x9b\xdc\x17\x46\x28\x97\x8d\x06\xfb\x58\xdf\xd3\x8c\xcf\x36\x3f\x88\xa7\x88\x89\x75\x77\x0f\xa2\x68\xeb\x25\xfe\xb5\x16\x69\xad\x5c\x4d\x8f\xf3\x72\x6f\x77\xb5\x6f\xbf\x13\x85\xcd\xf0\x47\x00\x00\x00\xff\xff\xc9\xe7\x0b\xe2\x0a\x07\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd, 0xa2, 0xdc, 0xf4, 0x79, 0x9b, 0xb4, 0x94, 0xfb, 0x8a, 0xe3, 0xb3, 0xca, 0x75, 0x5b, 0x39, 0x8, 0x1a, 0xc4, 0x69, 0x74, 0x63, 0x42, 0x82, 0xec, 0xa5, 0xc6, 0xc, 0xe0, 0x35, 0x8a, 0x7d}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x4d\x6f\xe3\x36\x10\x3d\x9b\xbf\xe2\xd5\x08\x0a\xa9\x70\xa5\xa4\x2d\x7a\x68\xe3\x53\x92\x16\x39\x24\x29\x90\xa0\x87\x16\x7b\xa0\xa5\x91\xc3\x8d\x44\x0a\xe4\xc8\x6b\xaf\xa2\xff\xbe\x20\x25\x7f\x25\xde\xc0\xc1\x5e\xf6\x64\x0e\x39\xf3\xe6\xe3\xbd\xb1\xd2\x14\x17\x26\x27\xcc\x49\x93\x95\x4c\x39\x66\x2b\xcc\xcd\xc6\x86\xd2\x4c\x56\xcb\x32\xcd\xaa\xfc\x4f\x5c\xde\xe1\xf6\xee\x01\x57\x97\xd7\x0f\x89\xa8\x65\xf6\x24\xe7\x04\x5e\xd5\xe4\x84\x50\x55\x6d\x2c\x23\x12\x00\x30\x2e\x2a\x1e\xf7\x27\x56\x15\x0d\x47\xb7\xd2\xd9\x58\xc4\x42\xa4\x29\xfe\x52\x54\xe6\x50\x3a\xa7\x25\x94\x86\x99\x7d\xa4\x8c\x31\x53\x2c\x32\xa3\x9d\xc7\x69\xdb\x9f\x61\xa5\x9e\x13\x4e\x9e\x26\x38\x59\xe0\x8f\x29\x92\xbb\xe0\x77\x43\x2c\xd1\x75\x01\xb5\x8f\xbc\xf6\x40\x6d\x8b\x93\x45\x72\x2b\x2b\xc2\x33\xd8\xfc\x23\x5d\x26\x4b\x74\x1d\xa6\x38\x3b\x3f\xf7\xaf\x4f\x3e\xca\x03\x93\xce\xfd\x31\x16\xc2\x97\x8f\x1e\x16\x8e\x6d\x93\x31\xda\x63\x73\x7b\x37\x55\xf8\xa4\x17\xa6\xaa\x48\xf3\xfa\x01\x69\x8a\xbe\x9a\x17\x0f\x3b\xb9\x7b\xd3\xfb\x3c\xac\x6a\x0a\x55\x77\xdd\xce\xcd\x8b\x52\xc5\x28\x4d\x91\x95\xca\x83\x29\x07\x7e\xa4\x8d\xa5\xf1\xe9\x51\x65\x8f\xeb\x2e\x94\x83\x2c\xd5\x82\x12\x31\x1a\x3c\xee\xd9\x58\x39\x27\x1b\x30\x2a\x38\x36\x96\x5c\xf8\xf1\x04\x5a\x2a\x03\xf5\x15\xb1\xcc\x25\xcb\x24\x94\xe6\x2d\x54\xb2\xfe\xdf\xb1\x55\x7a\xfe\x21\x28\xa1\x90\x19\xb5\x9d\x10\x43\x8b\x33\xc5\x68\x1c\xe5\x90\x0e\xd2\x5b\x95\xac\x51\x18\xbb\xa6\x73\x21\xcb\x86\x26\x38\x45\x45\x52\x3b\x68\xc3\x70\xc4\x13\x9c\x0d\x17\x8e\x38\x40\x05\x1c\xa5\xf9\xf7\xdf\xc4\x28\x37\x9a\x82\xf1\xeb\x2f\x62\x54\xf9\x57\x2f\x9b\xe4\xa6\x61\x5a\x8a\x4e\x88\x63\xb8\xd9\xf2\x72\xb5\x0c\xaa\xec\x3a\x51\x34\x3a\x43\x64\xf0\x53\xef\x1a\xe3\x6f\xe2\x7e\xd8\x97\xca\xd5\xa5\x5c\x0d\x0c\x44\xf1\x3e\x07\x68\x43\x89\x96\xb8\xb1\x1a\x26\x79\x45\x99\x2f\xea\x15\xf8\xfd\x57\xc0\x17\xfb\xe0\xf1\x3a\x62\xc8\x72\x00\x1e\x53\x2c\xf6\x2a\x10\x83\x2c\x4a\x17\xb2\xbf\xa7\xb1\x68\x2f\xf9\x04\x33\x63\xca\x78\x93\xda\xb1\xe4\x28\xee\xc9\x55\x05\x4c\xe2\x69\xf9\xf1\xa8\x05\xfb\x61\x8a\xd3\x01\xe7\xed\x61\x4d\xc0\xb6\xa1\xe0\x38\xc8\x68\xcb\xd5\x7f\x64\xcd\xbf\x5e\x31\x9b\x2d\xda\x42\xf5\x40\xbb\x1e\x13\x14\xb2\x74\xb4\xdd\xaa\x61\x1e\x07\x03\x43\xc7\xcf\xf8\xfc\x56\x7c\xbf\x66\x87\x06\x7a\xd3\x38\x7e\x9f\x5a\xbe\x69\x98\xd3\xfd\x61\xd6\x52\xab\x2c\x2a\x2a\x4e\xee\x6b\xab\x34\x17\xd1\x78\x58\xaf\x1d\x84\xae\xf3\x6b\x3f\x2c\xd8\x38\x8e\x87\x09\x7f\x1f\xca\xed\x9b\x7f\x9e\x1e\xd3\xfd\x41\xa9\xf7\xd4\xec\xfe\x19\xbe\x2a\x3b\x2b\x8d\xa6\x68\xb9\x73\xd3\x6e\xa8\x3d\xe6\x2b\x72\xb0\xfc\xe5\xa1\xa1\xbd\x10\xcc\x10\x1e\xfe\x2e\x43\x84\x3f\x89\x9d\xbe\xc3\xa5\xff\xb0\x75\x5f\x02\x00\x00\xff\xff\x89\x2a\x06\x6f\x6e\x07\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb5, 0x31, 0x99, 0x29, 0x2, 0xc4, 0x9b, 0xd3, 0x91, 0x35, 0x57, 0x52, 0xe1, 0x99, 0xff, 0xb1, 0xec, 0xc7, 0x4, 0x8a, 0x19, 0xaa, 0xa6, 0x88, 0xca, 0x41, 0x3a, 0x9a, 0x1b, 0x95, 0x45, 0x67}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\x4f\xeb\xd4\x30\x10\xbd\xe7\x53\x0c\xa5\x87\x16\xd6\xf6\x2e\x78\x10\xff\x80\x17\x2d\x7a\xf0\x28\xd9\xec\xb4\x0e\xb6\x4d\x4c\xb2\xcb\x2e\x31\xdf\x5d\x92\xa6\xa5\x5b\xba\xac\xc8\xef\x96\xcc\x9b\xf7\xe6\x65\xf2\x14\x17\xbf\x78\x87\x60\x6f\x0a\x0d\x63\x34\x28\xa9\x2d\x14\x0c\x00\x20\x13\x72\xb4\x78\xb5\xd9\x74\x23\x99\xb1\x92\x31\xe7\x5e\x81\xe6\x63\x87\x90\xff\x38\x40\x4e\xf0\xfa\x0d\x54\x9f\x46\x8b\xba\xe5\x02\x0d\x78\xcf\x9c\x83\x9c\xaa\xf7\x68\x84\x26\x65\x49\x8e\xa1\x18\x26\x40\x42\xc8\xa8\x9e\xdf\x3e\xf3\x01\xc1\x7b\xa0\x99\x0c\x2e\x4e\x0a\x13\xa8\x05\xa9\xa1\xc0\xdf\xa1\x3f\x36\x66\x06\xf5\x85\x04\xea\xac\xdc\xd4\xad\xd4\xbc\x0b\x75\xef\x23\xff\x9b\xd5\x34\x76\x45\x09\x26\x1e\x16\x4d\x1c\x4f\xc1\xc8\x72\x5f\xbd\x02\x87\x23\x9e\xc2\x4b\x72\xaa\x3e\xc4\x73\xd2\x9a\x7a\x53\xc3\xc6\xf8\x03\xe1\xb5\xae\x54\x49\xf4\x8b\x32\x33\xa3\xae\xa3\xa2\x54\x93\xff\x3f\x60\x65\xc3\x8d\xe0\x7d\xd8\x45\x42\x36\xbb\x9b\x5d\xec\x72\x8a\x84\x7c\x94\x7a\xe0\xb6\xe1\x9a\x0f\x61\x56\x09\xf7\xc0\x57\x34\xe7\xde\x9a\xef\x64\x7f\x36\xd3\xa7\xdf\xad\x2f\x0b\x94\xa7\xfe\x02\xfb\xdd\x94\x8a\xff\xb1\xba\xa2\x17\xc2\x5e\x21\x05\xac\x4a\xb5\xc3\x0b\xbf\xc4\xb9\xf9\x6b\x3c\x5b\xff\x53\x8c\x62\xc3\x49\x37\xb2\x27\x71\x0b\x39\x39\x0b\x9b\xd2\xf7\xb6\xef\xe1\x28\x65\xff\x8f\x41\xa7\x16\x46\xdc\x09\x69\x80\xeb\x1a\x14\x27\x6d\xa0\x95\x7a\x9d\x72\xb7\xf4\xdf\x6d\x67\x3b\x71\x2f\x3c\x8f\x93\xb3\x6b\xfa\x12\x15\xa4\xaa\x9a\xe8\xe3\x99\x48\x00\x2e\x1b\xdd\x45\x36\x6d\xef\xe9\xd1\xb3\xbf\x01\x00\x00\xff\xff\xce\x1e\x6e\xf5\x55\x04\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd3, 0xc, 0xf7, 0x3d, 0x63, 0x22, 0xe7, 0x8f, 0x9e, 0xdb, 0xf8, 0x26, 0x3c, 0x34, 0xd7, 0xca, 0xba, 0x28, 0x89, 0xe5, 0xc3, 0x64, 0xb3, 0x43, 0x96, 0x9d, 0xdd, 0x5, 0x25, 0x36, 0xfa, 0x6c}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\xcc\x0a\xc6\x42\x02\x64\x69\xb1\x47\x2d\x7c\xda\xf8\x50\x14\x8d\x73\x08\xda\x43\x10\x14\x0c\x35\x96\x09\x51\x24\x41\xd1\x4c\x0d\x55\xff\xbd\x20\x29\xab\xf2\x57\xd0\x1c\x7a\xe8\x9c\xcc\x99\x37\xc3\x37\x6f\x46\x74\x51\xc0\xff\xb2\x42\xa8\x51\xa0\x26\x06\x2b\x78\x39\x40\x2d\xa7\x33\x30\x61\x50\x0b\xc2\x0b\xda\x56\xff\xc1\xdd\x06\xee\x37\x8f\xb0\xbe\xfb\xf0\x98\x47\x8a\xd0\x86\xd4\x08\x8a\x30\xdd\x45\x11\x6b\x95\xd4\x06\x92\x08\x00\x20\xa6\x52\x18\xfc\x66\xe2\x28\x1c\x6b\x66\x76\xfb\x97\x9c\xca\xb6\x20\xb2\x5b\x56\x68\x8b\x5a\x2e\x3b\x23\x35\xa9\xb1\xb0\xff\x16\xaa\xa9\x0b\x14\x95\x92\x4c\x98\xf8\x1d\x39\x54\x63\x85\xc2\x30\xc2\xdf\x93\xb5\x33\x46\x51\xce\xf0\x78\x57\xfe\x0b\x79\xe6\xa0\xb0\x8b\xa3\x34\x8a\xfa\x7e\x09\x9a\x88\x1a\x61\xf1\x35\x83\x85\x85\x72\x05\xf9\x83\x53\x01\x86\xc1\x47\x17\x4a\x90\x16\x9d\x7f\x61\xf3\x7b\xf7\xf3\x3b\x18\xf9\x40\x3a\x4a\xb8\xc3\x14\x05\x7c\x61\x66\xd7\xf7\x47\xe4\x30\xc0\x2b\xe3\x1c\x88\x52\xfc\x00\xce\x3f\xe6\x0d\x03\x58\xc2\xf7\x08\x46\xc2\x46\x19\x26\x45\x17\x85\xf0\x1d\x76\x54\x33\xef\x72\x25\xb7\x7b\x41\x2f\x8a\x26\x76\xac\xf5\x78\x50\xee\x9c\x82\xa3\x09\xbd\x6f\x5a\xa3\xd9\x6b\xe1\x3d\xc1\xe1\xec\x23\x1e\x4a\x88\x4f\x08\xc4\xd9\x14\xfd\xec\xa8\x94\x60\x83\x67\x88\x42\xb7\x28\x2a\xc7\xc0\x75\xf5\x40\x74\x87\xa1\x15\xe5\x7f\x12\x68\x96\x16\x5a\xa2\x5c\x03\x7e\x53\xa0\xe3\x8c\x62\x1e\x08\x7b\x7c\xd2\x3a\xc0\x53\x67\x34\x13\xf5\xb3\xdf\xb8\x2d\xa1\xd8\x0f\x29\x24\x4f\xcf\x8e\x5f\x06\xa8\xb5\xd4\xe9\xc8\x3c\xd4\x29\x57\xd0\x92\x06\x27\xc8\x3f\x19\x70\x14\x49\x9b\xa6\x61\xe9\x2c\xd1\x2e\x2d\xa4\x06\xd7\x56\x6a\x68\x32\xf0\x13\x0b\x13\x6c\xe1\x67\xef\x2e\x41\x59\x98\x11\x98\x42\xdd\x2b\x33\x74\x07\xcd\x0c\xfd\xf6\x16\xc0\xcc\x28\xe9\xf0\x5c\xd3\xf2\x04\x31\xbb\x42\xfb\x42\x36\x4f\xdc\xbe\xa5\xb3\xfb\x4e\xaa\x9d\x4c\xf5\xb2\x96\x17\xc9\xc2\x0a\xb4\xbd\x88\x39\xde\x6c\xeb\xd2\xbd\xf8\xfa\x9c\xed\x74\x47\x98\xc7\xad\xe2\x7e\x24\xb0\x82\xbe\x9f\x2a\x0d\x43\xa2\x6d\x7a\x15\xcf\xb6\x1e\xfe\xd7\x0a\x04\xe3\x57\x9a\x3a\xda\xb8\x93\x82\xf1\x0c\xfe\x5e\xbb\xc1\xdd\xc6\x6e\x54\x09\xb1\xdf\xb2\xd9\x86\x9e\xdb\x5a\xeb\xd2\x5d\x7d\x1b\xf1\xf6\xc6\x9f\x9b\x93\x7c\x82\x8f\xfa\xbf\x01\x3f\xfd\x60\xce\xed\x52\xf8\x4b\xcf\xec\x03\x3b\x0f\x55\xb8\x25\x7b\x6e\xae\x4f\xe8\xf7\x28\xb9\xd6\xda\xad\xb8\x6b\xfc\x13\xeb\x5a\x62\xe8\xee\x0f\x50\x76\x38\xf9\x68\xaf\xa8\x79\x53\x49\xf7\x37\xc6\xc4\x1e\xa3\xcb\x52\xe1\x11\x5a\xb9\x27\x1b\x45\x95\xf8\x63\x16\x5e\x53\xdf\x78\x93\x1d\x39\x2a\x3b\xa4\xe3\x83\x39\x7f\x78\xc7\x0c\xc1\x78\x34\x44\x3f\x02\x00\x00\xff\xff\x4b\x4f\x1d\x61\x89\x07\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xca, 0xe6, 0x96, 0xac, 0xdc, 0x65, 0xfa, 0x30, 0xe3, 0xf2, 0xd3, 0x24, 0xf4, 0xbd, 0xa1, 0xc5, 0x36, 0xd3, 0x53, 0xfc, 0xad, 0x83, 0x56, 0xd8, 0xdd, 0x1, 0xad, 0x32, 0x4e, 0x21, 0xdf, 0x48}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5b\x6f\xdb\x38\x16\x7e\xf7\xaf\x38\x15\xdc\x85\x54\x28\xd2\xee\x3e\x7a\xe1\x87\xdd\xb4\x9b\x2d\xba\x48\x82\x4d\x76\x0a\xcc\x74\x10\x30\x12\x65\x73\x22\x91\x2a\x49\x2b\xf1\x24\xfa\xef\x03\x5e\x24\x51\xb2\xe4\xd8\x83\x0e\x8a\x69\x93\x87\x40\x26\xcf\xe5\x3b\x37\xf2\xb3\x1c\xc7\x70\xca\x52\x0c\x2b\x4c\x31\x47\x12\xa7\x70\xbb\x85\x15\x6b\x3f\x43\x45\x10\x10\x2a\x31\xa7\x28\x8f\x93\x22\x8d\x05\xe6\x15\x49\xf0\x3f\xe0\xed\x05\x9c\x5f\x5c\xc3\xbb\xb7\xef\xaf\xa3\x59\x89\x92\x3b\xb4\xc2\xf0\xf8\x08\xd1\x39\x2a\x30\xd4\xf5\x6c\x46\x8a\x92\x71\x09\xfe\x0c\x00\xc0\x4b\x18\x95\xf8\x41\x7a\xe6\x13\x61\xde\xcc\x3c\xad\x88\x5c\x6f\x6e\xa3\x84\x15\x31\x62\xe2\x24\xc5\x55\xbc\x62\x27\x42\x32\x8e\x56\x38\xae\xfe\x1e\x97\x77\xab\x18\xd3\xb4\x64\x84\x36\xda\x07\xe9\x24\x1c\xa7\x98\x4a\x82\xf2\x63\xb4\xd6\x52\x96\x49\x4e\xf0\xe1\xbe\x6c\x46\x84\x91\x8f\x0e\xd0\x90\xdb\x52\x89\x07\xb3\x59\x85\x38\xdc\x40\x87\x34\xba\xe4\xac\x22\x29\xe6\x76\xa7\x89\x7b\xb8\x7e\x65\x8c\x35\x1f\x1b\x08\xd1\x95\x79\x78\xc7\x39\x6b\xf6\xba\x80\xa2\x8b\x52\x12\x46\xc5\x6c\x16\xc7\x70\xbd\x2d\x31\x10\x01\x72\x8d\x41\xe1\x81\x8c\xf1\x5e\xf9\x12\x46\x85\x34\x62\x4b\xf0\x9c\x1d\x4f\xeb\x5b\x4f\x80\x2a\x44\x72\x74\x9b\x63\x28\x11\xe1\x22\xb2\x7a\xfe\xec\xf1\xf1\x04\x38\xa2\x2b\x0c\xf3\x9b\x10\xe6\x15\x2c\x96\x10\x5d\x2a\x19\x65\x5d\xa5\x4a\x49\x90\x0c\x28\x93\x30\xaf\xa2\xb3\x9c\xdd\xa2\xbc\xdb\x53\x6b\x6f\xb1\x48\x38\xd1\xa8\xfb\x1b\xff\xde\xe4\xb9\x85\x63\xd1\xcd\x1b\x78\x37\x46\xa2\x05\xdb\x78\xc2\x34\x55\x36\x9c\xc7\x60\xf6\x0c\xc8\x29\x80\x6a\x7d\x5e\x52\xe5\x61\xb1\x6c\x9d\x3d\x81\x64\x97\x48\x24\x46\x26\x8e\xe1\x23\x91\x6b\x05\xc6\x48\xd6\x35\xdc\x93\x3c\x07\x54\x96\xf9\x16\x7a\x20\xa1\x42\xf9\x06\x83\x64\xd0\x54\x68\x34\xfc\x6c\x43\x93\x1d\xa3\x7e\x65\x6d\xe9\x4a\xd5\x75\x00\x0a\x3e\x3c\xea\xb8\xd5\x1f\xc7\x72\xc3\xa9\x5e\xed\x16\x3f\xe0\xed\x62\x37\x95\x61\xbb\xff\x83\x02\xb4\x80\xca\xac\xd4\xb3\x5e\xde\x9c\xc7\x89\x0c\xbe\xa7\x19\x3b\xb8\xcc\xcf\x24\xd2\x31\xa1\x52\x42\x44\x99\xa3\x6d\xd3\xa4\x0d\xde\xce\xce\x72\x42\xca\x01\xdd\x28\xd8\xa9\x39\xb7\xee\x4b\x4e\xa8\xcc\xc0\x7b\x2d\x5e\x0b\x0f\xfc\x79\x15\x5d\x25\xac\x74\xe1\x04\x7a\xf5\x14\x49\xbc\x62\x7c\xdb\xdb\xe8\x03\xc5\x9f\xa1\x55\xf7\xd8\xed\x2f\x38\x91\xde\x10\xae\xeb\x7d\x09\xde\x45\x5f\x6a\x00\x37\x8e\xe1\x0c\xcb\xdd\x66\x5a\x61\x39\xda\x4a\x19\x67\x05\x14\x58\xa2\x14\x49\x14\x69\x13\xba\x7b\x06\x46\xfc\x02\xde\x0c\xb1\xa8\x16\xf2\x7b\x2d\x15\xc2\x2d\x63\x79\x00\xb6\xa9\xaa\x10\xd8\x9d\x4a\x58\x11\x9d\x61\xe9\xf7\x86\xef\xa4\x3f\x7c\x81\x56\x20\x19\xbc\x62\x77\x56\xbb\x2b\xe5\x8f\x98\x33\xdd\x67\x6e\x66\x6c\xb7\x1a\x33\xae\x44\x08\x19\xca\x05\xee\x92\x93\x8b\x69\x45\x0d\xfc\x09\x7e\xdd\xa7\xdf\x25\xd7\xfc\xb7\x06\xaa\xa8\x1f\x7c\x10\x82\xe4\x1b\x6c\x05\x9b\x62\x08\x93\xc7\x2e\xed\xba\x1a\x62\xa2\x1a\x84\x4a\x36\x56\x0d\x71\x48\x35\x42\xd8\x99\xf0\x11\x29\x9b\x5d\x1b\x44\x11\x5d\x3d\x53\x99\x10\xaa\xc0\x09\x7e\x62\xba\x47\x87\x5b\x99\x10\x25\x4a\x70\x6f\xc2\x25\x2e\xca\x5c\x31\x06\x4f\xdd\x03\x37\x14\xdf\x7b\x50\xa0\x3b\x7c\x95\xab\x5b\xc2\x1f\x1b\xee\x40\x2f\xe2\xfb\x69\x33\xc2\xb5\xd1\x58\xd0\x67\x16\x4d\x26\xbc\xab\xc4\xea\x33\xf4\x39\xd5\x61\x9c\x29\xce\x08\xed\xfc\x3a\xc6\xe7\x25\x55\x81\x13\x9a\xe2\x07\x88\xe0\xaf\x13\x07\xd4\x5c\x55\xd7\x15\xfc\x9b\xb6\xdd\x6c\x0f\xf3\x68\xc4\x7b\x87\xc2\x30\xfc\x5e\x08\x25\x85\x79\xb5\x7b\x3a\xd8\xc7\xb1\x28\x4c\x11\xf6\x05\xe2\xee\x65\x74\x1a\xfb\x3c\xa3\x7a\xe2\xe7\x19\x1d\x3b\xa2\x9b\xa9\x50\x4e\x4d\x43\x43\x5d\xab\x07\xa5\x56\xd7\x0d\xcd\x28\x11\x17\x38\x05\x21\xf9\x26\x91\x5a\x47\x13\x8f\x81\x96\x52\xaa\x6b\x2b\xe5\xdc\x63\xba\x2e\xf0\xd3\xcf\xea\x22\x9b\xb5\xab\x71\x0c\xff\xc3\x9f\x37\x84\xe3\xd4\x48\xf4\xd2\xe9\xe4\x5c\x6d\x36\x21\xb4\x1a\x4e\xf6\xff\x83\x84\x06\x81\x08\x1f\x09\x11\x40\x9f\x81\xfd\xfb\x66\x52\xb4\xdb\xb6\x23\xdb\x03\xe5\x9c\x3c\x36\x02\x73\xeb\xa3\xfc\xf0\x08\x5a\x8d\x3f\x2a\x82\xa3\x63\x38\x6b\xbf\x41\x1c\x1c\x44\xa7\xf2\xb5\xeb\x50\x6b\x4a\xab\xfb\xf3\x72\xa2\x87\xf5\x01\xaf\x25\x0c\xc1\x12\x7a\x2a\xf5\xc9\xfe\x66\xa2\xef\x0d\x61\xdb\x67\xd5\x67\xa5\x6c\x7a\x3a\x00\x7f\xca\x50\x08\x58\x11\xfa\xa0\x3d\xe4\xc5\x26\x97\x2a\x8b\x7f\x99\x50\x18\x4c\xcd\x02\x94\x9f\xd0\xbd\xc3\x14\xdb\xbf\x51\x57\xcb\x62\x69\xcb\xa3\xa1\x74\x8a\xe2\x9e\xc8\x64\x0d\x55\xf4\x01\x6f\x9d\xe5\x23\xa7\x2a\x41\x02\x2b\x7a\xde\x15\xa9\xae\xbd\x45\xbb\xdd\x45\x13\x3d\x53\xf7\x65\x77\x0b\x0f\x14\xf7\x6b\x55\x91\x26\x00\xe6\x52\x77\x5b\x21\xd8\xd7\xcf\x47\x4e\xde\xb7\x17\xe5\xe8\x68\x1e\x10\xa6\xe6\x3b\x0d\x3f\x4c\x18\xad\x30\x97\x4e\x5b\x4e\x07\xe1\x4f\x87\x10\xf4\x3c\x90\x0c\x5a\x2e\xf9\x45\x12\x7c\x78\x92\x15\xbe\x9e\x6a\x6d\x58\xe8\x2e\x98\x83\xd1\x74\x9c\xb4\xb5\xb9\xaf\x62\xb5\x3b\xc2\x47\x8c\xa2\x62\xe0\x2e\xa4\x13\x8b\xa9\xfd\xee\x77\xd2\x32\x48\xe8\x58\x24\x25\x79\xd8\xbd\x5a\x38\xc7\xf7\xea\x98\x6a\x4c\xeb\x57\x0c\xfe\xb8\xa9\x09\x66\xe9\x32\x54\x83\x26\x54\x3e\x66\xfb\xb9\xd8\x9f\x8f\xc1\xb4\x5a\x2f\x1c\xe6\x85\xc3\x7c\x13\x1c\xc6\x17\xe6\x3b\xa7\xde\x0c\x5e\x18\xcd\x37\x75\xd7\xbf\x30\x9a\x83\x19\x8d\x88\xbe\x5f\x4e\x43\x32\x10\x91\xb2\x74\xc9\x72\x92\x6c\xa3\x7f\xe6\x39\x3c\x3d\xf5\xd7\x9c\xb3\x66\x7a\x6b\x1f\xa2\x11\x2a\xf5\x0c\x1f\xf9\x3f\x15\x9b\xb2\x64\x5c\x36\x94\xa4\x0a\x76\x6c\xd4\x87\x33\xac\x14\x67\x68\x93\xcb\xc5\xb0\x3e\xc7\x84\x3e\x56\xc8\xdf\x1f\xc0\xf7\xcb\xfe\x9c\x57\x79\x5f\xfb\x6d\x5c\x03\xe5\x88\x37\x72\x93\xe1\x7c\x09\x42\x7b\x28\x9f\x75\xbb\x52\x3f\x8e\xfd\xa4\x16\xc7\x8d\xf8\xf5\x9a\x08\x68\x70\x1a\xba\x90\x70\xac\x32\x80\xc0\xfe\x7e\x0b\xb7\xdb\x66\x48\x9c\x37\xd9\x86\x20\xcc\x4b\x5a\xd7\x81\xe3\xd4\xd7\xaf\xf3\xa2\x4b\xc4\x51\x21\xa2\x2b\xc9\x09\x5d\xd9\xdf\x17\x4c\xa3\xaa\x36\x70\x37\xba\x2e\x4c\xe4\x83\xfd\x0e\xa9\xbc\x46\xff\x42\xc9\xdd\x8a\xb3\x0d\x4d\xfd\x60\xd8\xa9\xc2\x19\xbe\x8f\x44\xae\x4f\x8d\x8e\x9f\xc8\x87\x10\x7a\x08\x4e\x51\x9e\x63\xde\xb5\xe8\x6e\x9a\x1c\xfd\x3d\x19\xdb\x17\xf3\x00\x41\x1b\x81\x5d\x1b\x20\x3a\x2a\x27\x29\xce\x30\xd7\xce\xfd\xa0\x7f\xc8\xd8\x49\x94\xeb\xa6\x27\xac\xf9\x4b\x24\xd7\x26\x68\xb7\xb7\xa1\xfb\x1d\x06\xd1\x14\x7c\xfc\xd9\x2a\x7b\x5e\x60\x3f\x51\xf0\xec\x2f\xbc\x5e\x30\x54\x85\x96\x95\xca\x35\x2c\xc1\x0b\x3f\x79\x9f\x3c\x6f\xcc\xc1\xe0\x70\x55\x7f\x98\x73\x50\x17\x69\xc6\x78\x81\xa4\x39\x47\x3c\x13\xba\xbd\x7f\x35\x37\xec\x1c\xd4\x35\x74\x15\xaf\x9d\xea\x57\x88\x2b\x8a\x37\x4d\x5d\x1b\x41\x56\xca\xb0\xf5\xbb\x97\xbc\x6a\x6e\xd9\x79\x20\x99\x56\x7b\xb5\x54\x07\xd5\xe0\x58\x37\xbd\xe7\x9c\xcd\xa3\x5d\xd9\x9f\xcf\x53\x54\x60\x4d\x0c\x76\x3b\xf3\x9a\x93\xe2\xbf\x48\x48\xdb\xa2\xef\x68\xaa\xe8\xea\xfa\x94\x15\x05\xaa\x6b\x15\x42\xd3\xb3\x5d\x5e\x7f\x0b\x00\x00\xff\xff\xa8\x61\x44\x4c\xbd\x21\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe6, 0xa0, 0xb8, 0xfe, 0x49, 0x7d, 0x24, 0x28, 0x8f, 0xdd, 0x3a, 0xa, 0x79, 0x97, 0x20, 0x40, 0xc, 0xff, 0x90, 0x1b, 0xb4, 0xa2, 0xe7, 0xde, 0x3, 0x5e, 0xb4, 0xdc, 0x91, 0x43, 0xdd, 0x8a}}
	return a, nil
}

var _definitionsInfosHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x3d\x6f\xdb\x30\x10\xdd\xf5\x2b\x1e\xb4\x64\x89\x33\x35\xdd\x3a\xd5\x1d\x3a\xb4\x5d\x0c\x74\xac\x68\xf1\x6c\x5f\x25\x1d\x55\xde\xb1\x8e\x5a\xf4\xbf\x17\x94\x6c\xc4\x4e\x62\x05\xb1\x16\x01\xc7\x7b\x1f\xbc\x77\x60\xc1\xb2\x09\x28\xc3\xfa\x27\xd5\x56\xa2\xec\xc8\x5c\x89\xb2\x0e\x62\x24\xb6\xe8\xfc\x7d\x89\xbf\x05\x60\x43\x4f\x38\x7e\x1f\x50\xaa\x45\x96\x6d\x59\x00\x9e\xb5\x6f\xdd\xf0\x43\x5c\x47\xf9\xe4\xe3\x04\xfd\xb2\xbc\x2f\x8b\x7f\xaf\xd0\x67\xd6\x13\xfe\x13\xde\x4b\x48\x32\xb7\x7d\xab\xa3\x4f\x2b\x37\xc3\xc8\xfe\x9c\xef\x8c\x8a\x1e\xfa\x10\x2d\x17\x2d\x26\x2a\x80\x3a\x74\x1d\x89\xe5\xae\xcf\x4b\xb0\xc2\x76\x84\x24\xfc\x2b\x11\x1a\x1a\xc0\x02\xb5\x10\xdd\x96\xee\x2e\x4b\x66\x63\x57\x8a\x7e\xcd\x77\x62\x05\xb1\xed\x28\x8e\xea\x6e\xad\xa1\x4d\x46\xe8\x9d\xed\x10\xa6\x62\xa4\xd6\x19\xff\x3e\x14\x2d\xec\x5d\xf4\x7a\xb4\x76\xa3\xf8\x1e\x62\xb3\xe4\x08\x4f\x3d\x89\x57\x04\x41\x52\x8a\x37\x0a\x96\x3e\xd9\x8c\x79\xe5\x3f\x4f\x32\x63\xb1\xf7\xef\x66\x00\x93\xe8\xa2\x6e\x9d\xea\xdb\xd2\x36\x17\xb7\x64\x33\xa3\x3a\x99\xcc\x6a\xec\x3d\x46\xa2\x43\xd7\xb2\x34\x98\x18\xb0\x19\xc7\xc2\x8a\x49\xe1\x16\x41\xda\x01\xf4\xc0\x6a\xd8\xef\x48\x0e\xf5\x49\x84\x15\x19\x3b\x33\x83\x27\x7b\x3b\xb9\xfa\x36\x36\xad\xf2\xd1\x2b\x21\xe6\x1e\xd4\x21\xb5\x1e\x6b\x42\x10\x42\xd8\xa0\xda\x70\x4b\xd5\x2d\x2a\xcf\x31\xff\xb2\x85\x2a\xc7\x59\x25\x69\x24\xec\xa5\x9a\x31\x94\x7a\xef\x8c\xfc\xc2\xd9\xf9\x80\x8d\x3b\xba\x5b\x71\x47\x8f\xd0\x43\x1c\x8f\xd8\x36\xd4\xce\x38\xc8\x7c\x34\xcf\x60\xcf\x96\xf8\xa5\x1d\x3e\xdc\xfe\x22\xc9\x3e\xc4\x66\xe1\x39\x5e\x4f\xa4\xe6\x8c\xd5\xb8\x1e\x9f\x95\x24\x36\xbb\x9b\x2f\xe3\x66\x56\xfa\x7f\x00\x00\x00\xff\xff\x3d\x6a\xc1\x5c\x20\x05\x00\x00")

func definitionsInfosHclBytes() ([]byte, error) {
	return bindataRead(
		_definitionsInfosHcl,
		"definitions/infos.hcl",
	)
}

func definitionsInfosHcl() (*asset, error) {
	bytes, err := definitionsInfosHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/infos.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7c, 0xd2, 0xa0, 0xf3, 0xb7, 0xfb, 0x85, 0xed, 0xaa, 0x5e, 0x3c, 0xd, 0x12, 0x89, 0x8c, 0x26, 0x3d, 0x59, 0x9c, 0x54, 0x89, 0x36, 0x8a, 0xaa, 0x3a, 0x73, 0x73, 0xcd, 0xda, 0xcb, 0xd6, 0xe1}}
	return a, nil
}

var _definitionsOperationsHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x4d\x8f\xdb\x36\x10\xbd\xfb\x57\x0c\x74\x09\x50\x18\x3e\xb5\xbd\xed\x29\x40\x81\x1e\x82\x16\xd9\x43\x0f\x45\x60\xcc\x52\x23\x7b\x5a\x89\x14\xc8\x91\x9d\x4d\xb1\xff\xbd\x18\x4a\xb2\x3e\x2c\xc9\xd2\x62\x73\x08\x12\xf1\x0d\x67\xde\xe3\xf0\x71\xbc\x63\x2b\xe4\x33\x34\x04\x89\x71\x25\x93\x4f\xe0\xbf\x1d\x40\x4a\xc1\x78\x2e\x85\x9d\x85\x27\x48\x38\x80\x9c\x09\x3a\x70\xe6\x3c\x7c\x76\xe5\xeb\x21\xd9\xed\x00\x5c\x19\xa3\x5f\xeb\xd8\xbb\xe8\x2b\xe7\x39\xe8\x3a\xa0\x85\x3f\x5e\xfe\x21\x23\xe0\x3c\x14\x55\x2e\x5c\xe6\x04\xae\xfe\xc4\x36\x26\x09\xe4\x2f\x6c\xe8\x90\xc4\xad\x4a\xf4\x58\x04\x88\x7f\x9e\xe0\xef\x24\x78\x93\xec\x21\x49\x83\x24\xdf\x76\x00\x6f\xbb\xb7\x3e\x85\x94\xfd\x31\xe7\x20\xf3\x34\xaa\x40\x69\xac\x3e\x65\x4f\x46\x9c\x7f\x85\x17\xd4\x6f\x41\x9c\xc7\xd3\x2d\x3d\x88\x03\xdd\xa9\x29\x2e\x40\x65\x53\xf2\x80\x1a\xd7\x91\x56\xc4\x31\x65\xbf\x44\xdc\x93\x54\xde\xd6\x9b\x21\x84\x92\x0c\x67\x6c\x9a\x7d\xa6\x28\xea\x7e\xdf\xe2\x8a\xa7\x50\xe5\x12\x6e\x2b\x8e\xe7\x48\x07\x3a\x15\x64\x25\x7c\x34\xfb\x76\xdf\x11\x7d\x00\x2a\x5e\x28\x85\xde\xb9\xd4\x40\xd2\xd2\x47\xe2\xdc\x8a\x5b\x52\x69\x98\xed\xc2\xf8\x2e\x81\xc2\xa4\x40\x6c\x53\xfa\x7e\xec\x2a\x5c\xdd\xe1\x31\xb0\x55\xa8\x0e\x5f\x4b\x9e\x2d\xcb\x71\x90\x78\x89\xbd\xa2\xf5\x72\xcc\x25\xbc\xd7\xa0\x44\x39\xcf\x89\x40\xa7\x46\x85\xba\x94\xab\x67\xa1\xf5\xb5\x44\x38\xa0\x66\xd4\x3b\x29\x6e\x5b\x61\x9a\x7d\x0f\x89\xd7\xbf\x62\x94\xfe\x23\xf0\x0f\x9a\x3a\x99\xc2\x5d\xb6\x9c\xc7\x17\x77\xa1\xee\xf2\x69\xf0\x12\x11\x5d\xd7\xda\x3f\xce\x5e\x4a\x4f\x19\x7f\x5f\x7b\xc7\x6a\xf4\x46\x7b\xa9\x83\x46\x0e\x53\x7f\xfc\x50\x93\x69\xb6\xdc\xe2\x33\x0d\xfb\xad\x56\xb3\x4a\x86\x3b\x9f\xb9\xe9\xb0\xde\x6a\x46\xf5\xad\x76\x9b\xf7\x28\x34\x6d\x34\x9e\xd0\x9c\xb7\x34\xf4\x57\x0d\xe8\x0e\x3b\xc6\x2f\xd5\x5d\x7a\x77\xe1\x54\x6f\xe7\x15\x5f\xf7\x70\x3d\xb3\x39\x83\x41\x0b\x31\x32\x26\xa8\x1b\x6a\xbb\x6b\x54\x3e\x9f\xa2\x34\x72\xcd\xb8\x62\x31\x87\x27\x10\x5f\x51\x5b\x38\xbe\x38\x2f\x6b\xcc\x25\x02\xb5\x43\x1f\x7a\x48\xdf\xc1\x8c\x2b\xca\x9c\x84\xd6\x64\x68\xb1\x5d\x12\x40\x9b\x42\x41\xfe\x44\x2a\x50\xd1\x78\x1a\xfc\xc6\xf9\xac\x0b\xdc\xf2\x8f\xb4\x88\x4d\x3b\x7d\xbe\x7a\x0a\x05\xb2\x15\x64\xdb\x8c\x36\x6a\xa0\xa3\x86\x0f\xbd\x81\xc9\x13\xca\xa2\x81\xd5\x08\x40\xb0\x74\x6d\x37\xd2\x47\x29\x08\xda\x59\x07\xb3\x58\xd0\x5c\xd3\x8a\xf3\x34\x10\x36\x25\x95\x6a\xa9\x86\x1a\xa1\x62\x6e\xcd\xdf\xe6\x38\xd1\xe2\x79\x9d\x48\xfb\xe1\x82\x39\xa7\xf7\x39\xe2\x25\x59\x76\xec\x4d\x7c\xf5\xde\x3f\xf4\x05\xcc\xf3\xfb\x4a\x5a\x67\x92\x33\x87\x51\x45\xf7\x69\x27\xcd\x21\x08\x0a\x07\x61\xc3\x68\xd7\x3b\xc4\x73\x1b\x85\x79\xd7\x3a\xa1\xfb\xb8\x7c\x15\x2a\x2b\x6d\xb1\x9f\x02\xdc\xc2\xc2\x1e\x42\x65\xce\x80\x01\x9e\xf9\x07\xed\xe1\xb3\x22\x67\xe9\x34\x51\xd3\xa4\x6a\x9d\xd6\x13\x1a\x5d\x88\x8e\xd4\xfa\x5e\xbc\xfd\x88\xc8\xbc\x2b\x1e\xb4\xc7\xcd\xf1\xda\x16\x28\x48\x30\x45\xc1\x15\xaf\xa9\xa9\xbc\x57\xff\x68\x49\x7e\x0a\xd0\x46\xcf\x68\xa5\xcb\x83\x6c\x9e\x30\x5d\xce\x84\x69\x14\x29\xe3\x5c\x8f\xa8\xb7\xf7\x24\x93\x3d\x24\xd7\xa6\xdb\x4b\x64\x1f\xfa\xcf\xa2\xce\x58\x7b\x48\x5c\x96\x05\x92\x38\x83\x11\xa6\x47\x83\x79\xfe\x82\xe6\xdf\x63\x56\x59\x33\x73\x51\xec\xa0\x66\x3d\xf0\xa5\x9a\x75\x3d\xce\x87\x72\xd6\xf7\x5b\x2f\x30\xdb\xcc\x81\xcb\xba\x69\x6b\xfb\xfb\xe3\xee\x67\xd6\xc7\x53\xaa\xca\xd5\xfa\x79\x36\xef\xe7\xad\x74\x7e\xb5\x74\xcd\x91\x1f\x4d\x8e\x21\xe8\x07\xe3\xac\x90\x95\xa3\xbc\x96\xd4\xff\x7f\x91\xfe\xf2\x2e\xa9\xdf\x76\xbb\x8c\x29\x4f\xe3\xcf\xb7\x9a\xa8\x6e\xad\xfc\x82\x78\xb6\xa7\x64\xf7\x76\x43\xb4\xa6\x35\x8b\x20\x3f\xda\x83\xbc\x77\xbe\x07\xa8\x27\xf1\x01\x84\xad\xf4\x00\xb1\x73\x07\xeb\x3f\x3d\xd7\x1a\x7c\xd1\x95\x0e\x68\xef\x76\xf9\xf5\xe7\xfe\xb2\xda\xf1\x72\xb1\x6e\x94\xa7\xbe\xcc\x7d\x00\x4f\x22\x7e\x17\xf2\x28\x03\x5a\xf1\x20\x87\xe0\xc3\xe1\xf0\x27\xf2\x10\x24\xe7\x07\x25\xf5\x07\xec\x59\xd0\x48\x62\x76\x87\xaf\x84\x29\xf5\x53\xe9\xe0\x30\x00\x3d\x37\x03\x4b\x0f\x32\x26\xd7\x40\x26\xd8\xc5\xb6\x5c\x54\x5b\x7f\xae\x2c\x17\xdd\xb9\xf7\xe4\xe1\xde\x9e\x97\x41\xc8\x5d\x89\x8d\x01\x4e\xd5\x18\xdf\xd8\x21\xe7\xf6\x4d\xe8\x50\x3a\x5c\x2e\xd7\x79\xbd\x13\xf7\x2f\xbd\xe1\x71\x93\xff\x03\x00\x00\xff\xff\xde\x29\x2a\xd9\xa5\x12\x00\x00")

func definitionsOperationsHclBytes() ([]byte, error) {
	return bindataRead(
		_definitionsOperationsHcl,
		"definitions/operations.hcl",
	)
}

func definitionsOperationsHcl() (*asset, error) {
	bytes, err := definitionsOperationsHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/operations.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x95, 0x4b, 0x50, 0x96, 0xb4, 0xb6, 0x36, 0x1d, 0xb7, 0x5e, 0x49, 0xd2, 0x1c, 0x5a, 0x2b, 0xa, 0x80, 0x42, 0xf3, 0x54, 0x14, 0x76, 0xac, 0xad, 0xb8, 0x88, 0xd3, 0xfb, 0xa3, 0x62, 0xa8, 0x6e}}
	return a, nil
}

var _definitionsPairsHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\xcf\x6e\x1b\x39\x0c\xc6\xef\x7e\x0a\xc2\xa7\x64\x11\x38\x97\xdd\xbd\xe5\xb2\x0b\x14\xc8\xa1\x68\x80\xb6\xa7\xb6\x18\xc8\x12\x27\x26\x2c\x8b\x2a\xc5\xb1\x33\x2d\xfa\xee\x85\x34\x7f\x3c\x71\x26\xae\x11\x1f\x0c\x8f\xf9\xe9\xe3\x6f\x48\x4a\x5a\x44\x43\x02\x4b\xcb\x41\x31\x68\xb5\x73\xff\x2c\xe1\xe7\x02\x40\xdb\x88\x70\x07\xcb\xa4\x42\xe1\x71\xb9\xf8\x75\x22\xcc\xf1\x0b\x94\x4f\x3a\x11\xf5\x9f\xbb\x31\xb6\xfa\xbf\xd7\x2c\x00\x1c\x26\x2b\x14\x95\x38\x4c\x14\x40\x01\x8c\xf7\x20\xf8\xbd\xc1\xd4\x0b\x6b\xd3\x78\x3d\xb5\xfa\xcf\xd8\xed\xa3\x70\x13\xdc\xd5\xf5\x73\x08\x0a\x8d\xc9\xb6\x95\xf2\x16\xc3\x2c\xcf\xc0\xfe\x02\x23\x45\xb4\x54\xb7\xa0\x1b\x84\xa9\x17\x14\x2f\xa8\x59\xc0\x53\xd2\xca\x91\xc0\xf0\x3b\x0a\xd6\xf4\xb4\x9a\x40\x08\x3a\x0c\x4a\xc6\xcf\x26\xff\xeb\x18\x5f\x3d\x08\xef\xc9\xa1\x9c\x41\xd9\xf0\x01\x94\x21\x76\x4a\x38\x2e\x2e\x34\x09\x65\x4f\x16\x33\x4c\x52\x16\xf3\x88\xd9\x2a\x1a\x49\x28\xc7\xf2\x4f\x12\xe6\xc8\x11\x15\x83\x8b\x4c\x61\xbe\x6b\x43\xf0\x0d\x94\xc3\xd2\xcb\x19\x8f\xc9\x4e\x08\x9f\x22\x09\xce\xf2\x65\xee\xd7\x89\x0e\x1b\x0c\xa5\x8f\x8d\xe4\x79\xd2\x46\x02\x3a\x58\xb7\x20\x68\xec\x06\x0e\xe4\x3d\xf4\xe6\x2f\x69\xca\xe3\x7d\xf6\x1f\x38\x36\xaa\xb1\xb2\x9e\xf2\x66\xe0\x92\x2c\xcd\x77\x37\x0b\x3b\xdd\xea\x43\xaf\x9b\x81\xc4\x38\xce\x59\xef\x56\x4a\x95\x9f\xb3\x01\x74\x0e\xc7\xf4\x14\x14\xc5\x62\x54\x96\xe7\xdb\xf0\x7e\x12\x18\xd5\x9e\x6d\x19\xdb\xb7\x0f\xff\xe0\xf0\x6a\x03\x87\x54\xc1\xec\xe6\xbb\x73\x51\x9a\xde\x0e\x8a\xcb\xe8\xc9\x75\x9d\x70\x7e\x26\x29\xe8\xbf\x7f\x9f\x31\xed\x96\xf6\xb5\xa4\x34\x1c\x24\x37\x63\xa6\xd2\xf7\x84\xb8\xcd\xe3\x5a\x24\xfd\x92\x35\xd6\x2c\x98\xa7\xc3\x9d\x19\x88\x9c\x7c\xc0\xcc\xdf\x55\x64\x4f\xb6\x7d\xde\x93\x07\x43\xf2\xd0\xfd\x3f\x8a\xb3\x6f\x65\x8d\xf7\x6b\x63\xb7\x55\xdd\x04\x3b\xfb\x7e\x39\x70\xf5\xe5\xdb\xba\x55\xbc\x3e\x3b\xdc\x46\x41\xd9\x31\xe0\x1e\xa5\x05\xa5\x1d\xc2\xa1\xa3\x07\x67\xd4\x40\x2d\xbc\x83\xc4\x8d\xd8\x49\x61\x13\xfd\x78\x75\x2b\x9d\x2d\x6b\x5e\xf8\xa7\xa2\x72\xf0\x6d\x07\xe0\x69\x47\x8a\x0e\xfa\xcb\xa3\x00\x5d\x58\xd3\xde\xb1\xb2\xde\xa4\x74\xfe\xc2\x39\xb0\x6c\xf3\x41\xfc\xf6\xe9\xcb\x0e\x90\x8f\xf2\xf9\x21\xbf\xe9\x8b\xcb\x11\xa5\xdb\x0c\xe5\x3d\xd7\xb9\xcc\xde\x28\xed\x71\x9c\x21\x47\xb2\x82\x01\x08\xde\x7f\xfe\xf8\x09\x92\x1a\x51\x38\x90\x6e\xe0\xb6\x24\xe8\xcc\x86\x92\xf5\xe9\xd2\x64\xd9\xe0\x3e\xdc\x78\xca\x70\x0b\x54\x43\x60\x85\x84\xba\x82\xaf\x01\xde\xb1\x40\x9d\x4e\x5d\xa0\xb0\x05\xc7\x87\x04\xd1\x1b\xad\x59\x76\x37\xe5\x15\xd7\xb8\x31\x7b\x62\x01\x4a\xd0\x04\x87\x35\x05\x74\xe5\xae\xfa\x1d\x00\x00\xff\xff\x06\xe8\x87\x59\x0a\x08\x00\x00")

func definitionsPairsHclBytes() ([]byte, error) {
	return bindataRead(
		_definitionsPairsHcl,
		"definitions/pairs.hcl",
	)
}

func definitionsPairsHcl() (*asset, error) {
	bytes, err := definitionsPairsHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/pairs.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0x89, 0x86, 0x32, 0x69, 0xa4, 0xee, 0x44, 0x46, 0xc4, 0x79, 0x3f, 0xcc, 0x58, 0xf1, 0x24, 0xce, 0x0, 0x7c, 0xc9, 0xdc, 0xb5, 0xba, 0xa2, 0x8a, 0xb, 0x64, 0x5a, 0xf0, 0x2d, 0xd7, 0x3d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
	"definitions/infos.hcl":               definitionsInfosHcl,
	"definitions/operations.hcl":          definitionsOperationsHcl,
	"definitions/pairs.hcl":               definitionsPairsHcl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": &bintree{nil, map[string]*bintree{
		"definitions": &bintree{nil, map[string]*bintree{
			"tmpl": &bintree{nil, map[string]*bintree{
				"function.tmpl":  &bintree{cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl":      &bintree{cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl":    &bintree{cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": &bintree{cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl":      &bintree{cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl":   &bintree{cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
	"definitions": &bintree{nil, map[string]*bintree{
		"infos.hcl":      &bintree{definitionsInfosHcl, map[string]*bintree{}},
		"operations.hcl": &bintree{definitionsOperationsHcl, map[string]*bintree{}},
		"pairs.hcl":      &bintree{definitionsPairsHcl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
