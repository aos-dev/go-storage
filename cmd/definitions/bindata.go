// Code generated by go-bindata. DO NOT EDIT.
// sources:
// cmd/definitions/tmpl/function.tmpl (331B)
// cmd/definitions/tmpl/info.tmpl (1.699kB)
// cmd/definitions/tmpl/object.tmpl (1.908kB)
// cmd/definitions/tmpl/operation.tmpl (1.02kB)
// cmd/definitions/tmpl/pair.tmpl (483B)
// cmd/definitions/tmpl/service.tmpl (8.821kB)

// +build tools

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcf\x4a\xc4\x30\x10\xc6\xef\x7d\x8a\x8f\x25\x87\xae\xac\x79\x00\xc1\x53\x51\x10\x44\x16\xf5\x2e\x43\x36\x5d\x83\xcd\xa4\x24\xd3\xba\x10\xf3\xee\x92\x56\x5d\x3c\xec\x29\x21\xbf\xc9\xf7\x67\x72\xbe\x46\x24\x3e\x5a\xa8\xb7\x1d\xd4\x8c\x9b\x5b\x28\x7d\x3f\xb1\x49\x28\xa5\xa9\xd8\xf5\xe0\x20\x50\xb3\x7e\xf0\xe3\x60\xbd\x65\xb1\x87\x5f\xa8\x7a\xfe\x58\xfe\xcc\xfa\x89\xbc\xc5\x17\x24\x74\xe4\xed\x50\x07\xfa\x89\x0d\xda\x84\xab\x9c\xa1\xce\x7c\x4f\xc9\x50\x1d\xd8\x22\xe7\x2a\x50\x4a\x6b\xe4\x04\x13\x58\xec\x49\x74\xb7\x9e\xbb\x4a\x67\xbd\xa7\x48\x3e\xe9\xd7\xe8\xfc\x23\x25\xd1\x2f\x12\x1d\x1f\xef\xf8\x90\x3e\x9d\xbc\x77\xc1\x7b\x2a\x05\x61\x14\x8c\xe4\xe2\x05\xa7\xfa\x5c\x93\xfe\xb7\x6f\x17\x83\x67\x9b\xa6\x41\xd2\x8f\xf0\x92\xaa\x01\x80\x91\xd8\x99\x76\x53\xbb\xbb\x73\xf1\xcd\xb6\x59\x9b\x5b\xfe\x5b\xc2\x7a\xfd\x0e\x00\x00\xff\xff\x82\x2d\x89\x00\x4b\x01\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x25, 0x98, 0x85, 0xde, 0x73, 0x92, 0x3e, 0x34, 0xfd, 0x5c, 0x89, 0x97, 0xfb, 0x2b, 0x5d, 0x52, 0x16, 0x41, 0x2, 0xff, 0x19, 0xfd, 0x26, 0xae, 0xa6, 0x51, 0x78, 0xad, 0x39, 0xa0, 0xe, 0x5a}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xf5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x93\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\x64\x27\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x93\xa6\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x63\xb1\xc6\x52\x6f\x62\x08\xe5\xc8\x28\x5e\xa6\x99\xcc\xdf\xe1\xf4\x0a\x97\x57\x37\x38\x3b\x3d\xbf\x99\xb1\x8a\x67\x2b\xbe\x24\xb8\x75\x45\x96\x31\x21\x2b\x6d\x1c\x26\x0c\x00\x46\x85\x74\x23\x96\x30\xd6\xb6\x07\x30\x5c\x2d\x09\xe3\xd5\x14\x63\xa1\x0a\x6d\xf1\x76\x8e\xd9\x79\x58\x5d\xf0\x0a\xde\xb3\xb6\xc5\xd8\x92\x69\x44\x46\x97\x5c\x52\xd8\x1f\xaf\x70\x07\xa7\x4f\xb8\xa4\x32\x1c\x61\x69\x8a\xf7\x82\xca\x1c\x42\xe5\x74\x0b\xa1\xd0\xb6\xdb\x49\xde\x63\x21\x1c\xcb\xb4\xb2\x01\x62\x47\xb7\x89\x35\x3b\x75\xef\x23\xe2\x6e\xfa\x79\xa8\x1b\x48\x9a\x59\x84\x08\xf2\x9f\xb8\xcd\x78\xd0\xc7\x1c\x47\xc7\xc7\x61\x77\xd5\x01\x1f\x80\x54\x1e\x96\x09\x63\xc1\x00\xec\xf6\x30\x4c\xb7\xce\xd4\x99\x43\xdb\x2b\x6f\xd8\xbe\x3d\xc5\x16\x30\x6e\xd6\x55\x57\xcb\xfb\xad\x2f\xf7\x67\x36\x0c\x31\x4e\xd3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\x17\xdf\x29\x73\x68\x78\x59\xd3\x14\x87\x90\xc4\x95\x85\xd2\x0e\x96\xdc\x14\x47\xfd\x07\x4b\x2e\x96\x8a\x75\x84\x72\x6f\x5e\xc7\x50\x42\xf2\xea\x8b\x75\x46\xa8\xe5\xd7\x38\x10\x05\xcf\xa8\xf5\xac\x57\x7e\xde\xeb\xb0\x2b\x8a\x40\x7f\x76\x1b\x27\xc4\x7b\x56\xd4\x2a\xc3\x44\xe2\xd5\xb3\xae\x25\xf8\x40\xae\x6b\xfc\x54\xd8\xaa\xe4\xeb\xde\x8d\x49\x32\xf4\xa3\xf7\xd5\x90\xab\x8d\x82\x9c\x3d\xb0\x2f\x90\xfe\xa9\xe6\xf5\x13\x9a\xcd\x50\x33\xf9\x4d\xa1\x9e\xe9\x11\x18\xcc\xd1\x0c\x78\x59\x3f\x50\xa5\x8d\xac\xff\xc0\x9d\xc9\x00\x75\x8a\x85\xd6\x65\xd2\x13\x89\x02\x72\x16\x6e\xf8\xe5\x9e\x4f\xe0\xc5\x1c\x87\x7d\x8d\xe7\xdd\x9e\xc2\x99\x9a\xe2\x41\xbf\xdd\xe8\x16\xd4\x1d\x7e\x90\xd1\x9f\xc3\x3c\xc6\x84\x82\x97\x96\xf6\xb9\xa5\x8b\xda\xba\xfd\xa6\xe3\xaf\xfb\x9e\x0f\xfb\xae\xb8\x12\xd9\xa4\x90\x6e\x76\x5d\x19\xa1\x5c\x31\x19\x3d\xc6\xfa\x91\x16\x7c\x71\xff\x72\x7f\xdd\xbd\xd8\x3c\xbb\x51\x92\x3c\xb4\xe8\xbf\x99\xdd\xce\xca\xbb\xf9\x7e\x5e\x3e\x3a\xf6\xdd\x3f\x6c\xe7\x97\x76\xbf\xfc\x19\x00\x00\xff\xff\x1a\xaf\xa4\x3e\xa3\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbe, 0xfc, 0x4d, 0xd5, 0xaa, 0x43, 0xd, 0x38, 0x2a, 0xe9, 0x1b, 0x28, 0x33, 0xa1, 0xf, 0x25, 0xb3, 0x72, 0xf8, 0xb5, 0xf, 0xf, 0x28, 0x3d, 0xdd, 0x4d, 0x3d, 0x95, 0x9e, 0xd1, 0x56, 0x3e}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x41\x8f\xeb\x34\x10\x3e\xd7\xbf\xe2\xa3\x5a\x41\x82\xba\xc9\x7b\x80\x38\x3c\x5e\x0f\xe8\x75\x81\x95\xd8\x16\xa9\x85\xbb\xeb\x4c\x5a\xb3\x89\x1d\xd9\x93\xd2\xd2\xcd\x7f\x47\x4e\xd2\x25\xdd\x2d\xa8\x2b\x2e\xdc\x3c\x9e\x99\xcf\xf3\x7d\x33\xb6\xd3\x14\x9f\x6c\x46\xd8\x90\x21\x27\x99\x32\xac\x0f\xd8\xd8\x67\x1b\xda\x30\x39\x23\x8b\x54\x95\xd9\x77\x98\x2d\x30\x5f\xac\x70\x37\xbb\x5f\x25\xa2\x92\xea\x51\x6e\x08\x7c\xa8\xc8\x0b\xa1\xcb\xca\x3a\x46\x24\x00\x60\x9c\x97\x3c\xee\x56\xac\x4b\xea\x97\xfe\x60\xd4\x58\xc4\x42\xa4\x29\x7e\xd0\x54\x64\xd0\x26\xa3\x3d\xb4\x81\x5d\xff\x4e\x8a\xb1\xd6\x2c\x94\x35\x3e\xe0\x1c\x8f\xb7\x70\xd2\x6c\x08\x37\x8f\x13\xdc\xec\xf0\x61\x8a\x64\xd1\xc6\x3d\x10\x4b\x34\x4d\x8b\xda\x65\xde\x07\xa0\xe3\x11\x37\xbb\x64\x2e\x4b\xc2\x13\xd8\xfe\x22\xbd\x92\x05\x9a\x06\xb5\x36\xfc\xed\x37\x98\xe2\xfd\xc7\x8f\x21\xe8\x31\x24\x07\x7c\x32\x59\x58\x76\x25\x75\xd8\xd0\x1e\xbc\x25\xf8\x52\x16\x05\x79\x46\x6d\x34\x87\x12\x37\xf6\xd6\xb3\x75\x72\x43\x89\x48\xd3\x90\x30\x5f\xac\xee\x96\x1f\xc2\x0a\xb8\xed\xd3\xbf\xf0\xc8\x03\x35\x8f\xe5\x4f\x8b\x5f\x7f\x9e\xc1\x58\xc6\x9a\xa0\xb6\x81\x4a\x06\x5b\xb3\xd7\x19\xc1\x93\xdb\x69\x45\x3e\x39\x4f\xc7\xa7\xef\xe7\x41\xe2\x90\x61\x2b\x4d\xd9\x0b\xb7\xf6\x50\xd6\xa8\xda\x39\x32\x0c\x2f\x73\x4a\x44\x68\xc0\xc9\xef\xd9\xd5\x8a\x71\xbc\x56\xbd\x10\xa6\xf3\x20\xdb\x8c\xbc\x72\xba\x62\x6d\xcd\xc9\x89\x34\x45\xa7\xe9\x05\xe7\x40\xbe\xce\x0c\x71\xab\x43\x45\xad\xfe\x4d\x33\xd8\x79\xa1\xb6\x18\xa5\x29\x54\xa1\x03\x83\x5e\xec\x93\x65\xf0\xc7\x56\xab\xed\x80\xad\x2c\xf4\x8e\x12\x31\xea\x23\x96\x5d\x07\x9c\x10\x7d\x7d\x6b\xcd\xa8\x3d\x65\x90\x1e\x32\x58\xa5\xac\x90\x5b\x77\x9a\xa8\x9d\x2c\x6a\x9a\xe0\x1d\x4a\x92\xc6\xb7\xdd\xf0\xc4\x13\xbc\xef\x37\x3c\x71\x0b\xd5\xe2\xb4\x63\x22\x46\x99\x35\xd4\x1a\x5f\x7f\x25\x46\x65\xf0\x86\xc9\x4d\x1e\x6a\xa6\xbd\x68\x84\xb8\x46\xdc\xbf\x85\xbd\xdb\xb7\x17\xa3\x69\x44\x5e\x1b\x85\xc8\xe2\xcb\x2e\x34\xc6\x8f\xc4\xbd\xbe\xda\x57\x85\x3c\xf4\xd2\x45\xf1\xb9\x78\x38\xb6\x25\x3a\xe2\xda\x19\xd8\xe4\x95\xd6\xa1\xa8\x57\xe0\xcb\x7f\x00\xdf\x9d\x83\xc7\xa7\x8c\xfe\x94\x0b\xf0\x98\x62\x77\x56\x81\xe8\xfb\x59\xf8\xf6\xf4\xb7\x10\x8b\xce\x0e\x9f\x60\x6d\x6d\x11\x3f\x1f\xed\x59\x72\x14\x77\xcd\xd5\x39\x6c\x12\xda\xf2\xf9\x55\x77\xfc\xb3\x29\xde\xf5\x38\xff\x2e\xd6\x04\xec\x6a\x6a\x03\x1b\x31\xa4\x35\xa8\xec\x09\x7f\x92\xb3\xbf\x85\xd9\x69\x33\x72\x59\x78\xba\xa8\xf2\x43\xed\xf9\x6d\x6d\xfc\x4f\x2c\xa7\xe7\x2c\x2b\x69\xb4\x8a\xf2\x92\x93\x65\xe5\xb4\xe1\x3c\x1a\xf7\x73\x3f\x40\x68\x9a\x70\x91\xfa\xc9\x1f\xc7\x71\x4f\xfd\xff\x31\x52\x1d\xf9\xa7\xe9\x35\xec\x2f\xce\x60\xf7\xa6\x0c\x9f\x97\x57\x65\xab\xc2\x1a\x8a\xf6\x83\x9d\xe3\xf3\x13\x76\xcd\x0f\x73\xb1\xfc\xfd\x25\xd1\x5e\x3c\x8c\x03\x86\x6d\x42\xf8\xde\x9a\xbf\x02\x00\x00\xff\xff\xe0\xaf\xa2\xb9\x74\x07\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0xa8, 0x6e, 0xe2, 0x32, 0xf5, 0x94, 0xf, 0x33, 0xa9, 0x21, 0x65, 0x6b, 0xd, 0xec, 0xdc, 0x2d, 0xd5, 0xda, 0x1d, 0xb8, 0xc7, 0xec, 0x5a, 0xa5, 0x69, 0xb8, 0x45, 0x20, 0x16, 0x5, 0x35}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xcd\x6a\xe3\x30\x10\xbe\xeb\x29\x06\xe3\x83\x0d\x59\xfb\xbe\xb0\x87\x65\x97\x42\x2f\xad\x69\x0f\x3d\x16\x55\x95\xdd\xa1\xb6\xa5\x4a\x4a\x48\x50\xf5\xee\x65\x64\x25\x38\xc6\x25\xa5\xf4\x66\xcf\xcf\xf7\xa3\xf9\x34\x17\xaf\xbc\x93\xe0\x0e\x5a\x5a\xc6\x70\xd0\xca\x38\x28\x18\x00\x40\x26\xd4\xe8\xe4\xde\x65\xd3\x1f\xaa\x8c\x95\x8c\x79\xff\x0b\x0c\x1f\x3b\x09\xf9\xe3\x06\x72\x84\xdf\x7f\xa0\xba\x1e\x9d\x34\x2d\x17\xd2\x42\x08\xcc\x7b\xc8\xb1\xfa\x2f\xad\x30\xa8\x1d\xaa\x91\x8a\xc4\x00\xa9\x83\x56\xf7\xfc\x70\xc3\x07\x09\x21\x00\x1e\x97\xc1\x47\x26\x62\xc0\x16\x94\x81\x42\xbe\xd1\x7c\x1c\xcc\xac\x34\x3b\x14\xd2\x64\xe5\xa2\xee\x94\xe1\x1d\xd5\x43\x88\xfb\xf7\xce\xe0\xd8\x15\x25\xd8\xf8\x71\xc2\x94\xe3\x33\x09\x49\xff\x73\x13\x4a\x93\x8b\x1c\xab\x5b\x1d\x0d\xd0\x44\x5d\x47\xb5\x4a\x4f\x34\xef\xe0\x54\xc3\xad\xe0\x3d\x49\x4e\x9d\x85\xc5\x04\xbc\xbe\x53\xa4\xce\x95\x32\x03\x77\x0d\x37\x7c\x20\xae\x12\xce\x1b\x77\xd2\x6e\x7b\x67\x1f\xd0\xbd\x34\xd3\x6d\xce\x5c\x66\xb4\x72\x51\x1f\x6d\xff\x9b\x8e\xf7\x1d\xa9\xb3\xf5\x42\xb8\x3d\xa4\x1c\x54\xa9\xb6\xf9\x61\x27\xde\x1f\x4f\x13\xd8\xfc\x4e\x31\x31\x0d\x47\xd3\xa8\x1e\xc5\x81\xce\xb9\x15\x2e\x85\xe4\x6f\xdf\xc3\x93\x52\xfd\x17\xf3\x88\x2d\x8c\x72\x25\x4b\xd4\xae\x6b\xd0\x1c\x8d\x85\x56\x99\x79\x18\xfd\x69\xfe\xec\x75\x96\x8c\x6b\xe1\xf9\x3c\x39\xab\xa2\x77\x11\x41\xe9\xaa\x89\x3a\x2e\x81\x50\x63\xb7\xc0\x3d\xc1\xa6\xd7\xbb\xf8\x19\xd8\x47\x00\x00\x00\xff\xff\xf0\x4f\x23\x75\xfc\x03\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xac, 0x77, 0x38, 0x72, 0x67, 0x12, 0xac, 0x40, 0x5c, 0xb6, 0x92, 0x9, 0x6e, 0xd8, 0xf4, 0xde, 0x4d, 0x9e, 0x30, 0x85, 0x95, 0xa4, 0xa1, 0x26, 0x9b, 0x9c, 0xa9, 0xe4, 0xd9, 0x43, 0xc0, 0x37}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x31\x6b\xfb\x30\x10\xc5\x77\x7d\x8a\x87\xf1\x90\x40\x62\x0d\xff\x2d\x7f\x3a\x35\x1d\x4a\x21\xc9\x10\xda\xb1\x28\xf2\x55\x11\xb1\x25\x21\x9f\xdd\x1a\xd7\xdf\xbd\xc8\x4e\x03\xa5\x4b\x35\xe9\x7e\xef\xde\xe3\x9d\x94\xb8\xf7\x25\xc1\x90\xa3\xa8\x98\x4a\x9c\x7a\x18\x7f\x9b\x61\x1d\x53\x74\xaa\x92\xba\x2e\xff\x63\xbb\xc7\x6e\x7f\xc4\xc3\xf6\xf1\x58\x88\xa0\xf4\x45\x19\x42\x50\x36\x36\x42\xd8\x3a\xf8\xc8\x58\x08\x00\xc8\xb4\x77\x4c\x1f\x9c\x89\x79\x34\x96\xcf\xed\xa9\xd0\xbe\x96\xca\x37\xeb\x92\x3a\x69\xfc\xba\x61\x1f\x95\x21\xd9\xfd\x93\xe1\x62\xe4\x99\x39\xe8\xca\x92\xe3\x6c\x72\x15\x7f\xf0\x71\x1f\xa8\xc9\x84\x58\x0a\x31\x0c\x6b\x44\xe5\x0c\x21\x7f\x5d\x21\xef\xb0\xb9\x43\x71\x48\xe5\x30\x8e\x93\x9a\x07\xa7\x6a\x4a\x3c\xef\x8a\x5d\xfa\x7e\x82\xfd\x41\x35\x5a\x55\x69\x47\x4a\xbc\x58\x3e\x0f\xc3\xf7\xe6\x38\xe2\xdd\x56\x15\x54\x08\x55\x8f\xc4\xaf\xbe\x71\x44\xa7\xaa\x96\xc0\x1e\xfb\xc0\xd6\xbb\x46\xcc\xf2\x96\x1a\x1d\xed\x84\x52\xe4\x5b\xeb\xf4\xaf\xd0\x45\x77\xcd\x3a\xf6\x21\xcd\x4b\xa4\x9a\x18\xa6\xab\x23\x71\x1b\xdd\x44\x66\x90\xde\x13\xf5\x1b\x64\x3f\x0a\x64\xab\x9b\xfa\x9c\xaa\x6c\xd0\xcd\x64\x14\xf3\xb5\xe4\xca\xd4\xe0\x2b\x00\x00\xff\xff\x26\xdf\x18\x87\xe3\x01\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0x2f, 0x7a, 0x10, 0x8b, 0x7, 0xa5, 0x4, 0xf7, 0x8a, 0x7d, 0x60, 0x9f, 0xd0, 0xf9, 0xb1, 0xc1, 0xc9, 0x4b, 0x3d, 0x79, 0xdb, 0xc, 0xf8, 0x51, 0xfd, 0xe7, 0xd, 0x79, 0x8d, 0x96, 0x48}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x4b\x6f\xdb\xb8\x16\xde\xeb\x57\x9c\x0a\x5e\xc8\x85\x23\xdd\x8b\xbb\xcb\x85\x17\xf7\x26\x9d\x4e\xd1\x99\x36\x68\x32\xd3\xc5\x74\x10\x30\xd2\x91\x4d\x44\x26\x55\x92\x56\x62\xb8\xfa\xef\x03\x3e\xf4\xb2\x25\x5b\x6e\x8b\x36\x8b\x78\x63\x99\x3c\xcf\xef\x3c\x78\x28\x47\x11\x5c\xf0\x04\x61\x81\x0c\x05\x51\x98\xc0\xdd\x06\x16\xbc\xfe\x0d\x05\x25\x40\x99\x42\xc1\x48\x16\xc5\xab\x24\x92\x28\x0a\x1a\xe3\x7f\xe1\xf2\x3d\xbc\x7b\x7f\x03\xaf\x2e\xdf\xdc\x84\x5e\x4e\xe2\x7b\xb2\x40\xd8\x6e\x21\x7c\x47\x56\x08\x65\xe9\x79\x74\x95\x73\xa1\x20\xf0\x00\x00\xfc\x98\x33\x85\x8f\xca\xb7\xbf\x28\xf7\x3d\xfb\xb4\xa0\x6a\xb9\xbe\x0b\x63\xbe\x8a\x08\x97\x67\x09\x16\xd1\x82\x9f\x49\xc5\x05\x59\x60\x54\xfc\x27\xca\xef\x17\x11\xb2\x24\xe7\x94\x55\xdc\xa3\x78\x62\x81\x09\x32\x45\x49\x76\x0a\xd7\x52\xa9\x3c\xce\x28\x8e\xd7\xe5\x10\x91\x96\x3e\x1c\xc1\xa1\x36\xb9\x26\x9f\x7a\x5e\x41\x04\xdc\x42\x63\x69\x78\x25\x78\x41\x13\x14\x6e\xa7\xf2\x3b\xfc\x93\x64\x6b\x74\x8b\xd7\x56\x52\x45\x53\xe9\x0f\xaf\xed\xc3\x2b\x21\x78\xb5\xd7\x78\x13\xbe\xcf\x15\xe5\x4c\x7a\x5e\x14\xc1\xcd\x26\x47\xa0\x12\xd4\x12\x41\x1b\x03\x29\x17\x9d\xd8\xc5\x9c\x49\x65\xc9\xe6\xe0\xb7\x76\x7c\xc3\xef\x34\x01\x29\x08\xcd\xc8\x5d\x86\x90\x13\x2a\x64\xe8\xf8\x02\x6f\xbb\x3d\x03\x41\xd8\x02\x61\x72\x3b\x83\x49\x01\xe7\x73\x08\xaf\x34\x8d\x96\xae\x71\xd2\x14\x34\x05\xc6\x15\x4c\x8a\xf0\x75\xc6\xef\x48\xd6\xec\xe9\xb5\x4b\x94\xb1\xa0\xc6\xea\xee\xc6\x2f\xeb\x2c\x73\xe6\x38\xeb\x26\x95\x79\xb7\x96\xa2\x36\xb6\xd2\x84\x2c\xd1\x32\x5a\x8f\xd3\x01\x47\x56\xa8\x48\x42\x14\x39\xe2\xcb\x1b\x96\xf2\xd1\xbe\xe4\x4c\xdb\x73\x3e\xaf\x4d\xfb\x02\x8a\x5f\x11\x19\xb7\xc9\x8c\x08\xed\x36\x95\x79\x46\x36\x55\x24\xc0\x7d\x1a\x39\xf3\x01\xaa\x96\x73\x07\x41\xfc\xdd\x79\xd8\x48\xdc\xc7\xf1\xec\x14\x1c\x8f\x44\x7b\x08\x1d\xbd\x7e\x0c\x9a\x28\x82\x8f\x54\x2d\x3b\xa6\x3e\xd0\x2c\x03\x92\xe7\xd9\x06\x3a\x56\x42\xa1\x6b\x04\x14\x87\x2a\xd5\x7b\x21\x48\xd7\x2c\xde\x13\x1a\x14\x4e\x96\x49\xf9\xb2\x9c\x82\x36\x1f\xb6\x35\xfc\x02\xd5\x5a\x30\xb3\xda\x2c\xbe\xc5\xcd\xf9\x7e\x4e\xce\xea\x7d\x53\xb4\xe7\x50\xd8\x95\xd2\xeb\x00\xd7\x7a\xec\x07\x50\x8b\x93\x39\x89\xb1\x93\x67\x0a\x57\x79\xa6\x3b\xb3\xaf\x4b\xee\x96\xe1\x83\x0f\x2b\x72\x8f\xd7\x99\xce\xe3\xa0\x0f\xc7\xa9\x59\xc4\x87\x61\x31\xb2\x2d\xa3\x92\x60\xbc\x62\xf1\x80\x76\x0d\xa3\x41\xf9\x18\xeb\xae\x9f\x09\xa6\x94\x35\x7a\x5b\xc2\x27\x39\xd3\x8e\x53\x96\xe0\x23\x84\xf0\xaf\x81\x32\x99\xe8\xe4\x6d\x13\xfe\xdb\xc8\x8e\x22\xb8\xc4\x94\xac\x33\x65\x03\x0b\x65\x69\x53\x90\x4a\xad\x53\x6f\xd8\x2e\x65\x9a\x9d\xcc\x31\xa6\x29\x8d\x81\x18\x2f\x3c\xd3\x05\xfb\xf9\xa5\x12\xeb\x58\xb9\x5c\xe8\x8b\x94\x35\xa8\x53\x76\xfb\xa9\x0c\x7f\xfd\xad\xc5\xed\x56\x52\xe9\x8d\x13\xdb\x1f\xb7\x0e\xf6\x39\x83\x49\xb1\xdf\x0b\x0e\xe1\x6f\xd3\xa7\xa9\xc5\x2e\xfc\xd5\x7a\xca\xf6\xd1\x76\x1b\xf7\xc6\xd0\x94\xf5\xd5\xae\x8e\x88\x56\x52\xc3\xa9\x1f\x34\x4b\x59\x56\x67\x4f\x4e\x84\xc4\xc4\x21\x6c\x63\xb0\xc3\xa1\x19\xca\xb2\x1b\x03\x1b\x45\x87\xa7\x59\x89\x22\xf8\x80\x9f\xd7\x54\x60\x62\x77\xfb\x40\xd5\x1b\x95\xb9\x35\xb5\xc3\xeb\x57\x22\x8d\x52\x42\x45\x5f\xec\x00\xee\x38\xcf\x9a\x7e\x3e\x48\xd6\x6c\xbb\x46\xd2\xd7\x99\xa3\xc8\x75\x28\x92\x8d\xb3\xb6\xa6\xfe\xde\xd6\x8e\xb6\xf7\x75\x3d\x1f\x8e\x32\xb8\x21\xff\xd1\xf8\x56\x69\x27\x24\x5e\x0d\xe4\x9e\x39\x3f\x0c\x85\x6d\xf2\xd2\x94\x0f\x65\x8a\xc3\xcb\x81\x7c\xb5\x87\xc6\x21\xa9\x01\xcf\x55\x95\x93\x53\x08\x06\xe4\xcc\x00\xf5\x70\x36\x75\x89\x2c\x50\xea\xae\x74\x3e\x1f\xaa\x93\xe6\xa8\x31\xb0\x9f\x83\xd6\x52\x9d\x26\xe6\x4b\xf7\xb2\xdb\x19\x98\x86\x61\x83\x61\x0c\x69\x18\xe5\x03\x55\xf1\x12\x8a\xf0\x2d\x6e\x5a\xcb\xfd\x15\x73\x62\xd5\xe8\x4f\x4c\x24\x36\x51\x69\x1d\x83\xe7\x35\x89\xfe\xd0\xd4\x79\x1b\x1e\x49\x85\x6d\x87\xcd\x68\xe0\x4c\x51\xb6\xc6\xce\x46\xd9\xf9\x35\x4e\xf4\x1c\x94\xd8\x11\xe3\x18\x0f\x73\x15\x76\xfa\x0e\x83\xdd\xe4\x9b\x76\x40\x6b\x55\xcc\x70\x95\x9f\x58\xe9\xcf\x08\x1f\x46\xb8\xaf\x2f\x1d\x81\x78\xaf\x37\x9d\x80\xb1\x99\x30\x67\xc0\xcd\xb1\x37\xc2\x68\x17\x17\x7e\xdf\x03\xfa\x37\xc4\x6b\x30\x66\xfb\x71\xfb\xa6\xd8\x8d\x8f\x9f\xb9\x9d\x76\xac\x00\xcc\x34\xa4\x5f\x6d\x4c\x4a\x32\x39\x94\x90\x3d\xb9\x50\xb6\x9b\xe2\x09\x2d\x8c\xa6\xf0\xe2\xd4\x30\xb8\xbb\xc0\x50\xcf\x2e\x67\xcd\x95\xfc\x1d\x3e\xe8\x13\xa1\xd2\x6a\xae\xe6\x81\x1d\xb6\x3a\x89\x76\x56\x65\xcd\xde\x81\xe6\xb5\x34\x5a\x43\x67\xc0\x68\xe6\x1d\x1e\xec\x9e\xf6\x50\x57\x73\x3c\x8f\x75\xcf\x63\xdd\x4f\x1f\xeb\x02\x09\x2f\xeb\xcd\xe9\xf3\x90\xf7\xf5\x43\xde\x13\x1d\x12\x7e\xe8\x18\xf6\x44\x31\xf8\x99\x83\x92\x0c\x63\xce\x0a\x14\xaa\x95\xf3\xc3\x5e\x06\xc3\x3e\x8e\x1b\xac\x9e\xd4\xb8\x03\xdb\x2d\x4d\x81\xd9\xd7\x33\xbe\x7b\xdd\xec\xb7\x11\x6d\xb9\x23\x43\xad\xf3\x8a\x67\x34\xde\x84\xff\xcb\x32\xf8\xf2\xa5\xbb\xd6\x6a\x77\xc3\x5b\xa7\xcf\x92\xa7\x0f\x34\x7f\x30\xb9\xce\x73\x2e\x54\x35\xd3\x14\xd3\x11\x83\xe8\x76\xab\x51\xea\xf1\xfd\xeb\x87\x42\x27\x96\x25\x3b\x52\x0f\x0e\x8b\xee\x75\x60\x37\x65\x47\x05\xea\xc4\x20\xf5\x25\xe7\xf7\x86\xba\xf4\x46\x41\xdc\x7b\x5f\xd8\x45\xee\x79\x8a\xae\xa7\xe8\xd6\xfb\xed\xef\xf6\x8a\xba\x07\xd5\x31\x6f\x7a\x2b\x53\xbe\xe5\x6d\x6f\x23\xe3\x90\x37\xed\xbd\xbe\x0b\x02\xb8\x51\xed\xc8\x1d\x01\xec\x99\xd3\x2e\x04\xf3\xd8\xf7\x6f\x54\x14\x55\xe4\x37\x4b\x2a\xa1\xb2\xd3\x8e\x73\xb1\x40\x8d\x00\x01\xf7\xe7\x31\xdc\x6d\xaa\xe2\x0d\xed\x64\xd4\x0c\x70\x93\x9c\x95\xe5\xb4\xa5\x34\x30\x6f\x8f\xc3\x2b\x22\xc8\x4a\x86\xd7\x4a\x50\xb6\xd0\x14\x6e\xfd\x83\x49\x83\xf6\x46\x93\x9b\xb1\x7a\xd4\xfe\x39\xad\xe1\xff\x49\x7c\xbf\x10\x7c\xcd\x92\x60\xba\x9b\xbf\xb2\x55\xef\x1f\xa9\x5a\x5e\x58\x9e\x20\x56\x8f\x33\xe8\x58\x70\x41\xb2\x0c\x45\x93\xa2\xfb\x30\xb5\xf8\x0f\x20\x76\xc8\xe7\x1d\x0b\x6a\x0f\xdc\xda\x8e\x45\x27\x61\x92\x60\x8a\xc2\x28\x0f\xa6\xdb\x9d\x2e\x62\x2a\x51\x2d\xab\x9c\x70\xe2\xaf\x88\x5a\x5a\xa7\x77\xdb\xa8\xfb\x4b\x90\xb0\x04\x02\xfc\xec\x98\x7d\x7f\xea\x7e\xb5\x1a\xf0\xb4\xef\xa8\xb4\x0d\x46\x2d\x61\x0e\xfe\xec\x93\xff\xc9\xdf\xeb\xd3\x3d\x4d\x5f\x7f\x50\x08\xd0\xf3\x48\xca\xc5\x8a\x28\xdb\x47\x7c\xeb\xba\xce\xe3\xb2\xf4\xcd\xf0\xde\x28\x28\x4b\x68\x22\x5e\xb6\xa2\x6f\x2f\xab\x73\x20\x79\x8e\x2c\x31\x57\x01\x39\x03\x19\xba\xec\x34\xff\x1c\xb5\x32\x23\x0c\xc3\x86\xb7\x20\x42\x0f\xf0\x43\xad\xaf\xa6\xe3\xb9\x9a\xd5\x26\x1f\xbc\x97\x18\xf5\x8d\x02\x9a\x1a\xb6\x17\x73\xdd\xe3\x76\x0e\x21\x9b\xb6\xad\x8e\xdf\x9b\xd0\xdd\xd2\xbe\x20\x2b\x34\xa3\xd9\x7e\x52\xdf\x08\xba\xfa\x8d\x48\xe5\xb2\xfb\x15\x4b\xf4\x5d\x64\x79\xc1\x57\x2b\x52\x96\xda\x85\x2a\xdd\x9b\x90\xfc\x13\x00\x00\xff\xff\x65\xa4\x7d\x3a\x75\x22\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0x89, 0x0, 0x9d, 0x86, 0x13, 0xab, 0xc0, 0x8d, 0xdd, 0xf3, 0xa3, 0xba, 0x6, 0x5e, 0x64, 0xc0, 0x4c, 0xbf, 0xa, 0xfd, 0x89, 0xa6, 0xe9, 0x1b, 0x39, 0x66, 0xb0, 0xb9, 0x3f, 0x1c, 0x44}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl":  {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl":      {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl":    {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl":      {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl":   {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
