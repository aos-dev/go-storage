// Code generated by go-bindata. DO NOT EDIT.
// sources:
// cmd/definitions/tmpl/function.tmpl (567B)
// cmd/definitions/tmpl/info.tmpl (1.702kB)
// cmd/definitions/tmpl/object.tmpl (1.907kB)
// cmd/definitions/tmpl/operation.tmpl (1.698kB)
// cmd/definitions/tmpl/pair.tmpl (811B)
// cmd/definitions/tmpl/service.tmpl (11.657kB)

// +build tools

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\x8f\x25\x87\xae\xec\xe6\x07\x08\x9e\x8a\x82\xb0\xc8\xa2\xde\x25\x64\xa7\x6b\xb0\x99\x94\x66\x5a\x17\x62\xfe\xbb\xa4\x55\x17\x11\x0f\xde\x3c\x25\xcc\xcc\x7b\xf3\x3e\x26\xa5\x2d\x06\xc3\x47\x82\x7a\xda\x40\x4d\xb8\xbc\x82\xd2\x37\x23\xdb\x88\x9c\xab\xd2\x76\x2d\x38\x08\xd4\xa4\x6f\x7d\xdf\x91\x27\x16\x3a\x7c\x36\x55\xcb\x2f\xb3\x66\xd2\x77\xc6\x13\xde\x20\xa1\x31\x9e\xba\x65\xa0\x88\xd5\xa4\x77\xc1\x9a\xb9\xd2\x8e\x6c\x51\x47\x5c\xa4\x04\x75\x56\xec\x4d\x5c\x06\xd6\x48\xa9\x58\xe6\x5c\xa7\xa4\x26\xbd\x37\x83\xf1\x51\x3f\x0e\xce\xef\x4c\x14\xfd\x20\x83\xe3\xe3\x35\x1f\xe2\xab\x93\xe7\x26\x78\x6f\x72\x46\xe8\x05\xbd\x71\xc3\x2f\xa6\xa5\x5c\x62\x7e\xdf\xb4\x2c\xb8\xa7\x38\x76\x12\x3f\x8c\xe7\x00\x15\x00\xf4\x86\x9d\xad\x57\x05\xdc\x9d\xa9\x57\xeb\x6a\xa6\xa2\x2e\xd2\x1f\x71\xac\x9c\x60\x03\x0b\x9d\x44\x37\xcb\xbb\xc1\x3f\x66\xdc\x82\xf8\xeb\xca\x3f\xbe\xef\x01\x00\x00\xff\xff\x41\xc8\xae\xbf\x37\x02\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xfc, 0xb, 0xf4, 0xfb, 0xf, 0x94, 0xca, 0x64, 0x7a, 0xb8, 0x48, 0xf9, 0x69, 0xf1, 0x88, 0x46, 0x59, 0xd3, 0xbc, 0x0, 0x4e, 0xe7, 0x8, 0x1e, 0xdf, 0x27, 0x59, 0x81, 0x75, 0x52, 0xa2}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xe5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x92\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\xe4\x24\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x13\xc7\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x23\x5d\x63\xa9\x37\x31\x32\x99\xc7\x39\x15\x42\x09\x27\xb4\xb2\xef\x70\x7a\x85\xcb\xab\x1b\x9c\x9d\x9e\xdf\x2c\x58\xc5\xb3\x15\x5f\x12\xdc\xba\x22\xcb\x98\x90\x95\x36\x0e\x33\x06\x00\x93\x42\xba\x09\x8b\x18\x6b\xdb\x03\x18\xae\x96\x84\xe9\x6a\x8e\xa9\x50\x85\xb6\x78\x9b\x60\x71\x1e\x56\x17\xbc\x82\xf7\xac\x6d\x31\xb5\x64\x1a\x91\xd1\x25\x97\x14\xf6\xa7\x2b\xdc\xc1\xe9\x13\x2e\xa9\x0c\x47\x58\x1c\xe3\xbd\xa0\x32\x87\x50\x39\xdd\x42\x28\xb4\xed\x76\x92\xf7\x48\x85\x63\x99\x56\x36\x40\xec\xe8\x36\x5d\xcd\x5e\xdd\xfb\x0e\x71\x37\xfd\x3c\xd4\x0d\x24\xcd\xa2\x83\x08\xf2\x9f\xb8\xcd\x78\xd0\x47\x82\xa3\xe3\xe3\xb0\xbb\xea\x81\x0f\x40\x2a\x0f\xcb\x88\xb1\x60\x00\x76\x7b\x18\xa7\x5b\x67\xea\xcc\xa1\x1d\x94\x37\x6c\xdf\x9e\x62\x0b\x18\x37\xeb\xaa\xaf\xe5\xfd\xd6\x97\xfb\x33\x1b\x86\x2e\x8e\xe3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\xd3\xef\x94\x39\x34\xbc\xac\x69\x8e\x43\x48\xe2\xca\x42\x69\x07\x4b\x6e\x8e\xa3\xe1\x83\x25\xd7\x95\xea\xea\x08\xe5\xde\xbc\xee\x42\x09\xc9\xab\x2f\xd6\x19\xa1\x96\x5f\x85\x72\x64\x0a\x9e\x51\xeb\xd9\xa0\xfc\xbc\xd7\x61\x57\x14\x81\xfe\xec\xb6\x9b\x10\xef\x59\x51\xab\x0c\x33\x89\x57\xcf\xba\x16\xe1\x03\xb9\xbe\xf1\x53\x61\xab\x92\xaf\x07\x37\x66\xd1\xd8\x8f\xc1\x57\x43\xae\x36\x0a\x72\xf1\xc0\xbe\x40\xfa\xa7\x9a\xd7\x4f\x68\x36\x63\xcd\xe8\x37\x85\x06\xa6\x47\x60\x90\xa0\x19\xf1\xb2\x61\xa0\x4a\xdb\xb1\xfe\x03\x77\x66\x23\xd4\x39\x52\xad\xcb\x68\x20\x12\x05\xe4\x22\xdc\xf0\xcb\x3d\x9f\xc0\x8b\x04\x87\x43\x8d\xe7\xdd\x9e\xc3\x99\x9a\xba\x83\x7e\xbb\xd1\x2d\xa8\x3b\xfc\x20\xa3\x3f\x87\x79\xec\x12\x0a\x5e\x5a\xda\xe7\x96\x2e\x6a\xeb\xf6\x9b\x8e\xbf\xee\x3b\x19\xf7\x5d\x71\x25\xb2\x59\x21\xdd\xe2\xba\x32\x42\xb9\x62\x36\x79\x8c\xf5\x23\xa5\x3c\xbd\x7f\xb9\xbf\xee\x5e\x6c\x9e\xdd\x24\x8a\x1e\x5a\xf4\xdf\xcc\x6e\x6f\xe5\x5d\xb2\x9f\x97\x8f\x8e\x7d\xff\x0f\xdb\xf9\xa5\xdd\x2f\x7f\x06\x00\x00\xff\xff\x26\xf5\xd0\xb3\xa6\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x9d, 0xdc, 0x29, 0x17, 0xc8, 0x8a, 0x14, 0x25, 0x13, 0xa5, 0x85, 0x13, 0x6, 0xf, 0xb3, 0x4a, 0x21, 0xd1, 0x20, 0x4e, 0x6f, 0x92, 0x60, 0xe2, 0x6e, 0x29, 0x96, 0x4a, 0xee, 0x99, 0x66}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6f\xdb\x36\x10\x7e\x36\x7f\xc5\x37\x23\xd8\xa4\xc1\x91\x92\x6d\xd8\x43\x16\x3f\x0c\x71\xb6\x06\x68\xec\x02\x76\xfb\x4e\x53\x27\x9b\x8d\x44\x0a\x24\xe5\xda\x75\xf4\xdf\x0b\x4a\xb2\x23\x27\x4e\xe1\xa0\x2f\x7d\x23\x79\x77\xdf\xdd\xf7\xdd\x91\x8c\x63\xdc\xe8\x84\xb0\x20\x45\x86\x3b\x4a\x30\xdf\x60\xa1\xf7\x7b\x88\x3c\x89\x13\x4a\xa5\x92\x4e\x6a\x65\xff\xc1\x68\x82\xf1\x64\x86\xdb\xd1\xdd\x2c\x62\x05\x17\x0f\x7c\x41\x70\x9b\x82\x2c\x63\x32\x2f\xb4\x71\x08\x18\x00\xf4\xd3\xdc\xf5\x9b\x95\x93\x39\xb5\x4b\xbb\x51\xa2\xcf\x42\xc6\xe2\x18\xff\x49\xca\x12\x48\x95\xd0\x1a\x52\x41\xcf\x3f\x93\x70\x98\x4b\xc7\x84\x56\xd6\xe3\x6c\xb7\xe7\x30\x5c\x2d\x08\x67\x0f\x03\x9c\xad\x70\x35\x44\x34\xa9\xfd\xee\xc9\x71\x54\x55\x8d\xda\x44\xde\x79\xa0\xed\x16\x67\xab\x68\xcc\x73\xc2\x23\x9c\xfe\xc0\xad\xe0\x19\xaa\x0a\xa5\x54\xee\xef\xbf\x30\xc4\xe5\xf5\xb5\x77\x7a\xf0\xc1\x1e\x9f\x54\xe2\x97\x4d\x49\x0d\x36\xa4\x85\x5b\x12\x6c\xce\xb3\x8c\xac\x43\xa9\xa4\xf3\x25\x2e\xf4\xb9\x75\xda\xf0\x05\x45\x2c\x8e\x7d\xc0\x78\x32\xbb\x9d\x5e\xf9\x15\x70\xde\x86\xff\x66\x91\x7a\x6a\x16\xd3\x77\x93\x8f\xef\x47\x50\xda\x61\x4e\x10\x4b\x4f\x25\x81\x2e\x9d\x95\x09\xc1\x92\x59\x49\x41\x36\x3a\x0c\xc7\xcd\xbf\x63\x2f\xb1\x8f\xd0\x85\xa4\xe4\x99\x59\x5a\x08\xad\x44\x69\x0c\x29\x07\xcb\x53\x8a\x98\x6f\xc0\xce\x6e\x9d\x29\x85\xc3\xf6\x54\xf5\xbc\x9b\x4c\xbd\x6c\x23\xb2\xc2\xc8\xc2\x77\xfa\xc9\xf8\xaa\x61\x2f\xdd\x93\xdf\x6c\x53\x50\xad\x7d\x55\x75\x4e\x9e\x29\xcd\x7a\x71\x0c\x91\x49\x5f\x7d\x2b\xf4\x6e\xa7\xf0\x65\x29\xc5\xb2\xc3\x94\x67\x72\x45\x11\xeb\xb5\x1e\xd3\x46\x7d\xc3\xea\xa4\x71\xec\xa7\x05\xa5\xa5\x04\xdc\x82\xfb\x5d\xce\x0b\xa4\xda\xec\xa6\x69\xc5\xb3\x92\x06\xb8\x40\x4e\x5c\xd9\xba\x13\x96\xdc\x00\x97\xed\x81\x25\x57\x43\xd5\x38\xf5\x88\xb0\x5e\xa2\x15\xd5\x9b\x3f\xff\x60\xbd\xdc\x5b\xfd\xd4\x46\xf7\xa5\xa3\x35\xab\x18\x3b\x45\xd8\x27\x51\x6f\xd7\xf5\xa5\xa8\x2a\x96\x96\x4a\x20\xd0\xf8\xbd\x71\x0d\xf1\x3f\xb9\x56\x5f\x69\x8b\x8c\x6f\x5a\xe9\x82\xf0\x50\x3c\x6c\xeb\x12\x0d\xb9\xd2\x28\xe8\xe8\x85\xd6\xbe\xa8\x17\xe0\xd3\x57\xc0\x57\x87\xe0\xe1\x2e\xa2\xcd\x72\x04\x1e\x43\xac\x0e\x2a\x60\x6d\x3f\x33\x5b\x67\x7f\x0b\xb1\xe0\x20\xf9\x00\x73\xad\xb3\x70\x9f\xda\x3a\xee\x82\xb0\x69\xae\x4c\xa1\x23\xdf\x96\x5f\x4f\xba\xdf\xbf\x0c\x71\xd1\xe2\x7c\x5f\xac\x01\x9c\x29\xa9\x76\xac\x58\x97\x56\xa7\xb2\x47\x7c\x25\xa3\x3f\xf9\xd9\xa9\x23\x52\x9e\x59\x3a\xaa\xf2\x7d\x69\xdd\xdb\xda\xf8\x43\x2c\x87\x87\x2c\x0b\xae\xa4\x08\xd2\xdc\x45\xd3\xc2\x48\xe5\xd2\xa0\xdf\xce\x7d\x07\xa1\xaa\xfc\x45\x6a\x27\xbf\x1f\x86\x2d\xf5\x9f\x63\xa4\x1a\xf2\x8f\xc3\x53\xd8\x1f\x9d\xc1\xe6\x4d\xe9\x3e\x2f\x2f\xca\x16\x99\x56\x14\xac\x3b\x27\xdb\xfd\x13\x76\xca\xef\x72\xb4\xfc\xf5\x31\xd1\x9e\x3d\x8c\x1d\x86\x75\x80\xff\xda\xaa\x6f\x01\x00\x00\xff\xff\x94\x03\xb8\x29\x73\x07\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0x64, 0x33, 0x31, 0x2b, 0x9e, 0xa5, 0x1c, 0x46, 0x19, 0x57, 0xa8, 0x78, 0xb3, 0xc9, 0x92, 0xd7, 0x11, 0xee, 0xde, 0xf1, 0xa5, 0xf2, 0x26, 0x22, 0x58, 0x32, 0x8d, 0xfb, 0xb5, 0x58, 0xdc}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4d\x8f\xd3\x30\x10\xbd\xfb\x57\x8c\xac\x1e\x12\x69\x49\xef\x48\x7b\x82\x45\x5a\x09\x75\x2b\x10\xe2\x88\x5c\x67\xda\xb5\x48\x6c\x33\x9e\xec\x87\x82\xff\x3b\xb2\x93\x76\xd3\xaa\x10\x15\x10\xe2\x16\x7b\x66\xde\x9b\xf7\xc6\x13\xaf\xf4\x57\xb5\x43\xe0\x67\x8f\x41\x08\xd3\x7a\x47\x0c\x85\x00\x00\x90\xda\x59\xc6\x27\x96\xc3\xc9\x38\x29\x4a\x21\xfa\xfe\x15\x90\xb2\x3b\x84\xc5\x97\x2b\x58\x18\x78\x7d\x0d\xd5\xad\x65\xa4\xad\xd2\x18\x20\x46\xd1\xf7\xb0\x30\xd5\x5b\x0c\x9a\x8c\x67\xe3\x6c\xba\x4c\x0c\x30\x46\x4c\xf0\x8d\x7a\x5e\xa9\x16\x21\x46\x30\xfb\x62\xe8\x33\x53\x62\x30\x5b\x70\x04\x05\x7e\x4b\xf9\x39\x51\x06\xa4\x07\xa3\x91\x64\x79\x72\xcf\x8e\xd4\x2e\xdd\xc7\x98\xeb\x3f\x32\x19\xbb\x2b\x4a\x08\xf9\xe3\x80\x89\xb6\x4e\x8d\x8c\xe7\xa9\x08\xe7\x93\x8a\x85\xa9\xee\x7c\x16\x90\x32\x96\xcb\xdc\xad\xf3\x03\xcd\x77\x60\xb7\x56\x41\xab\x26\xb5\x3c\x46\x4e\x24\x8e\xc0\xe7\x6b\x8a\x31\xf2\xce\x51\xab\x78\xad\x48\xb5\x89\xab\x84\xe3\xc0\x07\x0c\x5d\xc3\xe1\xb3\xe1\xfb\xf5\x30\x9b\x23\x95\x32\x95\x4c\x5d\xb2\x8e\x73\xf5\x7b\x37\xd0\xcc\xf6\x9e\x90\xdf\x0c\x83\xfd\x1d\x19\x93\xf2\x42\xf3\x13\x8c\x6f\xa4\x1a\xef\xae\xfe\xba\xca\xfd\xd8\x8e\x4f\xf9\xd8\x76\x81\x6f\xda\x0d\xd6\x9f\xac\x69\x7d\x83\x2d\x5a\xc6\xfa\xdc\x1b\x2b\x4a\x11\x85\x58\x2e\x61\x36\x33\x83\xc2\x06\x01\x13\x70\x8d\x35\xb0\x83\x7b\xf5\x80\xb0\x75\xf4\xa8\xa8\x06\xed\x5a\xaf\xd8\x6c\x1a\x84\x03\x96\x4a\xde\x85\x6a\x78\xe4\xf3\x1c\x81\xa9\xd3\x0c\x7d\x14\x62\xdb\x59\x0d\x45\x98\x2f\x2a\x2f\x92\x7b\x29\xf6\xc9\xce\x8c\x9b\x48\xc8\x1d\x59\x90\xb3\x00\x32\xd9\xfb\xeb\x9d\xba\xa0\x99\x7f\xb2\x44\xc7\x3f\x9b\xb3\x6b\x84\x44\x70\x0d\x2b\x7c\xbc\xf3\x48\x79\xc4\x2b\xc7\xb7\x2f\xdd\xdf\x10\x39\x2a\xe4\xb4\xdb\x18\x65\x79\xfa\xc3\x79\x71\x52\x44\xf1\x33\xbe\x0b\xec\xf9\x0f\x76\x73\x34\xef\x4f\x0c\x9a\x38\xb2\x37\x6a\xfa\x75\x70\xef\x47\x00\x00\x00\xff\xff\xbd\xe8\x37\x32\xa2\x06\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc2, 0xaf, 0x9a, 0xb8, 0xf7, 0x9f, 0x1b, 0x53, 0xaa, 0x36, 0x95, 0x6d, 0xe6, 0x56, 0x7d, 0xb9, 0x8e, 0xd7, 0x4, 0x74, 0xce, 0x5b, 0x9, 0x4f, 0xb6, 0x92, 0xc, 0x1e, 0x49, 0x5, 0x4c, 0x4c}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\xc1\x8a\xdb\x30\x10\x3d\x5b\x5f\xf1\x30\x39\xd8\x90\xb5\x2e\x3d\xa5\xf4\xd4\x94\x52\xca\x6e\x96\x12\xda\x63\x51\xe4\x59\x45\xac\x23\x09\x59\x76\x6b\x5c\xff\x7b\x91\xe5\x18\x36\x85\xb6\xeb\xd3\xcc\x9b\x79\xe3\xf7\x1e\xe2\x1c\xef\x6d\x4d\x50\x64\xc8\x8b\x40\x35\x4e\x03\x94\x5d\x7b\xc8\x4b\xcd\x6b\x7a\xd2\x46\x07\x6d\x4d\xfb\x16\xfb\x03\x1e\x0e\x47\x7c\xd8\x7f\x3a\x56\xcc\x09\xf9\x2c\x14\xc1\x09\xed\x5b\xc6\xf4\xc5\x59\x1f\x50\x30\x00\xc8\xa5\x35\x81\x7e\x86\x9c\xa5\x56\xe9\x70\xee\x4e\x95\xb4\x17\x7e\xa2\xc1\x9a\xba\x0d\xd6\x0b\x45\x5c\xd9\xbb\x6b\xd9\xbf\xe1\xee\x59\xf1\x73\x08\x4e\x36\x9a\x4c\xc8\x5f\xc5\x6d\xc9\xf7\x5a\x52\x9b\x58\xd5\x7f\xf3\xc2\xe0\x22\x89\x95\x8c\x8d\xe3\x1d\xbc\x30\x8a\xb0\xf9\xbe\xc5\xa6\xc7\xee\x1d\xaa\xc7\x68\x0f\xd3\x34\x4f\x37\xce\x88\x0b\x45\x7c\xd3\x57\x0f\xb1\xfc\x85\x60\x1f\x45\x2b\x45\x13\x77\x38\xc7\x37\x1d\xce\xe3\x78\xdd\x9c\x26\xfc\xd0\x4d\x03\xe1\x5c\x33\x20\xe2\x0b\x6f\x9a\xd0\x8b\xa6\x23\x04\x8b\x83\x9b\xf3\xad\x18\xe7\x2c\xad\xec\xa9\x95\x5e\xcf\x70\x3c\xfb\xd4\x19\xf9\xc7\xe1\xa2\x5f\xee\x1d\x07\x17\xfb\x12\x51\x2a\xc6\xd9\xbf\xa7\xd0\x79\x33\x23\x09\x88\xdf\x67\x1a\x76\xc8\x5f\x88\xc8\xb7\xeb\xf4\x6b\x94\xb3\x43\x9f\x90\x89\x25\xc7\x64\xea\xa8\x20\x49\x50\x8d\x3d\x89\x66\x4e\xa4\x28\x71\x4d\x7c\x8e\xe8\x5e\x38\x8c\x2c\x5b\xfe\x7b\x3b\x1a\x59\x96\xfd\x3d\xdd\x34\xff\x57\xbe\x59\x76\x23\x7f\xf5\xb3\x84\x90\x6f\x97\x4b\x8b\xee\x2c\xfa\x48\xe2\xe3\x33\x2e\xca\x25\x9f\x55\xe0\x17\x52\xba\x0d\xe4\x3f\xae\xd6\xee\x85\x2b\x5e\x18\x2d\xd9\xf4\x3b\x00\x00\xff\xff\xf7\x5f\xa2\x07\x2b\x03\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x39, 0x82, 0x3e, 0xc0, 0x1c, 0xbe, 0xae, 0xf, 0xee, 0xba, 0xca, 0x1a, 0x29, 0xb9, 0x46, 0x55, 0xa7, 0x9c, 0x33, 0x72, 0xda, 0xf8, 0x38, 0x54, 0x92, 0xd, 0x85, 0xb6, 0x25, 0x71, 0xbf, 0x55}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\x5d\x6f\xdc\xb8\xf1\x39\xfb\x2b\xe6\x04\x23\xd8\x0d\x36\x52\x0b\xf4\xc9\x85\x1f\xae\x4e\x2e\x35\x2e\x1f\x46\x9c\xeb\x3d\xdc\x1d\x0c\x5a\x1a\xed\xb2\x96\x48\x1d\xc9\x5d\xc7\xd8\xe8\xbf\x17\x43\x52\xdf\xd2\x7e\xa4\x29\x2e\x3d\xc4\x2f\x5e\x91\x33\xc3\xf9\xfe\xa0\x14\x45\x70\x29\x13\x84\x15\x0a\x54\xcc\x60\x02\x77\x8f\xb0\x92\xf5\x33\x6c\x39\x83\x38\x4f\xa2\x04\x53\x2e\xb8\xe1\x52\xe8\xbf\xc3\x8b\x77\xf0\xf6\xdd\x07\x78\xf9\xe2\xea\x43\x38\x2b\x58\x7c\xcf\x56\x08\xbb\x1d\x84\x6f\x59\x8e\x50\x96\xb3\x19\xcf\x0b\xa9\x0c\xcc\x67\x00\x00\x41\x2c\x85\xc1\x8f\x26\x70\x4f\x5c\x06\x33\xf7\x6b\xc5\xcd\x7a\x73\x17\xc6\x32\x8f\xee\xf0\x51\x8a\x44\x1b\xa9\xd8\x0a\xa3\x95\x7c\x5e\xfd\xdc\xfe\x2d\x2a\xee\x57\x11\x8a\xa4\x90\x5c\x54\x34\x4e\xc0\x8c\x15\x26\x28\x0c\x67\xd9\xe9\xb8\x6b\x63\x8a\x38\xe3\x78\xea\xb9\x1a\xd5\x96\xc7\xa8\x1d\x56\x78\x34\x9e\x79\x2c\x08\x69\x31\x9b\x6d\x99\x82\x5b\x68\x78\x0f\xaf\x95\xdc\xf2\x04\x95\xdf\xa9\xf4\x11\xfe\x8b\x65\x1b\xf4\x8b\x37\x8e\x52\x05\x53\x71\x11\xde\xb8\x1f\x2f\x95\x92\xd5\x5e\x23\x59\xf8\xae\xb0\x66\x9d\xcd\xa2\x08\x3e\x3c\x16\x08\x5c\x83\x59\x23\x10\x33\x90\x4a\xd5\xb1\x6c\x2c\x85\x36\x0e\xec\x02\x82\xd6\x4e\x60\xf1\xdf\xdd\xfd\x1b\x63\xf3\x06\x0d\x4b\x98\x61\x40\xa2\xa1\xae\x18\x81\xbc\x5a\x27\xaa\xd2\x82\x86\x33\x7b\xcc\x00\x4f\x6d\x62\x03\xbb\xd9\x6e\xf7\x1c\x14\x13\x2b\x84\xb3\xdb\x25\x9c\x6d\xe1\xfc\x02\xc2\x2b\x91\x4a\x4d\xcc\x90\x72\x09\x82\xa7\x20\xa4\x81\xb3\x6d\xf8\x2a\x93\x77\x2c\x6b\xef\x9d\x15\x82\x18\x3c\xbf\xa0\x6d\xcb\xeb\x27\x30\xf2\x9a\xe9\xb8\x0b\xc7\x53\x02\x78\xc1\x75\x91\xb1\xc7\x4a\x5a\xf0\x7f\x2d\x42\x17\x13\x60\x04\x82\x22\x69\x1e\x2d\x1c\xea\x58\x71\xab\xdf\xf6\x86\xa3\x54\x96\x1e\xca\x6a\x73\x48\xa6\xf5\xb3\xb4\xca\x7d\x85\xa6\xa7\xa7\x07\x9e\x65\xb0\x42\xd3\xd7\x5f\xaa\x64\xee\xd7\xc2\x59\x14\x11\xf2\x73\xf8\xb0\xe6\x1a\xd2\x8d\x88\x2d\x3b\x7a\x2d\x37\x59\x62\xf5\x76\x87\x10\xb3\x2c\x73\xc1\x5f\xd9\x8a\xe7\x45\x86\x39\x0a\x83\x2a\xac\xf0\x11\x14\x9a\x8d\x12\x5c\xac\xfa\x27\x72\x0d\x0a\x59\x02\x52\x64\x8f\xc0\x44\xd2\xa3\x9f\xcb\x84\xa7\x1c\x93\x70\x46\x0c\x0c\x25\x99\x4b\x78\xe6\x56\x16\x7d\xca\x3b\xab\x17\x99\x2f\x41\xde\x93\x19\x65\xf8\x0a\x8d\xf7\xe8\x1a\x7d\x61\x81\x78\x4a\x30\xbb\xda\x6c\x8e\x5b\x90\x79\x38\xef\x12\x75\xe0\x4e\xe3\x1e\xa8\x0b\xb0\xab\x74\xae\xc7\x75\xae\x87\x3a\xe7\xc2\xc8\xe3\x74\x6e\x75\xd4\x28\x5d\x8a\x18\x97\x50\x64\xc8\x34\x42\xce\xee\x11\xf4\x46\x21\xb0\x2c\x03\x4b\x78\xcd\x34\xdc\x21\x0a\x78\x50\xdc\x18\x14\x70\x87\xa9\x54\x48\x3c\x78\x75\x0e\x98\x6c\xd4\xb9\x84\xda\x13\x6a\xe1\x2b\x95\x86\x37\x43\x45\xca\x7c\x41\x92\x8f\xc6\xdd\x35\xe3\x4a\x57\x9e\x39\x16\x73\xc7\xc4\x5b\x13\x6b\x97\x52\xa4\x19\x8f\x0d\xad\x46\x11\xbc\xc0\x42\x61\x4c\x35\xe8\x1c\x7e\xd2\x08\x05\x9d\x16\xfe\xcc\xcd\xba\x13\x32\x5c\x68\x83\x2c\xb1\x2a\x6e\x45\x48\x14\xc1\x00\xd4\x5a\x8a\x15\x45\xf6\xe8\x03\xcd\xc7\x2b\x6c\x29\x67\x02\x99\xcb\xa5\x3e\x4f\x6c\x24\x62\xad\x7a\xfb\x84\xe7\xdb\x6e\xe0\x2e\x80\x34\x33\xf4\x3b\x5a\x6d\x16\x7f\xc4\xc7\x73\x9b\x31\x1b\x46\x82\x65\xbd\x6b\xd3\xf8\x39\x6c\x97\xde\x33\x3b\xe1\xdf\xfa\x59\x19\xdc\x5a\xcd\x1a\x64\xbe\x68\x12\x3d\x2d\xbc\x61\x05\xec\x66\x4f\x3c\x0f\xfd\xad\xdd\xec\xc9\x93\xfd\xc6\x6d\xe7\xbc\xa9\xc4\x7a\x6c\x72\x7d\xf2\xa4\x27\x70\xad\x01\xaf\xba\x60\xe9\xf9\xf1\xe2\x75\x1f\xca\x49\x57\x24\x7a\xba\x60\x31\x76\xea\x80\xc1\xbc\xc8\xa8\x6b\x09\x38\xe5\xad\x94\xf6\x03\x1b\x52\x37\x19\xe5\xb4\x8a\x91\xb3\x6d\x78\x55\x03\x8c\x13\x48\x91\x99\x8d\x9a\x44\xff\x61\x23\xe2\x09\x4c\xf2\xdb\x5b\x81\x0f\x6d\xcc\xf9\x98\x7e\x16\x76\x11\x1f\xa6\xc9\x7c\xc6\xe9\x55\xae\x39\x88\xda\xf6\x29\xfa\x6d\x1b\xbc\x9e\xe6\x9a\x90\x26\xa5\x73\x91\xe0\x47\x08\xe1\x2f\xf5\xba\x85\xd5\xed\xbd\xbf\xd2\x1e\x75\x18\xf3\x9a\xb7\xbe\xed\x2a\x2c\xcf\xfe\x6d\x3b\x36\x3b\xde\x03\x17\xf0\xd4\x85\x5d\x77\x7d\x37\xa8\x94\x8b\x49\x69\x1a\x33\x4e\xc9\x32\xcc\x4e\x67\xa9\x18\xca\xe4\xda\x14\xcf\x4e\x59\xfe\xe0\xe9\x36\x9d\x0a\xb1\xf4\x5a\x4a\x8d\xef\x0a\xea\x9c\xb9\x14\xdf\x67\x19\xdc\x49\x99\x4d\x6b\x82\x0e\xf2\x6a\xe8\xa2\x4e\xaa\xa4\x43\xaf\x12\xd8\xe6\x0f\xae\xcc\x86\x65\x47\x1d\x9e\x8a\xfe\xe9\x55\x52\x4e\x45\x78\xc3\xf3\x4d\x66\x27\x01\xbf\xd7\xa7\x4c\xbc\xa5\xe2\x58\xe6\xf6\xf0\x4a\x19\xe7\xb3\xd8\xcc\x50\x58\x16\x3c\x9d\x2e\x9f\x36\xe9\x4e\xb1\x38\x38\xae\xc7\xe5\x88\x85\xaa\x53\xe0\x84\x63\x4e\x32\x5f\xef\x71\x3a\x32\x9b\xc4\x72\x28\x2e\x53\x31\xf4\x5f\xbf\x71\x5f\x89\x35\x92\xad\xa9\x88\x16\x5e\x2e\xeb\xe5\x4e\xc0\x7b\x5b\x76\xdd\x4c\x50\x30\xa5\x31\xf1\x5e\xef\x62\xa2\x87\x41\x08\x65\xd9\x8d\x0b\x9b\xcb\xe0\x97\xdf\x48\x69\xce\x05\xa2\x08\xde\xe3\xef\x1b\xae\x30\x71\xbb\x63\x26\xa0\x8d\x8a\xdd\x1a\xda\x6b\xec\x9f\x4c\xdb\x43\x19\x57\x63\x8a\x86\xb6\xaa\xf7\x81\x35\xdb\x13\x5d\xb8\xe7\xd6\x75\x0a\x2c\x3b\x8e\xdb\x1a\xfa\x4b\x73\x7b\x98\xdf\xca\x8c\x4a\xe3\xf5\x84\x2d\x6d\x5f\x64\x21\x5c\xe3\xa2\x6d\x91\xb0\xfd\xeb\xb3\x09\xfb\xbb\xb6\x63\x1f\xd5\xb9\x2c\x4c\x65\xe3\x05\xcc\x27\xe8\x2c\x01\x69\x08\xad\x5a\x50\x85\x7a\x93\x19\xd2\xda\x04\x7c\xd3\x3e\x59\xbd\x9f\x03\x9d\x52\xf5\x48\xf6\x1f\x8d\x92\xb7\x4b\xb0\xe1\xea\xac\x61\x19\x69\x10\xf5\x03\x37\xf1\x1a\xb6\xe1\x8f\xf8\xd8\x5a\x1e\xf7\xc0\x13\xbd\x90\xfe\x62\x6a\xdb\x83\xae\xdd\xa8\xd3\xa9\x01\xfc\x64\xe2\x64\x0d\x0f\xb8\xc2\xae\x83\x66\xe9\x4b\x61\xb8\xd8\x60\x67\xa3\xec\x3c\x1d\x47\xfa\x02\x8c\xea\x91\xf1\x88\xfb\xb1\xb6\xee\x8e\x21\x9c\xf7\x5d\x6f\xd1\x51\x59\x2b\x5e\xa6\x63\xe6\xc4\xb8\xf9\xa6\xdf\x49\xfd\x96\xed\x20\x38\xc1\x65\x79\x0a\xdf\x9d\xaa\x2a\x3f\x4b\x4c\xc5\x68\xb9\xec\x8e\x19\xd5\x91\xf6\xbe\x69\x47\x83\x8f\x3e\xff\xe5\x37\x6d\x14\x17\xab\xdd\x88\x29\xa1\xac\xa5\x81\x91\x76\xc1\x9f\xee\x98\x5e\x82\xe0\xd9\x81\x22\xe9\xba\x3d\x68\x66\x94\x7d\x1d\x5f\x0d\x66\x67\xed\x41\xd9\xf4\xae\xfc\x02\x53\xb6\xc9\x4c\x2d\xbd\x9b\x96\xb8\xa6\x73\x69\xc3\x97\x38\x4a\x46\xba\xc0\x98\xa7\x3c\x06\x66\x1b\x71\x4b\xc1\x16\xca\x71\x1a\x9d\x42\x39\xda\x83\x58\xc6\x3a\x83\xd7\x44\x77\xe1\x0b\xec\x88\xc3\x8c\xbb\xc9\x14\xf9\xfe\x18\xd2\x19\x25\x0a\x01\x67\xdb\xbd\x97\x55\x03\x7b\x7c\xdd\x0d\x4b\x8d\x71\xa0\x65\xf9\x23\x9a\x93\xe3\xda\x93\xaf\xb3\x11\x39\xc0\x59\xaf\xad\xfe\x93\x74\x48\x73\x0d\xcf\xea\xcd\xc5\xff\x65\xbf\x14\x45\xc0\xf5\x4f\x42\x6f\x8a\x42\x2a\x83\x89\x55\x80\xc2\x58\xaa\x44\xc3\xc3\x1a\xcd\x1a\x15\xc4\x1b\xa5\x50\xb8\xb4\x47\xa1\xb6\x69\xe0\xc3\x9a\xd2\x90\xcc\xf9\x05\xa4\x2c\xd3\x38\x3b\xd4\x9d\x7d\xeb\xc1\x4e\xee\x11\x46\xf9\x1c\x69\x1c\xbe\xb5\x5f\x7f\x84\x6a\x7b\xe9\xee\x2b\xd1\x6c\x14\xc1\x55\x0a\x1b\x8d\x0a\x50\xb0\xbb\x0c\x5d\xd1\xdc\x7a\x66\xad\x00\xfe\x0a\x6d\x09\x0f\x08\x31\xa3\x2e\x50\x8f\x40\xd9\xdc\xc8\x4d\xd8\x67\x5e\x87\xd5\x15\x5c\xd8\xbb\xf6\xf9\xf4\x69\x62\xb3\xc9\x66\x47\x82\x9d\xa6\x96\xcf\xf6\xa6\x2f\xed\x51\x47\xda\x68\x98\x45\x7b\xbc\x8d\x38\xa2\xef\x4a\xcf\x4f\x23\x54\x36\x69\x99\xa6\x84\x21\xfc\x6e\x7f\x44\xb4\xf0\x27\x1c\x2b\x93\x52\x53\xc1\xf1\x57\x89\x1d\xdf\xb2\x35\x97\xaf\x84\x54\xae\xe8\xb6\x0e\xb7\x83\x44\x38\x1b\x77\xab\xe1\xa5\x6b\xd7\x65\x86\x37\xab\xbe\xc8\x1f\x94\xa6\x31\xfa\x49\xe3\x4f\x9f\xf1\x1d\x2d\x9e\x6f\x3b\x9d\x78\x14\xc1\xe5\x1a\xe3\x7b\x50\x9d\x3b\x88\xf0\xdb\x34\xd7\xbd\xbe\x6f\xde\x66\x7c\xd1\x89\xee\xe8\x41\xc8\xbd\xa9\x7c\x2d\xe3\xe1\xbb\xaf\x66\x46\xca\x68\xfb\xb6\xe2\x75\x72\x5a\xaa\xb5\x91\xe9\xc1\xc7\x05\xc3\x17\x38\x87\xc9\x8c\x5e\x1f\x1f\xd2\xe4\xe7\xce\x62\xc7\x8c\x62\xed\xd8\x72\x57\xe3\xbd\xb7\xa9\xee\xad\x78\xf7\x9d\xb8\x0d\xfb\x58\x21\x09\xcf\xc0\x7f\x29\x04\x77\x8f\x55\x0e\x0b\xdb\x8d\xf5\x59\x21\xca\x72\xd1\x3a\x68\x6e\x2f\x9c\xc3\x6b\xa6\x58\xae\xc3\x1b\xeb\x94\x04\xe1\xd7\xdf\x5b\x2f\x6b\x6f\xb8\x30\x88\xcd\x47\x92\xc5\x9f\x16\xfe\x83\xc5\xf7\x2b\x25\x37\x22\xf1\x1f\x12\x54\x2f\x4f\xc3\xe6\xa4\x9f\xb9\x59\x5f\x3a\xf8\x79\x6c\x3e\x2e\xa1\x73\xf2\x25\xcb\x32\x54\x94\xe1\xfb\xaa\x68\xe1\x4d\x68\x65\x9f\x7c\xbd\x53\x6b\x8e\xfd\x5a\x8f\x8b\xa3\xe5\x4f\x30\x45\x65\x6d\x30\x5f\x74\x9b\xee\xb3\x82\x99\x75\x65\x67\x4f\xf6\x9a\x99\xb5\x13\x70\x24\x3c\x98\x48\x60\x8e\xbf\x7b\xc4\x20\x58\xf8\x27\x01\x81\xff\xb6\x20\x58\xb4\xd1\xa0\x9e\xd0\xcc\x1a\x2e\x20\x58\xfe\x1a\xfc\x1a\x04\x7d\xc2\xbd\x7a\x86\x8a\x8a\x95\x0e\x53\xa9\x72\x66\x6c\x26\x9a\x07\x4e\x44\xf2\xc5\xb2\x0c\xec\xa0\xd4\x10\x2e\x4b\xf0\xdf\x78\xcc\x17\x4d\xc8\x4f\xbd\xe2\x72\xd5\xaa\xea\x67\x06\xe5\x89\x06\x1c\x21\x8d\xaf\x64\x49\x53\xad\x58\x6c\x20\xe3\xf7\x08\x86\x5c\xba\xc1\xf3\xf0\xcd\x27\x34\x7e\x28\xa2\x6c\x3d\x6c\x66\x3a\xb5\xeb\xe9\xd3\xbd\x20\xa3\xe5\xcb\x69\xe7\x2d\x3e\xd4\x60\x6f\xa5\xb9\x6a\x0e\xaf\xf5\xd5\x04\x6f\x59\x06\x8b\x5e\x41\xd8\x93\xb3\xab\x4f\x01\xd0\x4d\x09\xee\x6b\x12\x99\x20\x04\xdd\xbc\x9c\xd3\x5a\x35\x4b\x34\x50\xc3\xf4\x4c\x8a\x90\x21\x6d\x86\x57\xb6\x6a\x59\xcc\xb2\x9c\x2f\x06\x62\xd5\xb5\xa8\x21\x78\x25\xb6\x2c\xe3\xbe\x20\xbd\xfc\x58\x60\x6c\x3f\x1a\xa1\xad\x16\xad\x25\x7c\x1f\x93\xee\xce\xc1\x9d\xd4\xaf\xe7\x7b\xe4\x75\x97\x3f\x17\xc0\x8a\x02\x45\x62\x67\x73\xbd\x04\x1d\xfa\x94\x64\x2f\xee\x5a\xa9\x21\x0c\x43\xa7\xcc\x2d\x53\x34\x4d\x4f\x95\x56\x47\x5c\x16\x66\x59\x3b\xf4\xde\x1b\x02\x7b\x6e\xfd\x65\x13\xa1\x7c\x77\x41\x05\x73\x50\xcb\xdb\x9d\x45\x2f\x75\x35\xb9\xfa\x92\xe5\x48\x06\x18\xc9\x5e\x1f\x14\xcf\x5f\x33\x6d\x7c\x1a\x7b\x29\x12\x1a\xcb\xd7\x97\x32\xcf\x59\x59\x12\xc7\x8b\x3d\x45\xba\x5f\xfe\xf6\x55\xea\xf6\xde\x58\xa1\xa9\xb2\xc3\x81\x62\xe3\x83\xf6\x60\xc1\x71\x70\x15\xf8\xa9\x85\x87\xd0\xfe\x07\xc5\xe7\xbf\xf1\xb0\xa3\xbd\xac\x4a\x6b\xae\x9f\xb6\x97\x48\xf0\xb0\xe6\x19\xc2\x9a\x89\x24\xe3\x62\x05\xd6\x6e\x24\xa0\xff\x06\xaa\x42\xb3\x0e\x7a\x7b\xb4\x7b\xf6\xfb\x4a\xcb\xf7\x84\xeb\x9d\xec\x75\xce\xb1\x07\xdf\x3f\x71\xc1\x4d\x9d\x2b\x8e\xfc\x40\x88\xfe\xea\x64\xf2\x1e\x57\x5c\x1b\x54\x53\x77\xe9\x6a\x4e\x23\xdb\x92\x92\xea\x24\xc8\x62\xec\xc6\x73\x70\xc2\x4d\xf3\xa9\xd6\x1b\x56\x78\xb2\xdd\xef\xb7\x28\xb8\xfe\x13\x00\x00\xff\xff\xc8\x04\xe9\x60\x89\x2d\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x72, 0x6c, 0x55, 0xf5, 0x9e, 0x28, 0xd3, 0x8c, 0xd, 0x83, 0x58, 0xc0, 0x10, 0x6c, 0x9e, 0xb9, 0xa0, 0x5f, 0xf2, 0x87, 0x16, 0x1a, 0x62, 0x63, 0x65, 0x73, 0x8, 0xff, 0x69, 0xd, 0x53, 0x1b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl": {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl": {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl": {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl": {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl": {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
