// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/function.tmpl (258B)
// tmpl/info.tmpl (1.714kB)
// tmpl/object.tmpl (1.902kB)
// tmpl/operation.tmpl (755B)
// tmpl/pair.tmpl (2.214kB)
// tmpl/service.tmpl (7.46kB)
// ../../definitions/infos.hcl (1.052kB)
// ../../definitions/operations.hcl (4.606kB)
// ../../definitions/pairs.hcl (2.208kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x4a\xc4\x40\x10\x45\xf7\x39\xc5\x67\xc8\x22\x33\x68\x1f\x40\x70\x15\x74\x25\x32\xa8\x17\x28\xda\x1e\x6d\x4c\x55\x9a\x54\x05\x07\xda\xba\xbb\xf4\x44\x04\x5d\x15\xd4\xff\xbc\xff\x6a\xbd\x46\x7f\x92\x0f\xdc\xdc\xa2\x0f\xf7\xab\xc4\xf0\x48\x9c\xf0\x05\x9b\x47\xe2\x34\xc1\xbd\x3b\xad\x12\x31\x28\x0e\xb5\xa2\xbf\xe4\x5a\x28\x6e\xa5\x23\x69\xa4\xd6\xda\xa3\xd6\x46\x72\x1f\xa2\x9d\x11\x67\xb1\x74\xb6\x30\x6e\xf7\xaa\xa5\x1b\xff\x48\x0b\xb1\x86\x97\x25\xf3\x03\xa9\x85\x67\x5b\xb2\xbc\xdd\xc9\xab\x7e\x66\x7b\x1f\x67\x66\x72\xc7\x5c\x0c\x87\x42\x79\xf9\xb7\xe9\xde\x1e\xcd\xf8\xef\xfa\xf0\xcb\x7f\x4a\xba\x4e\xa6\x3f\xdc\x8b\x58\x07\x00\x85\x24\xc7\x61\x97\xb9\x4c\x89\x93\x18\xb2\xed\xf6\x9d\x7f\x07\x00\x00\xff\xff\x5b\xb1\x71\xf7\x02\x01\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf3, 0x17, 0x45, 0xc4, 0x8, 0xb1, 0x57, 0xf3, 0x99, 0x7b, 0x1f, 0xcd, 0xe4, 0x30, 0x7e, 0x3, 0x30, 0xba, 0x28, 0xed, 0x36, 0x1c, 0xd3, 0x4a, 0x24, 0xfc, 0x10, 0x73, 0xfe, 0xf7, 0xda, 0x75}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x53\x5f\x6b\xdb\x3e\x14\x7d\xd7\xa7\x38\xbf\x10\x7e\xc4\x23\x8d\x5b\x18\x7b\xd8\x9a\xa7\xb6\x1b\x65\xb4\x1d\xb4\xec\x61\x63\x0c\xd9\xbe\x0e\x5a\x2c\xc9\x48\xb2\x69\xe6\xfa\xbb\x0f\xc9\x6e\x9c\xa4\x69\x46\xfb\xb4\x37\xfd\xbb\xe7\x9c\x7b\x74\x6e\x1c\xe3\x4c\x67\x84\x05\x29\x32\xdc\x51\x86\x64\x85\x85\x5e\xef\x21\x94\x23\xa3\x78\x11\xa7\x32\xfb\x80\xf3\x1b\x5c\xdf\xdc\xe1\xe2\xfc\xf2\x6e\xc6\x4a\x9e\x2e\xf9\x82\xe0\x56\x25\x59\xc6\x84\x2c\xb5\x71\x98\x30\x00\x18\xe5\xd2\x8d\x58\xc4\x58\xd3\x1c\xc1\x70\xb5\x20\x8c\x97\x53\x8c\x85\xca\xb5\xc5\xfb\x39\x66\x97\x7e\x75\xc5\x4b\xb4\x2d\x6b\x1a\x8c\x2d\x99\x5a\xa4\x74\xcd\x25\xf9\xfb\xf1\x12\x0f\x70\xfa\x8c\x4b\x2a\xfc\x13\x16\xc7\xf8\x28\xa8\xc8\x20\x54\x46\xf7\x10\x0a\x4d\xb3\x59\xd4\xb6\x48\x84\x63\xa9\x56\xd6\x8b\xd8\xe1\xad\x03\x66\xc7\xde\xb6\x41\xe2\x6e\xf9\xa5\xc7\xf5\x4a\xea\x59\x10\xe1\xe9\xbf\x70\x9b\x72\xcf\x8f\x39\x4e\x4e\x4f\xfd\xed\xb2\x13\x7c\x04\x52\x99\x5f\x46\x8c\x79\x03\xb0\xdb\x43\xdb\xc2\x3a\x53\xa5\x0e\x4d\x4f\xb7\x16\xf4\xf3\x39\x41\x9e\xfb\x6e\x55\xae\x01\x86\x93\xe1\xcd\x9a\x38\xec\xe3\xd8\x77\x8d\xca\x52\x06\x6e\xc1\xfd\x4e\xf2\x12\xb9\x36\xd0\xc9\x2f\x4a\x1d\x6a\x5e\x54\x34\xc5\x31\x24\x71\x65\xa1\xb4\x83\x25\x37\xc5\x49\x7f\x60\xc9\x05\xa8\x80\x23\x94\x7b\xf7\x36\x6c\x25\x24\x2f\xbf\x5b\x67\x84\x5a\xfc\x08\x29\xc8\x79\x4a\x4d\xcb\x7a\xe6\xc3\x06\xfb\x5b\x91\x7b\xf5\x17\xf7\x21\x16\x6d\xcb\xf2\x4a\xa5\x98\x48\xbc\x79\x6a\x55\x84\x4f\xe4\xba\x6e\xcf\x85\x2d\x0b\xbe\xea\x2f\x26\xd1\xb6\x09\xbd\x99\x86\x5c\x65\x14\xe4\xec\x89\x67\x5e\xde\x41\xa2\xdb\x67\x88\xea\x6d\xa2\x68\x5f\x75\xcf\xbe\x87\x16\x73\xd4\x5b\xca\x58\x1f\x92\xc2\x06\x55\xaf\x6d\x7e\xb2\x25\x6a\x8a\x44\xeb\x22\xea\x65\x88\x1c\x72\xe6\x7f\xed\xff\x17\x66\xf9\xbf\x39\x8e\x7b\x8c\xc3\x66\x4e\xe1\x4c\x45\xe1\xe1\x10\xbf\xee\x5b\xbf\x91\xd1\x5f\x7d\xb2\x1e\x93\xb9\x81\xd4\xe1\x6c\xbe\x98\x22\xe7\x85\xa5\x21\xc2\xbd\x2d\x7b\x0b\x43\xb3\x0f\xf8\x7d\xa8\xbe\x1b\x81\xbf\xf9\x7a\x55\x59\xf7\xb2\x60\xbd\xda\xd3\xf9\xb6\xa7\x25\x57\x22\x9d\xe4\xd2\xcd\x6e\x4b\x23\x94\xcb\x27\xa3\x5d\x81\xbe\xfe\x33\x25\x3c\x19\x26\xfd\x31\x4c\x62\x3d\xa6\xa3\x28\xda\xb0\xff\xdf\x8d\x7d\x67\xda\xc3\xfc\x65\xae\xed\x9d\x98\xee\x6b\x77\x7e\x7a\x58\xfe\x09\x00\x00\xff\xff\x2e\x94\xa2\xf0\xb2\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x85, 0x27, 0x2d, 0x89, 0xde, 0xbb, 0x9, 0x4b, 0x47, 0xf8, 0x4d, 0xa, 0xd, 0x94, 0x37, 0x71, 0xd9, 0x7f, 0xdf, 0xb9, 0x39, 0x86, 0x82, 0x1, 0xc, 0xa4, 0xc6, 0xb2, 0xde, 0xe1, 0x1f, 0x7d}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x4d\x6f\xe3\x36\x10\x3d\x9b\xbf\xe2\xd5\x08\x0a\xa9\x70\xa5\xa4\x2d\x7a\x68\xe3\x53\x92\x16\x39\x24\x29\x90\xa0\x87\x16\x7b\xa0\xa5\x91\xc3\x8d\x44\x0a\xe4\xc8\x6b\xaf\xa2\xff\xbe\x20\x25\x7f\x25\xde\xc0\xc1\x5e\xf6\x64\x0e\x39\xf3\xe6\xe3\xbd\xb1\xd2\x14\x17\x26\x27\xcc\x49\x93\x95\x4c\x39\x66\x2b\xcc\xcd\xc6\x86\xd2\x4c\x56\xcb\x32\xcd\xaa\xfc\x4f\x5c\xde\xe1\xf6\xee\x01\x57\x97\xd7\x0f\x89\xa8\x65\xf6\x24\xe7\x04\x5e\xd5\xe4\x84\x50\x55\x6d\x2c\x23\x12\x00\x30\x2e\x2a\x1e\xf7\x27\x56\x15\x0d\x47\xb7\xd2\xd9\x58\xc4\x42\xa4\x29\xfe\x52\x54\xe6\x50\x3a\xa7\x25\x94\x86\x99\x7d\xa4\x8c\x31\x53\x2c\x32\xa3\x9d\xc7\x69\xdb\x9f\x61\xa5\x9e\x13\x4e\x9e\x26\x38\x59\xe0\x8f\x29\x92\xbb\xe0\x77\x43\x2c\xd1\x75\x01\xb5\x8f\xbc\xf6\x40\x6d\x8b\x93\x45\x72\x2b\x2b\xc2\x33\xd8\xfc\x23\x5d\x26\x4b\x74\x1d\xa6\x38\x3b\x3f\xf7\xaf\x4f\x3e\xca\x03\x93\xce\xfd\x31\x16\xc2\x97\x8f\x1e\x16\x8e\x6d\x93\x31\xda\x63\x73\x7b\x37\x55\xf8\xa4\x17\xa6\xaa\x48\xf3\xfa\x01\x69\x8a\xbe\x9a\x17\x0f\x3b\xb9\x7b\xd3\xfb\x3c\xac\x6a\x0a\x55\x77\xdd\xce\xcd\x8b\x52\xc5\x28\x4d\x91\x95\xca\x83\x29\x07\x7e\xa4\x8d\xa5\xf1\xe9\x51\x65\x8f\xeb\x2e\x94\x83\x2c\xd5\x82\x12\x31\x1a\x3c\xee\xd9\x58\x39\x27\x1b\x30\x2a\x38\x36\x96\x5c\xf8\xf1\x04\x5a\x2a\x03\xf5\x15\xb1\xcc\x25\xcb\x24\x94\xe6\x2d\x54\xb2\xfe\xdf\xb1\x55\x7a\xfe\x21\x28\xa1\x90\x19\xb5\x9d\x10\x43\x8b\x33\xc5\x68\x1c\xe5\x90\x0e\xd2\x5b\x95\xac\x51\x18\xbb\xa6\x73\x21\xcb\x86\x26\x38\x45\x45\x52\x3b\x68\xc3\x70\xc4\x13\x9c\x0d\x17\x8e\x38\x40\x05\x1c\xa5\xf9\xf7\xdf\xc4\x28\x37\x9a\x82\xf1\xeb\x2f\x62\x54\xf9\x57\x2f\x9b\xe4\xa6\x61\x5a\x8a\x4e\x88\x63\xb8\xd9\xf2\x72\xb5\x0c\xaa\xec\x3a\x51\x34\x3a\x43\x64\xf0\x53\xef\x1a\xe3\x6f\xe2\x7e\xd8\x97\xca\xd5\xa5\x5c\x0d\x0c\x44\xf1\x3e\x07\x68\x43\x89\x96\xb8\xb1\x1a\x26\x79\x45\x99\x2f\xea\x15\xf8\xfd\x57\xc0\x17\xfb\xe0\xf1\x3a\x62\xc8\x72\x00\x1e\x53\x2c\xf6\x2a\x10\x83\x2c\x4a\x17\xb2\xbf\xa7\xb1\x68\x2f\xf9\x04\x33\x63\xca\x78\x93\xda\xb1\xe4\x28\xee\xc9\x55\x05\x4c\xe2\x69\xf9\xf1\xa8\x05\xfb\x61\x8a\xd3\x01\xe7\xed\x61\x4d\xc0\xb6\xa1\xe0\x38\xc8\x68\xcb\xd5\x7f\x64\xcd\xbf\x5e\x31\x9b\x2d\xda\x42\xf5\x40\xbb\x1e\x13\x14\xb2\x74\xb4\xdd\xaa\x61\x1e\x07\x03\x43\xc7\xcf\xf8\xfc\x56\x7c\xbf\x66\x87\x06\x7a\xd3\x38\x7e\x9f\x5a\xbe\x69\x98\xd3\xfd\x61\xd6\x52\xab\x2c\x2a\x2a\x4e\xee\x6b\xab\x34\x17\xd1\x78\x58\xaf\x1d\x84\xae\xf3\x6b\x3f\x2c\xd8\x38\x8e\x87\x09\x7f\x1f\xca\xed\x9b\x7f\x9e\x1e\xd3\xfd\x41\xa9\xf7\xd4\xec\xfe\x19\xbe\x2a\x3b\x2b\x8d\xa6\x68\xb9\x73\xd3\x6e\xa8\x3d\xe6\x2b\x72\xb0\xfc\xe5\xa1\xa1\xbd\x10\xcc\x10\x1e\xfe\x2e\x43\x84\x3f\x89\x9d\xbe\xc3\xa5\xff\xb0\x75\x5f\x02\x00\x00\xff\xff\x89\x2a\x06\x6f\x6e\x07\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb5, 0x31, 0x99, 0x29, 0x2, 0xc4, 0x9b, 0xd3, 0x91, 0x35, 0x57, 0x52, 0xe1, 0x99, 0xff, 0xb1, 0xec, 0xc7, 0x4, 0x8a, 0x19, 0xaa, 0xa6, 0x88, 0xca, 0x41, 0x3a, 0x9a, 0x1b, 0x95, 0x45, 0x67}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\x4b\x4f\xc3\x30\x0c\xbe\xe7\x57\x58\x55\x0f\xad\x34\xba\x3b\x12\x27\x1e\x12\x17\x98\xe0\xc0\x11\x99\xcc\x2b\x16\x6b\x13\x12\x83\x36\x85\xfc\x77\x94\x36\x1d\xdb\x04\x42\x42\xdc\x12\xdb\xdf\xc3\x0f\x8b\xfa\x05\x5b\x02\xd9\x5a\xf2\x4a\x71\x67\x8d\x13\xa8\x14\x00\x40\xa1\x4d\x2f\xb4\x91\x62\xfc\xb1\x29\x54\xad\x54\x08\x27\xe0\xb0\x6f\x09\xca\xc7\x19\x94\x0c\xa7\x67\xd0\x5c\xf7\x42\x6e\x85\x9a\x3c\xc4\xa8\x42\x80\x92\x9b\x0b\xf2\xda\xb1\x15\x36\x7d\x0a\x26\x05\xc8\x19\xf6\x76\x8d\xdb\x1b\xec\x08\x62\x04\x9e\xc0\x10\x06\xa5\xa4\xc0\x2b\x30\x0e\x2a\x7a\x4d\xf5\x43\x61\xe1\xc9\xbd\xb3\x26\x57\xd4\x47\x71\x31\x0e\xdb\x14\x8f\x71\xc0\xdf\x8b\xe3\xbe\xad\x6a\xf0\xc3\x63\xc7\x49\xfd\x32\x19\xd9\xfd\xf7\xba\xa0\xee\x89\x96\xa9\x93\x92\x9b\xcb\xe1\x9d\xb9\xc6\xda\x5c\x70\x64\xfc\x07\xe2\x7d\x5e\x63\x33\xe9\xad\xf5\x13\x62\x3e\x1f\x18\x8d\x1d\xfd\x7f\x80\x98\x05\x7a\x8d\xeb\x34\x8b\x9c\x39\x9a\xdd\xe4\xe2\x5b\x4c\x95\x33\x57\xc6\x75\x28\x0b\x74\xd8\x25\xad\x1a\x0e\x13\x77\xe4\xdf\xd6\xe2\x1f\x58\x9e\x17\xe3\xd2\x0f\xc6\x57\x24\xc8\xaf\xfe\x12\xfa\x7c\xbc\x8a\xbf\x58\xdd\x83\x57\x5a\x36\x90\x0f\xac\xc9\xb1\xd9\x3f\x77\x12\xc2\xb4\x9a\xa8\xbe\xf6\xf4\x19\x00\x00\xff\xff\xad\xfc\xbb\x7f\xf3\x02\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd0, 0x3a, 0x99, 0xf6, 0x41, 0xfa, 0xdd, 0xc0, 0x2e, 0x3, 0xc1, 0x31, 0x43, 0x68, 0xa5, 0x42, 0xca, 0x90, 0x7f, 0xb7, 0x15, 0x72, 0x87, 0xb, 0x71, 0xa6, 0x44, 0xc8, 0x5a, 0x98, 0x33, 0xa4}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\xcf\x8b\xdb\x3a\x10\xbe\xfb\xaf\x98\x67\xc2\xc3\x06\xc7\x7e\xbc\xa3\x4b\x0e\xa5\x9b\x43\x29\xdd\xec\x21\xb4\x87\x65\x29\x5a\x79\xe2\x88\xc8\x92\x90\x14\x6d\x83\xeb\xff\xbd\x48\x4e\xb2\x4e\x9c\xec\x8f\x43\xa1\x3a\x59\x9a\x6f\x66\xbe\xf9\x46\x23\x17\x05\x7c\x92\x15\x42\x8d\x02\x35\xb1\x58\xc1\xe3\x0e\x6a\x79\xdc\x03\x13\x16\xb5\x20\xbc\xa0\x4d\xf5\x01\x6e\x16\x70\xbb\x58\xc2\xfc\xe6\xf3\x32\x8f\x14\xa1\x1b\x52\x23\x28\xc2\xb4\x89\x22\xd6\x28\xa9\x2d\x24\x11\x00\x40\x4c\xa5\xb0\xf8\xd3\xc6\x51\xbf\xad\x99\x5d\x6f\x1f\x73\x2a\x9b\x82\x48\x33\xad\xd0\x15\xb5\x9c\x1a\x2b\x35\xa9\xb1\x70\xff\x17\x6a\x53\x17\x28\x2a\x25\x99\xb0\xf1\x3b\x7c\xa8\xc6\x0a\x85\x65\x84\xbf\xc7\x6b\x6d\xad\xa2\x9c\xe1\xdb\x73\xd9\x9d\x42\x13\x47\x69\x14\x15\x05\x7c\xe4\x1c\x88\x23\x8c\x93\x47\xbe\xaf\x3f\x8f\xa8\x14\xc6\x97\xdf\xb6\x53\xd0\x44\xd4\x08\x93\x1f\x19\x4c\x1c\x94\x33\xc8\xef\x3c\x06\xba\x2e\x64\xf3\x88\x89\x12\xa4\x41\x6f\x9b\xb8\xfc\xd6\x7f\xfe\x02\x2b\xef\x88\xa1\x84\x1f\x70\x45\x01\x6d\x7b\x40\x76\x1d\x3c\x31\xce\xc3\x89\xcb\x6f\xd0\x50\xcd\x94\x65\x52\x3c\x47\x1d\x40\x67\x10\xf7\xc0\xdb\xfe\x20\x0e\xb4\x50\x54\x1e\x9d\x46\xaf\x90\x7c\x0b\xc1\xa2\x80\xef\xcc\xae\xc7\x04\x89\x52\x7c\x07\x27\xd9\xc1\x11\xbe\x45\xb0\x12\x16\x81\xb2\xf1\xde\xcb\x35\x33\x41\x3b\x60\x06\xb6\x06\x2b\x6f\xbf\x58\xdd\x6a\x2b\xe8\x28\x59\xe2\xf6\xe0\xe5\x4e\xf9\x7d\x0a\xa1\x45\xa1\x08\x68\x83\x22\x1a\xed\x56\x8b\xc1\x79\x7f\xec\xd7\x17\xdc\x95\x27\x8a\x65\x47\xd3\x37\xcf\xb5\x04\xd7\x9f\x74\x51\x37\x94\xce\x13\xbf\x23\xda\x60\x5f\xab\x0a\x9f\x04\x36\x53\x07\x0d\x51\xbe\x82\x70\x1b\xc0\x70\x46\x31\xef\x99\x07\x7c\xd2\x78\xc0\xbd\xb1\x9a\x89\xfa\x21\x4c\xd5\x8a\x50\x6c\xbb\x14\x92\xfb\x87\x67\x8a\x19\xa0\xd6\x52\xa7\xfb\x12\xfa\x68\xe5\x0c\x1a\xb2\xc1\x33\xe0\x7f\x19\x70\x14\x49\x93\xa6\xfd\x90\x39\xa2\xbd\x73\x1f\xa0\x3f\x5a\x49\x0d\x9b\x0c\x42\x7b\xfb\x76\x37\xf0\x2c\x82\x77\x50\x0e\x06\x64\x8e\x26\xf3\xc4\x2c\x5d\xc3\x66\x80\x7e\xfd\x5e\x0f\x91\x6f\xb9\xdf\x87\x45\x89\xc1\x93\x66\x94\x27\xe6\x01\x1f\x1d\xb2\xba\x3c\xf1\x3a\xa4\x03\x72\xa3\x50\xc7\x7b\x31\x8e\x15\x74\x75\x30\x03\xed\x46\x36\x4f\x9d\xad\xbc\x7b\xe8\x9a\x3e\xa7\x7a\xcc\xd1\x37\xf2\x5a\xf0\xd0\x45\x98\x41\xdb\x1e\x23\x75\x5d\xa2\x5d\x7a\x11\xcf\x56\x01\xfe\xcf\x0c\x04\xe3\x17\x8a\x3a\xac\xfd\x7d\x16\x8c\x67\xf0\xef\xdc\x77\xf9\x3a\x76\xa1\x4a\x88\xc3\xf5\x8c\xb3\xab\xa0\xb9\xd6\xa5\x4f\x7d\x1d\xf1\xc2\x9c\x9c\x2f\xaf\x77\x79\x78\x76\xf6\xe2\xbf\x90\xfb\x74\xcc\xce\xd7\x58\xf5\xf1\xc9\x60\x2c\xcf\x4d\x15\xae\xc8\x96\xdb\xcb\xed\xf9\x33\x32\xce\xb5\xf6\xc3\xe0\x0b\xff\xca\x4c\x43\x2c\x5d\xff\xed\xb2\x76\x27\xb3\x7d\x41\xca\xab\x32\xfa\xbf\x3b\x13\x5b\x8c\xc6\xa1\xfa\x17\x6b\xe6\x7f\x03\x28\xaa\x24\x6c\xb3\xe1\x1b\x1c\x6a\xdf\x64\x07\xa6\xca\x75\xe9\xfe\xa5\x1d\x3e\xda\x7b\x3f\xc1\x78\xd4\x45\xbf\x03\x00\x00\xff\xff\xc3\x68\x74\x7f\xa6\x08\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x38, 0x4c, 0x4b, 0x10, 0xe5, 0xf1, 0x10, 0x79, 0xd6, 0x6d, 0x42, 0x94, 0x3e, 0x38, 0x6a, 0x55, 0x70, 0xd2, 0x39, 0xe3, 0x35, 0x27, 0x83, 0x91, 0xe4, 0xd6, 0xc9, 0xeb, 0x93, 0xf2, 0x88, 0x4b}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x5b\x6f\xdb\xbe\x15\x7f\xf7\xa7\x38\x7f\xc1\x2d\xa4\xc2\x91\xb6\x3d\xba\xf0\xcb\x92\x36\x2d\xba\x25\xc1\x92\xad\xc0\xda\x20\x60\x24\xca\x26\x2c\x91\x2a\x49\x2b\xf1\x5c\x7d\xf7\x81\x17\x49\x94\x2c\xb9\x76\x97\x76\x7e\x08\x6c\xf1\x5c\x7f\xe7\x4a\x25\x8a\xe0\x9c\x25\x18\x96\x98\x62\x8e\x24\x4e\xe0\x71\x0b\x4b\xd6\xfc\x86\x92\x20\x20\x54\x62\x4e\x51\x16\xc5\x79\x12\x09\xcc\x4b\x12\xe3\xb7\x70\x71\x0d\x57\xd7\x77\xf0\xee\xe2\xe3\x5d\x38\x29\x50\xbc\x46\x4b\x0c\xbb\x1d\x84\x57\x28\xc7\x50\x55\x93\x09\xc9\x0b\xc6\x25\xf8\x13\x00\x00\x2f\x66\x54\xe2\x67\xe9\x99\x5f\x84\x79\x13\xf3\x6d\x49\xe4\x6a\xf3\x18\xc6\x2c\x8f\x10\x13\x67\x09\x2e\xa3\x25\x3b\x13\x92\x71\xb4\xc4\x51\xf9\x97\xa8\x58\x2f\x23\x4c\x93\x82\x11\x5a\x73\x1f\xc5\x13\x73\x9c\x60\x2a\x09\xca\x4e\xe1\x5a\x49\x59\xc4\x19\xc1\xc7\xeb\xb2\x88\x08\x43\x1f\x1e\xc1\x21\xb7\x45\x4d\x5e\x88\x63\xec\x42\x84\x0b\x6f\x12\x4c\x26\x25\xe2\xf0\x00\xad\x67\xe1\x0d\x67\x25\x49\x30\xb7\x27\x35\x4e\xfd\xe7\xb7\x46\x58\xfd\xb3\x36\x39\xbc\x35\x5f\xde\x71\xce\xea\xb3\x16\x80\xf0\xba\x90\x84\x51\x31\x99\x44\x11\xdc\x6d\x0b\x0c\x44\x80\x5c\x61\x50\xf6\x43\xca\x78\x27\xdc\x31\xa3\x42\x1a\xb2\x05\x78\xce\x89\xa7\xf9\xad\x26\x40\x25\x22\x19\x7a\xcc\x30\x68\xaf\x42\xcb\xe7\x4f\x76\xbb\x33\xe0\x88\x2e\x31\x4c\x1f\x66\x30\x2d\x61\xbe\x80\xf0\x46\xd1\x28\xe9\x0a\x2b\x45\x41\x52\xa0\x4c\xc2\xb4\x0c\x2f\x33\xf6\x88\x32\xf7\x6c\x5a\x50\xa5\x71\xbe\x50\xc7\x5a\xf9\x77\x90\xec\x06\x89\xb8\xa5\x8b\x22\x65\xb4\xa5\xac\x2a\x78\x22\x59\xa6\x9f\x94\xe1\x05\x16\x31\x27\xda\xe5\x9a\x5a\xa9\xef\x90\x1b\xcf\xa6\xb5\x6b\x0f\x86\xb3\x71\xb4\xb6\x04\xd3\x44\x89\x70\xbe\x06\x23\x20\x10\x9a\xb2\x1f\x81\xf0\x51\xd1\xbc\x24\x08\x56\x86\xf2\x99\x88\x22\x43\xdb\x3a\x86\x60\x3f\x8e\xa0\xc5\x08\x99\xe3\x9b\xfa\xa9\x6c\x34\x60\xdc\xc6\xac\xe8\x29\x35\x07\xe7\x48\xe2\x25\xe3\xdb\xfd\xb3\x31\x78\xcf\x4e\x81\xf7\x70\xfe\x8c\xc1\x76\x0c\x64\x51\x04\x9f\x89\x5c\xed\xe7\x0d\x2a\x8a\x6c\x0b\x1d\x23\xa1\x44\xd9\x06\x83\x64\x50\x17\x8f\xaa\x9d\x15\x11\x3a\xdd\x55\x01\x6d\x04\x4e\xd4\xf9\x60\xd2\xa5\x1b\x1a\xef\x29\xf3\x4b\x4b\xac\x8b\xab\xaa\x02\x78\xa3\xfc\x82\x5d\x13\x2f\x8e\xe5\x86\x53\x78\xad\xf3\xb5\x79\xfa\x09\x6f\xe7\x7b\x29\x3c\x6b\x8e\xff\xa5\x2c\x9d\x43\x69\x9e\x54\x93\x0e\xa0\xce\xd7\x11\x68\x4f\xc8\xca\x97\x4a\xca\x13\x73\x52\x31\xd8\x4e\x77\x65\xd5\x17\x9c\x50\x99\x82\xf7\x4a\xbc\x12\x1e\xf8\x03\xe9\x1a\xe8\xa7\x03\xb9\x1a\x38\x2d\xe4\x12\xcb\xfd\x6c\x58\x62\x39\x98\x0b\x29\x67\x39\xe4\x58\xa2\x04\x49\x14\x6a\x11\x3a\xcc\x3d\x21\x7e\xbe\x67\xb0\x0a\xb5\xdf\x09\xfd\x0c\x1e\x19\xcb\x02\xb0\xb1\x2f\x67\xc0\xd6\xca\xaf\x3c\xbc\xc4\xd2\xaf\x8b\xb0\x2b\xc3\x55\x12\x68\x36\x92\xc2\x1f\x6c\x6d\x65\xb4\xb8\xff\x1b\x73\xa6\x93\xc2\x45\xdd\xa6\x96\xb1\xc2\xa5\x98\x41\x8a\x32\x81\x5b\xe0\x33\x31\xce\xa8\xcd\xff\x0e\xff\x39\xc4\xdf\x06\xce\xfc\xb5\x02\xca\xb0\x0b\x41\x30\x03\xc9\x37\xd8\x12\xd6\x11\x11\x06\xcc\x16\x7b\x1d\x12\x31\x12\x12\x42\x25\x1b\x0a\x89\x38\x22\x24\x33\xd8\x2b\xc7\x7d\x22\x8b\xad\x75\x21\x0f\x6f\x8f\x8a\xce\x0c\xca\xc0\x01\x60\xa4\x1c\x07\xab\x51\x49\x13\x05\x8a\x71\xa7\x24\x25\xce\x8b\x4c\xad\x71\x9e\xea\x3e\x1e\xe4\x68\x8d\x6f\x33\x35\x81\xfc\xa1\x4a\x0c\xf4\x43\xfc\x34\x2e\x42\xb8\x32\x6a\x09\xd3\x32\x7c\xbf\xa1\xf1\x88\x66\x05\xac\xee\x84\x3f\x62\xed\xfb\x98\xe0\x94\xd0\x56\x6f\x77\xc6\x29\xa7\x09\x4d\xf0\x33\x84\xf0\xa7\x91\x6e\x32\x55\xd1\x75\x09\xff\xac\x65\xd7\xc7\x7d\x0c\x0d\x79\x6f\x0a\x8e\x23\xa8\x8c\x98\x96\xfb\x9d\xc7\x7e\x1d\xf2\xe2\xb0\x13\xee\x59\x4a\xc7\xed\x9e\xa6\x54\xd7\xfc\x34\xa5\x43\xbd\xb4\xae\x88\xa2\x69\xfc\x36\xcb\x14\x5b\x55\xfd\x1d\x15\xb0\x62\x59\x22\x00\xa9\x09\xd6\xdd\xc6\x4c\x53\x41\xfc\x10\xf3\x02\x72\x54\x7c\x11\x92\x13\xba\xbc\x17\x92\x6f\x62\xb9\xab\xda\xa1\x13\x45\xf0\x0f\xfc\x6d\x43\x38\x4e\x1c\x99\x03\x98\xeb\x79\x68\xdd\x68\x38\xfa\xed\x1e\x11\x1e\xbe\xdf\x64\x99\x2d\x96\x39\x34\x0a\x9d\x41\xd6\xeb\x1e\xd6\x0a\x33\x7f\x51\x76\xbc\x15\x0d\xc7\x0b\x5a\x71\xd9\x5c\xac\x8e\x36\xa3\x65\x79\x09\x3b\x7e\x98\x10\xf5\x52\x5f\x20\xae\x36\x13\x23\x52\xf3\xe8\x35\x7f\x8c\xcb\xd0\x39\x3b\x88\xf6\x0f\xbe\xdc\xeb\xdd\x64\xf2\x0b\xf3\x61\x3f\xe7\x3b\xc7\xb6\x2b\xff\x96\xec\xf8\x80\xc4\x61\xb3\xd4\xb4\x3e\xd6\x83\x93\x7d\x78\xb9\xdc\x6a\x97\x37\xad\xfe\x02\xa7\x68\x93\xc9\xff\xc5\xd3\x3d\x7b\x5f\x28\x7c\x6e\x3a\x73\x81\x6f\x46\xb2\x53\x4f\x7f\x4d\x61\x77\x65\xa1\x7b\xb6\x9e\xfb\x6f\x46\x52\xba\x5d\x03\x0e\x89\xf6\x59\x21\x9b\x34\x0f\xc0\x1f\x93\x36\x03\xac\x2e\xd5\x41\xb3\x09\x08\x85\xe8\x7c\x01\xaf\x47\x18\x7a\x95\x34\x07\xa5\x68\xe6\x3a\xad\x77\x17\xa1\xd7\x3d\xb4\xc6\xbe\xd3\x86\xf5\x1b\x9a\x14\xc5\x78\x67\x37\x3c\x75\x39\x7f\x50\x9b\xca\x7c\x61\x53\x41\x9b\xbd\x1b\x8a\xb9\xbf\x42\xe2\x86\xe3\x94\x3c\x1b\x53\xbc\x2b\xfc\xe4\x05\x6e\x0c\x48\xaa\x84\x99\x4d\x73\x7c\x32\x7c\x29\xc3\x4f\x78\x7b\xff\xd6\xd9\x2d\xeb\x8f\xdd\x83\x28\xc9\x66\xed\xbb\x87\x2b\xfc\xa4\x30\xfc\x27\x15\x9b\xa2\x60\x5c\xe2\x44\xbf\x86\xf0\xed\x0e\x04\xcd\x1e\x34\x92\x51\x06\x0e\xab\x15\x16\x50\x86\x7a\xb5\x74\x11\xb3\x5e\x32\xde\xed\x2a\x9d\x72\x1e\x2c\x0b\x35\x03\x4b\x70\x60\x6d\x9e\xb2\x75\x9b\xea\xee\xc6\x62\xb3\xf2\x03\xa2\x49\x86\x81\xef\xb7\xbc\x93\xdb\x9d\x5a\x11\xd6\x78\xab\x89\x46\x2a\xa7\xc5\x42\x87\x67\x51\x63\x62\x98\x3b\xe3\xe2\xac\xaa\xee\xdd\x80\x9e\x16\xa4\xda\x42\x13\xa1\x61\xf1\x43\x61\x53\xe0\xef\xeb\x51\xa5\x10\xea\x24\x52\xfe\xe9\x7b\xbf\xdd\xf2\xdd\x16\xd0\x97\xd7\x4b\x81\x16\x6c\xb6\xdf\xcb\x4f\x9e\xf2\xbf\x16\xec\x0e\x06\xd6\xff\xba\xa3\x36\x10\x34\xb7\x9a\x5f\x02\xd2\x72\x60\x58\xfc\xcc\xa0\xf8\x6d\x30\x1d\x33\x95\x8e\x86\x73\xa0\x7d\xfc\x2c\xc2\x8e\x6d\x07\xed\x1a\xa9\xb1\x01\xa5\x8d\xc6\x11\x49\xa3\x5d\xb0\xdf\x7f\x6c\x05\x1b\x25\x33\x55\xc9\xb6\x19\x8e\x5d\xad\x9c\xbb\xd9\xff\xfb\x7a\x55\x9b\x72\xc2\x15\x6b\xd4\x9d\x97\xb8\x67\x1d\x7b\xcd\x72\x96\x0e\xf3\x75\xe8\x3d\x72\x14\xd5\xe4\xfa\x55\x60\x6d\xa7\x59\x53\x62\x8e\x15\x02\x08\xec\x7f\x48\xe0\x71\xab\x3c\x52\x99\xe0\xbc\x9a\xf0\x05\xbc\xd9\xed\xa6\x05\xad\x5f\x38\xd8\x75\x64\xb7\x53\x3a\x6f\x10\x47\xb9\x08\x6f\xf5\x3a\x60\x5f\x1b\x99\xc9\xa2\x52\xc1\x3d\x68\xf3\x31\x96\xcf\xca\x3f\xab\x35\xfc\x2b\x8a\xd7\x4b\xce\x36\x34\xf1\x83\xfe\x4b\x1c\x11\xb6\x1a\x3f\x13\xb9\x3a\x37\x3c\x7e\x2c\x9f\x67\xd0\xb1\xe0\x1c\x65\x19\xe6\x75\xd5\x0c\xc1\xe4\xf0\x1f\x40\xec\x90\xcf\x3d\x0b\x1a\x0f\xec\xb3\x9e\x45\x27\x61\x92\xe0\x14\x73\xad\xdc\x0f\xba\x95\x6b\xdb\x97\x5c\xd5\x39\x61\xc5\xdf\x20\xb9\x32\x4e\xf7\xcb\xd6\x36\x09\x44\x13\xf0\xf1\x37\xcb\xec\x79\x81\xfd\x45\xc1\xb3\xff\x0e\xe8\x2e\x5b\x2d\xbb\x65\x59\x80\x37\xfb\xea\x7d\xf5\xbc\x21\x05\xbd\xa6\xa6\x3e\x98\x73\x58\x80\x08\x53\xc6\x73\x24\xcd\xc4\x6e\xe6\xf9\x75\xd1\x5b\x51\x5b\x3d\x55\x05\x4e\xaf\x73\x92\x40\xaf\x3d\x85\x3c\xbc\x38\xab\x0f\x2b\xe4\xcc\xaa\x3f\xb8\x42\xeb\x09\x14\xb8\x9d\x5f\x31\xfd\xb1\x50\x1d\x6b\x70\x29\x71\x5a\xf0\x60\x6a\x76\x8b\xf4\x1c\xe5\x58\xd5\xe8\x40\x7a\xde\x71\x92\xff\x0d\x09\x69\xf3\xf4\x1d\x4d\xc4\x93\xce\xa6\x3c\x47\x55\xa5\x1c\x08\xf6\x5a\xe6\x7f\x03\x00\x00\xff\xff\x8b\xad\x25\xeb\x24\x1d\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xec, 0xfa, 0x6d, 0x45, 0xc5, 0xe, 0x97, 0x8b, 0xb9, 0xb0, 0x10, 0x4d, 0x1c, 0x99, 0xc0, 0x7c, 0xce, 0xb1, 0x9c, 0xcc, 0x80, 0x98, 0xbf, 0x8e, 0x9e, 0xeb, 0xe0, 0x90, 0x81, 0x3, 0x17, 0x6d}}
	return a, nil
}

var _definitionsInfosHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x3f\x53\xc3\x30\x0c\xc5\xf7\x7c\x0a\x9d\x17\x16\xda\x89\xb2\x31\x51\x06\x06\x60\xe9\x1d\x63\xa3\xc6\x6a\x2b\x1a\x5b\xc1\x56\x5a\x0a\xc7\x77\xe7\xdc\x3f\xd7\xbf\x49\x8f\x66\xca\xc5\x7a\x3f\x3d\xf9\x29\x19\xfb\xb1\x80\x91\xd1\x07\x15\x6a\xc0\x38\x52\x34\x60\x0a\xf1\x4a\x5e\x3b\xce\xf6\x0c\xfc\x64\x00\xba\xac\x08\xb6\xcf\x03\x98\xa8\x81\xfd\xc4\x64\x00\x96\x63\x55\xe2\x72\xe8\xd1\x51\x3a\x79\x5c\x4b\x5f\xfa\x3d\x93\xfd\x5e\xc0\x27\xea\x1e\x7f\x8f\xdb\xa4\x24\xc5\xc9\x7f\x1d\x3d\x0d\xb0\x85\xc8\xf6\x90\x77\x80\xa2\xaf\x4a\x82\xa6\x8f\x1a\x6a\xca\x00\x0a\x71\x8e\xbc\xa6\xaa\xe7\x3e\x70\x04\x9d\x12\xd4\x9e\x3f\x6b\x82\x19\x2d\x81\x3d\x44\x0a\x73\x2e\xa8\xdb\xdc\x32\x19\xbb\xb2\xe9\x6b\x9a\x69\xd3\x36\x50\x89\xca\x73\x82\x0a\x75\x0a\x2a\x0b\x0c\x36\x6e\xdb\xdf\x44\x78\x97\x30\xeb\x73\x68\x31\x12\xf9\xfb\xe8\xfe\xd9\xeb\xfd\x5d\xb3\xe0\x28\xb0\xb5\xf3\xb7\x55\xd1\x20\x1d\x5d\x70\x9f\x6a\x20\x4e\xa5\x2e\x2d\x8c\x08\xc4\x13\xc8\x18\xf2\x31\x97\x94\xdf\x42\x1e\x35\x10\xba\xf4\x66\x39\xe4\x20\x01\x72\xf6\x73\x2c\xd9\xe6\x2d\x43\xd4\x95\x45\x25\x3b\x44\x3d\x1c\x45\xd9\x51\x77\xc0\x8e\x76\xd2\xa8\x12\x70\x42\x3b\x6d\x29\x05\x2a\x8b\x6f\x5f\xc2\x13\xd9\x49\x80\xe7\xf2\xdb\x5c\x40\x23\x64\x21\x61\xd6\xb1\x1c\xae\x07\x45\x45\xe5\xa8\x5c\xac\x7e\xa9\xda\x6b\x6b\x96\xe7\x75\x2d\x2b\xf0\x17\x00\x00\xff\xff\x34\xac\xaf\x48\x1c\x04\x00\x00")

func definitionsInfosHclBytes() ([]byte, error) {
	return bindataRead(
		_definitionsInfosHcl,
		"definitions/infos.hcl",
	)
}

func definitionsInfosHcl() (*asset, error) {
	bytes, err := definitionsInfosHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/infos.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x31, 0x6a, 0x76, 0xf8, 0x51, 0xcf, 0x20, 0xd, 0x59, 0xb, 0xdb, 0xb6, 0x78, 0xbd, 0x86, 0x89, 0xab, 0xf, 0xc, 0x12, 0x47, 0x81, 0x53, 0x7f, 0x18, 0xfe, 0x49, 0xa6, 0x65, 0x89, 0xea, 0x70}}
	return a, nil
}

var _definitionsOperationsHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x4d\x8b\xe3\x46\x10\xbd\xfb\x57\x14\xba\x2c\x2c\xc6\xa7\x90\xdb\x9c\x16\x02\x39\x2c\x09\x3b\x87\x1c\xc2\x32\xf4\x48\x25\xbb\x82\xd4\x2d\xaa\x4b\xf6\x7a\xc3\xfc\xf7\xa5\x5a\xdf\x9f\x96\x86\x99\xc3\x60\xd4\xaf\x3e\xde\xeb\xea\xa7\xd6\x81\xac\x20\xa7\x26\x46\x88\x62\x57\x10\x72\x04\xff\x1f\x00\x12\xf4\x31\x53\x21\xe4\x2c\x3c\x41\x44\x1e\xe4\x82\xd0\x81\x53\xc7\xf0\xc5\x15\xf7\x53\x74\x38\x00\xb8\x22\x44\xdf\xab\xd8\x49\xf4\x8d\xb2\x0c\x74\x1d\x8c\x85\xbf\x5e\xff\xc3\x58\xc0\x31\xe4\x65\x26\x54\x64\x08\xae\x7a\x44\x36\x14\xf1\xc8\x57\x8a\xf1\x14\x85\x54\x85\x61\x93\x7b\x08\x7f\x4f\xf0\x6f\xe4\x39\x8e\x8e\x10\x25\x5e\xa2\xef\x07\x80\xb7\xc3\x5b\x9f\x42\x42\xfc\x92\x91\x97\x65\x1a\xa5\xc7\x24\x74\x9f\x10\x63\x2c\x8e\xef\xf0\x6a\xf4\x99\x17\xc7\xe6\xdc\x96\x07\x71\xa0\x99\xea\xe6\x3c\x94\x36\x41\x06\xa3\x71\x1d\x69\x45\xbc\x24\xc4\x6b\xc4\x19\xa5\x64\x5b\x25\x33\xe0\x0b\x8c\x29\xa5\xb8\xce\x33\x47\x51\xf3\x7d\x0f\x2b\x8c\xbe\xcc\xc4\xb7\x2b\x8e\x96\x48\x7b\x3c\xe7\x68\xc5\x7f\x34\xfb\x26\xef\x88\x3e\x00\xe6\xaf\x98\x40\x6f\x5f\x2a\x20\x6a\xeb\x23\x71\xda\xe6\xd6\x54\x1a\x56\xbb\x92\x79\x97\x40\x7e\x56\x20\xb2\x09\xfe\x78\xe9\x3a\xdc\x3c\xe1\x21\xb0\x51\xa8\x0a\xdf\x4a\x9e\x2c\xc9\xcb\xa0\xf0\x1a\x7b\x45\xeb\xe1\x58\x2a\x38\xd5\xa0\x30\x72\x59\x12\x01\xcf\xb5\x0a\x55\x2b\x37\x26\xc1\xed\xbd\x04\x38\x18\xad\xa8\x67\x52\xdc\xbe\xc6\xb4\xfa\x11\x22\xd6\x7f\x21\x4a\x7f\x78\xfa\x89\x73\x3b\x93\xbb\xeb\x9e\xfd\xf8\xea\xae\xd8\x1d\x3e\x0d\x5e\x23\xa2\xeb\xda\xfb\xc7\xd9\x4b\xc1\x98\xd2\x8f\xad\x67\xac\x42\xef\xb4\x97\x2a\x68\xe4\x30\xd5\xc3\x0f\x35\x99\x3a\xe5\x1e\x9f\xa9\xd9\xef\xb5\x9a\x4d\x32\x4c\x7c\xa6\xd5\x61\xbb\xd5\x8c\xfa\xdb\xec\x36\xef\x51\x68\xde\x68\x18\x4d\x7c\xd9\x33\xd0\xdf\x34\xa0\xdb\xec\x10\xbf\xd6\x77\xc1\xee\x4a\x89\x9e\xce\x9b\xb9\x1f\xe1\x76\xa1\xf8\x02\xb1\xb1\x10\x22\x43\x81\x6a\xa0\xf6\xbb\x46\xc9\xd9\x1c\xa5\x91\x6b\x86\x15\x6b\x32\x78\x02\xe1\x12\x9b\xc6\xcd\xab\x63\xd9\x62\x2e\x01\xa8\x13\xfa\xd0\x43\xfa\x0e\x16\xbb\xbc\xc8\x50\x70\x4b\x85\x06\xdb\x15\x01\x63\x13\xc8\x91\xcf\xa8\x02\xe5\xb5\xa7\xc1\x1f\x94\x2d\xba\x40\x5b\x7f\xa4\x45\x18\xda\xf9\xfd\xd5\x5d\xc8\x0d\x59\x31\x64\xeb\xab\x8d\x1a\xe8\x68\xe0\x7d\xef\xc2\xc4\x68\x64\xd5\xc0\x2a\x04\x18\xb0\x78\x6b\x12\xe9\x4b\xc9\x8b\xb1\x8b\x0e\x66\x4d\x8e\x4b\x43\x2b\x8e\x71\x20\x6c\x82\x2a\xd5\x5a\x0f\x15\x42\xc5\xdc\x5b\xbf\xa9\x71\xc6\xd5\xfd\x3a\xa3\xce\xc3\xd5\x64\x94\x4c\x6b\x84\x43\xb2\xee\xd8\xbb\xf8\xea\xb9\x7f\xe8\x0b\x26\xcb\xa6\x9d\x34\xce\x24\x17\xf2\xa3\x8e\xa6\x65\x67\xcd\xc1\x8b\x11\xf2\x42\x31\x19\xbb\xdd\x21\x9e\x9b\x28\x93\x75\xa3\xe3\xbb\x87\xeb\x47\xa1\xb4\xd2\x34\xfb\xc9\x43\x1b\xe6\x8f\xe0\xcb\xf8\x02\xc6\xc3\x33\xfd\xc4\x23\x7c\x51\xe4\x22\x9d\x3a\x6a\x9e\x54\xa5\xd3\x76\x42\xa3\x03\xd1\x91\xda\x3e\x8b\xed\x47\x44\xca\x2e\x7f\x30\x1e\xad\xe3\x35\x23\x90\xa3\x98\xc4\x88\xd9\xf0\x36\x8d\x4b\x66\xf5\x8f\x86\xe4\x27\x0f\x4d\xf4\x82\x56\xba\x3c\xa8\xc6\x68\x92\xf5\x4a\x26\x09\x22\xa5\x94\xe9\x16\xf5\x72\xcf\x32\x39\x42\x74\x5b\x98\x76\x3b\x28\xac\xbb\xb6\x56\x58\xd7\xc3\x25\x4f\x2e\xfa\x12\xd6\x53\x48\x36\x75\xe0\xd2\xee\xca\xb4\xff\x25\xe2\xa6\x17\xcf\xc7\x57\x4d\xe5\xdc\x98\x72\xba\x6c\xca\x0d\xff\xa5\xbb\xbf\x6d\xe7\xf3\x90\x12\x66\x49\xf8\x30\xaa\xaa\xcb\xbd\x40\x2d\xea\x85\xc9\x9e\xa3\xc3\x5b\x8b\x68\xec\x60\x11\x81\x3c\xca\x81\xcc\x8e\x7b\x80\xea\x8e\x3b\x80\x90\x95\x1e\x20\xcc\xc4\x60\xfd\xb9\x9a\xa7\xaf\xba\xd0\xe1\xec\x24\xc9\xef\xbf\xf5\x97\xd5\xe7\xd6\x7b\x75\xc3\xf5\xcf\xd5\x29\xe9\x03\x68\x16\xf1\xa7\x20\x1b\x19\xb0\x2a\x0c\xb1\x1f\x82\x4f\xa7\xd3\xe7\xbf\x0d\x0d\x51\x72\x79\xd0\x53\xff\xea\xba\x08\x1a\x49\x4c\xee\xf4\x0d\x4d\x82\xfd\x52\xfa\x4a\x1e\x8a\x58\x5f\x05\x7a\x90\x31\xbb\x1a\x32\x43\x2f\x7c\x8f\xac\xca\xad\x1f\x02\xeb\x4d\x77\xbe\x38\xb7\xb9\xad\x6f\x0f\x22\x26\x1d\xd6\xce\x32\xd7\x62\x78\x79\xcd\xa5\xee\xa3\xf4\xd6\xb6\xde\xe6\x6d\xa2\xed\x3f\x7a\xea\x42\x92\x5f\x01\x00\x00\xff\xff\x74\xc4\x69\xb2\xfe\x11\x00\x00")

func definitionsOperationsHclBytes() ([]byte, error) {
	return bindataRead(
		_definitionsOperationsHcl,
		"definitions/operations.hcl",
	)
}

func definitionsOperationsHcl() (*asset, error) {
	bytes, err := definitionsOperationsHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/operations.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcd, 0x75, 0x8f, 0xce, 0x5f, 0x6e, 0x9d, 0x87, 0x51, 0x16, 0xe9, 0xe1, 0x5d, 0x4d, 0xc3, 0xbb, 0xfa, 0xd3, 0xe6, 0x67, 0xa2, 0xc7, 0x60, 0x8f, 0x83, 0x65, 0x90, 0x76, 0x19, 0x7e, 0xb4, 0x5a}}
	return a, nil
}

var _definitionsPairsHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\x4f\x6f\xdb\x38\x10\xc5\xef\xfe\x14\x0f\x3e\x25\x8b\xc0\xb9\xec\xee\x6d\x2f\x5b\xa0\x40\x0f\x45\x0b\xb4\x3d\xb5\x85\x41\x93\x23\x6b\x6a\x8a\x54\x87\x23\xff\x69\xd1\xef\x5e\x90\x92\x6c\x37\x51\x9c\xc0\x39\xc5\x98\x99\xf7\x7e\x9c\x19\x8a\xb3\xd6\xb0\x60\x6e\x6b\xb2\x9b\xd4\x35\x73\xfc\x9c\x01\x7a\x68\x09\xc3\xdf\x7f\x98\x27\x15\x0e\xeb\xf9\x0c\x70\x94\xac\x70\xab\x1c\x43\x09\xb4\x64\xb9\x3a\x60\xac\x46\x15\x05\x5a\x73\x82\xd0\xf7\x8e\x92\xde\xc1\xc6\xce\x3b\xac\x08\x5d\x22\x07\x93\x60\x63\x50\x0a\x8a\xc6\xfd\x83\x28\x20\x35\xeb\xf9\xec\xd7\x88\x91\x83\x7b\x9d\xa4\x18\x62\x8b\x57\x43\xce\x63\x9c\x21\x03\x1c\x60\xbc\x1f\x19\xfa\xc4\xca\x74\x5e\x1f\x4a\xfd\x6f\xec\x66\x2d\xb1\x0b\xee\xe6\xf6\x4f\x08\x0e\x9d\xc9\xb2\x4b\x8d\x1b\x0a\xd7\x75\x45\x6b\xc2\xb9\x16\x8a\x56\xe9\x91\xe7\xa4\x4b\xc7\x82\xf1\xff\x56\xa8\xe2\xfd\xe2\x0c\x42\xc8\x51\x50\x36\x7e\xd2\xfc\xaf\x53\x7c\xf1\x5e\xe2\x96\x1d\xc9\x05\x94\x3a\xee\xa0\x11\x6d\x9f\x89\x53\x71\xa1\x49\x24\x5b\xb6\x94\x61\x92\x46\x31\x6b\xca\x52\xad\x91\x44\x72\x6a\xff\x99\x61\x8e\x9c\x50\x29\xb8\x36\x72\x98\x9e\xda\x18\xbc\x82\x72\x2c\x7d\x39\xe3\xc9\xec\x01\xe1\xbe\x65\xa1\x49\xbe\xcc\xfd\x34\xd1\xae\xa6\x50\xe6\xd8\x49\xde\x27\xed\x24\x90\xc3\xea\x00\x21\x63\x6b\xec\xd8\x7b\x0c\xe2\x8f\x69\xca\xcf\x37\x59\x7f\xe4\xa8\x55\xdb\xa5\xf5\x4c\x41\x97\xb1\x98\xa5\xe9\xe9\xe6\xc4\x3e\x6f\xf1\x6e\xc8\x9b\x80\xa4\xf6\xb8\x67\x83\xda\x70\x01\x09\x59\x00\xbd\xc2\xc9\x9e\x83\xa3\xfd\x15\x5d\xc8\x82\xa5\x16\xb1\xea\xaf\x77\xa2\x75\x43\x7d\xcd\xb3\x87\xf6\xd1\x96\xf5\xbf\xfe\x12\x8d\x0a\x4f\x2e\xc2\x68\x15\x4c\x33\x3d\xe5\x17\xd9\x0c\x72\x28\x2a\x47\xcd\x58\x55\x89\xa6\x77\x9b\x83\xfe\xfb\xf7\x05\xd1\xbe\x74\xe2\xa3\x38\x3a\x95\xfd\x49\x44\x9b\xbc\xf6\x25\x65\x28\x59\x51\x15\x85\xf2\x96\xb9\x0b\x3d\xce\xe6\x23\x66\x2b\xf1\x1b\xd9\x69\xce\x67\x4f\x3f\x14\x97\x93\xdf\xb3\x3b\x11\x5f\x6a\x76\x86\x5b\x5a\xe3\xfd\xca\xd8\xcd\xb2\xea\x82\x9d\x34\xcf\x81\x9b\xcf\x5f\x57\x07\xa5\xdb\x8b\x37\xcd\x28\x34\xba\x08\xda\x92\x1c\xa0\xdc\x10\x76\x7d\x0b\xe0\x8c\x1a\x54\x12\x1b\xa4\xd8\x89\x3d\x83\x48\xfc\xe3\xc9\x7b\x7d\x71\x36\xb9\xf0\xb9\xc9\xc4\xe0\x0f\x3d\x80\xe7\x86\x95\xdc\xf1\xf1\xca\x40\x2f\x1c\xcc\x2e\xca\x26\x7f\xea\xaf\xdf\xcb\xac\x80\xfc\x58\x4c\xaf\xff\xdd\xd0\xb1\xd8\x92\xf4\xd7\xa4\xc0\xaf\x72\xef\xbc\x51\xde\xd2\x71\xbb\x1c\xcb\x02\x23\x10\xde\x7e\xfa\xf0\x11\x49\x8d\x28\x76\xac\x35\xee\x8b\x41\x2f\x36\xf6\x61\xb0\x4b\x67\x65\xa3\xfa\xf8\xa6\x6a\xc4\x3d\xb8\x42\x88\x8a\x44\xba\xc0\x97\x80\xd7\x51\x50\xa5\x87\x2a\x28\x6c\xc1\xc5\x5d\x42\xeb\x8d\x56\x51\x9a\xbb\x72\xc4\x15\xd5\x66\xcb\x51\xc0\x09\x5d\x70\x54\x71\x20\x57\x5e\xc3\xdf\x01\x00\x00\xff\xff\x07\x23\xef\xde\xa0\x08\x00\x00")

func definitionsPairsHclBytes() ([]byte, error) {
	return bindataRead(
		_definitionsPairsHcl,
		"definitions/pairs.hcl",
	)
}

func definitionsPairsHcl() (*asset, error) {
	bytes, err := definitionsPairsHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/pairs.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9e, 0x3d, 0x67, 0xad, 0x1f, 0x2e, 0xc8, 0x50, 0xef, 0x51, 0xe8, 0xeb, 0xac, 0x1d, 0x30, 0xc4, 0xd5, 0x96, 0x4, 0x2c, 0xfd, 0xf9, 0x88, 0xed, 0x52, 0xda, 0x6d, 0x2c, 0xce, 0xa0, 0x21, 0x5a}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
	"definitions/infos.hcl":               definitionsInfosHcl,
	"definitions/operations.hcl":          definitionsOperationsHcl,
	"definitions/pairs.hcl":               definitionsPairsHcl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": &bintree{nil, map[string]*bintree{
		"definitions": &bintree{nil, map[string]*bintree{
			"tmpl": &bintree{nil, map[string]*bintree{
				"function.tmpl":  &bintree{cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl":      &bintree{cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl":    &bintree{cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": &bintree{cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl":      &bintree{cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl":   &bintree{cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
	"definitions": &bintree{nil, map[string]*bintree{
		"infos.hcl":      &bintree{definitionsInfosHcl, map[string]*bintree{}},
		"operations.hcl": &bintree{definitionsOperationsHcl, map[string]*bintree{}},
		"pairs.hcl":      &bintree{definitionsPairsHcl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
