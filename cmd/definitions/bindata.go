// Code generated by go-bindata. DO NOT EDIT.
// sources:
// cmd/definitions/tmpl/function.tmpl (567B)
// cmd/definitions/tmpl/info.tmpl (1.702kB)
// cmd/definitions/tmpl/object.tmpl (1.907kB)
// cmd/definitions/tmpl/operation.tmpl (2.051kB)
// cmd/definitions/tmpl/pair.tmpl (490B)
// cmd/definitions/tmpl/service.tmpl (10.747kB)

// +build tools

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\x8f\x25\x87\xae\xec\xe6\x07\x08\x9e\x8a\x82\xb0\xc8\xa2\xde\x25\x64\xa7\x6b\xb0\x99\x94\x66\x5a\x17\x62\xfe\xbb\xa4\x55\x17\x11\x0f\xde\x3c\x25\xcc\xcc\x7b\xf3\x3e\x26\xa5\x2d\x06\xc3\x47\x82\x7a\xda\x40\x4d\xb8\xbc\x82\xd2\x37\x23\xdb\x88\x9c\xab\xd2\x76\x2d\x38\x08\xd4\xa4\x6f\x7d\xdf\x91\x27\x16\x3a\x7c\x36\x55\xcb\x2f\xb3\x66\xd2\x77\xc6\x13\xde\x20\xa1\x31\x9e\xba\x65\xa0\x88\xd5\xa4\x77\xc1\x9a\xb9\xd2\x8e\x6c\x51\x47\x5c\xa4\x04\x75\x56\xec\x4d\x5c\x06\xd6\x48\xa9\x58\xe6\x5c\xa7\xa4\x26\xbd\x37\x83\xf1\x51\x3f\x0e\xce\xef\x4c\x14\xfd\x20\x83\xe3\xe3\x35\x1f\xe2\xab\x93\xe7\x26\x78\x6f\x72\x46\xe8\x05\xbd\x71\xc3\x2f\xa6\xa5\x5c\x62\x7e\xdf\xb4\x2c\xb8\xa7\x38\x76\x12\x3f\x8c\xe7\x00\x15\x00\xf4\x86\x9d\xad\x57\x05\xdc\x9d\xa9\x57\xeb\x6a\xa6\xa2\x2e\xd2\x1f\x71\xac\x9c\x60\x03\x0b\x9d\x44\x37\xcb\xbb\xc1\x3f\x66\xdc\x82\xf8\xeb\xca\x3f\xbe\xef\x01\x00\x00\xff\xff\x41\xc8\xae\xbf\x37\x02\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xfc, 0xb, 0xf4, 0xfb, 0xf, 0x94, 0xca, 0x64, 0x7a, 0xb8, 0x48, 0xf9, 0x69, 0xf1, 0x88, 0x46, 0x59, 0xd3, 0xbc, 0x0, 0x4e, 0xe7, 0x8, 0x1e, 0xdf, 0x27, 0x59, 0x81, 0x75, 0x52, 0xa2}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xe5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x92\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\xe4\x24\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x13\xc7\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x23\x5d\x63\xa9\x37\x31\x32\x99\xc7\x39\x15\x42\x09\x27\xb4\xb2\xef\x70\x7a\x85\xcb\xab\x1b\x9c\x9d\x9e\xdf\x2c\x58\xc5\xb3\x15\x5f\x12\xdc\xba\x22\xcb\x98\x90\x95\x36\x0e\x33\x06\x00\x93\x42\xba\x09\x8b\x18\x6b\xdb\x03\x18\xae\x96\x84\xe9\x6a\x8e\xa9\x50\x85\xb6\x78\x9b\x60\x71\x1e\x56\x17\xbc\x82\xf7\xac\x6d\x31\xb5\x64\x1a\x91\xd1\x25\x97\x14\xf6\xa7\x2b\xdc\xc1\xe9\x13\x2e\xa9\x0c\x47\x58\x1c\xe3\xbd\xa0\x32\x87\x50\x39\xdd\x42\x28\xb4\xed\x76\x92\xf7\x48\x85\x63\x99\x56\x36\x40\xec\xe8\x36\x5d\xcd\x5e\xdd\xfb\x0e\x71\x37\xfd\x3c\xd4\x0d\x24\xcd\xa2\x83\x08\xf2\x9f\xb8\xcd\x78\xd0\x47\x82\xa3\xe3\xe3\xb0\xbb\xea\x81\x0f\x40\x2a\x0f\xcb\x88\xb1\x60\x00\x76\x7b\x18\xa7\x5b\x67\xea\xcc\xa1\x1d\x94\x37\x6c\xdf\x9e\x62\x0b\x18\x37\xeb\xaa\xaf\xe5\xfd\xd6\x97\xfb\x33\x1b\x86\x2e\x8e\xe3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\xd3\xef\x94\x39\x34\xbc\xac\x69\x8e\x43\x48\xe2\xca\x42\x69\x07\x4b\x6e\x8e\xa3\xe1\x83\x25\xd7\x95\xea\xea\x08\xe5\xde\xbc\xee\x42\x09\xc9\xab\x2f\xd6\x19\xa1\x96\x5f\x85\x72\x64\x0a\x9e\x51\xeb\xd9\xa0\xfc\xbc\xd7\x61\x57\x14\x81\xfe\xec\xb6\x9b\x10\xef\x59\x51\xab\x0c\x33\x89\x57\xcf\xba\x16\xe1\x03\xb9\xbe\xf1\x53\x61\xab\x92\xaf\x07\x37\x66\xd1\xd8\x8f\xc1\x57\x43\xae\x36\x0a\x72\xf1\xc0\xbe\x40\xfa\xa7\x9a\xd7\x4f\x68\x36\x63\xcd\xe8\x37\x85\x06\xa6\x47\x60\x90\xa0\x19\xf1\xb2\x61\xa0\x4a\xdb\xb1\xfe\x03\x77\x66\x23\xd4\x39\x52\xad\xcb\x68\x20\x12\x05\xe4\x22\xdc\xf0\xcb\x3d\x9f\xc0\x8b\x04\x87\x43\x8d\xe7\xdd\x9e\xc3\x99\x9a\xba\x83\x7e\xbb\xd1\x2d\xa8\x3b\xfc\x20\xa3\x3f\x87\x79\xec\x12\x0a\x5e\x5a\xda\xe7\x96\x2e\x6a\xeb\xf6\x9b\x8e\xbf\xee\x3b\x19\xf7\x5d\x71\x25\xb2\x59\x21\xdd\xe2\xba\x32\x42\xb9\x62\x36\x79\x8c\xf5\x23\xa5\x3c\xbd\x7f\xb9\xbf\xee\x5e\x6c\x9e\xdd\x24\x8a\x1e\x5a\xf4\xdf\xcc\x6e\x6f\xe5\x5d\xb2\x9f\x97\x8f\x8e\x7d\xff\x0f\xdb\xf9\xa5\xdd\x2f\x7f\x06\x00\x00\xff\xff\x26\xf5\xd0\xb3\xa6\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x9d, 0xdc, 0x29, 0x17, 0xc8, 0x8a, 0x14, 0x25, 0x13, 0xa5, 0x85, 0x13, 0x6, 0xf, 0xb3, 0x4a, 0x21, 0xd1, 0x20, 0x4e, 0x6f, 0x92, 0x60, 0xe2, 0x6e, 0x29, 0x96, 0x4a, 0xee, 0x99, 0x66}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6f\xdb\x36\x10\x7e\x36\x7f\xc5\x37\x23\xd8\xa4\xc1\x91\x92\x6d\xd8\x43\x16\x3f\x0c\x71\xb6\x06\x68\xec\x02\x76\xfb\x4e\x53\x27\x9b\x8d\x44\x0a\x24\xe5\xda\x75\xf4\xdf\x0b\x4a\xb2\x23\x27\x4e\xe1\xa0\x2f\x7d\x23\x79\x77\xdf\xdd\xf7\xdd\x91\x8c\x63\xdc\xe8\x84\xb0\x20\x45\x86\x3b\x4a\x30\xdf\x60\xa1\xf7\x7b\x88\x3c\x89\x13\x4a\xa5\x92\x4e\x6a\x65\xff\xc1\x68\x82\xf1\x64\x86\xdb\xd1\xdd\x2c\x62\x05\x17\x0f\x7c\x41\x70\x9b\x82\x2c\x63\x32\x2f\xb4\x71\x08\x18\x00\xf4\xd3\xdc\xf5\x9b\x95\x93\x39\xb5\x4b\xbb\x51\xa2\xcf\x42\xc6\xe2\x18\xff\x49\xca\x12\x48\x95\xd0\x1a\x52\x41\xcf\x3f\x93\x70\x98\x4b\xc7\x84\x56\xd6\xe3\x6c\xb7\xe7\x30\x5c\x2d\x08\x67\x0f\x03\x9c\xad\x70\x35\x44\x34\xa9\xfd\xee\xc9\x71\x54\x55\x8d\xda\x44\xde\x79\xa0\xed\x16\x67\xab\x68\xcc\x73\xc2\x23\x9c\xfe\xc0\xad\xe0\x19\xaa\x0a\xa5\x54\xee\xef\xbf\x30\xc4\xe5\xf5\xb5\x77\x7a\xf0\xc1\x1e\x9f\x54\xe2\x97\x4d\x49\x0d\x36\xa4\x85\x5b\x12\x6c\xce\xb3\x8c\xac\x43\xa9\xa4\xf3\x25\x2e\xf4\xb9\x75\xda\xf0\x05\x45\x2c\x8e\x7d\xc0\x78\x32\xbb\x9d\x5e\xf9\x15\x70\xde\x86\xff\x66\x91\x7a\x6a\x16\xd3\x77\x93\x8f\xef\x47\x50\xda\x61\x4e\x10\x4b\x4f\x25\x81\x2e\x9d\x95\x09\xc1\x92\x59\x49\x41\x36\x3a\x0c\xc7\xcd\xbf\x63\x2f\xb1\x8f\xd0\x85\xa4\xe4\x99\x59\x5a\x08\xad\x44\x69\x0c\x29\x07\xcb\x53\x8a\x98\x6f\xc0\xce\x6e\x9d\x29\x85\xc3\xf6\x54\xf5\xbc\x9b\x4c\xbd\x6c\x23\xb2\xc2\xc8\xc2\x77\xfa\xc9\xf8\xaa\x61\x2f\xdd\x93\xdf\x6c\x53\x50\xad\x7d\x55\x75\x4e\x9e\x29\xcd\x7a\x71\x0c\x91\x49\x5f\x7d\x2b\xf4\x6e\xa7\xf0\x65\x29\xc5\xb2\xc3\x94\x67\x72\x45\x11\xeb\xb5\x1e\xd3\x46\x7d\xc3\xea\xa4\x71\xec\xa7\x05\xa5\xa5\x04\xdc\x82\xfb\x5d\xce\x0b\xa4\xda\xec\xa6\x69\xc5\xb3\x92\x06\xb8\x40\x4e\x5c\xd9\xba\x13\x96\xdc\x00\x97\xed\x81\x25\x57\x43\xd5\x38\xf5\x88\xb0\x5e\xa2\x15\xd5\x9b\x3f\xff\x60\xbd\xdc\x5b\xfd\xd4\x46\xf7\xa5\xa3\x35\xab\x18\x3b\x45\xd8\x27\x51\x6f\xd7\xf5\xa5\xa8\x2a\x96\x96\x4a\x20\xd0\xf8\xbd\x71\x0d\xf1\x3f\xb9\x56\x5f\x69\x8b\x8c\x6f\x5a\xe9\x82\xf0\x50\x3c\x6c\xeb\x12\x0d\xb9\xd2\x28\xe8\xe8\x85\xd6\xbe\xa8\x17\xe0\xd3\x57\xc0\x57\x87\xe0\xe1\x2e\xa2\xcd\x72\x04\x1e\x43\xac\x0e\x2a\x60\x6d\x3f\x33\x5b\x67\x7f\x0b\xb1\xe0\x20\xf9\x00\x73\xad\xb3\x70\x9f\xda\x3a\xee\x82\xb0\x69\xae\x4c\xa1\x23\xdf\x96\x5f\x4f\xba\xdf\xbf\x0c\x71\xd1\xe2\x7c\x5f\xac\x01\x9c\x29\xa9\x76\xac\x58\x97\x56\xa7\xb2\x47\x7c\x25\xa3\x3f\xf9\xd9\xa9\x23\x52\x9e\x59\x3a\xaa\xf2\x7d\x69\xdd\xdb\xda\xf8\x43\x2c\x87\x87\x2c\x0b\xae\xa4\x08\xd2\xdc\x45\xd3\xc2\x48\xe5\xd2\xa0\xdf\xce\x7d\x07\xa1\xaa\xfc\x45\x6a\x27\xbf\x1f\x86\x2d\xf5\x9f\x63\xa4\x1a\xf2\x8f\xc3\x53\xd8\x1f\x9d\xc1\xe6\x4d\xe9\x3e\x2f\x2f\xca\x16\x99\x56\x14\xac\x3b\x27\xdb\xfd\x13\x76\xca\xef\x72\xb4\xfc\xf5\x31\xd1\x9e\x3d\x8c\x1d\x86\x75\x80\xff\xda\xaa\x6f\x01\x00\x00\xff\xff\x94\x03\xb8\x29\x73\x07\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0x64, 0x33, 0x31, 0x2b, 0x9e, 0xa5, 0x1c, 0x46, 0x19, 0x57, 0xa8, 0x78, 0xb3, 0xc9, 0x92, 0xd7, 0x11, 0xee, 0xde, 0xf1, 0xa5, 0xf2, 0x26, 0x22, 0x58, 0x32, 0x8d, 0xfb, 0xb5, 0x58, 0xdc}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6f\xd4\x30\x0c\x7e\xcf\xaf\xb0\xaa\x7b\x68\xa5\xd1\xbe\x23\xed\x01\xc1\x90\x26\xa1\xad\x02\x21\x1e\x51\xae\xf5\xdd\x22\xda\x24\x38\xbe\xdb\xa6\x92\xff\x8e\x92\x76\x77\xbd\xd2\x51\x0e\x10\xe2\x2d\x89\xed\xcf\xf6\x97\x7c\xb1\x95\xd5\x17\xb9\x45\xe0\x47\x8b\x4e\x08\xd5\x5a\x43\x0c\xa9\x00\x00\x48\x2a\xa3\x19\x1f\x38\xe9\x77\xca\x24\x22\x13\xa2\xeb\x5e\x00\x49\xbd\x45\x58\x7d\xbe\x80\x95\x82\x97\x97\x90\x5f\x6b\x46\xda\xc8\x0a\x1d\x78\x2f\xba\x0e\x56\x2a\x7f\x83\xae\x22\x65\x59\x19\x1d\x0e\x43\x06\x18\x2c\xca\xd9\x46\x3e\xde\xc8\x16\xc1\x7b\x50\x4f\xc1\xd0\xc5\x4c\x21\x83\xda\x80\x21\x48\xf1\x6b\xf0\x8f\x8e\x89\x43\xda\xab\x0a\x29\xc9\x26\xe7\x6c\x48\x6e\xc3\xb9\xf7\x31\xfe\x03\x93\xd2\xdb\x34\x03\x17\x17\x07\x4c\xd4\x75\x28\x64\xd8\x8f\x9b\x30\x36\x74\xb1\x52\xf9\xad\x8d\x0d\x04\x8f\xa2\x88\xd5\x1a\xdb\xa7\xf9\x06\x6c\x4a\xe9\x2a\xd9\x84\x92\x07\xcb\xa4\xc5\x01\x78\x3e\x26\x1d\x2c\x6f\x0d\xb5\x92\x4b\x49\xb2\x0d\xb9\x32\x38\x35\xbc\x47\xb7\x6b\xd8\x7d\x52\x7c\x57\xf6\x77\x73\xd2\x65\x12\x42\xc6\x2c\x69\xc3\x31\xfa\x9d\xe9\xd3\x2c\xd6\x1e\x90\x5f\xf7\x17\xfb\x3b\x6d\x8c\xc2\xd3\x8a\x1f\x60\x78\x23\xf9\x70\x76\xf1\xd7\xbb\x7c\xba\xb6\xd3\x5d\xdc\xb6\x3b\xc7\x57\xed\x1a\xeb\x8f\x5a\xb5\xb6\xc1\x16\x35\x63\x3d\xf7\xc6\xd2\x4c\x78\x21\x8a\x02\x16\x3d\x23\x28\xac\x11\x30\x00\xd7\x58\x03\x1b\xb8\x93\x7b\x84\x8d\xa1\x7b\x49\x35\x54\xa6\xb5\x92\xd5\xba\x41\x38\x60\xc9\xc0\x9d\xcb\xfb\x47\xbe\x9c\xc3\x31\xed\x2a\x86\xce\x0b\xb1\xd9\xe9\x0a\x52\xb7\x1c\x94\x9d\xd5\xee\xb9\xd8\x13\xcd\x0c\x4a\x24\xe4\x1d\x69\x48\x16\x01\x92\x40\xef\xcf\x35\x75\x46\x31\xff\x44\x44\xa7\x9f\xcd\xac\x8c\x90\x08\x2e\xe1\x06\xef\x6f\x2d\x52\xbc\xe2\x1b\xc3\xd7\xc7\xea\xaf\x88\x0c\xa5\xc9\xb8\x5a\xef\x93\x6c\xfa\xe1\x1c\x99\x14\x5e\x3c\x97\xef\x0c\x7a\xfe\x03\x6d\x0e\xe4\xfd\x09\x41\x23\x46\x9e\x88\x1a\xaf\x8e\xdf\x75\xd4\x54\x29\x15\x95\xa6\x51\xd5\xe3\x41\x3c\x11\xe5\x55\xd3\xc0\xda\x98\xe6\x17\xc7\x52\x60\x1e\x67\x46\x4a\x30\x17\x05\x58\xa9\xc8\x05\xa1\x8f\x67\x52\x77\xf0\x3f\x21\x7b\x9a\x71\x6e\x86\x3c\x3f\x40\x66\x8b\xde\x47\x04\x63\xf3\x32\xd6\xb1\x04\x12\x0c\xfb\x09\xee\x01\xf6\x47\x22\xe7\x97\x5e\x7c\x0f\x00\x00\xff\xff\xb4\x30\x5a\x77\x03\x08\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0x7e, 0x5d, 0x16, 0x44, 0x6e, 0xcf, 0xa, 0x57, 0xf1, 0xe8, 0x1c, 0xfb, 0x8, 0x6e, 0x26, 0x89, 0xc2, 0x13, 0x34, 0xfd, 0xea, 0x2a, 0xe1, 0x4c, 0x12, 0xa1, 0x32, 0x35, 0xc4, 0x9d, 0x75}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x31\x6b\xeb\x30\x14\x85\x77\xfd\x8a\x83\xf1\x90\x40\x62\x0d\x6f\xcb\xe3\x4d\x2f\x1d\x4a\x21\xc9\x10\xda\xb1\x28\xf2\x8d\x22\x62\x4b\x42\xbe\x76\x6b\x5c\xff\xf7\x22\x3b\x0d\x94\x2e\xf5\xe4\xfb\xdd\x73\x0e\xe7\x4a\x4a\xfc\xf7\x25\xc1\x90\xa3\xa8\x98\x4a\x9c\x7a\x18\x7f\x9f\xa1\xeb\x52\x96\x74\xb6\xce\xb2\xf5\xae\xf9\x8b\xed\x1e\xbb\xfd\x11\x0f\xdb\xc7\x63\x21\x82\xd2\x57\x65\x08\x41\xd9\xd8\x08\x61\xeb\xe0\x23\x63\x21\x00\x20\xd3\xde\x31\xbd\x73\x26\xe6\xd1\x58\xbe\xb4\xa7\x42\xfb\x5a\x2a\xdf\xac\x4b\xea\xa4\xf1\xeb\x86\x7d\x54\x86\x64\xf7\x47\x86\xab\x91\x17\xe6\xa0\x2b\x4b\x8e\xb3\xc9\x55\xfc\xc2\xc7\x7d\xa0\x26\x13\x62\x29\xc4\x30\xac\x11\x95\x33\x84\xfc\x75\x85\xbc\xc3\xe6\x1f\x8a\x43\x2a\x87\x71\x9c\xb6\x79\x70\xaa\xa6\xc4\xf3\xae\xd8\xa5\xdf\x0f\xb0\x3f\xa8\x46\xab\x2a\x69\xa4\xc4\x8b\xe5\xcb\x30\x7c\x29\xc7\x11\x6f\xb6\xaa\xa0\x42\xa8\x7a\x24\x7e\xf3\x8d\x23\x3a\x55\xb5\x04\xf6\xd8\x87\xe9\x75\x0a\x21\xa5\x98\x25\x5b\x6a\x74\xb4\x13\x4e\xb1\xe7\xd6\xe9\x1f\xc1\x8b\xee\x96\x77\xec\x43\x9a\x97\x48\x55\x31\x4c\x97\x47\xe2\x36\xba\x89\xcc\x20\x7d\x4f\xd4\x6f\x90\x7d\x2b\x91\xad\xee\xdb\xe7\x54\x67\x83\x6e\x26\xa3\x98\x2f\x26\x57\xa6\x06\x9f\x01\x00\x00\xff\xff\x5b\x98\x18\x63\xea\x01\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfb, 0xf0, 0x11, 0x20, 0x7, 0x36, 0xf5, 0x1, 0x25, 0x49, 0xa9, 0xe4, 0x49, 0xaf, 0xb0, 0x5f, 0x1d, 0x1e, 0xf1, 0x82, 0x1c, 0x59, 0xf5, 0xcd, 0x76, 0x89, 0x55, 0x8a, 0x8f, 0xbb, 0xe2, 0xbd}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6f\xe3\xb8\x11\x7f\xf7\x5f\x31\x67\xf8\x41\x5e\x38\x52\x8b\xbe\xb9\xc8\xc3\x35\xbb\xdd\x06\x77\xdd\x0d\x36\x69\xef\xe1\xee\x10\xd0\xd2\xc8\x66\x43\x91\x3a\x92\x76\x62\x78\xf5\xbf\x17\xfc\xd0\xb7\xe4\xd8\xdb\x60\x77\x0b\x44\x2f\x91\xc9\xe1\x70\xe6\x37\x9f\xa4\x12\x45\x70\x25\x12\x84\x35\x72\x94\x44\x63\x02\xab\x3d\xac\x45\xf5\x1b\x76\x94\x40\x9c\x25\x51\x82\x29\xe5\x54\x53\xc1\xd5\x5f\xe1\xed\x47\xf8\xf0\xf1\x0e\xde\xbd\xbd\xbe\x0b\x27\x39\x89\x1f\xc8\x1a\xe1\x70\x80\xf0\x03\xc9\x10\x8a\x62\x32\xa1\x59\x2e\xa4\x86\x60\x02\x00\x30\x8d\x05\xd7\xf8\xa4\xa7\xee\x17\x15\xd3\x89\x7b\x5b\x53\xbd\xd9\xae\xc2\x58\x64\x11\x11\xea\x22\xc1\x5d\xb4\x16\x17\x4a\x0b\x49\xd6\x18\xed\xfe\x12\xe5\x0f\xeb\x08\x79\x92\x0b\xca\xcb\xd5\x27\xad\x89\x25\x26\xc8\x35\x25\xec\x9c\x55\x1b\xad\xf3\x98\x51\x3c\x7d\x2f\x85\x72\x47\x63\x54\x8e\x3e\x3c\x61\x85\xde\xe7\x86\x7c\x3e\x99\xec\x88\x84\x7b\xa8\x25\x0d\x6f\xa4\xd8\xd1\x04\xa5\x9f\x29\xf5\x0e\xff\x4d\xd8\x16\xfd\xe0\xad\xe3\x54\xd2\x94\xfb\x87\xb7\xee\xe5\x9d\x94\xa2\x9c\xab\xb5\x09\x3f\xe6\xd6\x70\x93\x49\x14\xc1\xdd\x3e\x47\xa0\x0a\xf4\x06\xc1\x08\x03\xa9\x90\x2d\xdb\xc5\x82\x2b\xed\xc8\x2e\x61\xda\x98\x99\xda\xf5\x7e\x27\x20\x3b\x42\x19\x59\x31\x84\x9c\x50\xa9\x42\xbf\x2e\x98\x1c\x0e\x17\x20\x09\x5f\x23\xcc\xee\x17\x30\xdb\xc1\xf2\x12\xc2\x1b\x43\x63\xb8\x1b\x9c\x0c\x05\x4d\x81\x0b\x0d\xb3\x5d\xf8\x9e\x89\x15\x61\xf5\x9c\x19\x7b\x8b\x2a\x96\xd4\x4a\xdd\x9e\xf8\xfb\x96\x31\x2f\x8e\x97\x6e\x56\x8a\x77\xef\x28\x2a\x61\xcb\x9d\x90\x27\x86\x47\xe3\x75\x6e\x15\xf9\xb8\xfa\x0f\xc6\xfa\x9f\xa8\x49\x42\x34\x01\x63\x23\x54\x25\xa2\x90\x95\xe3\x06\x1e\x61\x49\xc3\x89\xc5\xab\xb7\x4e\x6e\x63\x0d\x87\x61\xbd\xaf\x79\x2a\x4e\xd4\xfb\x02\x66\x39\x37\xc2\x2f\x2f\x2b\x3d\x3e\x83\x16\x37\x44\xc5\x6d\x3a\x9a\x5a\x8c\xa8\xca\x19\xd9\x97\x66\x03\xff\x34\x18\x5d\x8e\x90\x35\xa0\x78\x16\x72\xc7\xa9\x28\x3c\x95\x75\x8b\x3e\x9b\xc6\x6b\x61\xc1\x7d\x8f\xba\x83\xd3\x23\x65\x0c\xd6\xa8\xbb\xf8\xa5\x52\x64\x7e\x2c\x9c\x44\x91\x59\x7c\x01\x77\x1b\xaa\x20\xdd\xf2\xd8\x8a\xa3\x36\x62\xcb\x12\x8b\xdb\x0a\x21\x26\x8c\xb9\x3c\x55\xda\x8a\x66\x39\xc3\x0c\xb9\x46\x19\x96\xeb\x11\x24\xea\xad\xe4\x94\xaf\xbb\x3b\x52\x05\x12\x49\x02\x82\xb3\x3d\x10\x9e\x74\xf8\x67\x22\xa1\x29\xc5\x24\x9c\x18\x01\xfa\x9a\x04\x02\xde\xb8\x91\x79\x97\xf3\xc1\xe2\x22\xb2\x05\x88\x07\x63\x46\x11\xbe\x47\xed\x03\xa6\x5a\x3e\xb7\x44\x34\x35\x34\x87\xca\x6c\x4e\x5a\x10\x59\x18\xb4\x99\x3a\x72\x87\xb8\x27\x6a\x13\x1c\x4a\xcc\xd5\x30\xe6\xaa\x8f\x39\xe5\x5a\x9c\x86\xb9\xc5\xa8\x06\x5d\xf0\x18\x17\x90\x33\x24\x0a\x21\x23\x0f\x08\x6a\x2b\x11\x08\x63\x60\x19\x6f\x88\x82\x15\x22\x87\x47\x49\xb5\x46\x0e\x2b\x4c\x85\x44\x23\x83\x87\xb3\x27\x64\x0d\xe7\x02\x2a\x4f\xa8\x94\x2f\x21\x0d\x6f\xfb\x40\x8a\x6c\x6e\x34\x3f\x9e\x6f\xc6\x62\xee\x94\x78\x8b\x22\xf8\x85\xea\x4d\x2b\x0c\x2c\xa4\x24\xcf\xd9\x1e\x5a\xf9\x06\x76\x26\x4b\x83\xc1\xd5\x25\x5b\x0b\xec\x60\x68\x59\x1c\xba\x8c\x83\x5d\x3b\xc2\xe6\x60\x54\xe8\x3b\x88\x19\xad\x07\x7f\xc2\xfd\xb2\x9f\x19\x17\xd5\xbc\x2d\x1d\x4b\xd8\x2d\xbc\x13\xb5\x22\xb5\xf1\x3a\x0c\xa2\x61\xa7\x72\x12\x63\x2b\x83\x69\xcc\x72\x66\x5a\x83\xa9\x49\xfc\xf7\x1c\x1f\xa7\xd6\x15\x6e\x99\x89\xc5\x60\x08\xcb\xb9\x1d\xc4\xc7\x71\x36\xaa\xc9\xa3\xe4\x60\xb5\xe2\xf1\xc8\xee\xa5\xab\x3e\xbb\xb4\xab\xa7\x6d\x65\xea\x7d\xdb\x09\xd8\x28\x4e\x79\x82\x4f\x10\xc2\x9f\x46\xf2\xef\xcc\xfa\x7a\x83\xf0\xcf\x96\x77\x14\xc1\x5b\x4c\xc9\x96\x69\x67\x58\x28\x0a\xe7\x86\x54\x99\x3d\xcd\x84\xab\x95\xb6\xa6\xa8\x1c\x63\x9a\xd2\x18\x88\xd5\xc2\xd5\x96\xe1\xf5\x55\x89\x29\x05\xe8\x5a\xca\x09\xd4\x4a\xe7\x7d\x77\x86\x5f\x7f\x37\xec\xba\xa9\xbb\x98\x9c\xc6\x76\xd8\x6e\x2d\xec\x73\x0e\xb3\xdd\xd1\xe2\xd0\xc3\xdf\xb9\x4f\x1d\x8f\x6d\xf8\xcb\xf1\x94\xf7\xd1\xf6\x13\x36\xcf\xce\x52\x3e\x14\xbf\xc6\x22\x66\x93\x0a\x4e\xf3\x62\x96\x14\x45\xd9\x01\xe5\x44\x2a\x4c\x3c\xc2\xce\x06\x9d\x15\x66\x41\x51\xb4\x6d\xe0\xac\xe8\xf1\xb4\x23\x51\x04\x9f\xf0\x8f\x2d\x95\x98\xb8\xd9\x21\x50\xcd\x44\x29\x6e\x45\xed\xf1\xfa\x07\x51\x76\x53\x42\xe5\x90\xed\x00\x56\x42\xb0\xba\x2a\x8f\x92\xd5\xd3\x23\xa5\xda\x4b\xeb\xb2\x14\x61\xa7\x49\x5b\x51\xbf\xb4\xb4\x27\xcb\xfb\xbe\x3a\xa0\x9c\x24\x70\x4d\xfe\xb5\xf1\x2d\xdd\x4e\x2a\xbc\x19\xf1\x3d\x5b\x43\x2c\x85\x4b\xf2\xca\x86\x8f\x2d\xca\x6f\x46\xfc\xd5\x15\x8d\x63\x5c\x03\x91\xeb\xd2\x27\xe7\x10\x8c\xf0\x59\x00\x9a\x23\x42\x59\x57\x25\x2a\x93\x95\x96\x97\x63\x71\x52\x97\x1a\x0b\xfb\x12\xcc\x2e\x65\x35\xb1\x7f\x4c\x2e\xbb\x5f\x80\x4d\x18\xce\x18\x56\x90\x7a\xa1\x7a\xa4\x3a\xde\xc0\x2e\xfc\x09\xf7\x8d\xe1\xe1\x88\x39\x33\x6a\xcc\x13\x9b\x5e\xa4\xb2\x4a\xa3\x0c\x2e\x2b\x12\xdf\x70\x39\x6d\xc3\x67\x5c\xe1\xd0\x5a\x66\x77\x10\x5c\x53\xbe\xc5\xd6\x44\xd1\xfa\x75\x1a\xeb\x4b\xd0\xb2\xc3\xc6\x2f\x3c\xbe\x6a\xe7\xce\x80\x61\xd0\x75\xbe\x79\x0b\xb4\x46\xc4\x8c\x47\xf9\x99\x91\xfe\x8a\xf0\x71\x84\x87\xf2\xd2\x33\x10\xf7\x72\xd3\x19\x18\xdb\x2e\xb3\x3c\x5e\xc4\x82\xef\x50\xea\x46\xb4\x8e\xeb\x18\x8c\x6b\x38\xef\x5a\xb1\x75\x30\x79\x01\xeb\x8e\x5a\xb8\x6f\xe5\xff\xc9\xd2\xa7\x5b\xdb\xde\xa8\xb4\xa4\x00\x64\xc6\x00\x5f\x2c\x4c\x4a\x98\x1a\x73\xdf\x01\xcf\x29\x9a\x29\xf4\x8c\x84\x47\x53\xf8\xe1\x5c\x33\xf8\x93\xc3\x58\x86\x2f\x16\xf5\x35\x92\x29\x1e\xe5\x96\xf6\x2e\xe9\x60\x8e\x18\x6a\xf9\xeb\xef\x4a\x4b\xca\xd7\x07\xdf\x26\xb7\x7c\xf4\xa2\x28\xa0\xa8\x34\xea\x28\xdc\x3c\xb7\x3a\xc1\x17\xc0\x29\x9b\x1c\x6f\x0b\xbf\xef\x96\xb0\x5a\xf1\xda\x14\xbe\x36\x85\xdf\xbc\x29\x0c\x14\xbc\xa9\x26\xe7\xaf\x2d\xe2\x97\xb7\x88\xdf\x69\x8b\xf1\x55\x9b\xb8\xef\x14\x83\x6f\xd9\x66\xa9\xf0\xab\x36\x5a\xdf\x55\xfb\x03\x87\x03\x4d\x81\xbb\xcb\x9d\xa9\xbf\x81\x9d\x36\x11\x6d\xa8\xa3\x42\xb3\xe7\x8d\x60\x34\xde\x87\x3f\x32\x06\x9f\x3f\xb7\xc7\x1a\xe9\x6e\x7c\xea\xfc\xde\xf2\xcc\x06\xe7\x5f\x5c\x6d\xf3\x5c\x48\x5d\xf6\x38\x66\x70\xb9\xeb\xab\xd4\x1f\x39\x1c\x0c\x4e\x03\xda\x7f\x79\x9b\xe8\xd9\xf2\xa4\xc3\xf5\x68\xfb\xe8\xaf\x13\xdb\x4e\x7b\x92\xa9\xce\x34\xd3\x90\x7b\xbe\x3c\xd8\xc5\xe4\x24\x90\x07\xcf\x10\x5d\xec\xfe\x6f\x3a\xeb\x13\x1b\xeb\x17\xeb\xab\x1b\xf7\xe5\x2f\x76\xe5\x3d\x80\xf1\xf8\xcd\xb1\xfb\x6c\xf9\xb3\x88\xdb\x85\xa9\x7d\xa9\xcc\xcc\xf4\x7d\x29\xeb\xe8\xf5\x72\x85\x86\x49\x5b\xa3\xcc\x4e\x67\xd3\xfc\x1a\xfa\xec\xc5\x75\xcd\xf6\x18\x90\xcd\xb9\xa1\xd3\x0a\xf8\xbe\xf1\x99\x03\x0b\xb8\x02\xd8\x8c\x49\xfb\x3a\xf4\xc1\x36\x8a\x4a\xf2\xf6\xc7\x3c\xdb\x5b\xc6\x12\x0d\x28\x04\xfc\x7f\x63\xc0\x6a\x5f\xe6\x91\xd0\xb5\x69\x75\x37\x39\xcb\x79\x51\xcc\x1b\x9b\x06\xf6\x22\x3c\xbc\x21\x92\x64\x2a\xbc\xb5\x3e\x6b\x28\xfc\xf8\x27\xeb\x81\xcd\x89\x3a\x48\x62\xfd\xe4\x2f\x2b\xcc\xae\xe1\xdf\x48\xfc\xb0\x96\x62\xcb\x93\x60\xde\x0d\x24\xd5\x48\x3d\xbf\x50\xbd\xb9\x72\x6b\x82\x58\x3f\x2d\xa0\x25\xc1\x15\x61\x0c\x65\xd9\x37\x0c\xc1\xd4\x58\x7f\x04\xb1\x63\x3a\x77\x24\xa8\x34\xf0\x63\x1d\x89\xce\xc2\x24\xc1\x14\xa5\xdd\x3c\x98\x1f\x3a\xe9\xcc\xa6\x01\xbd\x29\x7d\xc2\xb3\xbf\x21\x7a\xe3\x94\xee\x66\x74\x1f\x5a\x84\x27\x10\xe0\x1f\x7e\xf1\x74\x3a\xf7\xbf\x1a\xb5\x60\x3e\x54\xb7\x5d\xa6\xd3\x1b\xb8\x84\xe9\xe2\xb7\xe9\x6f\xd3\x5e\xc9\x18\xa8\x3f\xe6\x41\x29\xc1\x34\x47\xa9\x90\x19\xd1\x36\xa7\x05\x53\xa7\xba\xf1\xe3\xa2\x98\xda\x93\x44\xbd\x41\x51\x40\x6d\xf1\x22\x98\x4f\xba\xd9\xc1\xd4\x2e\xd3\xbd\xba\x4f\xc0\x22\x41\x98\x4e\x07\x64\x99\x65\x66\xaa\x6c\x75\x6b\xe2\x7e\xe6\x2a\x1f\x93\xdb\x45\x68\x88\xc2\x6b\x9b\xda\x2d\x87\xa2\x08\xe6\x03\x05\xce\xeb\x55\x26\xee\x7a\x83\x6b\xbe\x23\x8c\xfa\xec\xfd\xee\x29\xc7\x58\x63\xb2\x04\x33\xd5\xe0\xb9\x80\x1f\x63\xbd\x25\x6c\x09\x6e\xc7\xa1\x5e\xc1\x38\xfb\xf3\xc5\xbe\x7d\xae\x82\x4b\x20\x79\x8e\x3c\xb1\xe7\x36\xb5\x00\x15\xfa\xe8\xb5\x1f\x09\x1b\x91\x13\x86\x61\x8d\xf3\x8e\x48\x73\xda\x1a\xab\x51\xf5\x26\x22\xd7\x8b\xca\xa6\x47\x4f\x91\x76\xff\x7a\x07\x9a\xda\x65\x3f\x5c\x9a\xfa\xd3\xc1\xb3\xa3\x6a\x63\xbb\x66\xc4\xb7\x73\xdf\x15\xc9\xd0\x36\xd2\xfd\xa8\xbf\x93\x34\xfb\x99\x28\xed\xc3\xff\x1d\x4f\xcc\xc9\x71\x73\x25\xb2\x8c\x14\x85\x51\xa1\xcc\x07\x63\xa9\xbb\x5b\x5e\x5e\x13\xf8\xf3\xc9\xea\xab\xb8\x5f\x14\xc1\xf5\x9a\x0b\x89\xee\xf6\x01\x1e\x37\x94\x21\x6c\x08\x4f\x18\xe5\x6b\xb0\x76\x33\x0a\xfa\xff\xad\x68\x79\xed\xfd\xc9\x3e\x7b\x8e\xfb\xbd\x80\xe7\x59\x83\x50\x4e\x75\x95\x68\x4e\xfc\x3f\x0b\xf3\x54\x19\xe8\x13\xae\xa9\xd2\x28\xc7\x3e\xec\xcb\xc0\x1c\x30\x17\xf0\x01\x1f\x47\x49\xe6\xfd\x1b\xa9\xff\x06\x00\x00\xff\xff\xe8\x3a\xdb\xad\xfb\x29\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc2, 0x2f, 0xd9, 0xc3, 0x1a, 0x8d, 0x41, 0x48, 0xcb, 0x46, 0x40, 0x7, 0x25, 0xea, 0x68, 0xb, 0xe9, 0xa0, 0x22, 0x4b, 0x9f, 0xae, 0x35, 0x31, 0x6b, 0xaa, 0x27, 0x7e, 0xe4, 0xa9, 0xad, 0x4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl": {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl": {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl": {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl": {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl": {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
