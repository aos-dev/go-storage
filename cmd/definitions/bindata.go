// Code generated by go-bindata. DO NOT EDIT.
// sources:
// cmd/definitions/tmpl/function.tmpl (567B)
// cmd/definitions/tmpl/info.tmpl (1.702kB)
// cmd/definitions/tmpl/object.tmpl (2.388kB)
// cmd/definitions/tmpl/operation.tmpl (1.698kB)
// cmd/definitions/tmpl/pair.tmpl (502B)
// cmd/definitions/tmpl/service.tmpl (11.159kB)

// +build tools

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\x8f\x25\x87\xae\xec\xe6\x07\x08\x9e\x8a\x82\xb0\xc8\xa2\xde\x25\x64\xa7\x6b\xb0\x99\x94\x66\x5a\x17\x62\xfe\xbb\xa4\x55\x17\x11\x0f\xde\x3c\x25\xcc\xcc\x7b\xf3\x3e\x26\xa5\x2d\x06\xc3\x47\x82\x7a\xda\x40\x4d\xb8\xbc\x82\xd2\x37\x23\xdb\x88\x9c\xab\xd2\x76\x2d\x38\x08\xd4\xa4\x6f\x7d\xdf\x91\x27\x16\x3a\x7c\x36\x55\xcb\x2f\xb3\x66\xd2\x77\xc6\x13\xde\x20\xa1\x31\x9e\xba\x65\xa0\x88\xd5\xa4\x77\xc1\x9a\xb9\xd2\x8e\x6c\x51\x47\x5c\xa4\x04\x75\x56\xec\x4d\x5c\x06\xd6\x48\xa9\x58\xe6\x5c\xa7\xa4\x26\xbd\x37\x83\xf1\x51\x3f\x0e\xce\xef\x4c\x14\xfd\x20\x83\xe3\xe3\x35\x1f\xe2\xab\x93\xe7\x26\x78\x6f\x72\x46\xe8\x05\xbd\x71\xc3\x2f\xa6\xa5\x5c\x62\x7e\xdf\xb4\x2c\xb8\xa7\x38\x76\x12\x3f\x8c\xe7\x00\x15\x00\xf4\x86\x9d\xad\x57\x05\xdc\x9d\xa9\x57\xeb\x6a\xa6\xa2\x2e\xd2\x1f\x71\xac\x9c\x60\x03\x0b\x9d\x44\x37\xcb\xbb\xc1\x3f\x66\xdc\x82\xf8\xeb\xca\x3f\xbe\xef\x01\x00\x00\xff\xff\x41\xc8\xae\xbf\x37\x02\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xfc, 0xb, 0xf4, 0xfb, 0xf, 0x94, 0xca, 0x64, 0x7a, 0xb8, 0x48, 0xf9, 0x69, 0xf1, 0x88, 0x46, 0x59, 0xd3, 0xbc, 0x0, 0x4e, 0xe7, 0x8, 0x1e, 0xdf, 0x27, 0x59, 0x81, 0x75, 0x52, 0xa2}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xe5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x92\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\xe4\x24\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x13\xc7\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x23\x5d\x63\xa9\x37\x31\x32\x99\xc7\x39\x15\x42\x09\x27\xb4\xb2\xef\x70\x7a\x85\xcb\xab\x1b\x9c\x9d\x9e\xdf\x2c\x58\xc5\xb3\x15\x5f\x12\xdc\xba\x22\xcb\x98\x90\x95\x36\x0e\x33\x06\x00\x93\x42\xba\x09\x8b\x18\x6b\xdb\x03\x18\xae\x96\x84\xe9\x6a\x8e\xa9\x50\x85\xb6\x78\x9b\x60\x71\x1e\x56\x17\xbc\x82\xf7\xac\x6d\x31\xb5\x64\x1a\x91\xd1\x25\x97\x14\xf6\xa7\x2b\xdc\xc1\xe9\x13\x2e\xa9\x0c\x47\x58\x1c\xe3\xbd\xa0\x32\x87\x50\x39\xdd\x42\x28\xb4\xed\x76\x92\xf7\x48\x85\x63\x99\x56\x36\x40\xec\xe8\x36\x5d\xcd\x5e\xdd\xfb\x0e\x71\x37\xfd\x3c\xd4\x0d\x24\xcd\xa2\x83\x08\xf2\x9f\xb8\xcd\x78\xd0\x47\x82\xa3\xe3\xe3\xb0\xbb\xea\x81\x0f\x40\x2a\x0f\xcb\x88\xb1\x60\x00\x76\x7b\x18\xa7\x5b\x67\xea\xcc\xa1\x1d\x94\x37\x6c\xdf\x9e\x62\x0b\x18\x37\xeb\xaa\xaf\xe5\xfd\xd6\x97\xfb\x33\x1b\x86\x2e\x8e\xe3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\xd3\xef\x94\x39\x34\xbc\xac\x69\x8e\x43\x48\xe2\xca\x42\x69\x07\x4b\x6e\x8e\xa3\xe1\x83\x25\xd7\x95\xea\xea\x08\xe5\xde\xbc\xee\x42\x09\xc9\xab\x2f\xd6\x19\xa1\x96\x5f\x85\x72\x64\x0a\x9e\x51\xeb\xd9\xa0\xfc\xbc\xd7\x61\x57\x14\x81\xfe\xec\xb6\x9b\x10\xef\x59\x51\xab\x0c\x33\x89\x57\xcf\xba\x16\xe1\x03\xb9\xbe\xf1\x53\x61\xab\x92\xaf\x07\x37\x66\xd1\xd8\x8f\xc1\x57\x43\xae\x36\x0a\x72\xf1\xc0\xbe\x40\xfa\xa7\x9a\xd7\x4f\x68\x36\x63\xcd\xe8\x37\x85\x06\xa6\x47\x60\x90\xa0\x19\xf1\xb2\x61\xa0\x4a\xdb\xb1\xfe\x03\x77\x66\x23\xd4\x39\x52\xad\xcb\x68\x20\x12\x05\xe4\x22\xdc\xf0\xcb\x3d\x9f\xc0\x8b\x04\x87\x43\x8d\xe7\xdd\x9e\xc3\x99\x9a\xba\x83\x7e\xbb\xd1\x2d\xa8\x3b\xfc\x20\xa3\x3f\x87\x79\xec\x12\x0a\x5e\x5a\xda\xe7\x96\x2e\x6a\xeb\xf6\x9b\x8e\xbf\xee\x3b\x19\xf7\x5d\x71\x25\xb2\x59\x21\xdd\xe2\xba\x32\x42\xb9\x62\x36\x79\x8c\xf5\x23\xa5\x3c\xbd\x7f\xb9\xbf\xee\x5e\x6c\x9e\xdd\x24\x8a\x1e\x5a\xf4\xdf\xcc\x6e\x6f\xe5\x5d\xb2\x9f\x97\x8f\x8e\x7d\xff\x0f\xdb\xf9\xa5\xdd\x2f\x7f\x06\x00\x00\xff\xff\x26\xf5\xd0\xb3\xa6\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x9d, 0xdc, 0x29, 0x17, 0xc8, 0x8a, 0x14, 0x25, 0x13, 0xa5, 0x85, 0x13, 0x6, 0xf, 0xb3, 0x4a, 0x21, 0xd1, 0x20, 0x4e, 0x6f, 0x92, 0x60, 0xe2, 0x6e, 0x29, 0x96, 0x4a, 0xee, 0x99, 0x66}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4f\x6f\xe3\xb6\x13\x3d\x87\x9f\xe2\xfd\x82\xe0\x57\xbb\xb0\xa5\xdd\xb6\xe8\x21\x5d\x1f\x8a\x75\xda\x06\x68\xe2\x05\x9c\xf6\x1c\x9a\x1a\xd9\x6c\x28\x52\x25\x47\x5e\x7b\x1d\x7d\xf7\x82\x92\x9c\xd8\x89\xbd\xf5\xa2\x68\x4f\xe6\x9f\x99\xc7\x99\x37\x6f\xc6\x4a\x53\xbc\x77\x19\x61\x4e\x96\xbc\x64\xca\x30\x5b\x63\xee\x9e\xf6\x50\x45\x96\x66\x94\x6b\xab\x59\x3b\x1b\x7e\xc0\x78\x82\xdb\xc9\x1d\xae\xc6\xd7\x77\x89\x28\xa5\x7a\x90\x73\x02\xaf\x4b\x0a\x42\xe8\xa2\x74\x9e\xd1\x13\x00\x70\x9e\x17\x7c\xde\xae\x58\x17\xd4\x2d\xc3\xda\xaa\x73\xd1\x17\x22\x4d\xf1\x93\x26\x93\x41\xdb\x8c\x56\xd0\x16\x6e\xf6\x07\x29\xc6\x4c\xb3\x50\xce\x86\x88\xb3\xd9\x0c\xe1\xa5\x9d\x13\x2e\x1e\x06\xb8\x58\xe2\x72\x84\x64\xd2\xd8\xdd\x10\x4b\xd4\x75\x83\xda\x7a\x5e\x47\xa0\xcd\x06\x17\xcb\xe4\x56\x16\x84\x47\xb0\xfb\x20\x83\x92\x06\x75\x8d\x4a\x5b\xfe\xfe\x3b\x8c\xf0\xf6\xdd\xbb\x68\xf4\x10\x9d\x23\x3e\xd9\x2c\x2e\xdb\x90\x5a\x6c\xe8\x00\x5e\x10\x42\x21\x8d\xa1\xc0\xa8\xac\xe6\x18\xe2\xdc\x0d\x03\x3b\x2f\xe7\x94\x88\x34\x8d\x0e\xb7\x93\xbb\xab\xe9\x65\x5c\x01\xc3\xce\xfd\xab\x80\x3c\xa6\x16\x30\xfd\x65\xf2\xdb\xaf\x63\x58\xc7\x98\x11\xd4\x22\xa6\x92\xc1\x55\x1c\x74\x46\x08\xe4\x97\x5a\x51\x48\xf6\xdd\xf1\xfe\xc7\xdb\x48\x71\xf4\x70\xa5\xa6\xec\xc5\xb5\x0e\x50\xce\xaa\xca\x7b\xb2\x8c\x20\x73\x7a\x06\xb0\x66\x8d\xfb\xeb\xf1\xfd\x00\xf7\x1f\x24\x2f\xe2\xef\x8d\xcb\xe8\x1e\xd2\x13\x3c\xfd\x59\x69\x4f\x19\xb2\xca\x6b\x3b\x87\xd1\x81\xe1\xca\x58\xe8\x58\xdb\x01\x1c\x2f\xc8\x77\xb1\xb7\x90\x80\x72\x95\xc9\x62\x2c\x39\xb1\x5a\x50\x86\xa5\x96\x30\xf2\xd3\x1a\x81\x25\xc3\xb8\xb9\x56\x97\x58\x30\x97\xe1\x32\x4d\x67\xb4\x76\x36\xdb\x72\xa4\x5d\x9a\x39\x15\xd2\x67\xda\x52\x6d\x99\xbc\x95\x26\x6d\x6b\x36\x8c\x48\xc3\x88\x24\xa2\x86\xb6\x29\x06\xf6\x95\x62\x6c\x4e\x15\x40\x34\xd3\x79\xac\xfc\x98\x82\xf2\xba\x8c\x09\x3d\x5f\x1e\xbd\x78\xaa\xfe\xb3\xdd\xdd\xba\xa4\x46\x3e\x75\xbd\x73\xf2\x42\x2c\xe2\x2c\x4d\xa1\x8c\x8e\x05\xe8\xb4\xb2\xdd\x59\x7c\x5c\x68\xb5\xd8\x29\x96\x34\x7a\x49\x89\x38\xeb\x2c\xa6\x2d\x13\x5e\x34\x8f\xa6\x69\x14\x3c\xaa\x40\x19\x64\x80\x8c\xbb\x42\x96\xc8\x9d\xdf\x36\xc4\x52\x9a\x8a\x06\x78\x83\x82\xa4\x0d\x8d\x98\x02\xf1\x00\x6f\xbb\x83\x40\xdc\x40\x35\x38\x8d\xca\xc5\x59\xe6\x2c\x35\x9b\x6f\xbf\x11\x67\x45\xbc\x8d\x8d\x97\xdc\x54\x4c\x2b\x51\x0b\x71\x0a\xb1\x9b\x4d\xc7\xe9\xd5\xaa\x69\xeb\xba\x16\x79\x65\x15\x7a\x0e\x5f\xb7\x96\x7d\xfc\x4c\xdc\xd1\xab\x43\x69\xe4\xba\x63\xae\xd7\xdf\xe7\x0e\x9b\x26\x42\x4f\x5c\x79\x0b\x97\xbc\xa2\x3a\xc6\xf4\x0a\x7c\x7a\x04\x7c\xb9\x0f\xde\xdf\x7a\x74\xaf\x1c\x80\xc7\x08\xcb\xbd\x08\x44\x57\x4e\x13\x9a\xd7\xa3\xd8\x8f\xa4\x82\x8f\xda\x18\xcc\x89\x71\xf0\x36\xf7\xae\xe8\x6a\xdd\x8c\x84\x83\x62\xfb\x02\xda\x7a\x7b\xa9\x0d\x30\x73\xce\xf4\x9f\x12\x8b\x8d\xd2\xeb\xb7\xca\xd1\x39\x5c\x12\x6b\xfe\xff\x93\xe6\xdf\xff\x46\x78\xd3\xe1\x7c\xbe\x14\x03\xb0\xaf\xa8\x31\xac\xc5\x2e\x69\x3b\x91\x3d\xe2\x13\x79\xf7\x7b\x14\x66\xe3\x91\x4b\x13\x48\xb4\x3c\xde\x54\x81\xff\x4b\x2e\x3f\xf3\xde\x11\x19\xfe\x23\x1e\x47\xfb\x3c\x96\xd2\x6a\xd5\xcb\x0b\x4e\xa6\xa5\xd7\x96\xf3\xde\x79\xd7\xb6\x3b\x08\x75\x1d\xe7\x40\xd7\xb8\xe7\xfd\x7e\x47\xee\xdf\xb7\x44\x9a\x1e\x6b\x82\x96\xca\x70\x8c\x4a\x6d\xd9\x7d\x39\x95\xff\x42\xc3\xb5\xd4\x3e\x8e\x4e\xe1\xf6\x60\x87\xb6\x03\x77\x77\xf6\xbe\x0a\x5b\x19\x67\xa9\xb7\xda\x39\xd9\x3c\xcd\xf7\x53\xbe\x1e\x0e\x86\xbf\x3a\x54\x92\x17\xff\x1a\x3b\x19\x36\x0e\xf1\xd3\xa5\x16\x7f\x05\x00\x00\xff\xff\xa7\xaa\x95\x75\x54\x09\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2d, 0x61, 0x7d, 0x5b, 0xc0, 0xc8, 0xe7, 0x81, 0xf1, 0x98, 0xf, 0xb1, 0xee, 0x37, 0x9f, 0xa2, 0xc0, 0x15, 0x45, 0xcd, 0xb, 0x28, 0xe8, 0x1b, 0xcb, 0xb2, 0x9f, 0x24, 0x62, 0x3b, 0xf4, 0x3a}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4d\x8f\xd3\x30\x10\xbd\xfb\x57\x8c\xac\x1e\x12\x69\x49\xef\x48\x7b\x82\x45\x5a\x09\x75\x2b\x10\xe2\x88\x5c\x67\xda\xb5\x48\x6c\x33\x9e\xec\x87\x82\xff\x3b\xb2\x93\x76\xd3\xaa\x10\x15\x10\xe2\x16\x7b\x66\xde\x9b\xf7\xc6\x13\xaf\xf4\x57\xb5\x43\xe0\x67\x8f\x41\x08\xd3\x7a\x47\x0c\x85\x00\x00\x90\xda\x59\xc6\x27\x96\xc3\xc9\x38\x29\x4a\x21\xfa\xfe\x15\x90\xb2\x3b\x84\xc5\x97\x2b\x58\x18\x78\x7d\x0d\xd5\xad\x65\xa4\xad\xd2\x18\x20\x46\xd1\xf7\xb0\x30\xd5\x5b\x0c\x9a\x8c\x67\xe3\x6c\xba\x4c\x0c\x30\x46\x4c\xf0\x8d\x7a\x5e\xa9\x16\x21\x46\x30\xfb\x62\xe8\x33\x53\x62\x30\x5b\x70\x04\x05\x7e\x4b\xf9\x39\x51\x06\xa4\x07\xa3\x91\x64\x79\x72\xcf\x8e\xd4\x2e\xdd\xc7\x98\xeb\x3f\x32\x19\xbb\x2b\x4a\x08\xf9\xe3\x80\x89\xb6\x4e\x8d\x8c\xe7\xa9\x08\xe7\x93\x8a\x85\xa9\xee\x7c\x16\x90\x32\x96\xcb\xdc\xad\xf3\x03\xcd\x77\x60\xb7\x56\x41\xab\x26\xb5\x3c\x46\x4e\x24\x8e\xc0\xe7\x6b\x8a\x31\xf2\xce\x51\xab\x78\xad\x48\xb5\x89\xab\x84\xe3\xc0\x07\x0c\x5d\xc3\xe1\xb3\xe1\xfb\xf5\x30\x9b\x23\x95\x32\x95\x4c\x5d\xb2\x8e\x73\xf5\x7b\x37\xd0\xcc\xf6\x9e\x90\xdf\x0c\x83\xfd\x1d\x19\x93\xf2\x42\xf3\x13\x8c\x6f\xa4\x1a\xef\xae\xfe\xba\xca\xfd\xd8\x8e\x4f\xf9\xd8\x76\x81\x6f\xda\x0d\xd6\x9f\xac\x69\x7d\x83\x2d\x5a\xc6\xfa\xdc\x1b\x2b\x4a\x11\x85\x58\x2e\x61\x36\x33\x83\xc2\x06\x01\x13\x70\x8d\x35\xb0\x83\x7b\xf5\x80\xb0\x75\xf4\xa8\xa8\x06\xed\x5a\xaf\xd8\x6c\x1a\x84\x03\x96\x4a\xde\x85\x6a\x78\xe4\xf3\x1c\x81\xa9\xd3\x0c\x7d\x14\x62\xdb\x59\x0d\x45\x98\x2f\x2a\x2f\x92\x7b\x29\xf6\xc9\xce\x8c\x9b\x48\xc8\x1d\x59\x90\xb3\x00\x32\xd9\xfb\xeb\x9d\xba\xa0\x99\x7f\xb2\x44\xc7\x3f\x9b\xb3\x6b\x84\x44\x70\x0d\x2b\x7c\xbc\xf3\x48\x79\xc4\x2b\xc7\xb7\x2f\xdd\xdf\x10\x39\x2a\xe4\xb4\xdb\x18\x65\x79\xfa\xc3\x79\x71\x52\x44\xf1\x33\xbe\x0b\xec\xf9\x0f\x76\x73\x34\xef\x4f\x0c\x9a\x38\xb2\x37\x6a\xfa\x75\x70\xef\x47\x00\x00\x00\xff\xff\xbd\xe8\x37\x32\xa2\x06\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc2, 0xaf, 0x9a, 0xb8, 0xf7, 0x9f, 0x1b, 0x53, 0xaa, 0x36, 0x95, 0x6d, 0xe6, 0x56, 0x7d, 0xb9, 0x8e, 0xd7, 0x4, 0x74, 0xce, 0x5b, 0x9, 0x4f, 0xb6, 0x92, 0xc, 0x1e, 0x49, 0x5, 0x4c, 0x4c}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x6b\xe3\x30\x10\x85\xef\xfa\x15\x0f\xe3\x43\x02\x89\x75\xd9\x53\x96\x3d\x6d\xf6\xb0\x14\x92\x1c\x42\x7b\x2c\x8a\x3c\x51\x44\x6c\x49\xc8\x63\xb7\xc6\xf5\x7f\x2f\xb2\x93\x40\xe9\xa5\x3a\xcd\x7c\x33\xef\xf1\x46\x52\xe2\xaf\x2f\x09\x86\x1c\x45\xc5\x54\xe2\xd4\xc3\xf8\x47\x0f\x5d\x97\xb2\xa4\xb3\x75\x96\xad\x77\xcd\x6f\x6c\xf7\xd8\xed\x8f\xf8\xb7\xfd\x7f\x2c\x44\x50\xfa\xaa\x0c\x21\x28\x1b\x1b\x21\x6c\x1d\x7c\x64\x2c\x04\x00\x64\xda\x3b\xa6\x77\xce\xc4\xdc\x1a\xcb\x97\xf6\x54\x68\x5f\xcb\x13\xf5\xde\x95\x0d\xfb\xa8\x0c\x49\xe3\xd7\xf7\xb2\xfb\x25\xc3\xd5\xc8\x0b\x73\xd0\x95\x25\xc7\xd9\xa4\x2d\x7e\xac\xe6\x3e\x50\x93\x09\xb1\x14\x62\x18\xd6\x88\xca\x19\x42\xfe\xba\x42\xde\x61\xf3\x07\xc5\x21\x05\xc5\x38\x4e\xd3\x3c\x38\x55\x53\xe2\x79\x57\xec\x52\xf9\x01\xf6\x07\xd5\x68\x55\xa5\x1d\x29\xf1\x62\xf9\x32\x0c\xf7\xcd\x71\xc4\x9b\xad\x2a\xa8\x10\xaa\x1e\x89\xdf\x74\xe3\x88\x4e\x55\x2d\x81\x3d\xf6\x61\xfa\xa9\x42\x48\x29\xe6\x95\x2d\x35\x3a\xda\x09\x27\xdb\x73\xeb\xf4\x37\xe3\x45\x77\xf3\x3b\xf6\x21\xf5\x4b\xa4\xa8\x18\xa6\xfb\x23\x71\x1b\xdd\x44\x66\x90\xde\x13\xf5\x1b\x64\x5f\x42\x64\xab\xc7\xf4\x39\xc5\xd9\xa0\x9b\xc9\x28\xe6\x8b\xc9\x95\x29\xc1\x67\x00\x00\x00\xff\xff\x81\x9d\x53\x8d\xf6\x01\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1b, 0x1a, 0xbf, 0xf0, 0xe9, 0x47, 0x35, 0xe6, 0xa7, 0xc, 0xe6, 0xba, 0xc0, 0x5e, 0x39, 0xda, 0x2d, 0xb9, 0xd0, 0xee, 0xbc, 0x1, 0xc0, 0xd1, 0x5e, 0xa2, 0xbf, 0x4d, 0xcd, 0x4, 0xe9, 0xc0}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x8f\xdb\xb8\x15\x7e\xf7\xaf\x38\x2b\x0c\x0a\x3b\x70\xa4\xdd\xa2\x2f\x9d\xc2\x0f\xed\x24\x4d\x07\x9b\xcb\x20\x93\xed\x3e\x64\x17\x03\x5a\x3a\xb2\x59\x4b\xa4\x42\xd2\x9e\x31\x5c\xfd\xf7\x82\x17\x5d\x4d\xc9\x76\xd2\xdd\x60\x81\xcc\x4b\x64\xf2\xf0\xf0\xf0\x5c\x3e\x7e\x24\x13\x45\x70\xc3\x13\x84\x15\x32\x14\x44\x61\x02\xcb\x3d\xac\x78\xfd\x1b\x76\x94\x40\x9c\x27\x51\x82\x29\x65\x54\x51\xce\xe4\xdf\xe0\xc5\x3b\x78\xfb\xee\x03\xbc\x7c\x71\xfb\x21\x9c\x14\x24\xde\x90\x15\xc2\xe1\x00\xe1\x5b\x92\x23\x94\xe5\x64\x42\xf3\x82\x0b\x05\xd3\x09\x00\x40\x10\x73\xa6\xf0\x49\x05\xf6\x17\xe5\xc1\xc4\x7e\xad\xa8\x5a\x6f\x97\x61\xcc\xf3\x68\x89\x7b\xce\x12\xa9\xb8\x20\x2b\x8c\x56\xfc\x79\xf5\xb9\xfb\x4b\x54\x6c\x56\x11\xb2\xa4\xe0\x94\x55\x3a\x2e\x18\x19\x0b\x4c\x90\x29\x4a\xb2\xcb\xc7\xae\x95\x2a\xe2\x8c\xe2\xa5\xf3\x4a\x14\x3b\x1a\xa3\xb4\xa3\xc2\xb3\xc7\xa9\x7d\xa1\x07\xcd\x26\x93\x1d\x11\xf0\x00\x8d\xed\xe1\x9d\xe0\x3b\x9a\xa0\x70\x3d\x95\x3f\xc2\x7f\x93\x6c\x8b\xae\xf1\xde\x6a\xaa\x64\x2a\x2b\xc2\x7b\xfb\xf1\x52\x08\x5e\xf5\x35\x2b\x0b\xdf\x15\x26\xac\x93\x49\x14\xc1\x87\x7d\x81\x40\x25\xa8\x35\x82\x36\x06\x52\x2e\x3a\x91\x8d\x39\x93\xca\x8a\x2d\x20\x68\xf5\x04\x66\xfc\xbb\xe5\x7f\x30\x56\xf7\x7b\xa9\x30\x7f\x83\x8a\x24\x44\x11\xd0\x0b\x44\x09\xd2\xb4\x42\x5e\x35\x6b\xd5\xdc\xc8\x87\x13\x33\xd7\xc0\x60\xb1\x8d\x15\x1c\x26\x87\xc3\x73\x10\x84\xad\x10\xae\x1e\xe6\x70\xb5\x83\xeb\x05\x84\xb7\x2c\xe5\x52\xdb\xa5\xfd\xac\x25\x68\x0a\xf8\x09\xae\x76\xe1\x7d\xcc\x0b\x84\xc0\x4e\x10\xf4\x44\x18\x57\x5a\xe6\x55\xc6\x97\x24\x6b\xf7\x5d\x15\x4c\x2f\xe7\x7a\xa1\xbb\xcd\xca\xfe\x0b\x8a\xdf\x11\x19\x77\xe5\x68\xaa\x05\x5e\x50\x59\x64\x64\x5f\xf9\x06\xdc\x5f\x4b\xd1\x62\x40\x4c\x8b\x20\x4b\x9a\x9f\x46\x0e\x65\x2c\xa8\x89\x46\xbb\xc3\x6a\x2a\x4b\x27\x65\x7c\x3f\xa4\xa6\xfe\xd9\xfa\x2c\x4d\x64\x5e\xa1\xf2\xfa\xf7\x91\x66\x19\xac\x50\xf9\xbd\x9f\x0a\x9e\xbb\x9e\x70\x12\x45\x5a\xd1\x73\xf8\xb0\xa6\x12\xd2\x2d\x8b\x8d\xa5\x72\xcd\xb7\x59\x62\x5c\xba\x44\x88\x49\x96\x59\x14\x71\xd9\x07\x34\x2f\x32\xcc\x91\x29\x14\x61\x35\x1e\x41\xa0\xda\x0a\x46\xd9\xaa\x9a\xd7\x4a\xd7\x13\x53\x09\x02\x49\x02\x9c\x65\x7b\x20\x2c\xe9\x4d\x93\xf3\x84\xa6\x14\x93\x70\xa2\xed\x18\x5a\xdc\x94\xc3\x33\xdb\x3e\xf3\x2f\xef\x60\xdc\x26\xf3\x39\xf0\x8d\x0e\x3a\x0f\x5f\x61\x5f\xc7\xcc\xc8\xd0\x54\x8b\x1c\xea\x18\x5b\xfb\x41\xe6\xe1\xd4\xa7\xd9\x0e\xb2\x51\x71\xa2\x3e\xb1\x43\x15\x1d\x39\x16\x1d\x39\x14\x1d\xca\x14\x3f\x2f\x3a\xc6\x8d\x4d\x78\x38\x8b\x71\x0e\x45\x86\x44\x22\xe4\x64\x83\x20\xb7\x02\x81\x64\x19\x18\xc5\x6b\x22\x61\x89\xc8\xe0\x51\x50\xa5\x90\xc1\x12\x53\x2e\x50\x5b\xe2\x3c\x3e\x60\x70\xe3\xf1\x39\xc8\xdc\x6b\xf5\xcc\x79\x91\x87\xf7\x47\xbe\x96\xf9\xcc\x39\xc4\x41\xd9\xf9\x48\xe2\x50\xd4\x34\x3a\x3c\x19\xd2\xf1\x45\x80\xe2\xe6\x09\xfa\x05\x3f\x84\x2a\x1e\x50\x18\x45\x97\x9e\xce\x61\x94\xb9\x00\x6d\xda\xa2\x2d\xb8\x68\x9a\x07\xd0\xa7\x2d\x30\x82\x42\x97\x23\x91\x3f\x32\x35\x14\xf9\x40\xc8\x0d\x79\x63\xc2\xdb\xe4\x7a\x1b\x49\xfc\x5a\x2f\x46\x12\xaf\x9a\xa9\x84\x67\x2d\x13\x66\x03\x93\xf5\x01\x45\x7e\x0e\xa0\x78\x55\x7b\x10\xc5\x2b\xd7\x86\x94\x11\x37\xcb\x63\x37\x1b\x34\x19\x70\xf3\xef\x04\x29\xe7\xb8\xde\x00\x8b\xdf\x45\x95\xfb\x87\x91\xc5\x5b\xf3\x77\x84\x0a\x59\xa5\xaa\xaf\x8e\xcf\xa9\xdd\xa6\x5e\x6f\x38\x4b\x33\x1a\x2b\xdd\x1a\x45\xf0\x02\x0b\x81\xb1\xe6\xd6\xd7\xf0\x93\x44\x28\xf4\x6c\xe1\xcf\x54\xad\x3b\x65\x45\x99\x54\x48\x12\xe3\xf4\x56\xc9\x44\x11\x1c\x89\x9a\x00\x92\xa2\xc8\xf6\xae\x18\x5d\xad\xc3\x4e\x73\x41\xd0\x7b\x82\xa5\x74\x4e\x99\xa7\xba\x8d\xc3\xfb\x8a\xa7\xbb\x6e\x71\xcf\x40\x7b\xe6\x38\x47\x75\x6b\xd3\xf8\x23\xee\xaf\x0d\x13\x6c\x0c\x09\xe6\x75\xaf\xa1\xa7\xd7\xb0\x9b\xbb\xf4\xed\xe0\x41\xeb\xd3\xd0\x52\xed\x9a\x37\xa4\x80\x05\xe4\xa4\xf8\x28\x95\xa0\x6c\xf5\xab\xfd\xc7\x59\x31\x1e\xbf\x4b\x70\xb6\x67\x71\xbd\x04\xb7\x76\xb7\x84\x2e\x78\x79\x67\xd7\x1a\x64\x41\x62\xec\x98\xa0\x30\x2f\x32\x7d\x80\x0a\xa8\x66\x3e\xa9\xee\x0f\x4c\x5d\xdc\x67\x9a\x15\x55\x53\x5f\xed\xc2\xdb\x5a\xc0\xaf\x20\x45\xa2\xb6\x62\x70\xf8\x3f\xb7\x2c\x96\xe6\xc3\xc9\xf9\xb5\x68\xdf\x3e\x30\x7c\x6c\x6b\x99\xfa\xfc\x33\x33\x8d\xf8\x38\xac\xa6\x67\x49\x63\x84\xdf\x7c\x87\x1b\xe3\xf6\xf7\xb2\x41\x7f\x9b\x23\x67\xcf\x81\x4d\x31\x6a\xdf\x53\x96\xe0\x13\x84\xf0\x7d\xdd\x6e\x64\x65\xbb\xef\x07\xdd\xa7\x93\x6b\x3a\x98\x40\xd5\x28\x67\xfe\x43\xbb\xaa\x3a\x89\x03\x0b\xf8\x93\x2d\x98\x6e\xfb\xe1\x68\xd3\x9b\x0d\xae\xa6\x89\xe6\xd0\x5a\x8e\x71\xe5\x2a\x65\xc7\x6b\xb2\x1d\x9d\xf6\x3f\x9b\xd9\x0c\xf7\x71\x66\x96\x65\x9d\x15\x35\xef\x19\x74\x43\x2a\xcf\x3a\x8f\x78\x3d\xb3\xe4\x3c\x3b\xae\x98\x21\x27\x34\xc9\x78\x2a\xa0\x29\x3b\x5a\x78\xd5\xb1\xb1\x46\x33\x5f\x85\x6b\xdc\xd4\x93\xd4\x6e\xd0\x1f\x7a\x88\x46\x5a\x7b\xbc\x2d\x88\x90\x98\x38\xb7\x58\xa7\xf5\x46\xe8\x01\x65\xd9\x75\x9c\xc9\x7f\xf8\xf8\xab\xc6\x1c\x7b\x8b\x11\x45\xf0\x1e\x3f\x6d\xa9\xc0\xc4\xf6\xfa\x1c\xac\x3b\x2a\x73\x6b\x69\xe7\xd3\x7f\x11\x69\x26\x25\x54\xf8\x3c\x0b\x6d\xdf\x8e\x89\x35\xdd\x23\x47\x44\x7d\x46\x37\x11\x25\xd9\x79\xd6\xd6\xd2\xff\x6f\x6b\x4f\xdb\x5b\x85\x51\x48\xbc\x1b\x88\xa5\xd9\x0a\x8d\x84\xdd\xab\xa4\x41\x17\xc3\x64\x9e\x0d\xc4\xdf\xee\x7d\x63\x5a\xa7\xbc\x50\x55\x8c\x67\x30\x1d\xd0\x33\x07\x14\x82\x8b\x8a\x74\x08\x94\xdb\x4c\x69\xaf\x0d\xc8\x37\x3b\xa6\xf1\xfb\x35\xe8\x59\xaa\x6d\xd1\xfc\xa3\x8f\x31\x0f\x73\x30\xc5\x68\xa3\x61\x0c\x69\x06\xca\x47\xaa\xe2\x35\xec\xc2\x1f\x71\xdf\x6a\xf6\x67\xe0\x85\x59\xa8\xff\x62\xcd\xdd\x82\x6e\xdc\xf4\xde\xd8\x39\x0c\xd0\xd4\xad\x35\x3c\x91\x0a\x87\xa3\xa3\x4a\xcc\x99\xa2\x6c\x8b\x9d\x8e\xee\x51\xe3\x3c\xd5\x0b\x50\xa2\xa7\xc6\x0d\x1c\x1f\xb5\xb3\xd7\x65\xe1\xb4\x9f\x7a\xb3\xa1\x83\xcc\x70\xcd\x5c\x58\x37\xdf\xfc\x3b\xe8\xdf\xb2\x5d\x04\x17\xa4\x2c\x4d\xe1\xbb\x4b\x5d\xe5\x28\xec\x50\x8d\x96\xf3\xe6\xd6\x54\x97\x7f\x35\xa5\xb9\x3a\x3d\x68\xae\x2b\xaf\x3f\x3a\x4a\x7a\xf0\x84\x12\xca\x7a\x35\xbd\xc5\xb6\x0f\x6e\xd6\xe8\x39\x30\x9a\x9d\xd8\x24\xcf\xa0\x3c\xe6\x74\xe5\xdf\x23\x0b\xb7\x47\x16\x83\x7b\xe4\x0b\x4c\xc9\x36\x53\xd6\x15\xda\x03\x96\x4b\x53\xa9\xad\xd0\x3d\x6e\xc3\x33\x37\x2c\x05\xc6\x34\xa5\x31\x10\xc3\xe7\xec\x96\x39\xa0\x60\xf4\x92\xc5\x9a\x7c\x8a\x51\xb8\x3d\xb6\xbb\x1f\x78\x32\xe4\x58\x25\x78\x59\x6b\x87\x7e\x16\x0c\xae\x76\xa3\x77\x15\x47\xa1\xf8\x02\xae\x32\x1e\x87\x8b\xe9\xcc\xe6\x72\x3e\xd3\x1b\x72\x82\xd2\x7c\x0d\xf2\x72\x1e\x7d\xf9\x03\x11\x95\xcd\xe7\x30\x95\x8d\x87\xaa\x4c\x25\x3c\x6b\x7a\x67\xa3\xd3\x0c\x52\x97\xcd\xa5\xdc\x65\xf3\x3b\x91\x97\x6f\x14\xe5\xe2\x2d\xd4\x6b\xa7\x67\x5f\xfd\xc6\x4e\x7e\x33\xd7\xba\xdd\xf1\xda\x7b\x65\x5f\x30\xbd\x02\x77\xf0\x7e\xcd\xb9\x2d\xd7\xfe\xa5\x7a\x14\x41\xa6\xfb\x1e\x4c\x5c\xdc\xb5\x80\x06\x04\xc1\x93\x6d\x8c\x09\x50\x06\xaf\xee\xef\x9e\xff\xf0\xfd\x5f\xc3\xfe\xc0\xdb\x14\xb6\x12\x05\x20\x23\xcb\x0c\x41\x99\xfb\x59\xab\xa1\x26\x30\xd5\x3d\x2d\x5d\x31\x2e\xd0\x5c\x6a\xca\x6d\x61\x9e\xe5\xcd\x8c\x06\x01\xc2\x7e\x70\x65\x58\x5d\x50\x84\x8d\xe5\x9f\x15\xcb\x81\xc7\x86\x23\x02\xb6\x19\x67\x60\x3f\x31\x67\x75\x45\xc2\x74\xe3\xf5\x6e\x80\x3d\x46\x11\xdc\xac\x31\xde\x80\xe8\x1c\x88\xc2\xaf\x42\x2d\x4f\xac\xec\x6b\x72\xcb\xd6\xa5\x5c\xf7\xde\x74\xec\x2a\xaa\x16\xf3\x53\x4e\x8f\x8b\x87\xb9\x99\xbd\x2a\x7f\xcd\x7b\x2f\x5f\x5d\xda\x96\xe9\xee\x87\xca\xd6\x41\x02\x57\x7b\x23\x93\x47\x6f\x52\xc7\xf7\x90\xa7\xd5\x9c\x7a\xc6\xf2\x7a\xf2\x73\xe9\xe1\x39\xd4\xaf\x45\x23\xec\x67\xff\x6a\xce\x3e\xd4\x74\x9f\x69\x0c\xe1\x88\x05\xea\xc5\x13\x70\xff\x05\x07\x96\xfb\x0a\xbb\xc2\x36\xbb\xb8\x2a\x58\x59\xce\x5a\x13\x4d\xcd\xf5\x57\x78\x47\x04\xc9\x65\x78\x6f\x92\x52\x4b\xb8\xf6\xf7\x26\xcb\xda\x1d\xb6\x0e\x62\xf5\xa4\xd7\xe2\x66\x0b\xff\x41\xe2\xcd\x4a\xf0\x2d\x4b\xdc\xab\x57\xf5\xca\x15\x36\x33\xfd\x4c\xd5\xfa\xc6\xca\x4f\x63\xf5\x34\x87\xce\xcc\x37\x24\xcb\x50\x68\x88\xee\xbb\xa2\x35\x6e\xc0\x2b\x63\xeb\xeb\xcd\x5a\x5b\xec\xda\x7a\x56\x9c\xbd\xfe\x04\x53\x14\x26\x06\xd3\x59\x97\xe3\x5c\x15\x44\xad\xab\x38\x3b\xb5\x77\x44\xad\xed\x02\x3d\xe5\x41\x58\x02\x53\xfc\xe4\x06\x06\xc1\xcc\xfd\x62\x10\xb8\xff\x2c\x11\xcc\xbc\x0f\xb5\x5a\x7c\x01\xc1\xfc\x97\xe0\x97\xe0\xe8\x99\xba\x87\xc8\x28\x04\x2c\x34\xe8\x73\x91\x13\x65\x90\x68\x1a\xd8\x25\xea\x5c\x2c\xcb\xc0\x50\xc5\x46\x71\x59\x82\x7b\x89\x9c\xce\x9a\x92\xa7\x29\x30\xb4\xc4\xc2\xbc\xf8\xbf\xe1\x09\x42\xd0\xc5\x96\x5c\xb7\x55\xf4\xa3\x91\x3a\x86\x18\x8d\xbd\x3c\xd4\x9d\xe1\xad\x81\x5e\x33\xb2\x2c\xa7\xb3\x16\xd8\x3a\xc3\x2b\x3c\x6d\x14\xde\xb2\x1d\xc9\xa8\x03\xd5\x97\x4f\x05\xc6\xe6\xe5\x4d\x77\xb5\x74\xcd\xe1\xef\xb1\xda\x92\xec\x1a\xec\x4c\x65\x0f\xc5\x47\x70\xd6\x1e\x97\x16\x40\x8a\x02\x59\x62\x28\xb6\x9c\x83\x0c\x5d\x59\x99\xf3\x6f\x2b\xbd\xc3\x30\xb4\x0e\xdb\x11\xa1\x29\xf1\xd0\xd5\x83\x55\xce\x0b\x35\xaf\x83\x32\x7a\x47\x69\xe6\xad\x9f\x92\xf5\x90\xef\x16\x1a\xf4\x8f\x36\xa4\xf6\xf6\xd8\x2b\xbf\x06\x6f\x6e\x48\x8e\x3a\x00\x9e\x0a\xfc\x20\x68\xfe\x9a\x48\xe5\x4a\xf1\x25\x4b\x34\x93\x5f\xdf\xf0\x3c\x27\x65\xa9\x2d\x9e\x8d\x6c\x34\x7d\x08\x1f\xdb\x6d\xda\x7d\x3e\xb0\xac\x32\xfc\x04\x60\x3a\x1e\x70\x12\x34\xad\x5c\x25\x7e\x29\x78\xea\x61\xbf\x01\x80\x7e\x49\x86\x9d\x9d\x65\x6e\xc9\xb7\x96\x19\x1a\x22\x08\x8f\x6b\x9a\x21\xac\x09\x4b\x32\xca\x56\x60\xe2\xa6\x17\xe8\x1e\x92\xab\x61\x26\x41\x1f\xce\x4e\xcf\x3e\x39\x32\x76\x0f\xa4\xde\xc5\x59\x67\x13\xbb\x9d\x79\x26\x20\x94\x51\x55\x63\xc5\x99\x4f\xb6\xfa\xaf\x06\x93\xf7\xb8\xa2\x52\xa1\x18\xba\x9a\x12\x53\x7d\x6e\x98\xc3\x5b\x7c\x1c\x14\x99\xf9\x6e\x2f\x8e\x66\xb8\x8f\xd7\x98\x13\xa7\xce\xbd\x7e\xeb\x6a\xfa\x5f\x00\x00\x00\xff\xff\x55\xed\xb9\x8c\x97\x2b\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x95, 0x95, 0x68, 0x90, 0x8f, 0xd1, 0x69, 0xdb, 0xf9, 0x98, 0xd2, 0xa, 0xf0, 0x1, 0xe1, 0x3c, 0x9b, 0x74, 0x18, 0x86, 0x21, 0x4a, 0x2f, 0xa1, 0x94, 0x62, 0x1c, 0x65, 0x10, 0xb2, 0xb8, 0x4c}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl": {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl": {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl": {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl": {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl": {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
