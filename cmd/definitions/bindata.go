// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/function.tmpl (258B)
// tmpl/info.tmpl (1.466kB)
// tmpl/operation.tmpl (807B)
// tmpl/pair.tmpl (2.219kB)
// tmpl/service.tmpl (7.629kB)
// ../../definitions/infos.hcl (510B)
// ../../definitions/operations.hcl (4.465kB)
// ../../definitions/pairs.hcl (2.075kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x4a\xc4\x40\x10\x45\xf7\x39\xc5\x67\xc8\x22\x33\x68\x1f\x40\x70\x15\x74\x25\x32\xa8\x17\x28\xda\x1e\x6d\x4c\x55\x9a\x54\x05\x07\xda\xba\xbb\xf4\x44\x04\x5d\x15\xd4\xff\xbc\xff\x6a\xbd\x46\x7f\x92\x0f\xdc\xdc\xa2\x0f\xf7\xab\xc4\xf0\x48\x9c\xf0\x05\x9b\x47\xe2\x34\xc1\xbd\x3b\xad\x12\x31\x28\x0e\xb5\xa2\xbf\xe4\x5a\x28\x6e\xa5\x23\x69\xa4\xd6\xda\xa3\xd6\x46\x72\x1f\xa2\x9d\x11\x67\xb1\x74\xb6\x30\x6e\xf7\xaa\xa5\x1b\xff\x48\x0b\xb1\x86\x97\x25\xf3\x03\xa9\x85\x67\x5b\xb2\xbc\xdd\xc9\xab\x7e\x66\x7b\x1f\x67\x66\x72\xc7\x5c\x0c\x87\x42\x79\xf9\xb7\xe9\xde\x1e\xcd\xf8\xef\xfa\xf0\xcb\x7f\x4a\xba\x4e\xa6\x3f\xdc\x8b\x58\x07\x00\x85\x24\xc7\x61\x97\xb9\x4c\x89\x93\x18\xb2\xed\xf6\x9d\x7f\x07\x00\x00\xff\xff\x5b\xb1\x71\xf7\x02\x01\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf3, 0x17, 0x45, 0xc4, 0x8, 0xb1, 0x57, 0xf3, 0x99, 0x7b, 0x1f, 0xcd, 0xe4, 0x30, 0x7e, 0x3, 0x30, 0xba, 0x28, 0xed, 0x36, 0x1c, 0xd3, 0x4a, 0x24, 0xfc, 0x10, 0x73, 0xfe, 0xf7, 0xda, 0x75}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcf\x8b\xdb\x3e\x10\xc5\xef\xfa\x2b\xde\xd7\x64\x21\x86\x7c\xed\x7b\x4b\x0e\x65\x53\xca\x1e\x9a\x2d\x24\xf4\xd0\x52\x8a\xe2\x8c\x8d\x88\x2c\x19\x49\x71\x49\xb3\xfe\xdf\x8b\x1c\xa5\xfe\x91\xa4\xa4\x65\x2f\x21\xf6\xbc\x79\x33\x9f\x37\x4e\x53\x3c\xea\x2d\xa1\x20\x45\x86\x3b\xda\x62\x73\x40\xa1\x7f\x3f\x43\x28\x47\x46\x71\x99\x66\xe5\xf6\x2d\x16\xcf\x58\x3e\xaf\xf1\x7e\xf1\xb4\x4e\x58\xc5\xb3\x1d\x2f\x08\xee\x50\x91\x65\x4c\x94\x95\x36\x0e\x53\x06\x00\x91\x13\x25\x45\x2c\x66\x2c\x4d\xf1\x4e\x4a\xf0\x9a\x0b\xc9\x37\x92\x50\x92\xe3\x5b\xee\x78\xc2\x32\xad\xac\x6f\x38\x1e\xff\x87\xe1\xaa\x20\x4c\xbe\xcf\x30\xa9\xf1\x66\x8e\xe4\x49\xe5\xda\xa2\x69\x5a\x3b\xaf\x98\x54\x8a\x97\xe4\x6b\x93\x3a\x59\xfa\xbf\x2f\x70\xfa\x13\xb7\x19\x97\x7d\x9d\xc8\xbd\x60\x21\x6c\x25\xf9\xa1\xd5\x85\xe2\xc8\x68\x7e\x43\xe6\x25\xa4\xb6\xdd\xa3\xd7\xad\x32\x5d\x8d\x06\x9e\x0a\x8f\xdc\x51\xa1\xcd\xe1\xb2\x76\x9a\xd2\x34\x98\x23\x3a\x69\xc3\x94\x88\xf5\x46\xc4\xec\x2e\xfc\xd7\xa2\xff\x07\x78\x4b\xa6\x16\x19\x2d\xc3\xf8\xca\x08\xe5\x72\x44\x0f\xf6\xc1\x46\x98\x5e\xc9\x26\x6e\xdf\x5e\x09\x26\x3e\xdb\xa6\x29\x3e\x90\x1b\x84\xf4\x43\x48\x89\x82\x1c\x06\x51\xa1\xe6\x72\x4f\xc8\x8d\x2e\x7b\xdf\x8d\xb7\xc8\xf7\x2a\xc3\xb4\xbc\xd8\xb0\x69\xe2\xb1\xf7\x34\xc6\xf4\xe4\xba\x3e\x54\xfe\xc5\x0c\x1b\xad\x65\x0c\x1c\x5b\xab\x7a\x06\xbd\xf3\x68\x65\x52\x7e\xbd\xf4\xeb\x5b\x7d\x6b\x1b\x44\x8e\xff\xf4\x2e\x74\x77\xa1\x7f\x21\xa3\x3f\xb7\xfb\xf6\x22\x37\xe4\xf6\x46\x05\xaa\xbe\x62\x86\x9c\x4b\x4b\x5d\xea\xd2\xde\x6e\x6c\x17\x7f\xc1\xcf\x3f\xf5\x77\x57\x3b\xfd\x06\x83\x3a\x19\xc2\xc7\x33\x38\xb3\xa7\x20\x3c\x9f\xe3\xe3\xde\xba\x10\x5b\x17\xfe\x6b\xde\xa4\x37\xa0\x77\x97\xc1\x66\xe7\x7b\x84\xc5\xef\xb8\xc6\x18\x6d\x04\xb5\xba\x0a\x64\x6f\x00\x09\xe5\xf4\x5f\x00\xad\x46\x30\xf5\x10\x26\xbe\xd2\x14\xf8\xee\x00\xc3\x1c\xf5\x20\x8b\x40\xd6\x3b\xf4\xaf\x00\x00\x00\xff\xff\x31\xc4\x25\xbf\xba\x05\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x31, 0x26, 0x6e, 0xf5, 0x88, 0x13, 0x39, 0x22, 0xf2, 0x4a, 0x8a, 0xfc, 0xe5, 0x28, 0x32, 0x20, 0x62, 0x81, 0x72, 0x52, 0xb2, 0x20, 0xc, 0x8, 0x11, 0x99, 0x4c, 0xc3, 0x92, 0x2c, 0x90, 0xcf}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4f\x6b\xf3\x30\x0c\xc6\xef\xfe\x14\xc2\xe4\x90\x40\x9b\xc0\x7b\x7c\x61\xa7\xfd\x81\x5d\xb6\xb2\x1d\x76\x1c\xae\xab\xba\xa2\x4d\xec\xd9\x6a\x69\xc9\xf2\xdd\x87\x13\xa7\x6b\xcb\xc6\x60\xec\x66\x4b\x7a\x1e\xff\x24\xcb\x29\xbd\x56\x06\x81\x0f\x0e\x83\x10\x54\x3b\xeb\x19\x72\x01\x00\x20\xb5\x6d\x18\xf7\x2c\x87\x1b\x59\x29\x86\x93\x21\x5e\x6d\xe7\xa5\xb6\x75\xa5\x6c\x98\x2e\x70\x57\x19\x3b\x0d\x6c\xbd\x32\x58\xed\xfe\x55\x6e\x6d\xaa\x80\xa6\xc6\x86\xa5\x28\x84\x68\xdb\x29\x78\xd5\x18\x84\xec\x75\x02\x19\xc1\xff\x2b\x28\xef\x1b\x46\xbf\x54\x1a\x03\x74\x9d\x68\x5b\xc8\xa8\xbc\xc1\xa0\x3d\x39\x26\xdb\xc4\x60\xa4\x82\x94\xa1\xe0\x36\xea\xf0\xa0\x6a\x84\xae\x03\x1a\xc5\xd0\xf6\x4c\xf1\x05\x5a\x82\xf5\x90\xe3\x5b\xac\xef\x0b\x65\x40\xbf\x23\x8d\x5e\x16\x17\xf1\x81\xd5\xcb\xa2\xeb\x7a\xfd\x33\x7b\x6a\x4c\x5e\x40\xe8\x0f\x47\x4f\x6c\x16\x11\xe4\x78\x3f\xe9\x02\xeb\x39\x2e\x62\x27\x19\x95\xb7\xfd\x39\x79\x0d\xb5\xa9\xe0\x02\xfc\x1b\xe3\x53\x5f\xeb\x92\xe9\xa3\x0b\xa3\xa2\xaa\x7a\x47\xeb\x06\xfe\x77\x60\x3b\x53\x41\xab\x4d\x9c\x45\xca\x5c\xcc\x6e\xa4\xf8\x52\x93\xa7\xcc\x9d\xf5\xb5\xe2\x99\xf2\xaa\x8e\x6f\x15\x70\x9e\x78\xc2\xb0\xdd\x70\x78\x21\x5e\xcd\x86\x45\x39\x1b\x9f\x8c\x92\x1f\xf9\xa2\xfa\x7a\xd8\xa4\xdf\xa0\x9e\xc8\x73\xcd\x7b\x48\x4b\x59\xa6\xd8\xe4\x8f\x3b\x69\xdb\xf1\x6b\x3a\xf1\xf9\x4f\x1f\x01\x00\x00\xff\xff\xdf\xa9\x30\x72\x27\x03\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0x8e, 0xe7, 0x76, 0x2d, 0x73, 0x18, 0xcd, 0x4, 0x48, 0x1d, 0xa0, 0x62, 0x4b, 0xfe, 0xf3, 0xf0, 0xa4, 0xd6, 0xff, 0xe6, 0x6a, 0xe5, 0x6f, 0x57, 0xe4, 0x92, 0x1a, 0xcc, 0xd5, 0x8, 0x4c}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\xcc\x0a\x46\x20\x2d\x64\x69\xb1\x47\x2d\x7c\x58\x6c\x7c\x58\x14\x8d\x73\x30\xda\x43\x10\x14\x0c\x35\x96\x09\x53\x24\x41\xd2\x4c\x0d\x55\xff\xbd\x20\x65\x3b\xb2\x65\xe7\xe3\x50\xa0\x3c\x89\x9c\x37\x33\x6f\xde\x70\xa8\xa2\x80\xff\x64\x85\x50\xa3\x40\x4d\x2c\x56\xf0\xb4\x83\x5a\x1e\xf7\xc0\x84\x45\x2d\x08\x2f\x68\x53\xfd\x03\xb7\x0b\xb8\x5b\x2c\x61\x7e\xfb\xff\x32\x8f\x14\xa1\x1b\x52\x23\x28\xc2\xb4\x89\x22\xd6\x28\xa9\x2d\x24\x11\x00\x40\x4c\xa5\xb0\xf8\xdd\xc6\x51\xbf\xad\x99\x5d\x6f\x9f\x72\x2a\x9b\x82\x48\x33\xad\xd0\x15\xb5\x9c\x1a\x2b\x35\xa9\xb1\x70\x7f\x17\x6a\x53\x17\x28\x2a\x25\x99\xb0\xf1\x07\x7c\xa8\xc6\x0a\x85\x65\x84\x7f\xc4\x6b\x6d\xad\xa2\x9c\xe1\xfb\x73\xd9\x9d\x42\x13\x47\x69\x14\x15\x05\xfc\xcb\x39\x10\x47\x18\x27\x4f\x7c\x5f\x7f\x1e\x51\x29\x8c\x2f\xbf\x6d\xa7\xa0\x89\xa8\x11\x26\xdf\x32\x98\x38\x28\x67\x90\xdf\x7b\x0c\x74\x5d\xc8\xe6\x11\x13\x25\x48\x83\xde\x36\x71\xf9\x9d\xff\xfc\x01\x56\xde\x13\x43\x09\x3f\xe0\x8a\x02\xda\xf6\x80\xec\x3a\x78\x66\x9c\x87\x13\x97\xdf\xa2\xa1\x9a\x29\xcb\xa4\x78\x89\x3a\x80\xce\x20\xee\x81\x77\xfd\x41\x1c\x68\xa1\xa8\x3c\x3a\x8d\xde\x20\xf9\x1e\x82\x45\x01\x5f\x99\x5d\x8f\x09\x12\xa5\xf8\x0e\x4e\xb2\x83\x23\x7c\x8b\x60\x25\x2c\x02\x65\xe3\xbd\x97\x6b\x66\x82\x76\xc0\x0c\x6c\x0d\x56\xde\x7e\xb1\xba\xd5\x56\xd0\x51\xb2\xc4\xed\xc1\xcb\x9d\xf2\xfb\x14\xfe\x0c\x3d\x0a\x55\x40\x1b\x24\xd1\x68\xb7\x5a\xc0\xcd\x8b\xa1\x3f\xf7\xeb\x13\xee\xca\x13\xcd\xb2\xa3\xe9\x8b\x67\x5b\x82\xeb\x4f\xba\xa8\x1b\x8a\xe7\xa9\xdf\x13\x6d\xb0\xaf\x56\x85\x4f\x02\x9b\xa9\x83\x86\x28\x5f\x43\xb8\x0f\x60\x38\xa3\x98\xf7\xdc\x03\x3e\x69\x3c\xe0\xc1\x58\xcd\x44\xfd\x18\xe6\x6a\x45\x28\xb6\x5d\x0a\xc9\xc3\xe3\x80\x7c\x06\xa8\xb5\xd4\xe9\xbe\x88\x3e\x5c\x39\x83\x86\x6c\xf0\x1c\xf9\x57\x06\x1c\x45\xd2\xa4\x69\x3f\x68\x8e\x68\xef\xdd\x47\xe8\x8f\x56\x52\xc3\x26\x83\xd0\xe2\xbe\xe5\x0d\xbc\xc8\xe0\x1d\x94\x83\x01\x9d\xa3\xc9\x3c\x33\x4b\xd7\xb0\x19\xa0\xdf\xbe\xdb\x43\xe4\x7b\xee\xf8\x61\x51\x62\xf0\xa4\x1d\xe5\x89\x79\xc0\x47\x87\xac\x2e\x4f\xbc\x0e\xe9\x80\xdc\x28\xd4\xf1\x6e\x8c\x63\x05\x61\x1d\xcc\x40\xbb\x91\xcd\x53\x67\x2b\xef\x1e\xfa\xa6\xcf\xa9\x1e\x73\xf4\xad\xbc\x16\x3c\xb4\x11\x66\xd0\xb6\xc7\x48\x5d\x97\x68\x97\x5e\xc4\xb3\x55\x80\xff\x31\x03\xc1\xf8\x85\xa2\x0e\x6b\x7f\xa5\x05\xe3\x19\xdc\xcc\x7d\x97\xaf\x63\x17\xaa\x84\x38\x5c\xd0\x38\xbb\x0a\x9a\x6b\x5d\xfa\xd4\xd7\x11\xaf\x4c\xca\xf9\xf2\x7a\x97\x87\xa7\x67\x2f\xfe\x2b\xb9\x4f\x07\xed\x7c\x8d\x55\x1f\x9f\x0c\x06\xf3\xdc\x54\xe1\x8a\x6c\xb9\xbd\xdc\x9e\x5f\x23\xe3\x5c\x6b\x3f\x0c\xbe\xf0\xcf\xcc\x34\xc4\xd2\xf5\xef\x2e\x6b\x77\x32\xdb\x17\xa4\xbc\x2a\xa3\xff\xc3\x33\xb1\xc5\x68\x1c\xaa\x7f\xb2\x66\xfe\x57\x80\xa2\x4a\xc2\x36\x3b\x79\x86\x43\xf1\x9b\xec\x40\x55\xb9\x2e\xdd\x3f\xb6\xc3\x87\x7b\xef\x28\x18\x8f\xba\xe8\x67\x00\x00\x00\xff\xff\xa4\x19\x45\x28\xab\x08\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xab, 0x1e, 0x79, 0x73, 0x22, 0xcc, 0xed, 0x33, 0xba, 0x50, 0x21, 0x70, 0x7a, 0x5b, 0x77, 0xe, 0xd1, 0x8, 0xd9, 0x88, 0x2c, 0x47, 0xcb, 0xd7, 0xc6, 0xa8, 0xfa, 0xe4, 0x63, 0x4c, 0x5c, 0x1}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x5b\x6f\xdb\xbe\x15\x7f\xf7\xa7\x38\x7f\xc1\x2d\xa4\xc2\x91\xb6\x3d\xba\xf0\xcb\x92\x36\x2d\xba\x25\xc1\x92\xad\xc0\xda\x20\x60\x24\xca\x26\x2c\x91\x2a\x49\x2b\xf1\x5c\x7d\xf7\x81\x17\x49\x94\x2c\xb9\x76\x97\x76\x7e\x68\x6d\xf1\x5c\x7f\xe7\x4a\x25\x8a\xe0\x9c\x25\x18\x96\x98\x62\x8e\x24\x4e\xe0\x71\x0b\x4b\xd6\xfc\x86\x92\x20\x20\x54\x62\x4e\x51\x16\xc5\x79\x12\x09\xcc\x4b\x12\xe3\xb7\x70\x71\x0d\x57\xd7\x77\xf0\xee\xe2\xe3\x5d\x38\x29\x50\xbc\x46\x4b\x0c\xbb\x1d\x84\x57\x28\xc7\x50\x55\x93\x09\xc9\x0b\xc6\x25\xf8\x13\x00\x00\x2f\x66\x54\xe2\x67\xe9\x99\x5f\x84\x79\x13\xf3\x6d\x49\xe4\x6a\xf3\x18\xc6\x2c\x8f\x10\x13\x67\x09\x2e\xa3\x25\x3b\x13\x92\x71\xb4\xc4\x51\xf9\x17\xef\x38\xb2\xa8\x58\x2f\x23\x81\x97\x39\xa6\xf2\x14\x16\x4c\x93\x82\x91\xd3\x78\x62\x8e\x13\x4c\x25\x41\xd9\x29\x5c\x2b\x29\x8b\x38\x23\x27\xd8\x67\xb1\x16\xc7\xd2\xcb\x6d\x51\x13\x17\xe2\x58\xfa\xa8\x40\x84\x0b\x6f\x12\x4c\x26\x25\xe2\xf0\x00\xad\x77\xe1\x0d\x67\x25\x49\x30\xb7\x27\x35\x56\xfd\xe7\x16\xf6\xf0\xd6\xfc\x5f\x3f\x35\x8a\xc2\x5b\xf3\x7f\x4b\x6c\x9c\x0a\x6f\xcd\x97\x77\x9c\xb3\xfa\xac\x85\x28\xbc\x2e\x24\x61\x54\x4c\x26\x51\x04\x77\xdb\x02\x03\x11\x20\x57\x18\x94\xcd\x90\x32\xde\x49\xb5\x98\x51\x21\x0d\xd9\x02\x3c\xe7\xc4\xd3\xfc\x56\x13\xa0\x12\x91\x0c\x3d\x66\x18\xb4\xcf\xa1\xe5\xf3\x27\xbb\xdd\x19\x70\x44\x97\x18\xa6\x0f\x33\x98\x96\x30\x5f\x40\x78\xa3\x68\x94\x74\x85\xa7\xa2\x20\x29\x50\x26\x61\x5a\x86\x97\x19\x7b\x44\x99\x7b\x36\x2d\xa8\xd2\x38\x5f\xa8\x63\xad\xfc\x3b\x48\x76\x83\x44\xdc\xd2\x45\x91\x32\xda\x52\x56\x15\x3c\x91\x2c\xd3\x4f\xca\xf0\x02\x8b\x98\x13\xed\x72\x4d\xad\xd4\x77\xc8\x8d\x67\xd3\xda\xb5\x07\xc3\xd9\x38\x5a\x5b\x82\x69\xa2\x44\x38\x5f\x83\x11\x10\x08\x4d\xd9\x8f\x40\xf8\xa8\x68\x5e\x12\x04\x2b\x43\xf9\x4c\x44\x91\xa1\x6d\x1d\x43\xb0\x1f\x47\xd0\x62\x84\xcc\xf1\x4d\xfd\x54\x36\x1a\x30\x6e\x63\x56\xf4\x94\x9a\x83\x73\x24\xf1\x92\xf1\xed\xfe\xd9\x18\xbc\x67\xa7\xc0\x7b\x38\x7f\xc6\x60\x3b\x06\xb2\x28\x82\xcf\x44\xae\xf6\xf3\x06\x15\x45\xb6\x85\x8e\x91\x50\xa2\x6c\x83\x41\x32\xa8\x8b\x47\xd5\xce\x8a\x08\x9d\xee\xaa\x80\x36\x02\x27\xea\x7c\x30\xe9\xd2\x0d\x8d\xf7\x94\xf9\xa5\x25\xd6\xc5\x55\x55\x01\xbc\xd1\x5d\x43\x7b\x07\xbb\x26\x6a\x1c\xcb\x0d\xa7\xf0\xba\x3d\x6c\xcf\x3e\xe1\xed\x7c\x2f\x9d\x67\xcd\xf1\xbf\x94\xd5\x73\x28\xcd\x93\x6a\xd2\x01\xd7\xf9\x3a\x02\xf3\x09\x19\xfa\x52\x09\x7a\x62\x7e\x2a\x06\xdb\xf5\xae\xac\xfa\x82\x13\x2a\x53\xf0\x5e\x89\x57\xc2\x03\x7f\x20\x75\x03\xfd\x74\x20\x6f\x03\xa7\x9d\x5c\x62\xb9\x9f\x19\x4b\x2c\x07\xf3\x22\xe5\x2c\x87\x1c\x4b\x94\x20\x89\x42\x2d\x42\x87\xbc\x27\xc4\xcf\x75\x63\x08\xfb\x56\xab\xd8\xfb\x9d\x5c\x98\xc1\x23\x63\x59\x00\x36\x0d\xca\x19\xb0\xb5\x72\x2e\x0f\x2f\xb1\xf4\xeb\xaa\xec\xca\x70\x35\x05\x9a\x8d\xa4\xf0\x07\x5b\x5b\x19\x2d\xf8\xff\xc6\x9c\xe9\xcc\x70\xa1\xb7\x59\x66\xac\x70\x29\x66\x90\xa2\x4c\xe0\x16\xfd\x4c\x8c\x33\x6a\xf3\xbf\xc3\x7f\x0e\xf1\xb7\xd1\x33\xff\x5a\x01\x65\xd8\x85\x20\x98\x81\xe4\x1b\x6c\x09\xeb\xb0\x08\x83\x68\x1b\x00\x1d\x17\x31\x12\x17\x42\x25\x1b\x8a\x8b\x38\x36\x2e\x33\xd8\x2b\xd2\x11\x4a\x8b\xb2\x75\x26\x0f\x6f\x8f\x8a\xd3\x0c\xca\xc0\x81\x62\xa4\x3a\x07\x8b\x53\x49\x13\x05\x8a\x71\xa7\x42\x25\xce\x8b\x4c\x6d\x97\x9e\x6a\x4c\x1e\xe4\x68\x8d\x6f\x33\x35\x9c\xfc\xa1\xc2\x0c\xf4\x43\xfc\x34\x2e\x42\xb8\x32\x6a\x09\xd3\x32\x7c\xbf\xa1\xf1\x88\x66\x05\xb1\x6e\x92\x3f\x62\xed\xfb\x98\xe0\x94\xd0\x56\x6f\x77\xfc\x29\xa7\x09\x4d\xf0\x33\x84\xf0\xa7\x91\xe6\x32\x55\x71\x76\x09\xff\xac\x65\xd7\xc7\x7d\x0c\x0d\x79\x6f\x40\x8e\x23\xa8\x8c\x98\x96\xfb\x8d\xc8\x7e\x1d\xf2\xe2\xb0\x13\xee\x59\x4a\xc7\xed\x9e\xa6\x54\x57\xff\x34\xa5\x43\xad\xb5\xae\x8d\xa2\x99\x03\x36\xcb\x14\x5b\x55\xfd\x1d\x15\xb0\x62\x59\x22\x00\xa9\xe1\xd6\x5d\xd4\x4c\x7b\x41\xfc\x10\xf3\x02\x72\x54\x7c\x11\x92\x13\xba\xbc\x17\x92\x6f\x62\xb9\xab\xda\x19\x14\x45\xf0\x0f\xfc\x6d\x43\x38\x4e\x1c\x99\x03\x98\xeb\x51\x69\xdd\x68\x38\xfa\xdd\x1f\x11\x1e\xbe\xdf\x64\x99\x2d\x96\x39\x34\x0a\x9d\xb9\xd6\xeb\x23\xd6\x0a\x33\x9a\x51\x76\xbc\x15\x0d\xc7\x0b\x5a\x71\xd9\xdc\xf7\x8e\x36\xa3\x65\x79\x09\x3b\x7e\x98\x10\xf5\xbe\x5f\x20\xae\x96\x16\x23\x52\xf3\xe8\x1b\xc0\x18\x97\xa1\x73\x16\x13\xed\x1f\x7c\xb9\x77\xd6\x96\xc9\x2f\xcc\x8a\xfd\xcc\xef\x1c\xdb\x06\xfd\x5b\x72\xe4\x03\x12\x87\xcd\x52\xd3\xfb\x58\x0f\x4e\xf6\xe1\xe5\x32\xac\xdd\xe8\xb4\xfa\x0b\x9c\xa2\x4d\x26\xff\x17\x4f\xf7\xec\x7d\xa1\xf0\xb9\x49\xcd\x05\xbe\x19\xc9\x51\xbd\x0d\x68\x8a\xce\x32\x2d\x74\xff\xd6\xdb\xc0\x9b\x91\xf4\x6e\x97\x83\x43\x0a\x7c\x56\xc8\x5e\xca\x07\xe0\x8f\xc9\x9c\x01\x56\x37\xf0\xa0\xd9\x0d\x84\x42\x77\xbe\x80\xd7\x23\x0c\xbd\xda\x9a\x83\x52\x37\x73\x01\xd0\x7b\x8d\xd0\xab\x20\x5a\x63\xdf\x69\xcc\xfa\x55\x52\x8a\x62\xbc\xb3\xdb\x9f\xba\xc9\x3f\xa8\x05\x66\xbe\xb0\x69\xa1\x8d\xdf\x0d\xc5\xdf\x5f\x21\x71\xc3\x71\x4a\x9e\x8d\x29\xde\x15\x7e\xf2\x02\x37\x1e\x24\x55\xc2\xcc\x16\x3a\x3e\x2b\xbe\x94\xe1\x27\xbc\xbd\x7f\xeb\xec\x9d\xf5\xc7\x6e\x46\x94\x64\xb3\xf6\x45\xc5\x15\x7e\x52\x18\xfe\x93\x8a\x4d\x51\x30\x2e\x71\xa2\xdf\x59\xf8\x76\x2b\x82\x66\x33\x1a\xc9\x2e\x03\x87\xd5\x0a\x0b\x28\x43\xbd\x76\xba\x88\x59\x2f\x19\xef\x76\x98\x4e\x69\x0f\x96\x88\x9a\x8a\x25\x38\xb0\x36\x4f\xd9\xba\x4d\x7b\x77\x87\xb1\x19\xfa\x01\xd1\x24\xc3\xc0\xf7\xdb\xdf\xc9\xad\x4f\x2d\x0d\x6b\xbc\xd5\x44\x23\x55\xd4\x62\xa1\xc3\xb3\xa8\x31\x31\xcc\x9d\x01\x72\x56\x55\xf7\x6e\x40\x4f\x0b\x52\x6d\xa1\x89\xd0\xb0\xf8\xa1\xb0\x29\xf0\xf7\xf5\xa8\x52\xd0\x6b\xb4\xf6\x4f\xbf\x24\xb0\x37\x00\xb7\x1d\xf4\xe5\xf5\x52\xa0\x05\x9b\xed\xf7\xf5\x93\xe7\xfe\xaf\x05\xbb\x83\x81\xf5\xbf\xee\xae\x0d\x04\xcd\x8d\xe7\x97\x80\xb4\x1c\x18\x1c\x3f\x33\x34\x7e\x1b\x4c\xc7\x4c\xa8\xa3\xe1\x1c\x68\x1f\x3f\x8b\xb0\x63\xdb\x41\xbb\x46\x6a\x6c\x40\x69\xa3\x71\x44\xd2\x68\x17\xec\xf7\x1f\x5b\xc1\x46\xc9\x4c\x55\xb2\x6d\x86\x63\x97\x2d\xe7\xb6\xf6\xff\xbe\x70\xd5\xa6\x9c\x70\xe9\x1a\x75\xe7\x25\x6e\x5e\xc7\x5e\xbc\x9c\x05\xc4\x7c\x1d\x7a\xe9\x1c\x45\x35\xb9\x7e\x6f\x58\xdb\x69\x56\x96\x98\x63\x85\x00\x02\xfb\xa7\x1c\x78\xdc\x2a\x8f\x54\x26\x38\xaf\x2d\x7c\x01\x6f\x76\xbb\x69\x41\xab\x2a\x70\x94\xfa\xbb\x9d\xd2\x79\x83\x38\xca\x45\x78\xab\xd7\x01\xfb\x4a\xc9\x4c\x16\x95\x0a\xee\x41\x9b\x8f\xb1\x7c\x56\xfe\x59\xad\xe1\x5f\x51\xbc\x5e\x72\xb6\xa1\x89\x1f\xf4\x5f\xf0\x88\xb0\xd5\xf8\x99\xc8\xd5\xb9\xe1\xf1\x63\xf9\x3c\x83\x8e\x05\xe7\x28\xcb\x30\xaf\xab\x66\x08\x26\x87\xff\x00\x62\x87\x7c\xee\x59\xd0\x78\x60\x9f\xf5\x2c\x3a\x09\x93\x04\xa7\x98\x6b\xe5\x7e\xd0\xad\x5c\xdb\xbe\xe4\xaa\xce\x09\x2b\xfe\x06\xc9\x95\x71\xba\x5f\xb6\xb6\x49\x20\x9a\x80\x8f\xbf\x59\x66\xcf\x0b\xec\x2f\x0a\x9e\xfd\xdb\x41\x77\xd9\x6a\xd9\x2d\xcb\x02\xbc\xd9\x57\xef\xab\xe7\x0d\x29\xe8\x35\x35\xf5\xc1\x9c\xc3\x02\x44\x98\x32\x9e\x23\x69\x26\x76\x33\xcf\xaf\x8b\xde\x8a\xda\xea\xa9\x2a\x70\x7a\x9d\x93\x04\x7a\xed\x29\xe4\xe1\xf5\x59\x7d\x58\x21\x67\x56\xfd\xc1\x45\x5a\x4f\xa0\xc0\xed\xfc\x8a\xe9\x8f\x85\xea\x58\x83\x4b\x89\xd3\x82\x07\x53\xb3\x5b\xa4\xe7\x28\xc7\xaa\x46\x07\xd2\xf3\x8e\x93\xfc\x6f\x48\x48\x9b\xa7\xef\x68\x22\x9e\x74\x36\xe5\x39\xaa\x2a\xe5\x40\xb0\xd7\x32\xff\x1b\x00\x00\xff\xff\x0e\xfe\xa2\xad\xcd\x1d\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0x48, 0x6c, 0x9, 0x9f, 0x56, 0x2c, 0x72, 0x13, 0x33, 0x31, 0xb4, 0x2b, 0xb4, 0xe6, 0xe7, 0xf6, 0xc4, 0xa8, 0x11, 0xa2, 0x13, 0xb2, 0x31, 0xba, 0xfd, 0xa5, 0x54, 0xec, 0xfb, 0x38, 0x14}}
	return a, nil
}

var _definitionsInfosHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd0\xb1\x4e\xc5\x30\x0c\x85\xe1\x3d\x4f\x61\x79\x87\x89\xcb\xc6\x04\x8c\x6c\x77\xaf\x4c\x62\x2a\xa3\xc6\xa9\x9a\xd3\xa1\x20\xde\x1d\x15\x84\x5a\x10\x0d\xa2\x6b\xf5\xfd\x3a\x4e\x30\x7f\x2a\xc4\xe5\xf1\x59\x23\x98\x38\x2b\x84\x89\x63\x71\xa8\xe3\x22\xa7\x13\xd3\x6b\x20\xc2\x32\x2a\x7d\x7d\x37\xc4\x15\x93\x79\xcf\x81\x28\x59\x1d\x07\x59\x3a\x97\xac\xeb\x9f\xdb\x4f\xfa\x70\x77\xe2\xf0\xf6\x47\x7e\xad\xee\xfa\xbb\xee\x91\x54\x48\xff\xdf\x45\xf7\x67\x69\x14\xab\xbd\xfc\xd8\x60\x8e\xeb\xab\x63\x30\x8f\x49\xa0\xa9\x13\x7c\x67\xb0\xac\x97\x67\xcb\xba\xd1\x8a\x32\x49\xaf\x9b\x1d\x4a\x14\x58\xf1\xf6\xd1\x1b\xab\x10\x58\x85\xc5\x8f\x47\x9b\x1d\xcd\xa5\xbf\xbb\xc6\x81\xef\x01\x00\x00\xff\xff\x02\x23\xd7\x14\xfe\x01\x00\x00")

func definitionsInfosHclBytes() ([]byte, error) {
	return bindataRead(
		_definitionsInfosHcl,
		"definitions/infos.hcl",
	)
}

func definitionsInfosHcl() (*asset, error) {
	bytes, err := definitionsInfosHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/infos.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xbe, 0x6b, 0x10, 0xd3, 0xa5, 0x80, 0x0, 0xf, 0xc9, 0x79, 0x8d, 0xa8, 0xa0, 0x81, 0xeb, 0x15, 0xfd, 0xf3, 0x35, 0x71, 0xda, 0x20, 0x1, 0xc4, 0xff, 0x21, 0x88, 0xb0, 0x57, 0x1f, 0xca}}
	return a, nil
}

var _definitionsOperationsHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x4d\x8b\xdc\x46\x10\xbd\xcf\xaf\x28\x74\x31\x98\x61\x4e\x21\xb7\x3d\x19\x02\x39\x98\x04\xef\x21\x87\x60\x96\x5e\xa9\x34\xaa\x20\x75\x8b\xea\xd2\x8c\xc7\x61\xff\xbb\xa9\xd6\xb7\x46\xd2\x48\xcb\xfa\x60\x16\xf5\xab\xaf\x57\x55\xaf\x7b\x0e\x64\x05\x39\x35\x31\x42\x14\xbb\x92\x90\x23\xf8\xff\x00\x90\xa0\x8f\x99\x4a\x21\x67\xe1\x09\x22\xf2\x20\x19\x42\x0f\x4e\x1d\xc3\x17\x57\xde\x4e\xd1\xe1\x00\xe0\xca\x60\x7d\xab\x6d\xef\xac\xaf\x94\xe7\xa0\xe7\x60\x2c\xfc\xf5\xfa\x1f\xc6\x02\x8e\xa1\xa8\x72\xa1\x32\x47\x70\xf5\x27\xb2\x21\x88\x47\xbe\x50\x8c\xa7\x28\xb8\x2a\x0d\x9b\xc2\x43\xf8\xf7\x04\xff\x46\x9e\xe3\xe8\x08\x51\xe2\x25\xfa\x7e\x00\x78\x3b\xbc\x0d\x4b\x48\x88\x5f\x72\xf2\xb2\x5c\x46\xe5\x31\x09\xd9\x27\xc4\x18\x8b\xe3\x1b\xbc\x1a\xfd\xe6\xc5\xb1\x39\x77\xe1\x41\x1c\xa8\xa7\x26\x39\x0f\x95\x4d\x90\xc1\xa8\x5d\x5f\xb4\x22\x5e\x12\xe2\xb5\xc2\x19\xa5\x62\x5b\x3b\x33\xe0\x4b\x8c\x29\xa5\xb8\xf1\x33\x57\xa2\xfa\xfb\x1e\x4e\x18\x7d\x95\x8b\xef\x4e\x1c\x2d\x15\xed\xf1\x5c\xa0\x15\xff\xd1\xd5\xb7\x7e\x27\xe5\x03\x60\xf1\x8a\x09\x0c\xfa\x52\x03\x51\x53\x9f\x90\xd3\x25\xb7\xc6\xd2\x38\xda\x85\xcc\xbb\x08\xf2\xb3\x04\x91\x4d\xf0\xc7\x4b\x9f\xe1\xe6\x09\x0f\x86\x2d\x43\xb5\xf9\xd6\xe2\xc9\x92\xbc\x8c\x02\xaf\x55\xaf\x68\x5d\x8e\xa5\x80\xf7\x1c\x94\x46\xb2\x25\x12\xf0\xdc\xb0\x50\xa7\x72\x65\x12\xdc\x9e\x4b\x80\x83\xd1\x88\xba\x93\xe2\xf6\x25\xa6\xd1\x8f\x10\xb1\xfe\x17\xac\xf4\x0f\x4f\x3f\x71\xae\x33\x85\xbb\xec\xe9\xc7\x57\x77\xc1\x7e\xf9\xd4\x78\xad\x10\x3d\xd7\xdc\x3f\x4e\x5e\x4a\xc6\x94\x7e\x6c\xdd\xb1\x1a\xbd\x53\x5e\x6a\xa3\x89\xc2\xd4\x1f\x3f\x54\x64\x1a\x97\x7b\x74\xa6\xa9\x7e\xaf\xd4\x6c\xa2\xe1\x4e\x67\x3a\x1e\xb6\x4b\xcd\x24\xbf\xcd\x6a\xf3\x1e\x86\xe6\x85\x86\xd1\xc4\xd9\x9e\x81\xfe\xa6\x06\x7d\xb3\x83\xfd\x5a\xde\x25\xbb\x0b\x25\xba\x9d\x57\x73\x3b\xc2\x35\xa3\x38\x83\xd8\x58\x08\x96\x21\x40\x3d\x50\xfb\x55\xa3\xe2\x7c\xae\xa4\x89\x6a\x86\x13\x6b\x72\x78\x02\xe1\x0a\xdb\xc4\xcd\xab\x63\xd9\x22\x2e\x01\xa8\x13\xfa\x50\x43\x86\x0a\x16\xbb\xa2\xcc\x51\x70\x4b\x84\x16\xdb\x07\x01\x63\x13\x28\x90\xcf\xa8\x04\x15\x8d\xa6\xc1\x1f\x94\x2f\xaa\x40\x17\x7f\xc2\x45\x18\xda\xf9\xfe\x6a\x17\x0a\x43\x56\x0c\xd9\xe6\x69\xa3\x02\x3a\x19\x78\x3f\x78\x30\x31\x1a\x59\x15\xb0\x1a\x01\x06\x2c\x5e\x5b\x47\x7a\x29\x79\x31\x76\x51\xc1\xac\x29\x70\x69\x68\xc5\x31\x8e\x88\x4d\x50\xa9\x5a\xcb\xa1\x46\x28\x99\x7b\xe3\xb7\x31\xce\xb8\xda\xaf\x33\xea\x3c\x5c\x4c\x4e\xc9\x7d\x8c\xb0\x24\xeb\x8a\xbd\xab\x5e\xdd\xfb\x87\xba\x60\xf2\xfc\x3e\x93\x56\x99\x24\x23\x3f\xca\x68\x3a\x23\x62\x84\xbc\x50\x4c\xc6\x6e\xd7\x81\xe7\xd6\xca\xe4\xfd\x80\xf8\xfe\xe3\xfa\xc0\x57\x56\xda\x94\x3e\x79\xe8\xcc\xfc\x11\x7c\x15\x67\x60\x3c\x3c\xd3\x4f\x3c\xc2\x17\x45\x36\x34\xde\x73\xd5\x58\xcd\x0e\x7e\xc3\xc6\xf6\x82\x26\x63\xdf\x17\xb5\x7d\xe2\xba\x9f\x0a\x29\xbb\xe2\xc1\x10\x74\xba\xd6\x36\xba\x40\x31\x89\x11\xb3\xe1\xce\x8c\x2b\x66\x55\x89\xb6\xc8\x4f\x1e\x5a\xeb\x05\xae\xf4\x78\x14\x8d\xd1\x24\xeb\x91\x4c\x12\x48\x4a\x29\xd7\x16\x0d\x7c\xcf\x56\x72\x84\xe8\x3a\x0a\xa0\xdd\x59\x0b\xa0\xe7\xe1\xc9\x26\x99\x5e\xa9\xba\x53\x64\x53\x07\x2e\xed\x1f\x40\xfb\xaf\x04\x77\xff\x8c\x7c\xfc\x70\xd4\xda\x5a\x89\x4d\x97\x25\xb6\xad\x93\xbb\x79\x3b\xa4\x84\x79\x12\x7e\xce\xd4\x51\xe4\x56\xa2\x3a\xf7\xc2\x64\xcf\xd1\xe1\xad\x43\xb4\x4b\xbc\x88\x40\x9e\xf8\x40\x66\xc7\x03\x40\xfd\x32\x1d\x41\xc8\xca\x00\x10\x7a\x3c\x3a\x7f\xae\xe7\xe3\xab\x1e\xf4\xb8\x20\x3f\xeb\xc9\xb8\xf1\xf9\xe7\x7a\xac\x87\x00\x9a\x45\xfc\x29\xc8\x46\x46\x69\x97\x86\xd8\x8f\xc1\xa7\xd3\xe9\xf3\xdf\x86\xc6\x28\xc9\x1e\xe4\x34\x7c\x51\x2e\x82\x26\x1c\x92\x3b\x7d\x43\x93\xe0\x30\x94\xde\x94\x63\x27\xcd\xc5\xfe\xdc\xdc\xd4\x03\xe8\xb4\xca\x16\x3a\x53\x67\xf8\xbd\x30\xed\xce\xef\xbf\x0d\x11\x1c\x3f\xc8\xbe\x57\xb4\xb9\x36\x76\x8a\x3b\xb2\xd0\xfb\x62\x0e\x3d\xcc\x4d\x1f\x4a\xeb\x91\xaf\x77\xbc\xfd\xa3\xab\x11\x9c\xfc\x0a\x00\x00\xff\xff\xce\x73\x45\x80\x71\x11\x00\x00")

func definitionsOperationsHclBytes() ([]byte, error) {
	return bindataRead(
		_definitionsOperationsHcl,
		"definitions/operations.hcl",
	)
}

func definitionsOperationsHcl() (*asset, error) {
	bytes, err := definitionsOperationsHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/operations.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc7, 0x36, 0x41, 0x45, 0xe0, 0x9a, 0x49, 0xc2, 0xce, 0x97, 0x50, 0x6c, 0x83, 0x8d, 0x6c, 0x48, 0xab, 0xdd, 0x90, 0x55, 0xfb, 0xdf, 0x8e, 0xac, 0x53, 0x3c, 0xf, 0x54, 0x2, 0xb1, 0xef, 0xf9}}
	return a, nil
}

var _definitionsPairsHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\x4f\x6f\xd3\x40\x10\xc5\xef\xf9\x14\x4f\x39\xb5\xa8\x4a\x2f\xc0\x8d\x0b\x48\x48\x1c\x10\x48\xc0\x09\x50\xb4\xd9\x1d\xc7\x43\xec\x1d\x33\x3b\x4e\x1a\x10\xdf\x1d\xad\xff\x34\x51\xeb\xa4\x55\x7a\xab\x66\xe6\xbd\xdf\xbe\x9d\x8d\x67\x8d\x63\xc5\xdc\x97\xe4\x37\xa9\xad\xe7\xf8\x3b\x03\x6c\xdf\x10\x86\xbf\x37\x98\x27\x53\x8e\xeb\xf9\x0c\x08\x94\xbc\x72\x63\x2c\xb1\x2b\x34\xe4\xb9\xd8\x63\x9c\x46\x21\x0a\x2b\x39\x41\xe9\x77\x4b\xc9\x6e\xe0\xa5\xad\x02\x56\x84\x36\x51\x80\x4b\xf0\x12\x8d\xa2\xa1\x0e\xaf\x20\x0a\x32\xb7\x9e\xcf\xfe\x8d\x18\xb9\x78\x67\x93\x14\x43\x6d\xf1\x6e\xe8\x79\x8c\x33\x74\x80\x23\x5c\x55\x8d\x0c\x7d\x63\xe1\xda\xca\x1e\x4a\xbd\x75\x7e\xb3\x56\x69\x63\xb8\xba\x3e\x82\x50\x0a\x14\x8d\x5d\x35\xc9\xf1\xe2\x50\x5f\x7c\x56\xd9\x72\x20\x3d\x93\x4d\x29\x3b\x98\xa0\xe9\x3b\x71\x18\xee\xc2\x4a\xa4\x5b\xf6\x94\x93\x48\x26\xea\xd6\x94\xa5\x1a\xa7\x89\xf4\x70\xf2\x23\xc3\x5c\x39\xa0\x52\x0c\x8d\x70\x9c\x0e\x6c\x2c\x5e\x40\x39\x8e\x3e\x9f\xf1\x60\xf6\x80\xf0\xae\x61\xa5\x49\xbe\xcc\x7d\x9a\x68\x57\x52\x84\x95\x84\x56\xf3\x55\x5a\xab\x91\x02\x56\x7b\x28\x39\x5f\x62\xc7\x55\x85\x41\xfc\x31\x4d\xf7\xef\x87\xac\x3f\x72\x94\x66\xcd\xd2\x57\x4c\xd1\x96\xd2\x99\xa5\xe9\xdb\xcd\x8d\x7d\xdf\xe2\xd3\xd0\x37\x01\x49\x4d\x07\x99\xf9\x06\xb5\x61\xf7\x09\x59\x00\xbd\xc2\xc1\x9e\x63\xa0\xbb\x0b\x52\xc8\x82\xdd\x2c\xa4\xe8\x5f\x56\xa2\x75\x4d\xfd\xcc\x93\x87\xae\xc4\xbb\xac\x78\xd9\xab\xce\xde\xa3\xc2\xc9\x45\x18\xad\xa2\xab\xa7\x6f\xf9\x59\x36\x83\x1c\x3a\x95\x7b\x4d\x29\x8a\x44\xd3\xbb\xcd\xd1\x5e\xbf\x3c\x23\xda\x8f\x4e\xfc\x1e\x8d\x4e\xdd\xfe\x24\xa2\x4d\x5e\xfb\xae\x65\x18\x59\x51\x21\x4a\x79\xcb\xc2\x99\x8c\xb3\xf9\x88\xd9\xa8\xfc\x22\x3f\xcd\xf9\xe4\xe9\x87\xe1\xee\xe4\xb7\x1c\x0e\xc4\xe7\xc2\xce\x70\x4b\xef\xaa\x6a\xe5\xfc\x66\x59\xb4\xd1\x4f\x9a\xe7\xc2\xd5\xf7\x9f\xab\xbd\xd1\xf5\xd9\x97\xe6\x0c\x26\x41\x40\x5b\xd2\x3d\x8c\x6b\xc2\xae\x8f\x00\xc1\x99\x43\xa1\x52\x23\x49\xab\xfe\x08\x22\xf1\x9f\x93\xef\xfa\xec\xdd\xe4\xc1\xa7\x6e\x46\x62\xb5\xef\x01\x2a\xae\xd9\x28\xdc\x7f\x37\x32\xd0\x33\x2f\x66\x27\xba\x59\x06\xd6\xcb\xf7\x32\x2b\x20\xb0\x9e\x58\xff\x9b\x21\x31\x69\x48\xfb\x67\xd2\xc1\xaf\x72\x76\x95\x33\xde\xd2\xfd\x76\x05\xd6\x05\x46\x20\x7c\xfc\xf6\xe5\x2b\x92\x39\x35\xec\xd8\x4a\xdc\x76\x06\xbd\xd8\x98\xc3\x60\x97\x8e\xc6\x46\xf5\xf1\x73\x66\x82\x5b\x70\x81\x28\x86\x44\xb6\xc0\x8f\x88\xf7\xa2\x28\xd2\x43\x15\x74\x6c\x31\xc8\x2e\xa1\xa9\x9c\x15\xa2\xf5\x4d\x77\xc4\x15\x95\x6e\xcb\xa2\xe0\x84\x36\x06\x2a\x38\x52\x58\xe4\x10\xff\x07\x00\x00\xff\xff\x02\x6f\xed\xe4\x1b\x08\x00\x00")

func definitionsPairsHclBytes() ([]byte, error) {
	return bindataRead(
		_definitionsPairsHcl,
		"definitions/pairs.hcl",
	)
}

func definitionsPairsHcl() (*asset, error) {
	bytes, err := definitionsPairsHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/pairs.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0x3f, 0x7d, 0x7e, 0xac, 0x4, 0x4f, 0x97, 0x5c, 0x8e, 0x38, 0x8f, 0xee, 0x9f, 0x8e, 0x5c, 0x60, 0x2b, 0x18, 0xf5, 0x28, 0x55, 0x14, 0xd4, 0x7c, 0xe1, 0x51, 0x4d, 0x6d, 0x41, 0x30, 0x70}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
	"definitions/infos.hcl":               definitionsInfosHcl,
	"definitions/operations.hcl":          definitionsOperationsHcl,
	"definitions/pairs.hcl":               definitionsPairsHcl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": &bintree{nil, map[string]*bintree{
		"definitions": &bintree{nil, map[string]*bintree{
			"tmpl": &bintree{nil, map[string]*bintree{
				"function.tmpl":  &bintree{cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl":      &bintree{cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"operation.tmpl": &bintree{cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl":      &bintree{cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl":   &bintree{cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
	"definitions": &bintree{nil, map[string]*bintree{
		"infos.hcl":      &bintree{definitionsInfosHcl, map[string]*bintree{}},
		"operations.hcl": &bintree{definitionsOperationsHcl, map[string]*bintree{}},
		"pairs.hcl":      &bintree{definitionsPairsHcl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
