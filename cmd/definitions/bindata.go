// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/function.tmpl (258B)
// tmpl/info.tmpl (1.714kB)
// tmpl/object.tmpl (1.902kB)
// tmpl/operation.tmpl (982B)
// tmpl/pair.tmpl (2.214kB)
// tmpl/service.tmpl (7.678kB)
// ../../definitions/infos.hcl (1.312kB)
// ../../definitions/operations.hcl (4.712kB)
// ../../definitions/pairs.hcl (2.029kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x4a\xc4\x40\x10\x45\xf7\x39\xc5\x67\xc8\x22\x33\x68\x1f\x40\x70\x15\x74\x25\x32\xa8\x17\x28\xda\x1e\x6d\x4c\x55\x9a\x54\x05\x07\xda\xba\xbb\xf4\x44\x04\x5d\x15\xd4\xff\xbc\xff\x6a\xbd\x46\x7f\x92\x0f\xdc\xdc\xa2\x0f\xf7\xab\xc4\xf0\x48\x9c\xf0\x05\x9b\x47\xe2\x34\xc1\xbd\x3b\xad\x12\x31\x28\x0e\xb5\xa2\xbf\xe4\x5a\x28\x6e\xa5\x23\x69\xa4\xd6\xda\xa3\xd6\x46\x72\x1f\xa2\x9d\x11\x67\xb1\x74\xb6\x30\x6e\xf7\xaa\xa5\x1b\xff\x48\x0b\xb1\x86\x97\x25\xf3\x03\xa9\x85\x67\x5b\xb2\xbc\xdd\xc9\xab\x7e\x66\x7b\x1f\x67\x66\x72\xc7\x5c\x0c\x87\x42\x79\xf9\xb7\xe9\xde\x1e\xcd\xf8\xef\xfa\xf0\xcb\x7f\x4a\xba\x4e\xa6\x3f\xdc\x8b\x58\x07\x00\x85\x24\xc7\x61\x97\xb9\x4c\x89\x93\x18\xb2\xed\xf6\x9d\x7f\x07\x00\x00\xff\xff\x5b\xb1\x71\xf7\x02\x01\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf3, 0x17, 0x45, 0xc4, 0x8, 0xb1, 0x57, 0xf3, 0x99, 0x7b, 0x1f, 0xcd, 0xe4, 0x30, 0x7e, 0x3, 0x30, 0xba, 0x28, 0xed, 0x36, 0x1c, 0xd3, 0x4a, 0x24, 0xfc, 0x10, 0x73, 0xfe, 0xf7, 0xda, 0x75}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x53\x5f\x6b\xdb\x3e\x14\x7d\xd7\xa7\x38\xbf\x10\x7e\xc4\x23\x8d\x5b\x18\x7b\xd8\x9a\xa7\xb6\x1b\x65\xb4\x1d\xb4\xec\x61\x63\x0c\xd9\xbe\x0e\x5a\x2c\xc9\x48\xb2\x69\xe6\xfa\xbb\x0f\xc9\x6e\x9c\xa4\x69\x46\xfb\xb4\x37\xfd\xbb\xe7\x9c\x7b\x74\x6e\x1c\xe3\x4c\x67\x84\x05\x29\x32\xdc\x51\x86\x64\x85\x85\x5e\xef\x21\x94\x23\xa3\x78\x11\xa7\x32\xfb\x80\xf3\x1b\x5c\xdf\xdc\xe1\xe2\xfc\xf2\x6e\xc6\x4a\x9e\x2e\xf9\x82\xe0\x56\x25\x59\xc6\x84\x2c\xb5\x71\x98\x30\x00\x18\xe5\xd2\x8d\x58\xc4\x58\xd3\x1c\xc1\x70\xb5\x20\x8c\x97\x53\x8c\x85\xca\xb5\xc5\xfb\x39\x66\x97\x7e\x75\xc5\x4b\xb4\x2d\x6b\x1a\x8c\x2d\x99\x5a\xa4\x74\xcd\x25\xf9\xfb\xf1\x12\x0f\x70\xfa\x8c\x4b\x2a\xfc\x13\x16\xc7\xf8\x28\xa8\xc8\x20\x54\x46\xf7\x10\x0a\x4d\xb3\x59\xd4\xb6\x48\x84\x63\xa9\x56\xd6\x8b\xd8\xe1\xad\x03\x66\xc7\xde\xb6\x41\xe2\x6e\xf9\xa5\xc7\xf5\x4a\xea\x59\x10\xe1\xe9\xbf\x70\x9b\x72\xcf\x8f\x39\x4e\x4e\x4f\xfd\xed\xb2\x13\x7c\x04\x52\x99\x5f\x46\x8c\x79\x03\xb0\xdb\x43\xdb\xc2\x3a\x53\xa5\x0e\x4d\x4f\xb7\x16\xf4\xf3\x39\x41\x9e\xfb\x6e\x55\xae\x01\x86\x93\xe1\xcd\x9a\x38\xec\xe3\xd8\x77\x8d\xca\x52\x06\x6e\xc1\xfd\x4e\xf2\x12\xb9\x36\xd0\xc9\x2f\x4a\x1d\x6a\x5e\x54\x34\xc5\x31\x24\x71\x65\xa1\xb4\x83\x25\x37\xc5\x49\x7f\x60\xc9\x05\xa8\x80\x23\x94\x7b\xf7\x36\x6c\x25\x24\x2f\xbf\x5b\x67\x84\x5a\xfc\x08\x29\xc8\x79\x4a\x4d\xcb\x7a\xe6\xc3\x06\xfb\x5b\x91\x7b\xf5\x17\xf7\x21\x16\x6d\xcb\xf2\x4a\xa5\x98\x48\xbc\x79\x6a\x55\x84\x4f\xe4\xba\x6e\xcf\x85\x2d\x0b\xbe\xea\x2f\x26\xd1\xb6\x09\xbd\x99\x86\x5c\x65\x14\xe4\xec\x89\x67\x5e\xde\x41\xa2\xdb\x67\x88\xea\x6d\xa2\x68\x5f\x75\xcf\xbe\x87\x16\x73\xd4\x5b\xca\x58\x1f\x92\xc2\x06\x55\xaf\x6d\x7e\xb2\x25\x6a\x8a\x44\xeb\x22\xea\x65\x88\x1c\x72\xe6\x7f\xed\xff\x17\x66\xf9\xbf\x39\x8e\x7b\x8c\xc3\x66\x4e\xe1\x4c\x45\xe1\xe1\x10\xbf\xee\x5b\xbf\x91\xd1\x5f\x7d\xb2\x1e\x93\xb9\x81\xd4\xe1\x6c\xbe\x98\x22\xe7\x85\xa5\x21\xc2\xbd\x2d\x7b\x0b\x43\xb3\x0f\xf8\x7d\xa8\xbe\x1b\x81\xbf\xf9\x7a\x55\x59\xf7\xb2\x60\xbd\xda\xd3\xf9\xb6\xa7\x25\x57\x22\x9d\xe4\xd2\xcd\x6e\x4b\x23\x94\xcb\x27\xa3\x5d\x81\xbe\xfe\x33\x25\x3c\x19\x26\xfd\x31\x4c\x62\x3d\xa6\xa3\x28\xda\xb0\xff\xdf\x8d\x7d\x67\xda\xc3\xfc\x65\xae\xed\x9d\x98\xee\x6b\x77\x7e\x7a\x58\xfe\x09\x00\x00\xff\xff\x2e\x94\xa2\xf0\xb2\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x85, 0x27, 0x2d, 0x89, 0xde, 0xbb, 0x9, 0x4b, 0x47, 0xf8, 0x4d, 0xa, 0xd, 0x94, 0x37, 0x71, 0xd9, 0x7f, 0xdf, 0xb9, 0x39, 0x86, 0x82, 0x1, 0xc, 0xa4, 0xc6, 0xb2, 0xde, 0xe1, 0x1f, 0x7d}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x4d\x6f\xe3\x36\x10\x3d\x9b\xbf\xe2\xd5\x08\x0a\xa9\x70\xa5\xa4\x2d\x7a\x68\xe3\x53\x92\x16\x39\x24\x29\x90\xa0\x87\x16\x7b\xa0\xa5\x91\xc3\x8d\x44\x0a\xe4\xc8\x6b\xaf\xa2\xff\xbe\x20\x25\x7f\x25\xde\xc0\xc1\x5e\xf6\x64\x0e\x39\xf3\xe6\xe3\xbd\xb1\xd2\x14\x17\x26\x27\xcc\x49\x93\x95\x4c\x39\x66\x2b\xcc\xcd\xc6\x86\xd2\x4c\x56\xcb\x32\xcd\xaa\xfc\x4f\x5c\xde\xe1\xf6\xee\x01\x57\x97\xd7\x0f\x89\xa8\x65\xf6\x24\xe7\x04\x5e\xd5\xe4\x84\x50\x55\x6d\x2c\x23\x12\x00\x30\x2e\x2a\x1e\xf7\x27\x56\x15\x0d\x47\xb7\xd2\xd9\x58\xc4\x42\xa4\x29\xfe\x52\x54\xe6\x50\x3a\xa7\x25\x94\x86\x99\x7d\xa4\x8c\x31\x53\x2c\x32\xa3\x9d\xc7\x69\xdb\x9f\x61\xa5\x9e\x13\x4e\x9e\x26\x38\x59\xe0\x8f\x29\x92\xbb\xe0\x77\x43\x2c\xd1\x75\x01\xb5\x8f\xbc\xf6\x40\x6d\x8b\x93\x45\x72\x2b\x2b\xc2\x33\xd8\xfc\x23\x5d\x26\x4b\x74\x1d\xa6\x38\x3b\x3f\xf7\xaf\x4f\x3e\xca\x03\x93\xce\xfd\x31\x16\xc2\x97\x8f\x1e\x16\x8e\x6d\x93\x31\xda\x63\x73\x7b\x37\x55\xf8\xa4\x17\xa6\xaa\x48\xf3\xfa\x01\x69\x8a\xbe\x9a\x17\x0f\x3b\xb9\x7b\xd3\xfb\x3c\xac\x6a\x0a\x55\x77\xdd\xce\xcd\x8b\x52\xc5\x28\x4d\x91\x95\xca\x83\x29\x07\x7e\xa4\x8d\xa5\xf1\xe9\x51\x65\x8f\xeb\x2e\x94\x83\x2c\xd5\x82\x12\x31\x1a\x3c\xee\xd9\x58\x39\x27\x1b\x30\x2a\x38\x36\x96\x5c\xf8\xf1\x04\x5a\x2a\x03\xf5\x15\xb1\xcc\x25\xcb\x24\x94\xe6\x2d\x54\xb2\xfe\xdf\xb1\x55\x7a\xfe\x21\x28\xa1\x90\x19\xb5\x9d\x10\x43\x8b\x33\xc5\x68\x1c\xe5\x90\x0e\xd2\x5b\x95\xac\x51\x18\xbb\xa6\x73\x21\xcb\x86\x26\x38\x45\x45\x52\x3b\x68\xc3\x70\xc4\x13\x9c\x0d\x17\x8e\x38\x40\x05\x1c\xa5\xf9\xf7\xdf\xc4\x28\x37\x9a\x82\xf1\xeb\x2f\x62\x54\xf9\x57\x2f\x9b\xe4\xa6\x61\x5a\x8a\x4e\x88\x63\xb8\xd9\xf2\x72\xb5\x0c\xaa\xec\x3a\x51\x34\x3a\x43\x64\xf0\x53\xef\x1a\xe3\x6f\xe2\x7e\xd8\x97\xca\xd5\xa5\x5c\x0d\x0c\x44\xf1\x3e\x07\x68\x43\x89\x96\xb8\xb1\x1a\x26\x79\x45\x99\x2f\xea\x15\xf8\xfd\x57\xc0\x17\xfb\xe0\xf1\x3a\x62\xc8\x72\x00\x1e\x53\x2c\xf6\x2a\x10\x83\x2c\x4a\x17\xb2\xbf\xa7\xb1\x68\x2f\xf9\x04\x33\x63\xca\x78\x93\xda\xb1\xe4\x28\xee\xc9\x55\x05\x4c\xe2\x69\xf9\xf1\xa8\x05\xfb\x61\x8a\xd3\x01\xe7\xed\x61\x4d\xc0\xb6\xa1\xe0\x38\xc8\x68\xcb\xd5\x7f\x64\xcd\xbf\x5e\x31\x9b\x2d\xda\x42\xf5\x40\xbb\x1e\x13\x14\xb2\x74\xb4\xdd\xaa\x61\x1e\x07\x03\x43\xc7\xcf\xf8\xfc\x56\x7c\xbf\x66\x87\x06\x7a\xd3\x38\x7e\x9f\x5a\xbe\x69\x98\xd3\xfd\x61\xd6\x52\xab\x2c\x2a\x2a\x4e\xee\x6b\xab\x34\x17\xd1\x78\x58\xaf\x1d\x84\xae\xf3\x6b\x3f\x2c\xd8\x38\x8e\x87\x09\x7f\x1f\xca\xed\x9b\x7f\x9e\x1e\xd3\xfd\x41\xa9\xf7\xd4\xec\xfe\x19\xbe\x2a\x3b\x2b\x8d\xa6\x68\xb9\x73\xd3\x6e\xa8\x3d\xe6\x2b\x72\xb0\xfc\xe5\xa1\xa1\xbd\x10\xcc\x10\x1e\xfe\x2e\x43\x84\x3f\x89\x9d\xbe\xc3\xa5\xff\xb0\x75\x5f\x02\x00\x00\xff\xff\x89\x2a\x06\x6f\x6e\x07\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb5, 0x31, 0x99, 0x29, 0x2, 0xc4, 0x9b, 0xd3, 0x91, 0x35, 0x57, 0x52, 0xe1, 0x99, 0xff, 0xb1, 0xec, 0xc7, 0x4, 0x8a, 0x19, 0xaa, 0xa6, 0x88, 0xca, 0x41, 0x3a, 0x9a, 0x1b, 0x95, 0x45, 0x67}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\x4d\x4f\xe3\x30\x10\xbd\xfb\x57\x8c\xa2\x1c\x12\xa9\x4d\xef\x2b\xed\x61\xb5\x1f\xd2\x5e\x20\x82\x03\x47\x64\x5c\x37\x8c\x48\x62\x63\xbb\x55\x2b\xe3\xff\x8e\xc6\x71\x4a\x1a\x15\x8a\x10\x37\x7b\xde\xbc\x99\x37\x33\x4f\x73\xf1\xc4\x1b\x09\xee\xa0\xa5\x65\x0c\x3b\xad\x8c\x83\x82\x01\x00\x64\x42\xf5\x4e\xee\x5d\x36\xfc\x50\x65\xac\x64\xcc\xfb\x25\x18\xde\x37\x12\xf2\xfb\x05\xe4\x08\x3f\x7e\x42\xf5\xbf\x77\xd2\x6c\xb8\x90\x16\x42\x60\xde\x43\x8e\xd5\x1f\x69\x85\x41\xed\x50\xf5\x14\xa4\x0e\x90\x10\xb4\xba\xe5\x87\x2b\xde\x49\x08\x01\x70\x24\x83\x8f\x9d\xa8\x03\x6e\x40\x19\x28\xe4\x33\xe5\xc7\xc4\xcc\x4a\xb3\x43\x21\x4d\x56\xce\xe2\x4e\x19\xde\x50\x3c\x84\xc8\xbf\x75\x06\xfb\xa6\x28\xc1\xc6\xc7\xb1\xa6\xec\xd7\x24\xe4\xf8\x9f\x4c\x21\xbb\x07\xb9\xa6\x49\x72\xac\xfe\xc6\x77\xaa\x35\xe4\xa6\x84\x99\xf0\x77\x0a\x4f\xeb\x2a\x9d\x8a\x5e\x6b\x3b\x32\x56\xab\x58\x51\xe9\x41\xff\x0b\x38\x55\x73\x2b\x78\x4b\xbb\x48\xc8\x6c\x77\xa3\x8a\xb3\x9c\x22\x21\xff\x94\xe9\xb8\xab\xb9\xe1\x1d\xf5\x2a\xe1\x14\xb8\x91\x76\xdb\x3a\x7b\x87\xee\xb1\x1e\x8e\x7e\xb2\xbe\x8c\x28\x17\xf5\x11\xfb\xf7\xe0\x8a\xaf\x48\x9d\xd0\x0b\xe1\xf6\x90\x0c\x56\xa5\xd8\xe2\x9b\x27\xf1\x7e\x3c\x4d\x60\xd3\x3b\x45\x2b\xd6\x1c\x4d\xad\x5a\x14\x07\xf2\xc9\x56\x38\xf0\x9f\xf3\xf6\xf2\xa3\x03\xcf\xe0\x5d\x44\x95\xae\xa8\x9b\xbd\xb8\x1f\x02\x76\x33\x47\xbc\xe9\xfc\x25\x68\xc9\xd3\x49\xce\x3f\x03\x7b\x0d\x00\x00\xff\xff\x03\x6b\xbe\x36\xd6\x03\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbb, 0x61, 0xd5, 0x41, 0x5e, 0xfb, 0x70, 0xf7, 0xe0, 0x1e, 0x87, 0xf6, 0x2e, 0xa2, 0x26, 0xc0, 0xbc, 0x7, 0x36, 0xdf, 0x84, 0xb2, 0xdb, 0xa6, 0xbf, 0x43, 0x74, 0xfb, 0x7c, 0x89, 0x3, 0x0}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\xcf\x8b\xdb\x3a\x10\xbe\xfb\xaf\x98\x67\xc2\xc3\x06\xc7\x7e\xbc\xa3\x4b\x0e\xa5\x9b\x43\x29\xdd\xec\x21\xb4\x87\x65\x29\x5a\x79\xe2\x88\xc8\x92\x90\x14\x6d\x83\xeb\xff\xbd\x48\x4e\xb2\x4e\x9c\xec\x8f\x43\xa1\x3a\x59\x9a\x6f\x66\xbe\xf9\x46\x23\x17\x05\x7c\x92\x15\x42\x8d\x02\x35\xb1\x58\xc1\xe3\x0e\x6a\x79\xdc\x03\x13\x16\xb5\x20\xbc\xa0\x4d\xf5\x01\x6e\x16\x70\xbb\x58\xc2\xfc\xe6\xf3\x32\x8f\x14\xa1\x1b\x52\x23\x28\xc2\xb4\x89\x22\xd6\x28\xa9\x2d\x24\x11\x00\x40\x4c\xa5\xb0\xf8\xd3\xc6\x51\xbf\xad\x99\x5d\x6f\x1f\x73\x2a\x9b\x82\x48\x33\xad\xd0\x15\xb5\x9c\x1a\x2b\x35\xa9\xb1\x70\xff\x17\x6a\x53\x17\x28\x2a\x25\x99\xb0\xf1\x3b\x7c\xa8\xc6\x0a\x85\x65\x84\xbf\xc7\x6b\x6d\xad\xa2\x9c\xe1\xdb\x73\xd9\x9d\x42\x13\x47\x69\x14\x15\x05\x7c\xe4\x1c\x88\x23\x8c\x93\x47\xbe\xaf\x3f\x8f\xa8\x14\xc6\x97\xdf\xb6\x53\xd0\x44\xd4\x08\x93\x1f\x19\x4c\x1c\x94\x33\xc8\xef\x3c\x06\xba\x2e\x64\xf3\x88\x89\x12\xa4\x41\x6f\x9b\xb8\xfc\xd6\x7f\xfe\x02\x2b\xef\x88\xa1\x84\x1f\x70\x45\x01\x6d\x7b\x40\x76\x1d\x3c\x31\xce\xc3\x89\xcb\x6f\xd0\x50\xcd\x94\x65\x52\x3c\x47\x1d\x40\x67\x10\xf7\xc0\xdb\xfe\x20\x0e\xb4\x50\x54\x1e\x9d\x46\xaf\x90\x7c\x0b\xc1\xa2\x80\xef\xcc\xae\xc7\x04\x89\x52\x7c\x07\x27\xd9\xc1\x11\xbe\x45\xb0\x12\x16\x81\xb2\xf1\xde\xcb\x35\x33\x41\x3b\x60\x06\xb6\x06\x2b\x6f\xbf\x58\xdd\x6a\x2b\xe8\x28\x59\xe2\xf6\xe0\xe5\x4e\xf9\x7d\x0a\xa1\x45\xa1\x08\x68\x83\x22\x1a\xed\x56\x8b\xc1\x79\x7f\xec\xd7\x17\xdc\x95\x27\x8a\x65\x47\xd3\x37\xcf\xb5\x04\xd7\x9f\x74\x51\x37\x94\xce\x13\xbf\x23\xda\x60\x5f\xab\x0a\x9f\x04\x36\x53\x07\x0d\x51\xbe\x82\x70\x1b\xc0\x70\x46\x31\xef\x99\x07\x7c\xd2\x78\xc0\xbd\xb1\x9a\x89\xfa\x21\x4c\xd5\x8a\x50\x6c\xbb\x14\x92\xfb\x87\x67\x8a\x19\xa0\xd6\x52\xa7\xfb\x12\xfa\x68\xe5\x0c\x1a\xb2\xc1\x33\xe0\x7f\x19\x70\x14\x49\x93\xa6\xfd\x90\x39\xa2\xbd\x73\x1f\xa0\x3f\x5a\x49\x0d\x9b\x0c\x42\x7b\xfb\x76\x37\xf0\x2c\x82\x77\x50\x0e\x06\x64\x8e\x26\xf3\xc4\x2c\x5d\xc3\x66\x80\x7e\xfd\x5e\x0f\x91\x6f\xb9\xdf\x87\x45\x89\xc1\x93\x66\x94\x27\xe6\x01\x1f\x1d\xb2\xba\x3c\xf1\x3a\xa4\x03\x72\xa3\x50\xc7\x7b\x31\x8e\x15\x74\x75\x30\x03\xed\x46\x36\x4f\x9d\xad\xbc\x7b\xe8\x9a\x3e\xa7\x7a\xcc\xd1\x37\xf2\x5a\xf0\xd0\x45\x98\x41\xdb\x1e\x23\x75\x5d\xa2\x5d\x7a\x11\xcf\x56\x01\xfe\xcf\x0c\x04\xe3\x17\x8a\x3a\xac\xfd\x7d\x16\x8c\x67\xf0\xef\xdc\x77\xf9\x3a\x76\xa1\x4a\x88\xc3\xf5\x8c\xb3\xab\xa0\xb9\xd6\xa5\x4f\x7d\x1d\xf1\xc2\x9c\x9c\x2f\xaf\x77\x79\x78\x76\xf6\xe2\xbf\x90\xfb\x74\xcc\xce\xd7\x58\xf5\xf1\xc9\x60\x2c\xcf\x4d\x15\xae\xc8\x96\xdb\xcb\xed\xf9\x33\x32\xce\xb5\xf6\xc3\xe0\x0b\xff\xca\x4c\x43\x2c\x5d\xff\xed\xb2\x76\x27\xb3\x7d\x41\xca\xab\x32\xfa\xbf\x3b\x13\x5b\x8c\xc6\xa1\xfa\x17\x6b\xe6\x7f\x03\x28\xaa\x24\x6c\xb3\xe1\x1b\x1c\x6a\xdf\x64\x07\xa6\xca\x75\xe9\xfe\xa5\x1d\x3e\xda\x7b\x3f\xc1\x78\xd4\x45\xbf\x03\x00\x00\xff\xff\xc3\x68\x74\x7f\xa6\x08\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x38, 0x4c, 0x4b, 0x10, 0xe5, 0xf1, 0x10, 0x79, 0xd6, 0x6d, 0x42, 0x94, 0x3e, 0x38, 0x6a, 0x55, 0x70, 0xd2, 0x39, 0xe3, 0x35, 0x27, 0x83, 0x91, 0xe4, 0xd6, 0xc9, 0xeb, 0x93, 0xf2, 0x88, 0x4b}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\xdb\x6f\xdb\xba\x19\x7f\xf7\x5f\xf1\x1d\xc1\x67\x90\x02\x47\xda\xf6\xe8\x03\xbf\x2c\x69\xd3\xa2\x5b\x12\x2c\xd9\x0a\xac\x0d\x02\x46\xa2\x6c\xce\x12\xa9\x92\xb4\x12\xcf\xd5\xff\x3e\xf0\x22\x89\x92\x25\xd7\xee\xd2\x0e\x38\x7e\x08\x6c\xf1\xbb\xfe\xbe\x2b\x95\x28\x82\x0b\x96\x60\x58\x62\x8a\x39\x92\x38\x81\xa7\x2d\x2c\x59\xf3\x1b\x4a\x82\x80\x50\x89\x39\x45\x59\x14\xe7\x49\x24\x30\x2f\x49\x8c\x7f\x83\xcb\x1b\xb8\xbe\xb9\x87\x37\x97\xef\xef\xc3\x49\x81\xe2\x35\x5a\x62\xd8\xed\x20\xbc\x46\x39\x86\xaa\x9a\x4c\x48\x5e\x30\x2e\xc1\x9f\x00\x00\x78\x31\xa3\x12\xbf\x48\xcf\xfc\x22\xcc\x9b\x98\x6f\x4b\x22\x57\x9b\xa7\x30\x66\x79\x84\x98\x38\x4f\x70\x19\x2d\xd9\xb9\x90\x8c\xa3\x25\x8e\xca\x3f\x47\xc5\x7a\x19\x61\x9a\x14\x8c\xd0\x9a\xfb\x28\x9e\x98\xe3\x04\x53\x49\x50\x76\x0a\xd7\x4a\xca\x22\xce\x08\x3e\x5e\x97\x45\x44\x18\xfa\xf0\x08\x0e\xb9\x2d\x6a\xf2\x42\x1c\x63\x17\x22\x5c\x78\x93\x60\x32\x29\x11\x87\x47\x68\x3d\x0b\x6f\x39\x2b\x49\x82\xb9\x3d\xa9\x71\xea\x3f\xbf\x33\xc2\xea\x9f\xb5\xc9\xe1\x9d\xf9\xf2\x86\x73\x56\x9f\xb5\x00\x84\x37\x85\x24\x8c\x8a\xc9\x24\x8a\xe0\x7e\x5b\x60\x20\x02\xe4\x0a\x83\xb2\x1f\x52\xc6\x3b\xe1\x8e\x19\x15\xd2\x90\x2d\xc0\x73\x4e\x3c\xcd\x6f\x35\x01\x2a\x11\xc9\xd0\x53\x86\x41\x7b\x15\x5a\x3e\x7f\xb2\xdb\x9d\x03\x47\x74\x89\x61\xfa\x38\x83\x69\x09\xf3\x05\x84\xb7\x8a\x46\x49\x57\x58\x29\x0a\x92\x02\x65\x12\xa6\x65\x78\x95\xb1\x27\x94\xb9\x67\xd3\x82\x2a\x8d\xf3\x85\x3a\xd6\xca\xbf\x82\x64\xb7\x48\xc4\x2d\x5d\x14\x29\xa3\x2d\x65\x55\xc1\x33\xc9\x32\xfd\xa4\x0c\x2f\xb1\x88\x39\xd1\x2e\xd7\xd4\x4a\x7d\x87\xdc\x78\x36\xad\x5d\x7b\x34\x9c\x8d\xa3\xb5\x25\x98\x26\x4a\x84\xf3\x35\x18\x01\x81\xd0\x94\x7d\x0b\x84\xf7\x8a\xe6\x35\x41\xb0\x32\x94\xcf\x44\x14\x19\xda\xd6\x31\x04\xfb\x71\x04\x2d\x46\xc8\x1c\xdf\xcc\x4f\x98\xda\xac\xba\xb6\xfa\x0b\x4e\xa8\x4c\xc1\xfb\x55\xfc\x2a\x3c\xf0\xa7\x65\x78\x17\xb3\xc2\xb5\x27\xd0\x4f\x2f\x90\xc4\x4b\xc6\xb7\x9d\x83\xae\xa5\xf8\x0b\x34\xec\x1e\x7b\xfa\x37\x8e\xa5\xd7\xb5\xb7\xab\x7d\x01\xde\x4d\x97\xaa\x67\xae\x82\x74\xb7\x73\x79\xaa\xea\x50\xa0\xcf\x4f\x09\xf4\xe1\x4c\x1e\x0b\xe0\x31\xc1\x8b\x22\xf8\x48\xe4\x6a\x3f\x83\x51\x51\x64\x5b\xe8\x18\x09\x25\xca\x36\x18\x24\x83\xba\x8c\x55\x15\xaf\x88\xd0\x85\xa7\x4a\x79\x23\x70\xa2\xce\x07\xd3\x3f\xdd\xd0\x78\x4f\x99\x5f\x5a\x62\x5d\xe6\x55\x15\xe8\x0a\x81\x5d\x13\x08\x8e\xe5\x86\x53\x53\x37\xcd\xc3\x0f\x78\x3b\xdf\x2b\xa5\x59\x73\xfc\x4f\x65\xe7\x1c\x4a\xf3\xa4\x9a\x74\xe0\x74\xbe\x8e\x00\x7b\x42\x75\xbc\x56\x71\xfc\xbe\x6b\x23\x8a\xe0\x0a\xcb\xfd\x1c\x5b\x62\x39\x98\x61\x29\x67\x39\xe4\x58\xa2\x04\x49\x14\x6a\x11\x3a\x79\x7a\x42\xfc\x1c\xce\xfa\xb6\xa8\x0c\xf2\x3b\x19\x35\x83\x27\xc6\xb2\x00\x6c\x4e\x95\x33\x60\x6b\x05\x58\x1e\x5e\x61\xe9\x9b\xb2\xed\xcb\x70\xb5\x04\x9a\x8d\xa4\xf0\x0b\x5b\x5b\x19\x6d\x40\xff\x85\x39\xd3\xd9\xe6\xe2\x63\x53\xd6\x58\xe1\x52\xcc\x20\x45\x99\xc0\x2d\x44\x99\x18\x67\xd4\xe6\x7f\x85\xff\x1c\xe2\x6f\x21\x36\x7f\xad\x80\x32\xec\x42\x10\xcc\x40\xf2\x0d\xb6\x84\x75\x48\x84\x41\xb3\x05\x5f\xc7\x44\x8c\xc4\x84\x50\xc9\x86\x62\x22\x8e\x89\xc9\x0c\xf6\xca\x7c\x80\xca\xa2\x6b\x9d\xc8\xc3\xbb\xa3\xe2\x33\x83\x32\x70\x20\x18\xa9\xf4\xc1\x42\x57\xd2\x44\x81\x62\xdc\xa9\x76\x89\xf3\x22\x53\x9b\xaa\xa7\xda\x9a\x07\x39\x5a\xe3\xbb\x4c\x0d\x59\x7f\xa8\xc8\x03\xfd\x10\x3f\x8f\x8b\x10\xae\x8c\x5a\xc2\xb4\x0c\xdf\x6e\x68\x3c\xa2\x59\x41\xab\x5b\xec\xb7\x58\xfb\x3e\x26\x38\x25\xb4\xd5\xdb\x1d\xe3\xca\x69\x42\x13\xfc\x02\x21\xfc\x71\xa4\x51\x4d\x55\x7c\x5d\xc2\x3f\x69\xd9\xf5\x71\x1f\x43\x43\xde\x1b\xf4\xe3\x08\x2a\x23\xa6\xe5\x7e\x97\xb0\x5f\x87\xbc\x38\xec\x84\x7b\x96\xd2\x71\xbb\xa7\x29\xd5\x55\x3f\x4d\xe9\x50\x9b\xae\x6b\xa2\x68\x66\x8a\xcd\x32\xc5\x56\x55\x7f\x43\x05\xac\x58\x96\x08\x40\x6a\x34\x76\x17\x4e\xd3\x56\x10\x3f\xc4\xbc\x80\x1c\x15\x9f\x84\xe4\x84\x2e\x1f\x84\xe4\x9b\x58\xee\xaa\x76\x9e\x45\x11\xfc\x1d\x7f\xd9\x10\x8e\x13\x47\xe6\x00\xe6\x7a\xd0\x5a\x37\x1a\x8e\xfe\x24\x41\x84\x87\x6f\x37\x59\x66\x8b\x65\x0e\x8d\x42\x67\x46\xf6\xfa\x87\xb5\xc2\x0c\x76\x94\x1d\x6f\x45\xc3\xf1\x8a\x56\x5c\x35\x77\xc7\xa3\xcd\x68\x59\x5e\xc3\x8e\x6f\x26\x44\x7d\x6f\x29\x10\x57\x2b\x8f\x11\xa9\x79\xf4\x4d\x66\x8c\xcb\xd0\x39\xdb\x8d\xf6\x0f\x3e\x3d\xa8\x5d\x66\xf2\x03\xd3\x61\x3f\xe5\x3b\xc7\xb6\x2b\xff\x94\xe4\x78\x87\xc4\x61\xb3\xd4\xb8\x3e\xd6\x83\x93\x7d\x78\xbd\xd4\x6a\xd7\x42\xad\xfe\x12\xa7\x68\x93\xc9\xff\xc5\xd3\x3d\x7b\x5f\x29\x7c\x6e\x36\x73\x81\x6f\x47\x92\x53\x8f\x7f\x4d\x01\x67\x7a\x09\x17\xba\x65\xeb\xc1\x7f\x36\x92\xd1\xed\x1e\x70\x48\xb4\xcf\x0a\x59\x67\x79\x00\xfe\x98\xb0\x19\x60\xce\x19\x0f\x9a\x3d\x40\x28\x40\xe7\x0b\xf8\xc3\x08\x43\xaf\x8e\xe6\xa0\xf4\xcc\x5c\x9f\xf5\xee\x22\xf4\xba\x87\xd6\xd8\x77\x9a\xb0\x7e\x05\x95\xa2\x18\xef\xec\x86\x97\x32\x0e\x8f\x6a\x51\x99\x2f\x6c\x26\x68\xab\x77\x43\x21\xf7\x57\x48\xdc\x72\x9c\x92\x17\x63\x8a\x77\x8d\x9f\xbd\xc0\x0d\x01\x49\x95\x30\xb3\x69\x8e\xcf\x85\x4f\x65\xf8\x01\x6f\x1f\x7e\x73\x76\xcb\xfa\x63\xb7\x20\x4a\xb2\x59\xfb\x72\xe5\x1a\x3f\x2b\x0c\xff\x41\xc5\xa6\x28\x18\x97\x38\xd1\xef\x59\x7c\xbb\x01\x41\xb3\x05\x8d\x24\x94\x81\xc3\x6a\x85\x05\x94\xa1\x5e\x2d\x5d\xc4\xac\x97\x8c\x77\x9b\x4a\xa7\x9a\x07\xab\x42\x4d\xc0\x12\x1c\x58\x9b\xa7\x6c\xdd\x66\xba\xbb\xaf\xd8\xa4\x7c\x87\x68\x92\x61\xe0\xfb\x1d\xef\xe4\x6e\xa7\x16\x84\x35\xde\x6a\xa2\x91\xc2\x69\xb1\xd0\xe1\x59\xd4\x98\x18\xe6\xce\xb0\x38\xaf\xaa\x07\x37\xa0\xa7\x05\xa9\xb6\xd0\x44\x68\x58\xfc\x50\xd8\x14\xf8\xfb\x7a\x54\x29\x84\x3a\x89\x94\x7f\xfa\x75\x82\xdd\xf2\xdd\x0e\xd0\x97\xb7\x7f\x0f\xb3\x60\xb3\xfd\x56\x7e\xf2\x8c\xff\xb1\x60\x77\x30\xb0\xfe\xd7\x0d\xb5\x81\xa0\xb9\xd5\xfc\x10\x90\x96\x03\xb3\xe2\x7b\xe6\xc4\x4f\x83\xe9\x98\xa1\x74\x34\x9c\x03\xed\xe3\x7b\x11\x76\x6c\x3b\x68\xd7\x48\x8d\x0d\x28\x6d\x34\x8e\x48\x1a\xed\x82\xfd\xfe\x63\x2b\xd8\x28\x99\xa9\x4a\xb6\xcd\x70\xec\x62\xe5\xdc\xcc\xfe\xdf\x97\xab\xda\x94\x13\x2e\x58\xa3\xee\xbc\xc6\x2d\xeb\xd8\x4b\x96\xb3\x73\x98\xaf\x43\x2f\xca\xa3\xa8\x26\xd7\x6f\x18\x6b\x3b\xcd\x96\x12\x73\xac\x10\x40\x60\xff\x05\x04\x4f\x5b\xe5\x91\xca\x04\xe7\xd5\x84\x2f\xe0\x6c\xb7\x9b\x16\xb4\xaa\x02\x47\xa9\xbf\xdb\x29\x9d\xb7\x88\xa3\x5c\x84\x77\x7a\x1d\xb0\xaf\x8d\xcc\x64\x51\xa9\xe0\x1e\xb4\xf9\x18\xcb\x17\xe5\x9f\xd5\x1a\xfe\x05\xc5\xeb\x25\x67\x1b\x9a\xf8\x41\xff\x25\x8e\x08\x5b\x8d\x1f\x89\x5c\x5d\x18\x1e\x3f\x96\x2f\x33\xe8\x58\x70\x81\xb2\x0c\xf3\xba\x6a\x86\x60\x72\xf8\x0f\x20\x76\xc8\xe7\x9e\x05\x8d\x07\xf6\x59\xcf\xa2\x93\x30\x49\x70\x8a\xb9\x56\xee\x07\xdd\xca\xb5\xed\x4b\xae\xea\x9c\xb0\xe2\x6f\x91\x5c\x19\xa7\xfb\x65\x6b\x9b\x04\xa2\x09\xf8\xf8\x8b\x65\xf6\xbc\xc0\xfe\xa2\xe0\xd9\xff\x77\x74\x97\xad\x96\xdd\xb2\x2c\xc0\x9b\x7d\xf6\x3e\x7b\xde\x90\x82\x5e\x53\x53\x1f\xcc\x39\x2c\x40\x84\x29\xe3\x39\x92\x66\x62\x7b\xc6\x75\xf3\x26\xdf\xd3\xbb\x69\xab\xa0\xaa\xc0\x69\x72\x4e\xf4\xf5\xbe\x53\xc8\xc3\x0b\xb3\xfa\xb0\x42\xce\xac\xde\x83\xab\xb3\x1e\x3d\x81\xdb\xf2\x15\xd3\x2f\x0b\xd5\xaa\x06\xb7\x11\xa7\xf7\x0e\xe6\x64\xb7\x3a\x2f\x50\x8e\x55\x71\x0e\xe4\xe5\x3d\x27\xf9\x5f\x91\x90\x36\x41\xdf\xd0\x44\x3c\xeb\x34\xca\x73\x54\x55\xca\x81\x60\xaf\x57\xfe\x37\x00\x00\xff\xff\x2c\xf3\x3c\x3a\xfe\x1d\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xeb, 0xd3, 0x48, 0x10, 0x6a, 0x4b, 0xd5, 0x5d, 0xbf, 0x53, 0x51, 0x8d, 0x4, 0x5f, 0xf6, 0xd0, 0xe, 0xc0, 0xa0, 0xc2, 0xa6, 0x9d, 0xe6, 0xb6, 0xb9, 0xec, 0xef, 0x49, 0x6e, 0xce, 0xfa, 0xdd}}
	return a, nil
}

var _definitionsInfosHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xb1\x6e\xdb\x40\x0c\xdd\xf5\x15\x0f\x5a\xb2\xc4\x99\x9a\x6e\x9d\xea\x0e\x1d\xda\x2e\x06\x3a\x56\x67\x1d\x6d\xb3\x92\x78\xea\x91\x57\x47\x2d\xfa\xef\xc5\x49\x36\x62\x27\xb1\x82\xd8\x8b\x01\x1e\xdf\xe3\x7b\xe4\x83\x0a\x96\x4d\x40\x19\xd6\x3f\xa9\xb6\x12\x65\x47\xe6\x4a\x94\x75\x10\x23\xb1\x45\xe7\xef\x4b\xfc\x2d\x00\x1b\x7a\xc2\xf1\xf7\x01\xa5\x5a\x64\xd9\x96\x05\xe0\x59\xfb\xd6\x0d\x3f\xc4\x75\x94\x5f\x3e\x4e\xd0\x2f\xcb\xfb\xb2\xf8\xf7\x0a\x7d\x66\x3d\xe1\x3f\xe1\xbd\x84\x24\x73\xdb\xb7\x2a\xfa\xb4\x72\x33\x8c\xec\xcf\xf9\xce\xa8\xe8\xa1\x0f\xd1\x72\xd1\x62\xa2\x02\xa8\x43\xd7\x91\x58\xee\xfa\xbc\x04\x2b\x6c\x47\x48\xc2\xbf\x12\xa1\xa1\x01\x2c\x50\x0b\xd1\x6d\xe9\xee\xf2\xc8\x2c\xec\xca\xa1\x5f\xb3\x27\x56\x10\xdb\x8e\xe2\x38\xdd\xad\x35\xb4\xc9\x08\xbd\xb3\x1d\xc2\x54\x8c\xd4\x3a\xe3\xdf\x87\xa2\x85\xbd\x8b\x5e\x8f\xd2\x6e\x14\xdf\x43\x6c\x96\x1c\xe1\xa9\x27\xf1\x8a\x20\x48\x4a\xf1\x46\xc1\xd2\x27\x9b\x11\xaf\xfc\xe7\xc9\xcd\x58\xec\xfd\xbb\xcb\x00\x73\x71\x4b\x36\xe3\xf7\xc4\xde\x6a\xec\x3d\xee\x55\x87\xae\x65\x69\x30\x31\x60\x33\x7a\x63\xc5\x34\xe1\x16\x41\xda\x01\xf4\xc0\x6a\xd8\xef\x48\x0e\xf5\x69\x08\x2b\x32\x76\xce\xc8\xb4\x8c\x45\xdd\x3a\xd5\xb7\xa5\xf0\x49\x6e\x27\x43\xdf\xc6\xa6\x55\x7e\x7a\xe5\x88\xb9\x07\x75\x48\xad\xc7\x9a\x10\x84\x10\x36\xa8\x36\xdc\x52\x75\x8b\xca\x73\xcc\x7f\x59\x7d\x95\xcf\x59\x25\x69\x24\xec\xa5\x9a\xf1\x92\x7a\xef\x8c\xfc\xc2\xd9\xb9\x11\xe3\x8e\xee\x56\xdc\xd1\x23\xf4\x60\xfb\x11\xdb\x86\xda\x19\x07\x99\x5f\xc1\x33\xd8\xb3\x10\xbf\x94\xe1\x83\xfb\x8b\x24\xfb\x10\x9b\x85\xe7\x78\x3d\x91\x9a\x33\x56\xe3\x7a\xfc\xac\x24\xb1\xd9\x6c\xbe\x8c\x9b\x89\xf4\xff\x00\x00\x00\xff\xff\x07\xca\x71\x05\x20\x05\x00\x00")

func definitionsInfosHclBytes() ([]byte, error) {
	return bindataRead(
		_definitionsInfosHcl,
		"definitions/infos.hcl",
	)
}

func definitionsInfosHcl() (*asset, error) {
	bytes, err := definitionsInfosHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/infos.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfb, 0x5a, 0x61, 0x9d, 0x4a, 0xd0, 0x42, 0x65, 0xdb, 0xe4, 0x4f, 0xcc, 0xa3, 0x4b, 0x2c, 0xb6, 0x57, 0xde, 0x33, 0xaf, 0x73, 0x87, 0x43, 0x28, 0xd2, 0x33, 0x19, 0x3f, 0x66, 0xe0, 0xe2, 0xf8}}
	return a, nil
}

var _definitionsOperationsHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x4d\x8b\xe3\x46\x10\xbd\xfb\x57\x14\xba\x2c\x04\xe3\x53\xc8\x6d\x4e\x0b\x81\x1c\x96\x84\x9d\x43\x0e\x61\x31\x3d\x52\xc9\xae\x20\x75\x8b\xea\x92\xbd\xde\x30\xff\x3d\x54\xeb\xfb\xd3\xd2\x32\x7b\x58\x06\x75\x55\xd7\x7b\xaf\xab\x5e\xb7\x0f\x64\x05\x39\x35\x31\x42\x14\xbb\x82\x90\x23\xf8\xef\x00\x90\xa0\x8f\x99\x0a\x21\x67\xe1\x05\x22\xf2\x20\x57\x84\x2e\x38\x75\x0c\x9f\x5d\xf1\x38\x45\x87\x03\x80\x2b\x42\xf6\xa3\xca\x9d\x64\xdf\x29\xcb\x40\xd7\xc1\x58\xf8\xf3\xed\x5f\x8c\x05\x1c\x43\x5e\x66\x42\x45\x86\xe0\xaa\x4f\x64\x43\x11\x8f\x7c\xa3\x18\x4f\x51\xd8\xaa\x30\x6c\x72\x0f\xe1\xdf\x0b\xfc\x13\x79\x8e\xa3\x23\x44\x89\x97\xe8\xdb\x01\xe0\xfd\xf0\xde\xa7\x90\x10\x9f\x33\xf2\xb2\x4c\xa3\xf4\x98\x04\xf4\x09\x31\xc6\xe2\xf8\x01\x6f\x46\xbf\x79\x71\x6c\x2e\x6d\x79\x10\x07\xba\x53\x0d\xce\x43\x69\x13\x64\x30\x9a\xd7\x91\xd6\x88\x73\x42\xbc\x46\x9c\x51\x4a\xb6\xd5\x66\x06\x7c\x81\x31\xa5\x14\xd7\xfb\xcc\x51\xd4\xfd\xbe\x85\x15\x46\x5f\x66\xe2\xdb\x15\x47\x4b\xa4\x3d\x5e\x72\xb4\xe2\x3f\x9a\x7d\xb3\xef\x88\x3e\x00\xe6\x6f\x98\x40\xef\x5c\xaa\x40\x54\xe8\x23\x71\x5a\x70\x6b\x2a\x0d\xab\xdd\xc8\xfc\x94\x40\x7e\x56\x20\xb2\x09\x7e\x3f\x77\x08\x37\x77\x78\x48\x6c\x14\xaa\xd2\xb7\x92\x27\x4b\x72\x1e\x14\x5e\x63\xaf\xd1\x3a\x1c\x4b\x05\xa7\x1a\x14\x46\xae\x4b\x22\xe0\xa5\x56\xa1\x82\x72\x67\x12\xdc\x8e\x25\x84\x83\xd1\x8a\x3a\x93\xe2\xf6\x01\xd3\xea\x47\x88\x58\xff\x0b\x59\xfa\x87\xa7\x1f\x38\x77\x32\xb9\xbb\xed\x39\x8f\x2f\xee\x86\xdd\xf0\x69\xf2\x1a\x11\x5d\x57\xec\x1f\x67\x2f\x05\x63\x4a\xdf\xb7\xce\x58\x15\xbd\xd3\x5e\xaa\xa4\x91\xc3\x54\x1f\x3f\xd4\x64\xea\x2d\xf7\xf8\x4c\xcd\x7e\xaf\xd5\x6c\x92\x61\xe2\x33\xad\x0e\xdb\xad\x66\x84\x6f\xb3\xdb\xfc\x8c\x42\xf3\x46\xc3\x68\xe2\xeb\x9e\x86\xfe\xaa\x09\xdd\x61\x87\xfc\x35\xdc\x05\xbb\x1b\x25\x3a\x9d\x77\xf3\x38\xc2\xfd\x4a\xf1\x15\x62\x63\x21\x64\x86\x02\x55\x43\xed\x77\x8d\x92\xb3\x39\x4a\x23\xd7\x0c\x2b\xd6\x64\xf0\x02\xc2\x25\x36\xc0\xcd\x9b\x63\xd9\x62\x2e\x21\x50\x3b\xf4\xa9\x87\xf4\x1d\x2c\x76\x79\x91\xa1\xe0\x96\x0a\x4d\x6c\x57\x04\x8c\x4d\x20\x47\xbe\xa0\x0a\x94\xd7\x9e\x06\xbf\x53\xb6\xe8\x02\x6d\xfd\x91\x16\xa1\x69\xe7\xcf\x57\x4f\x21\x37\x64\xc5\x90\xad\x9f\x36\x6a\xa0\xa3\x86\xf7\xbd\x07\x13\xa3\x91\x55\x03\xab\x22\xc0\x80\xc5\x7b\xb3\x91\x5e\x4a\x5e\x8c\x5d\x74\x30\x6b\x72\x5c\x6a\x5a\x71\x8c\x03\x61\x13\x54\xa9\xd6\x30\x54\x11\x2a\xe6\xde\xfa\x4d\x8d\x0b\xae\x9e\xd7\x05\xb5\x1f\x6e\x26\xa3\x64\x5a\x23\x0c\xc9\xba\x63\xef\xe2\xab\x73\xff\xd4\x17\x4c\x96\x4d\x91\x34\xce\x24\x57\xf2\x23\x44\xd3\xb2\xb3\xe6\xe0\xc5\x08\x79\xa1\x98\x8c\xdd\xee\x10\xaf\x4d\x96\xc9\xba\xd6\xf1\xdd\xc7\xf5\x51\x28\xad\x34\x60\x3f\x79\x68\xd3\xfc\x11\x7c\x19\x5f\xc1\x78\x78\xa5\x1f\x78\x84\xcf\x1a\xb9\x48\xa7\xce\x9a\x27\x55\xe9\xb4\x9d\xd0\x68\x20\x3a\x52\xdb\x7b\xb1\xfd\x11\x91\xb2\xcb\x9f\xb4\x47\xeb\x78\x4d\x0b\xe4\x28\x26\x31\x62\x36\xdc\xa6\x71\xc9\xac\xfe\xd1\x90\xfc\xe4\xa1\xc9\x5e\xd0\x4a\x97\x07\xd5\x18\x4d\xb2\x5e\xc9\x24\x41\xa4\x94\x32\x3d\xa2\xde\xde\xb3\x4c\x8e\x10\xdd\xeb\x6e\x2f\x0c\xb1\xef\x5f\x8b\xfa\xc6\x3a\x42\xe4\xd2\xd4\xa3\x2c\x8c\x84\x1d\xa0\xd3\xa3\x5d\x43\xa7\xeb\xe1\x25\x28\x57\xbd\xa9\x75\x54\xc9\xa6\x0e\x5c\xda\xbd\xab\xf6\xdf\x34\x6e\xfa\x3a\x7d\xfe\x1e\x55\x61\x1a\xe7\x4e\x97\x9d\xbb\x11\x89\xb7\x89\x74\x6c\x3b\xf8\x1c\x67\xc6\x7b\xfd\x10\x3b\x2b\x68\xe5\x2c\x8f\x62\xc9\x58\x6c\x3b\x0a\x87\x94\x30\x4b\xc2\x6f\xb0\x8a\x83\x66\x29\x74\x2f\x4c\xf6\x12\x1d\xde\xdb\x88\xc6\x79\x16\x23\x90\x47\x7b\x20\xb3\xe3\x5e\x40\xf5\x9c\x1e\x84\x90\x95\x5e\x40\x68\xbf\xc1\xfa\x6b\xc5\xee\x8b\x2e\x74\x71\x76\xb2\xc9\x6f\xbf\xf6\x97\xd5\x52\xd7\xb1\xba\xe1\xfa\x2f\xd5\x40\xf6\x03\x68\x36\xe2\x0f\x41\x36\x32\x60\x15\x8e\x68\x18\x7c\x3a\x9d\xfe\x32\x34\x0c\x92\xeb\x13\x48\xfd\x47\xf2\x62\xd0\x48\x61\x72\xa7\xaf\x68\x12\xec\x97\xd2\xcb\x7f\xa8\x61\xfd\xe8\xe8\x85\x8c\xc9\xd5\x21\x33\xec\x42\xc3\xad\xaa\xad\x3f\x39\xd6\x41\x77\x0e\x3c\x77\xb6\xed\x0d\x31\xc8\x98\x20\xac\x3d\x6c\x0e\x62\xb8\x26\xe7\xb6\xee\x47\xe9\xfb\x70\x1d\xe6\x7d\xa2\xed\xdf\x3a\xba\x61\x93\xff\x03\x00\x00\xff\xff\xcd\x6b\x15\x61\x68\x12\x00\x00")

func definitionsOperationsHclBytes() ([]byte, error) {
	return bindataRead(
		_definitionsOperationsHcl,
		"definitions/operations.hcl",
	)
}

func definitionsOperationsHcl() (*asset, error) {
	bytes, err := definitionsOperationsHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/operations.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x70, 0xae, 0xb5, 0xff, 0x89, 0x6, 0xe2, 0xae, 0x2, 0x5, 0x12, 0xc5, 0x90, 0xbd, 0x97, 0xd1, 0xed, 0x97, 0x6d, 0xaa, 0xf1, 0xa8, 0x7c, 0x6a, 0x79, 0xb, 0x16, 0x65, 0xc4, 0x7c, 0x92, 0x2f}}
	return a, nil
}

var _definitionsPairsHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\xcf\x6f\xdb\x3a\x0c\xc7\xef\xf9\x2b\x88\x9c\xda\x87\x22\xbd\x3c\xbc\x5b\x2f\x6f\xc0\x80\x1e\x86\x15\xd8\x76\xda\x06\x43\x91\xe8\x86\x88\x22\x6a\x14\x1d\xd7\x1b\xf6\xbf\x0f\x92\x7f\xc4\x6d\xdd\xac\x68\x0e\xb1\x0d\x92\x5f\x7e\x44\x52\xd2\x2a\x1a\x12\x58\x5b\x0e\x8a\x41\x2b\xed\x22\xae\xe1\xd7\x0a\x20\xbf\xc1\x0d\xac\x93\x0a\x85\xfb\xf5\xea\xf7\xdc\xf3\x41\x67\x4e\xc3\xef\x66\xb2\x6d\xde\x0d\x3e\x2b\x00\x87\xc9\x0a\x45\x25\x0e\x33\x0f\xa0\x00\xc6\x7b\x10\xfc\xd1\x60\x1a\x1c\x6b\xd3\x78\x7d\x2a\xf5\xbf\xb1\xfb\x7b\xe1\x26\xb8\x8b\xcb\xc7\x10\x14\x1a\x93\x65\x2b\xe5\x3d\x86\x45\x9e\x91\xfd\x19\x46\x8a\x68\xa9\xee\x40\x77\x08\x73\x2d\x28\x5a\x50\xb3\x80\xa7\xa4\x95\x23\x81\xf1\x3d\x0a\xd6\xf4\xb0\x99\x41\x08\x3a\x0c\x4a\xc6\x2f\x26\xff\xe7\x64\xdf\xdc\x09\x1f\xc9\xa1\x9c\x41\xd9\x71\x0b\xca\x10\x7b\x4f\x38\x05\x17\x9a\x84\x72\x24\x8b\x19\x26\x29\x8b\xb9\xc7\x2c\x15\x8d\x24\x94\x53\xf9\x67\x09\xb3\xe5\x84\x8a\xc1\x45\xa6\xb0\xdc\xb5\xd1\xf8\x06\xca\x31\xf4\xf5\x8c\xa7\x64\x4f\x08\x1f\x22\x09\x2e\xf2\x65\xee\x97\x89\xda\x1d\x86\xd2\xc7\x46\xf2\x3c\x69\x23\x01\x1d\x6c\x3b\x10\x34\x76\x07\x2d\x79\x0f\x83\xf8\x73\x9a\xf2\x79\x9b\xf5\x47\x8e\x9d\x6a\xac\xac\xa7\xbc\x19\xb8\x24\x4b\xcb\xdd\xcd\x8e\xbd\xdf\xe6\xe3\xe0\xb7\x00\x89\x71\x9a\xb3\x41\xad\x94\x2a\x7f\x67\x01\xe8\x15\x4e\xe9\x29\x28\x8a\xc5\xa8\x2c\x8f\xb7\x61\x7e\xa6\xcd\xed\xcc\x3c\xc5\x78\xb6\x65\x78\xdf\xbe\x05\x46\x85\x17\xdb\x38\xa6\x0a\xe6\xb0\xdc\xa3\x57\xa5\x19\xe4\xa0\xa8\x4c\x9a\x5c\xd7\x09\x97\x27\x93\x82\xfe\xf7\xef\x19\xd1\x3e\x74\xa8\x28\xa5\xf1\x38\xb9\x9a\x32\x95\xee\x27\xc4\x7d\x1e\xda\xe2\x32\x84\x6c\xb1\x66\xc1\x3c\x23\xee\xcc\x58\xe4\xe4\x23\x66\xfe\xaf\x22\x7b\xb2\xdd\x52\x67\xee\x0c\xc9\x5d\x6f\x9d\x42\xb2\x7a\x65\x8d\xf7\x5b\x63\xf7\x55\xdd\x04\xbb\xb8\xca\x6c\xb8\xf8\xfa\x7d\xdb\x29\x5e\x9e\x1d\x74\xa3\xa0\xec\x18\xf0\x88\xd2\x81\xd2\x01\xa1\xed\xd7\x00\xce\xa8\x81\x5a\xf8\x00\x89\x1b\xb1\xb3\xf2\x26\xfa\xf9\xe2\xb6\x3a\x5b\xdc\x1c\xf8\xb7\xd2\x72\xf0\x5d\x0f\xe0\xe9\x40\x8a\x0e\x86\x8b\xa4\x00\xbd\xb2\xb2\x83\x62\x65\xbd\x49\xe9\xfc\xe5\xd3\xb2\xec\xf3\xa1\xfc\xf6\x19\xcc\x0a\x90\x8f\xf5\xe5\x51\xbf\x1a\x8a\xcb\x11\xa5\xdf\x12\x65\x9d\xdb\x5c\x66\x6f\x94\x8e\x38\x4d\x92\x23\xd9\xc0\x08\x04\x1f\xbe\x7c\xfa\x0c\x49\x8d\x28\xb4\xa4\x3b\xb8\x2e\x09\x7a\xb1\xb1\x64\x43\xba\x34\x0b\x1b\xd5\xc7\xdb\x4f\x19\xae\x81\x6a\x08\xac\x90\x50\x37\xf0\x2d\xc0\x7b\x16\xa8\xd3\x53\x15\x28\x6c\xc1\x71\x9b\x20\x7a\xa3\x35\xcb\xe1\xaa\x2c\x71\x8b\x3b\x73\x24\x16\xa0\x04\x4d\x70\x58\x53\x40\x57\xee\xad\x3f\x01\x00\x00\xff\xff\xa0\x3b\x93\x59\xed\x07\x00\x00")

func definitionsPairsHclBytes() ([]byte, error) {
	return bindataRead(
		_definitionsPairsHcl,
		"definitions/pairs.hcl",
	)
}

func definitionsPairsHcl() (*asset, error) {
	bytes, err := definitionsPairsHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/pairs.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb1, 0xb6, 0x9a, 0x32, 0x1, 0xb2, 0xe9, 0x53, 0xa5, 0xf9, 0xb9, 0x6f, 0xdc, 0x46, 0x37, 0x76, 0xe7, 0x2, 0x52, 0x9d, 0x5e, 0xa4, 0x3, 0x3c, 0xf4, 0x92, 0x90, 0xf2, 0x8c, 0x9, 0x63, 0x8a}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
	"definitions/infos.hcl":               definitionsInfosHcl,
	"definitions/operations.hcl":          definitionsOperationsHcl,
	"definitions/pairs.hcl":               definitionsPairsHcl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": &bintree{nil, map[string]*bintree{
		"definitions": &bintree{nil, map[string]*bintree{
			"tmpl": &bintree{nil, map[string]*bintree{
				"function.tmpl":  &bintree{cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl":      &bintree{cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl":    &bintree{cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": &bintree{cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl":      &bintree{cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl":   &bintree{cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
	"definitions": &bintree{nil, map[string]*bintree{
		"infos.hcl":      &bintree{definitionsInfosHcl, map[string]*bintree{}},
		"operations.hcl": &bintree{definitionsOperationsHcl, map[string]*bintree{}},
		"pairs.hcl":      &bintree{definitionsPairsHcl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
