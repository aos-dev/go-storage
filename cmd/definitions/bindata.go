// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/function.tmpl (332B)
// tmpl/info.tmpl (1.699kB)
// tmpl/object.tmpl (1.814kB)
// tmpl/operation.tmpl (1.02kB)
// tmpl/pair.tmpl (483B)
// tmpl/service.tmpl (8.807kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcf\x4a\xc4\x30\x10\xc6\xef\x7d\x8a\x8f\x25\x87\xee\xb2\xe6\x01\x04\x4f\x45\x41\x10\x59\xd4\xbb\x0c\xd9\x74\x0d\x36\x93\x92\x4c\xeb\x42\xcc\xbb\x4b\x5a\x75\xf1\xe0\x29\x21\xbf\xc9\xf7\x67\x72\xbe\x42\x24\x3e\x59\xa8\xd7\x3d\xd4\x8c\xeb\x1b\x28\x7d\x37\xb1\x49\x28\xa5\xa9\xd8\xf5\xe0\x20\x50\xb3\xbe\xf7\xe3\x60\xbd\x65\xb1\xc7\x1f\xa8\x7a\x7e\x5f\xfe\xcc\xfa\x91\xbc\xc5\x27\x24\x74\xe4\xed\x50\x07\xfa\x89\x0d\xda\x84\x5d\xce\x50\x17\x7e\xa0\x64\xa8\x0e\x6c\x91\x73\x15\x28\xa5\x35\x72\x86\x09\x2c\xf6\x2c\xba\x5b\xcf\x7d\xa5\xb3\x3e\x50\x24\x9f\xf4\x4b\x74\xfe\x81\x92\xe8\x67\x89\x8e\x4f\xb7\x7c\x4c\x1f\x4e\xde\xba\xe0\x3d\x95\x82\x30\x0a\x76\x23\xb9\xf8\x8f\x55\x7d\xae\x51\xff\xfa\xb7\x8b\xc3\x93\x4d\xd3\x20\xe9\x5b\x79\x89\xd5\x00\xc0\x48\xec\x4c\xbb\xa9\xe5\xdd\xa5\xf9\x66\xdb\xac\xd5\x2d\xff\x6e\x61\xbd\x7e\x05\x00\x00\xff\xff\x3b\x1f\xad\x5f\x4c\x01\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0x53, 0x97, 0x24, 0x27, 0xb1, 0x48, 0xc, 0x9a, 0xff, 0xbf, 0xcc, 0x50, 0x35, 0x3e, 0xf2, 0xfd, 0x26, 0xfd, 0x33, 0xa9, 0x5, 0x3f, 0xa2, 0x4c, 0x9b, 0x7, 0xfa, 0x1a, 0x11, 0xb7, 0xe0}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xf5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x93\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\x64\x27\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x93\xa6\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x63\xb1\xc6\x52\x6f\x62\x08\xe5\xc8\x28\x5e\xa6\x99\xcc\xdf\xe1\xf4\x0a\x97\x57\x37\x38\x3b\x3d\xbf\x99\xb1\x8a\x67\x2b\xbe\x24\xb8\x75\x45\x96\x31\x21\x2b\x6d\x1c\x26\x0c\x00\x46\x85\x74\x23\x96\x30\xd6\xb6\x07\x30\x5c\x2d\x09\xe3\xd5\x14\x63\xa1\x0a\x6d\xf1\x76\x8e\xd9\x79\x58\x5d\xf0\x0a\xde\xb3\xb6\xc5\xd8\x92\x69\x44\x46\x97\x5c\x52\xd8\x1f\xaf\x70\x07\xa7\x4f\xb8\xa4\x32\x1c\x61\x69\x8a\xf7\x82\xca\x1c\x42\xe5\x74\x0b\xa1\xd0\xb6\xdb\x49\xde\x63\x21\x1c\xcb\xb4\xb2\x01\x62\x47\xb7\x89\x35\x3b\x75\xef\x23\xe2\x6e\xfa\x79\xa8\x1b\x48\x9a\x59\x84\x08\xf2\x9f\xb8\xcd\x78\xd0\xc7\x1c\x47\xc7\xc7\x61\x77\xd5\x01\x1f\x80\x54\x1e\x96\x09\x63\xc1\x00\xec\xf6\x30\x4c\xb7\xce\xd4\x99\x43\xdb\x2b\x6f\xd8\xbe\x3d\xc5\x16\x30\x6e\xd6\x55\x57\xcb\xfb\xad\x2f\xf7\x67\x36\x0c\x31\x4e\xd3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\x17\xdf\x29\x73\x68\x78\x59\xd3\x14\x87\x90\xc4\x95\x85\xd2\x0e\x96\xdc\x14\x47\xfd\x07\x4b\x2e\x96\x8a\x75\x84\x72\x6f\x5e\xc7\x50\x42\xf2\xea\x8b\x75\x46\xa8\xe5\xd7\x38\x10\x05\xcf\xa8\xf5\xac\x57\x7e\xde\xeb\xb0\x2b\x8a\x40\x7f\x76\x1b\x27\xc4\x7b\x56\xd4\x2a\xc3\x44\xe2\xd5\xb3\xae\x25\xf8\x40\xae\x6b\xfc\x54\xd8\xaa\xe4\xeb\xde\x8d\x49\x32\xf4\xa3\xf7\xd5\x90\xab\x8d\x82\x9c\x3d\xb0\x2f\x90\xfe\xa9\xe6\xf5\x13\x9a\xcd\x50\x33\xf9\x4d\xa1\x9e\xe9\x11\x18\xcc\xd1\x0c\x78\x59\x3f\x50\xa5\x8d\xac\xff\xc0\x9d\xc9\x00\x75\x8a\x85\xd6\x65\xd2\x13\x89\x02\x72\x16\x6e\xf8\xe5\x9e\x4f\xe0\xc5\x1c\x87\x7d\x8d\xe7\xdd\x9e\xc2\x99\x9a\xe2\x41\xbf\xdd\xe8\x16\xd4\x1d\x7e\x90\xd1\x9f\xc3\x3c\xc6\x84\x82\x97\x96\xf6\xb9\xa5\x8b\xda\xba\xfd\xa6\xe3\xaf\xfb\x9e\x0f\xfb\xae\xb8\x12\xd9\xa4\x90\x6e\x76\x5d\x19\xa1\x5c\x31\x19\x3d\xc6\xfa\x91\x16\x7c\x71\xff\x72\x7f\xdd\xbd\xd8\x3c\xbb\x51\x92\x3c\xb4\xe8\xbf\x99\xdd\xce\xca\xbb\xf9\x7e\x5e\x3e\x3a\xf6\xdd\x3f\x6c\xe7\x97\x76\xbf\xfc\x19\x00\x00\xff\xff\x1a\xaf\xa4\x3e\xa3\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbe, 0xfc, 0x4d, 0xd5, 0xaa, 0x43, 0xd, 0x38, 0x2a, 0xe9, 0x1b, 0x28, 0x33, 0xa1, 0xf, 0x25, 0xb3, 0x72, 0xf8, 0xb5, 0xf, 0xf, 0x28, 0x3d, 0xdd, 0x4d, 0x3d, 0x95, 0x9e, 0xd1, 0x56, 0x3e}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\xc1\x6e\xdb\x3a\x10\x3c\x9b\x5f\x31\xcf\x08\x1e\xa4\x07\x3f\x29\x69\x8b\x1e\xda\xf8\xd4\xa4\x45\x0e\x49\x0a\x24\xe8\xa5\xe8\x81\x96\x56\x0e\x1b\x89\x14\xc8\x95\x6b\x57\xd1\xbf\x17\xa4\x64\xd7\x4e\xdc\xc2\x41\x2f\x3d\x99\x4b\xee\x0e\x77\x38\xa3\x75\x9a\xe2\x9d\xc9\x09\x73\xd2\x64\x25\x53\x8e\xd9\x0a\x73\xb3\x89\xa1\x34\x93\xd5\xb2\x4c\xb3\x2a\x7f\x8b\xb3\x6b\x5c\x5d\xdf\xe2\xfc\xec\xe2\x36\x11\xb5\xcc\xee\xe5\x9c\xc0\xab\x9a\x9c\x10\xaa\xaa\x8d\x65\x44\x02\x00\xc6\x45\xc5\xe3\x7e\xc5\xaa\xa2\x61\xe9\x56\x3a\x1b\x8b\x58\x88\x34\xc5\x7b\x45\x65\x0e\xa5\x73\x5a\x42\x69\x98\xd9\x57\xca\x18\x33\xc5\x22\x33\xda\x79\x9c\xb6\xfd\x1f\x56\xea\x39\xe1\xe8\x7e\x82\xa3\x05\xde\x4c\x91\x5c\x87\xbc\x4b\x62\x89\xae\x0b\xa8\x7d\xe5\x85\x07\x6a\x5b\x1c\x2d\x92\x2b\x59\x11\x1e\xc0\xe6\xa3\x74\x99\x2c\xd1\x75\x68\x94\xe6\xd7\xaf\x30\xc5\xc9\xe9\xa9\x4f\xba\xf7\xc5\x1e\x9f\x74\xee\x97\xb1\x10\x9e\x05\x7a\x74\x38\xb6\x4d\xc6\x68\x0f\x6d\xc1\xa7\xa9\xc2\xdf\x7d\x46\x2e\xb3\xaa\x66\x65\xf4\xfa\x10\x69\x8a\xbe\xb1\x3d\x87\x5b\x3d\xf4\xa1\xcf\xbb\x5d\xd5\x14\x48\x74\xdd\xd6\xce\xa3\x96\xc5\x28\x4d\x91\x95\x8a\x34\x43\x39\xf0\x1d\x6d\x22\x8d\x6f\x77\x2a\xbb\x5b\xb3\x51\x0e\xb2\x54\x0b\x4a\xc4\x68\xc8\xb8\x61\x63\xe5\x9c\x6c\xc0\xa8\xe0\xd8\x58\x72\xe1\xc7\xeb\x69\xa9\x0c\x4e\xa8\x88\x65\x2e\x59\x26\xa1\x35\x1f\xa1\x92\xf5\x67\xc7\x56\xe9\xf9\x97\x60\x8c\x42\x66\xd4\x76\x42\x0c\x34\x67\x8a\xd1\x38\xca\x21\x1d\xa4\x8f\x2a\x59\xa3\x30\x76\xad\xee\x42\x96\x0d\x4d\x70\x8c\x8a\xa4\x76\xd0\x86\xe1\x88\x27\x38\x19\x36\x1c\x71\x80\x0a\x38\x41\x32\x31\xca\x8d\xa6\x10\xbc\x7c\x21\x46\x95\x3f\xf5\x2e\x4a\x2e\x1b\xa6\xa5\xe8\x84\x38\x44\xa3\x9f\xfa\x9c\x2f\x83\x49\xbb\x4e\x14\x8d\xce\x10\x19\xfc\xd7\xa7\xc6\xf8\x40\x3c\xc8\xa4\x5c\x5d\xca\xd5\xa0\x40\x14\xef\x6a\x80\x36\xb4\x68\x89\x1b\xab\x61\x92\x27\x92\xf9\xa6\x9e\x80\xdf\xfc\x02\x7c\xb1\x0b\x1e\xaf\x2b\x86\x5b\xf6\xc0\x63\x8a\xc5\x4e\x07\x62\xb0\x45\xe9\xc2\xed\xcf\x21\x16\xed\x5c\x3e\xc1\xcc\x98\x32\xde\x5c\xed\x58\x72\x14\xf7\xe2\xaa\x02\x26\xf1\xb2\xfc\x7b\xd0\xf7\xf6\xcf\x14\xc7\x03\xce\xef\x1f\x6b\x02\xb6\x0d\x85\xc4\xc1\x46\x43\xee\x56\x67\x0f\xf8\x4e\xd6\x7c\xf2\xde\x09\x15\x85\x2c\x1d\xed\x7d\xe5\xcb\xc6\xf1\xf3\x64\xfc\x23\x96\xd3\x5d\x96\xb5\xd4\x2a\x8b\x8a\x8a\x93\x9b\xda\x2a\xcd\x45\x34\x1e\x7c\xbf\x85\xd0\x75\xfe\x7b\x1c\x9c\x3f\x8e\xe3\x81\xfa\xdf\x61\xa9\x9e\xfc\xc3\xf4\x10\xf6\x7b\x3d\xd8\x8f\xa6\xed\x29\xf5\xa4\xed\xac\x34\x9a\xa2\xe5\xd6\x4e\xbb\x99\x84\x87\x4c\xfb\xbd\xed\x2f\xf7\x3d\xda\xa3\xf9\x3a\x94\x87\x39\x16\x2a\xfc\x4a\x6c\xf1\x0e\x9b\xfe\x0f\xa8\xfb\x11\x00\x00\xff\xff\x3a\x17\x13\x47\x16\x07\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3, 0x1d, 0xe1, 0x85, 0x23, 0xe1, 0xbf, 0xf2, 0x9b, 0x5d, 0x28, 0x13, 0xe5, 0xe, 0x9e, 0x3d, 0x9f, 0xa2, 0xf6, 0x5e, 0x71, 0x3d, 0x6c, 0xa4, 0xb6, 0xc1, 0x26, 0x1f, 0x67, 0xa4, 0x7b, 0xf2}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xcd\x6a\xe3\x30\x10\xbe\xeb\x29\x06\xe3\x83\x0d\x59\xfb\xbe\xb0\x87\x65\x97\x42\x2f\xad\x69\x0f\x3d\x16\x55\x95\xdd\xa1\xb6\xa5\x4a\x4a\x48\x50\xf5\xee\x65\x64\x25\x38\xc6\x25\xa5\xf4\x66\xcf\xcf\xf7\xa3\xf9\x34\x17\xaf\xbc\x93\xe0\x0e\x5a\x5a\xc6\x70\xd0\xca\x38\x28\x18\x00\x40\x26\xd4\xe8\xe4\xde\x65\xd3\x1f\xaa\x8c\x95\x8c\x79\xff\x0b\x0c\x1f\x3b\x09\xf9\xe3\x06\x72\x84\xdf\x7f\xa0\xba\x1e\x9d\x34\x2d\x17\xd2\x42\x08\xcc\x7b\xc8\xb1\xfa\x2f\xad\x30\xa8\x1d\xaa\x91\x8a\xc4\x00\xa9\x83\x56\xf7\xfc\x70\xc3\x07\x09\x21\x00\x1e\x97\xc1\x47\x26\x62\xc0\x16\x94\x81\x42\xbe\xd1\x7c\x1c\xcc\xac\x34\x3b\x14\xd2\x64\xe5\xa2\xee\x94\xe1\x1d\xd5\x43\x88\xfb\xf7\xce\xe0\xd8\x15\x25\xd8\xf8\x71\xc2\x94\xe3\x33\x09\x49\xff\x73\x13\x4a\x93\x8b\x1c\xab\x5b\x1d\x0d\xd0\x44\x5d\x47\xb5\x4a\x4f\x34\xef\xe0\x54\xc3\xad\xe0\x3d\x49\x4e\x9d\x85\xc5\x04\xbc\xbe\x53\xa4\xce\x95\x32\x03\x77\x0d\x37\x7c\x20\xae\x12\xce\x1b\x77\xd2\x6e\x7b\x67\x1f\xd0\xbd\x34\xd3\x6d\xce\x5c\x66\xb4\x72\x51\x1f\x6d\xff\x9b\x8e\xf7\x1d\xa9\xb3\xf5\x42\xb8\x3d\xa4\x1c\x54\xa9\xb6\xf9\x61\x27\xde\x1f\x4f\x13\xd8\xfc\x4e\x31\x31\x0d\x47\xd3\xa8\x1e\xc5\x81\xce\xb9\x15\x2e\x85\xe4\x6f\xdf\xc3\x93\x52\xfd\x17\xf3\x88\x2d\x8c\x72\x25\x4b\xd4\xae\x6b\xd0\x1c\x8d\x85\x56\x99\x79\x18\xfd\x69\xfe\xec\x75\x96\x8c\x6b\xe1\xf9\x3c\x39\xab\xa2\x77\x11\x41\xe9\xaa\x89\x3a\x2e\x81\x50\x63\xb7\xc0\x3d\xc1\xa6\xd7\xbb\xf8\x19\xd8\x47\x00\x00\x00\xff\xff\xf0\x4f\x23\x75\xfc\x03\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xac, 0x77, 0x38, 0x72, 0x67, 0x12, 0xac, 0x40, 0x5c, 0xb6, 0x92, 0x9, 0x6e, 0xd8, 0xf4, 0xde, 0x4d, 0x9e, 0x30, 0x85, 0x95, 0xa4, 0xa1, 0x26, 0x9b, 0x9c, 0xa9, 0xe4, 0xd9, 0x43, 0xc0, 0x37}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x31\x6b\xfb\x30\x10\xc5\x77\x7d\x8a\x87\xf1\x90\x40\x62\x0d\xff\x2d\x7f\x3a\x35\x1d\x4a\x21\xc9\x10\xda\xb1\x28\xf2\x55\x11\xb1\x25\x21\x9f\xdd\x1a\xd7\xdf\xbd\xc8\x4e\x03\xa5\x4b\x35\xe9\x7e\xef\xde\xe3\x9d\x94\xb8\xf7\x25\xc1\x90\xa3\xa8\x98\x4a\x9c\x7a\x18\x7f\x9b\x61\x1d\x53\x74\xaa\x92\xba\x2e\xff\x63\xbb\xc7\x6e\x7f\xc4\xc3\xf6\xf1\x58\x88\xa0\xf4\x45\x19\x42\x50\x36\x36\x42\xd8\x3a\xf8\xc8\x58\x08\x00\xc8\xb4\x77\x4c\x1f\x9c\x89\x79\x34\x96\xcf\xed\xa9\xd0\xbe\x96\xca\x37\xeb\x92\x3a\x69\xfc\xba\x61\x1f\x95\x21\xd9\xfd\x93\xe1\x62\xe4\x99\x39\xe8\xca\x92\xe3\x6c\x72\x15\x7f\xf0\x71\x1f\xa8\xc9\x84\x58\x0a\x31\x0c\x6b\x44\xe5\x0c\x21\x7f\x5d\x21\xef\xb0\xb9\x43\x71\x48\xe5\x30\x8e\x93\x9a\x07\xa7\x6a\x4a\x3c\xef\x8a\x5d\xfa\x7e\x82\xfd\x41\x35\x5a\x55\x69\x47\x4a\xbc\x58\x3e\x0f\xc3\xf7\xe6\x38\xe2\xdd\x56\x15\x54\x08\x55\x8f\xc4\xaf\xbe\x71\x44\xa7\xaa\x96\xc0\x1e\xfb\xc0\xd6\xbb\x46\xcc\xf2\x96\x1a\x1d\xed\x84\x52\xe4\x5b\xeb\xf4\xaf\xd0\x45\x77\xcd\x3a\xf6\x21\xcd\x4b\xa4\x9a\x18\xa6\xab\x23\x71\x1b\xdd\x44\x66\x90\xde\x13\xf5\x1b\x64\x3f\x0a\x64\xab\x9b\xfa\x9c\xaa\x6c\xd0\xcd\x64\x14\xf3\xb5\xe4\xca\xd4\xe0\x2b\x00\x00\xff\xff\x26\xdf\x18\x87\xe3\x01\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0x2f, 0x7a, 0x10, 0x8b, 0x7, 0xa5, 0x4, 0xf7, 0x8a, 0x7d, 0x60, 0x9f, 0xd0, 0xf9, 0xb1, 0xc1, 0xc9, 0x4b, 0x3d, 0x79, 0xdb, 0xc, 0xf8, 0x51, 0xfd, 0xe7, 0xd, 0x79, 0x8d, 0x96, 0x48}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5d\x6f\xdb\xbc\x15\xbe\xf7\xaf\x38\xaf\xe0\x77\x90\x5e\x38\xd2\x86\xdd\x65\xf0\xc5\x96\x76\x59\xd1\x21\x09\x96\x6c\xbd\x58\x87\x80\x91\x28\x9b\x8b\x44\xaa\x24\xad\xc4\x73\xf4\xdf\x07\x7e\x49\x94\x2c\x39\x76\x57\xac\x1b\x9a\x5c\x29\xe4\xf9\xe6\x73\x0e\x1f\xc9\x49\x02\x17\x2c\xc3\xb0\xc2\x14\x73\x24\x71\x06\x0f\x5b\x58\xb1\xf6\x7f\xa8\x09\x02\x42\x25\xe6\x14\x15\x49\x5a\x66\x89\xc0\xbc\x26\x29\xfe\x1d\xbc\xbb\x86\xab\xeb\x3b\x78\xff\xee\xc3\x5d\x3c\xab\x50\xfa\x88\x56\x18\x76\x3b\x88\xaf\x50\x89\xa1\x69\x66\x33\x52\x56\x8c\x4b\x08\x67\x00\x00\x41\xca\xa8\xc4\xcf\x32\x30\xff\x11\x16\xcc\xcc\xd3\x8a\xc8\xf5\xe6\x21\x4e\x59\x99\x20\x26\xce\x32\x5c\x27\x2b\x76\x26\x24\xe3\x68\x85\x93\xfa\xb7\x49\xf5\xb8\x4a\x30\xcd\x2a\x46\xa8\xd3\x3e\x4a\x27\xe5\x38\xc3\x54\x12\x54\x9c\xa2\xb5\x96\xb2\x4a\x0b\x82\x8f\xf7\x65\x2b\x22\x8c\x7c\x7c\x84\x86\xdc\x56\x4a\x3c\x9a\xcd\x6a\xc4\xe1\x1e\xba\x48\xe3\x1b\xce\x6a\x92\x61\x6e\x77\x5c\xde\xf1\xdf\x50\xb1\xc1\x76\xf1\xd6\x58\x72\x32\xce\x7f\x7c\x6b\x1e\xde\x73\xce\xdc\x5e\x97\x4d\x7c\x5d\x49\xc2\xa8\x98\xcd\x92\x04\xee\xb6\x15\x06\x22\x40\xae\x31\xa8\x60\x20\x67\xbc\x77\x76\x29\xa3\x42\x1a\xb1\x25\x04\xde\x4e\xa0\xf5\xad\x27\x40\x35\x22\x05\x7a\x28\x30\x54\x88\x70\x11\x5b\xbd\x70\xb6\xdb\x9d\x01\x47\x74\x85\x61\x7e\xbf\x80\x79\x0d\xe7\x4b\x88\x6f\x94\x8c\xb2\xae\xea\xa4\x24\x48\x0e\x94\x49\x98\xd7\xf1\x65\xc1\x1e\x50\xd1\xed\xa9\xb5\x77\x58\xa4\x9c\xe8\xa8\xfb\x1b\x7f\xdc\x14\x85\x0d\xc7\x46\x37\x77\xe1\xdd\x1b\x89\x36\x58\xe7\x09\xd3\x4c\xd9\xf0\x1e\xa3\xd9\x2b\x41\x4e\x05\xa8\xd6\xe7\x15\x55\x1e\xce\x97\xad\xb3\x17\x90\xec\x06\x89\xd4\xc8\x24\x09\x7c\x22\x72\xad\x82\x31\x92\x4d\x03\x4f\xa4\x28\x00\x55\x55\xb1\x85\x5e\x90\x50\xab\xa3\x05\xc9\xc0\x9d\xd0\x68\xfa\xf9\x86\xa6\x7b\x46\xc3\xda\xda\xd2\x27\xd5\x34\x11\xa8\xf0\x61\xa7\xf3\x56\x7f\x1c\xcb\x0d\xa7\x7a\xb5\x5b\xfc\x88\xb7\xe7\xfb\xa5\x5c\xb4\xfb\x1a\x6b\xe7\x50\x9b\x95\x66\xd6\xab\x9b\xf7\x38\x51\xc1\x0f\x34\x67\x47\x1f\xf3\x2b\x85\xf4\x4c\xa8\x92\x10\x51\x15\x68\xeb\x40\xea\xe2\xed\xec\x2c\x27\xa4\xbc\xa0\x9d\x82\xed\x9a\x2b\xeb\xbe\xe2\x84\xca\x1c\x82\x9f\xc5\xcf\x22\x80\x70\x5e\xc7\xb7\x29\xab\xfc\x70\x22\xbd\x7a\x81\x24\x5e\x31\xbe\xed\x6d\xf4\x03\xc5\x5f\xa0\x55\x0f\xd8\xc3\x3f\x71\x2a\x83\x61\xb8\xbe\xf7\x25\x04\xd7\x7d\xa9\x41\xb8\x49\x02\x97\x58\xee\x83\x69\x85\xe5\x28\x94\x72\xce\x4a\x28\xb1\x44\x19\x92\x28\xd6\x26\x34\x7a\x06\x46\xc2\x12\x7e\x19\xc6\xa2\x20\x14\xf6\x20\xb5\x80\x07\xc6\x8a\x08\x2c\xa8\xea\x05\xb0\x47\x55\xb0\x32\xbe\xc4\x32\xec\x35\xdf\x59\xbf\xf9\x22\xad\x40\x72\xf8\x89\x3d\xee\x43\xd2\x73\xf2\x02\xff\xc2\x9c\x69\xd4\x69\x87\x39\x2a\x04\xb6\xd8\xf3\x34\xea\xb8\x1f\x59\xb4\x00\xc9\x37\x4e\xd0\x55\x4a\x98\x24\xbb\x9a\xe8\x52\x89\x89\x52\x11\x2a\xd9\x58\xa9\xc4\x31\xa5\x5a\xc0\x5e\xfb\x8d\x48\xd9\xd4\x6d\x12\x65\x7c\xfb\x4a\xd9\x16\x50\x47\x5e\xf2\x13\xad\x37\xda\x79\xca\x84\xa8\x50\x8a\x7b\xed\x27\x71\x59\x15\xea\x2e\x0f\xd4\x90\xbe\xa7\xf8\x29\x80\x12\x3d\xe2\xdb\x42\x8d\xf0\x70\xac\xf3\x22\xbd\x88\x9f\xa6\xcd\x08\xdf\x86\xb3\xa0\x07\x0a\x4d\x27\xbc\xab\xc2\xea\x01\xf7\x9a\xea\x30\xcf\x0c\xe7\x84\x76\x7e\x3d\xe3\xf3\x8a\xaa\xc4\x09\xcd\xf0\x33\xc4\xf0\xeb\x89\xe9\x31\x57\xa7\xeb\x0b\xfe\x46\xdb\x76\xdb\xc3\x3a\x1a\xf1\x5e\xc7\x0e\xd3\xef\xa5\x50\x51\x98\xd7\xfb\xad\x6b\x1f\xc7\xb2\x30\x87\xd0\x5d\x26\xfd\x24\xdc\x7a\x4e\xf7\x63\xb6\x1b\xba\x05\xe7\x39\x1d\x9b\x99\xea\xf6\x51\x4e\x0c\x80\xa1\x69\xd4\x83\x52\x69\x1a\x77\xe7\x57\x88\x0b\x9c\x81\x90\x7c\x93\xca\x99\x66\x00\x03\x0d\xa5\xd0\x34\x56\xc2\x42\x58\xd7\x1f\xfe\xfe\x0f\x75\x9b\xb4\xfd\xf6\x17\xfc\x65\x43\x38\xce\xcc\xee\x58\x4d\xd5\x86\x0b\xb7\x95\xb6\xe5\xfa\x13\x12\xda\x29\x22\x7c\x24\x15\x00\x3d\x7c\xba\xcb\x62\x52\xac\xdb\xb6\xad\x38\x31\x47\xcd\x15\x8b\x8a\xe3\xa2\x6d\xa5\xbf\x75\xb4\x47\xc7\x7b\xd9\xf2\xf2\xa3\x02\xee\xc4\xff\xdb\xf5\x75\xb0\xe3\x02\xdf\x4c\x60\x4f\x0f\x62\x2d\x61\x58\x8a\xd0\xdd\xa3\x27\xf0\x2f\x13\x78\x35\xac\xe7\x90\xd5\x90\x55\xd2\x61\x32\x82\x70\xca\xd0\x02\xb0\x62\xc5\x51\x3b\x8c\xc5\xa6\x90\xaa\x6a\xbf\x9a\x50\xe8\xee\x2b\x5d\xf8\x73\x50\x7e\x16\xfe\x5d\xa3\x28\xf3\xbd\xba\x02\xce\x97\xf6\x38\x74\x28\x9d\xa2\x78\x22\x32\x5d\x43\x1d\x7f\xc4\x5b\x6f\x79\xbc\x67\x4e\xec\x1b\xf5\x97\x22\x81\xbb\x73\xf1\x98\xdc\x79\x2b\xd2\xe5\x1a\xbf\x82\x84\x65\x77\x97\x0e\x14\x0f\x6b\xd5\xe6\xcd\xc4\x5c\xcd\x3e\x40\xa2\x5e\x5a\x1e\xaa\xa7\x3b\xf1\xc4\x6e\xfc\xff\xaf\xc1\x58\x77\x9f\xda\xe1\x27\x54\x41\x53\x1e\xc7\xdf\x52\x46\x6b\xcc\xa5\x87\xf8\xe9\x1c\xc3\xe9\x0c\xa3\x9e\x07\x92\x43\x8f\xeb\xfd\xc7\xf5\x3f\xfe\x0c\xf4\xfb\xb1\xaf\xd6\x00\x2e\x54\x59\xf6\xec\x1d\x1d\x4d\xc7\x43\x5b\x9b\x87\x0e\xb4\xf1\xa7\xc3\x09\xbd\xac\x18\xf2\x71\x21\xed\x91\x68\x4a\x8a\x45\xf7\xfe\x7f\x85\x9f\xd4\x18\x74\xf6\xf5\x77\x80\xd0\x30\x8c\x1e\x2e\xce\x1c\x32\xf7\xa6\xb8\xcf\x54\x4d\x48\x0b\xe5\x63\x76\x98\x93\xfd\x6f\x33\x99\x56\xe3\x8d\xcb\xbc\x71\x99\xef\xce\x65\x42\x61\xde\x11\xf5\x66\xf4\xc6\x6c\xde\x98\xcd\x1b\xb3\xf9\xc6\xcc\x46\xc4\x3f\x30\xb7\xd9\xed\x48\x0e\xd4\x7c\x94\x08\xec\x67\xfa\xde\xd7\x47\x2f\x1d\x11\x2b\x9f\x37\xac\x20\xe9\x36\xfe\x7d\x51\xc0\xcb\x4b\x7f\xcd\x1b\x78\xd3\x5b\xc7\x11\x96\x7e\xd2\xd3\xe4\xe5\xaf\x54\x6c\xaa\x8a\x71\xe9\xf8\x4b\x1d\xed\xd9\xd8\x4f\x66\xb7\x53\xf5\x18\xc9\xf2\xeb\xa9\x9e\x35\xab\xbf\xdf\x8c\x3b\x1f\x41\x7e\x86\x73\xb4\x29\x64\x1f\x9c\x47\x1d\xc9\x89\xc7\x31\x06\xc3\xaf\x2f\x6a\x33\x3b\xaa\x98\x29\xa3\x92\xd0\x01\x14\x87\x35\xfa\x21\x59\xb0\xf7\x69\xf3\x7b\x7f\x9d\x74\xa1\x9c\xf0\x85\x72\x32\x9d\xc3\xd9\xf8\x7b\x63\x04\x1f\x2c\xd5\x7a\x85\xe3\x83\xb9\x31\x7c\x70\xeb\xc7\xb1\xdf\xff\x92\xc4\x89\xdf\xad\x89\x00\x17\xa7\xa1\x63\x29\xc7\xaa\x02\x08\xec\x2f\xcd\xf0\xb0\x75\x0d\xe9\x7d\xd9\x37\x04\x6c\x5e\xd1\xa6\x89\x3c\xa7\xa1\xfe\xe4\x19\xdf\x20\x8e\x4a\x11\xdf\x4a\x4e\xe8\xca\xfe\x18\x62\xd0\xaa\x60\xe0\x6f\x74\x28\x4c\xe5\xb3\x7d\xa1\x56\x5e\xe3\x3f\xa0\xf4\x71\xc5\xd9\x86\x66\x61\x34\x44\xaa\xf0\x7a\xf8\x13\x91\xeb\x0b\xa3\x13\xa6\xf2\x79\x01\xbd\x08\x2e\x50\x51\x60\xde\x41\x74\xbf\x4c\x9e\xfe\x81\x8a\x1d\xca\x79\x10\x41\x9b\x81\x5d\x1b\x44\x74\x52\x4d\x32\x9c\x63\xae\x9d\x87\xd1\x6e\x30\x2f\x74\x27\xca\xb5\xc3\x84\x35\x7f\x83\xe4\xda\x24\x3d\x1c\x8d\xf6\x67\x35\x44\x33\x08\xf1\x17\xab\x1c\x04\x91\xfd\xcf\x1b\xaa\xd1\xd8\x45\x67\x46\x89\x5c\xc3\x12\x82\xc5\xe7\xe0\x73\xb0\x37\x7b\x47\x06\xb9\xfa\xc3\x9c\x83\x62\x13\x39\xe3\x25\x92\x66\x8e\x04\x26\x75\x85\x63\xfd\x53\x8d\x92\x69\x1d\x34\x0d\x74\x27\xde\x78\xa7\x5f\x23\xae\x28\xf4\xf4\xab\x81\x13\x64\x95\x5c\xb4\x7e\x0f\xbe\x1c\x68\x5a\xd5\x79\x20\xb9\x56\xfb\x69\xa9\x06\xd5\xe0\x76\x30\xd8\xf3\x06\xf4\x28\x2a\xfb\xfd\x79\x81\x4a\xac\xd9\xd1\x3e\x32\xef\x38\x29\xff\x8c\x84\xb4\x10\x7d\x4f\x33\xf5\x3a\xb0\xbe\x60\x65\x89\x9a\x46\xa5\xe0\x30\xdb\xd5\xf5\xdf\x01\x00\x00\xff\xff\x44\xf2\xee\x7e\x67\x22\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x80, 0x3a, 0x89, 0xaa, 0x8, 0x73, 0x4e, 0xcc, 0x2c, 0x8, 0xa6, 0x19, 0x49, 0x2b, 0x4e, 0x5d, 0xab, 0xb8, 0x9d, 0x34, 0x30, 0x41, 0x21, 0xc5, 0x68, 0x11, 0x66, 0xfd, 0x76, 0xbe, 0x98, 0x6}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl":  {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl":      {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl":    {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl":      {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl":   {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
