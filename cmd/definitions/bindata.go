// Code generated by go-bindata. DO NOT EDIT.
// sources:
// cmd/definitions/tmpl/function.tmpl (567B)
// cmd/definitions/tmpl/info.tmpl (1.699kB)
// cmd/definitions/tmpl/object.tmpl (1.908kB)
// cmd/definitions/tmpl/operation.tmpl (2.051kB)
// cmd/definitions/tmpl/pair.tmpl (483B)
// cmd/definitions/tmpl/service.tmpl (10.268kB)

// +build tools

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\x8f\x25\x87\xae\xec\xe6\x07\x08\x9e\x8a\x82\xb0\xc8\xa2\xde\x25\x64\xa7\x6b\xb0\x99\x94\x66\x5a\x17\x62\xfe\xbb\xa4\x55\x17\x11\x0f\xde\x3c\x25\xcc\xcc\x7b\xf3\x3e\x26\xa5\x2d\x06\xc3\x47\x82\x7a\xda\x40\x4d\xb8\xbc\x82\xd2\x37\x23\xdb\x88\x9c\xab\xd2\x76\x2d\x38\x08\xd4\xa4\x6f\x7d\xdf\x91\x27\x16\x3a\x7c\x36\x55\xcb\x2f\xb3\x66\xd2\x77\xc6\x13\xde\x20\xa1\x31\x9e\xba\x65\xa0\x88\xd5\xa4\x77\xc1\x9a\xb9\xd2\x8e\x6c\x51\x47\x5c\xa4\x04\x75\x56\xec\x4d\x5c\x06\xd6\x48\xa9\x58\xe6\x5c\xa7\xa4\x26\xbd\x37\x83\xf1\x51\x3f\x0e\xce\xef\x4c\x14\xfd\x20\x83\xe3\xe3\x35\x1f\xe2\xab\x93\xe7\x26\x78\x6f\x72\x46\xe8\x05\xbd\x71\xc3\x2f\xa6\xa5\x5c\x62\x7e\xdf\xb4\x2c\xb8\xa7\x38\x76\x12\x3f\x8c\xe7\x00\x15\x00\xf4\x86\x9d\xad\x57\x05\xdc\x9d\xa9\x57\xeb\x6a\xa6\xa2\x2e\xd2\x1f\x71\xac\x9c\x60\x03\x0b\x9d\x44\x37\xcb\xbb\xc1\x3f\x66\xdc\x82\xf8\xeb\xca\x3f\xbe\xef\x01\x00\x00\xff\xff\x41\xc8\xae\xbf\x37\x02\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xfc, 0xb, 0xf4, 0xfb, 0xf, 0x94, 0xca, 0x64, 0x7a, 0xb8, 0x48, 0xf9, 0x69, 0xf1, 0x88, 0x46, 0x59, 0xd3, 0xbc, 0x0, 0x4e, 0xe7, 0x8, 0x1e, 0xdf, 0x27, 0x59, 0x81, 0x75, 0x52, 0xa2}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xf5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x93\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\x64\x27\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x93\xa6\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x63\xb1\xc6\x52\x6f\x62\x08\xe5\xc8\x28\x5e\xa6\x99\xcc\xdf\xe1\xf4\x0a\x97\x57\x37\x38\x3b\x3d\xbf\x99\xb1\x8a\x67\x2b\xbe\x24\xb8\x75\x45\x96\x31\x21\x2b\x6d\x1c\x26\x0c\x00\x46\x85\x74\x23\x96\x30\xd6\xb6\x07\x30\x5c\x2d\x09\xe3\xd5\x14\x63\xa1\x0a\x6d\xf1\x76\x8e\xd9\x79\x58\x5d\xf0\x0a\xde\xb3\xb6\xc5\xd8\x92\x69\x44\x46\x97\x5c\x52\xd8\x1f\xaf\x70\x07\xa7\x4f\xb8\xa4\x32\x1c\x61\x69\x8a\xf7\x82\xca\x1c\x42\xe5\x74\x0b\xa1\xd0\xb6\xdb\x49\xde\x63\x21\x1c\xcb\xb4\xb2\x01\x62\x47\xb7\x89\x35\x3b\x75\xef\x23\xe2\x6e\xfa\x79\xa8\x1b\x48\x9a\x59\x84\x08\xf2\x9f\xb8\xcd\x78\xd0\xc7\x1c\x47\xc7\xc7\x61\x77\xd5\x01\x1f\x80\x54\x1e\x96\x09\x63\xc1\x00\xec\xf6\x30\x4c\xb7\xce\xd4\x99\x43\xdb\x2b\x6f\xd8\xbe\x3d\xc5\x16\x30\x6e\xd6\x55\x57\xcb\xfb\xad\x2f\xf7\x67\x36\x0c\x31\x4e\xd3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\x17\xdf\x29\x73\x68\x78\x59\xd3\x14\x87\x90\xc4\x95\x85\xd2\x0e\x96\xdc\x14\x47\xfd\x07\x4b\x2e\x96\x8a\x75\x84\x72\x6f\x5e\xc7\x50\x42\xf2\xea\x8b\x75\x46\xa8\xe5\xd7\x38\x10\x05\xcf\xa8\xf5\xac\x57\x7e\xde\xeb\xb0\x2b\x8a\x40\x7f\x76\x1b\x27\xc4\x7b\x56\xd4\x2a\xc3\x44\xe2\xd5\xb3\xae\x25\xf8\x40\xae\x6b\xfc\x54\xd8\xaa\xe4\xeb\xde\x8d\x49\x32\xf4\xa3\xf7\xd5\x90\xab\x8d\x82\x9c\x3d\xb0\x2f\x90\xfe\xa9\xe6\xf5\x13\x9a\xcd\x50\x33\xf9\x4d\xa1\x9e\xe9\x11\x18\xcc\xd1\x0c\x78\x59\x3f\x50\xa5\x8d\xac\xff\xc0\x9d\xc9\x00\x75\x8a\x85\xd6\x65\xd2\x13\x89\x02\x72\x16\x6e\xf8\xe5\x9e\x4f\xe0\xc5\x1c\x87\x7d\x8d\xe7\xdd\x9e\xc2\x99\x9a\xe2\x41\xbf\xdd\xe8\x16\xd4\x1d\x7e\x90\xd1\x9f\xc3\x3c\xc6\x84\x82\x97\x96\xf6\xb9\xa5\x8b\xda\xba\xfd\xa6\xe3\xaf\xfb\x9e\x0f\xfb\xae\xb8\x12\xd9\xa4\x90\x6e\x76\x5d\x19\xa1\x5c\x31\x19\x3d\xc6\xfa\x91\x16\x7c\x71\xff\x72\x7f\xdd\xbd\xd8\x3c\xbb\x51\x92\x3c\xb4\xe8\xbf\x99\xdd\xce\xca\xbb\xf9\x7e\x5e\x3e\x3a\xf6\xdd\x3f\x6c\xe7\x97\x76\xbf\xfc\x19\x00\x00\xff\xff\x1a\xaf\xa4\x3e\xa3\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbe, 0xfc, 0x4d, 0xd5, 0xaa, 0x43, 0xd, 0x38, 0x2a, 0xe9, 0x1b, 0x28, 0x33, 0xa1, 0xf, 0x25, 0xb3, 0x72, 0xf8, 0xb5, 0xf, 0xf, 0x28, 0x3d, 0xdd, 0x4d, 0x3d, 0x95, 0x9e, 0xd1, 0x56, 0x3e}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x41\x8f\xeb\x34\x10\x3e\xd7\xbf\xe2\xa3\x5a\x41\x82\xba\xc9\x7b\x80\x38\x3c\x5e\x0f\xe8\x75\x81\x95\xd8\x16\xa9\x85\xbb\xeb\x4c\x5a\xb3\x89\x1d\xd9\x93\xd2\xd2\xcd\x7f\x47\x4e\xd2\x25\xdd\x2d\xa8\x2b\x2e\xdc\x3c\x9e\x99\xcf\xf3\x7d\x33\xb6\xd3\x14\x9f\x6c\x46\xd8\x90\x21\x27\x99\x32\xac\x0f\xd8\xd8\x67\x1b\xda\x30\x39\x23\x8b\x54\x95\xd9\x77\x98\x2d\x30\x5f\xac\x70\x37\xbb\x5f\x25\xa2\x92\xea\x51\x6e\x08\x7c\xa8\xc8\x0b\xa1\xcb\xca\x3a\x46\x24\x00\x60\x9c\x97\x3c\xee\x56\xac\x4b\xea\x97\xfe\x60\xd4\x58\xc4\x42\xa4\x29\x7e\xd0\x54\x64\xd0\x26\xa3\x3d\xb4\x81\x5d\xff\x4e\x8a\xb1\xd6\x2c\x94\x35\x3e\xe0\x1c\x8f\xb7\x70\xd2\x6c\x08\x37\x8f\x13\xdc\xec\xf0\x61\x8a\x64\xd1\xc6\x3d\x10\x4b\x34\x4d\x8b\xda\x65\xde\x07\xa0\xe3\x11\x37\xbb\x64\x2e\x4b\xc2\x13\xd8\xfe\x22\xbd\x92\x05\x9a\x06\xb5\x36\xfc\xed\x37\x98\xe2\xfd\xc7\x8f\x21\xe8\x31\x24\x07\x7c\x32\x59\x58\x76\x25\x75\xd8\xd0\x1e\xbc\x25\xf8\x52\x16\x05\x79\x46\x6d\x34\x87\x12\x37\xf6\xd6\xb3\x75\x72\x43\x89\x48\xd3\x90\x30\x5f\xac\xee\x96\x1f\xc2\x0a\xb8\xed\xd3\xbf\xf0\xc8\x03\x35\x8f\xe5\x4f\x8b\x5f\x7f\x9e\xc1\x58\xc6\x9a\xa0\xb6\x81\x4a\x06\x5b\xb3\xd7\x19\xc1\x93\xdb\x69\x45\x3e\x39\x4f\xc7\xa7\xef\xe7\x41\xe2\x90\x61\x2b\x4d\xd9\x0b\xb7\xf6\x50\xd6\xa8\xda\x39\x32\x0c\x2f\x73\x4a\x44\x68\xc0\xc9\xef\xd9\xd5\x8a\x71\xbc\x56\xbd\x10\xa6\xf3\x20\xdb\x8c\xbc\x72\xba\x62\x6d\xcd\xc9\x89\x34\x45\xa7\xe9\x05\xe7\x40\xbe\xce\x0c\x71\xab\x43\x45\xad\xfe\x4d\x33\xd8\x79\xa1\xb6\x18\xa5\x29\x54\xa1\x03\x83\x5e\xec\x93\x65\xf0\xc7\x56\xab\xed\x80\xad\x2c\xf4\x8e\x12\x31\xea\x23\x96\x5d\x07\x9c\x10\x7d\x7d\x6b\xcd\xa8\x3d\x65\x90\x1e\x32\x58\xa5\xac\x90\x5b\x77\x9a\xa8\x9d\x2c\x6a\x9a\xe0\x1d\x4a\x92\xc6\xb7\xdd\xf0\xc4\x13\xbc\xef\x37\x3c\x71\x0b\xd5\xe2\xb4\x63\x22\x46\x99\x35\xd4\x1a\x5f\x7f\x25\x46\x65\xf0\x86\xc9\x4d\x1e\x6a\xa6\xbd\x68\x84\xb8\x46\xdc\xbf\x85\xbd\xdb\xb7\x17\xa3\x69\x44\x5e\x1b\x85\xc8\xe2\xcb\x2e\x34\xc6\x8f\xc4\xbd\xbe\xda\x57\x85\x3c\xf4\xd2\x45\xf1\xb9\x78\x38\xb6\x25\x3a\xe2\xda\x19\xd8\xe4\x95\xd6\xa1\xa8\x57\xe0\xcb\x7f\x00\xdf\x9d\x83\xc7\xa7\x8c\xfe\x94\x0b\xf0\x98\x62\x77\x56\x81\xe8\xfb\x59\xf8\xf6\xf4\xb7\x10\x8b\xce\x0e\x9f\x60\x6d\x6d\x11\x3f\x1f\xed\x59\x72\x14\x77\xcd\xd5\x39\x6c\x12\xda\xf2\xf9\x55\x77\xfc\xb3\x29\xde\xf5\x38\xff\x2e\xd6\x04\xec\x6a\x6a\x03\x1b\x31\xa4\x35\xa8\xec\x09\x7f\x92\xb3\xbf\x85\xd9\x69\x33\x72\x59\x78\xba\xa8\xf2\x43\xed\xf9\x6d\x6d\xfc\x4f\x2c\xa7\xe7\x2c\x2b\x69\xb4\x8a\xf2\x92\x93\x65\xe5\xb4\xe1\x3c\x1a\xf7\x73\x3f\x40\x68\x9a\x70\x91\xfa\xc9\x1f\xc7\x71\x4f\xfd\xff\x31\x52\x1d\xf9\xa7\xe9\x35\xec\x2f\xce\x60\xf7\xa6\x0c\x9f\x97\x57\x65\xab\xc2\x1a\x8a\xf6\x83\x9d\xe3\xf3\x13\x76\xcd\x0f\x73\xb1\xfc\xfd\x25\xd1\x5e\x3c\x8c\x03\x86\x6d\x42\xf8\xde\x9a\xbf\x02\x00\x00\xff\xff\xe0\xaf\xa2\xb9\x74\x07\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0xa8, 0x6e, 0xe2, 0x32, 0xf5, 0x94, 0xf, 0x33, 0xa9, 0x21, 0x65, 0x6b, 0xd, 0xec, 0xdc, 0x2d, 0xd5, 0xda, 0x1d, 0xb8, 0xc7, 0xec, 0x5a, 0xa5, 0x69, 0xb8, 0x45, 0x20, 0x16, 0x5, 0x35}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6f\xd4\x30\x0c\x7e\xcf\xaf\xb0\xaa\x7b\x68\xa5\xd1\xbe\x23\xed\x01\xc1\x90\x26\xa1\xad\x02\x21\x1e\x51\xae\xf5\xdd\x22\xda\x24\x38\xbe\xdb\xa6\x92\xff\x8e\x92\x76\x77\xbd\xd2\x51\x0e\x10\xe2\x2d\x89\xed\xcf\xf6\x97\x7c\xb1\x95\xd5\x17\xb9\x45\xe0\x47\x8b\x4e\x08\xd5\x5a\x43\x0c\xa9\x00\x00\x48\x2a\xa3\x19\x1f\x38\xe9\x77\xca\x24\x22\x13\xa2\xeb\x5e\x00\x49\xbd\x45\x58\x7d\xbe\x80\x95\x82\x97\x97\x90\x5f\x6b\x46\xda\xc8\x0a\x1d\x78\x2f\xba\x0e\x56\x2a\x7f\x83\xae\x22\x65\x59\x19\x1d\x0e\x43\x06\x18\x2c\xca\xd9\x46\x3e\xde\xc8\x16\xc1\x7b\x50\x4f\xc1\xd0\xc5\x4c\x21\x83\xda\x80\x21\x48\xf1\x6b\xf0\x8f\x8e\x89\x43\xda\xab\x0a\x29\xc9\x26\xe7\x6c\x48\x6e\xc3\xb9\xf7\x31\xfe\x03\x93\xd2\xdb\x34\x03\x17\x17\x07\x4c\xd4\x75\x28\x64\xd8\x8f\x9b\x30\x36\x74\xb1\x52\xf9\xad\x8d\x0d\x04\x8f\xa2\x88\xd5\x1a\xdb\xa7\xf9\x06\x6c\x4a\xe9\x2a\xd9\x84\x92\x07\xcb\xa4\xc5\x01\x78\x3e\x26\x1d\x2c\x6f\x0d\xb5\x92\x4b\x49\xb2\x0d\xb9\x32\x38\x35\xbc\x47\xb7\x6b\xd8\x7d\x52\x7c\x57\xf6\x77\x73\xd2\x65\x12\x42\xc6\x2c\x69\xc3\x31\xfa\x9d\xe9\xd3\x2c\xd6\x1e\x90\x5f\xf7\x17\xfb\x3b\x6d\x8c\xc2\xd3\x8a\x1f\x60\x78\x23\xf9\x70\x76\xf1\xd7\xbb\x7c\xba\xb6\xd3\x5d\xdc\xb6\x3b\xc7\x57\xed\x1a\xeb\x8f\x5a\xb5\xb6\xc1\x16\x35\x63\x3d\xf7\xc6\xd2\x4c\x78\x21\x8a\x02\x16\x3d\x23\x28\xac\x11\x30\x00\xd7\x58\x03\x1b\xb8\x93\x7b\x84\x8d\xa1\x7b\x49\x35\x54\xa6\xb5\x92\xd5\xba\x41\x38\x60\xc9\xc0\x9d\xcb\xfb\x47\xbe\x9c\xc3\x31\xed\x2a\x86\xce\x0b\xb1\xd9\xe9\x0a\x52\xb7\x1c\x94\x9d\xd5\xee\xb9\xd8\x13\xcd\x0c\x4a\x24\xe4\x1d\x69\x48\x16\x01\x92\x40\xef\xcf\x35\x75\x46\x31\xff\x44\x44\xa7\x9f\xcd\xac\x8c\x90\x08\x2e\xe1\x06\xef\x6f\x2d\x52\xbc\xe2\x1b\xc3\xd7\xc7\xea\xaf\x88\x0c\xa5\xc9\xb8\x5a\xef\x93\x6c\xfa\xe1\x1c\x99\x14\x5e\x3c\x97\xef\x0c\x7a\xfe\x03\x6d\x0e\xe4\xfd\x09\x41\x23\x46\x9e\x88\x1a\xaf\x8e\xdf\x75\xd4\x54\x29\x15\x95\xa6\x51\xd5\xe3\x41\x3c\x11\xe5\x55\xd3\xc0\xda\x98\xe6\x17\xc7\x52\x60\x1e\x67\x46\x4a\x30\x17\x05\x58\xa9\xc8\x05\xa1\x8f\x67\x52\x77\xf0\x3f\x21\x7b\x9a\x71\x6e\x86\x3c\x3f\x40\x66\x8b\xde\x47\x04\x63\xf3\x32\xd6\xb1\x04\x12\x0c\xfb\x09\xee\x01\xf6\x47\x22\xe7\x97\x5e\x7c\x0f\x00\x00\xff\xff\xb4\x30\x5a\x77\x03\x08\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0x7e, 0x5d, 0x16, 0x44, 0x6e, 0xcf, 0xa, 0x57, 0xf1, 0xe8, 0x1c, 0xfb, 0x8, 0x6e, 0x26, 0x89, 0xc2, 0x13, 0x34, 0xfd, 0xea, 0x2a, 0xe1, 0x4c, 0x12, 0xa1, 0x32, 0x35, 0xc4, 0x9d, 0x75}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x31\x6b\xfb\x30\x10\xc5\x77\x7d\x8a\x87\xf1\x90\x40\x62\x0d\xff\x2d\x7f\x3a\x35\x1d\x4a\x21\xc9\x10\xda\xb1\x28\xf2\x55\x11\xb1\x25\x21\x9f\xdd\x1a\xd7\xdf\xbd\xc8\x4e\x03\xa5\x4b\x35\xe9\x7e\xef\xde\xe3\x9d\x94\xb8\xf7\x25\xc1\x90\xa3\xa8\x98\x4a\x9c\x7a\x18\x7f\x9b\x61\x1d\x53\x74\xaa\x92\xba\x2e\xff\x63\xbb\xc7\x6e\x7f\xc4\xc3\xf6\xf1\x58\x88\xa0\xf4\x45\x19\x42\x50\x36\x36\x42\xd8\x3a\xf8\xc8\x58\x08\x00\xc8\xb4\x77\x4c\x1f\x9c\x89\x79\x34\x96\xcf\xed\xa9\xd0\xbe\x96\xca\x37\xeb\x92\x3a\x69\xfc\xba\x61\x1f\x95\x21\xd9\xfd\x93\xe1\x62\xe4\x99\x39\xe8\xca\x92\xe3\x6c\x72\x15\x7f\xf0\x71\x1f\xa8\xc9\x84\x58\x0a\x31\x0c\x6b\x44\xe5\x0c\x21\x7f\x5d\x21\xef\xb0\xb9\x43\x71\x48\xe5\x30\x8e\x93\x9a\x07\xa7\x6a\x4a\x3c\xef\x8a\x5d\xfa\x7e\x82\xfd\x41\x35\x5a\x55\x69\x47\x4a\xbc\x58\x3e\x0f\xc3\xf7\xe6\x38\xe2\xdd\x56\x15\x54\x08\x55\x8f\xc4\xaf\xbe\x71\x44\xa7\xaa\x96\xc0\x1e\xfb\xc0\xd6\xbb\x46\xcc\xf2\x96\x1a\x1d\xed\x84\x52\xe4\x5b\xeb\xf4\xaf\xd0\x45\x77\xcd\x3a\xf6\x21\xcd\x4b\xa4\x9a\x18\xa6\xab\x23\x71\x1b\xdd\x44\x66\x90\xde\x13\xf5\x1b\x64\x3f\x0a\x64\xab\x9b\xfa\x9c\xaa\x6c\xd0\xcd\x64\x14\xf3\xb5\xe4\xca\xd4\xe0\x2b\x00\x00\xff\xff\x26\xdf\x18\x87\xe3\x01\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0x2f, 0x7a, 0x10, 0x8b, 0x7, 0xa5, 0x4, 0xf7, 0x8a, 0x7d, 0x60, 0x9f, 0xd0, 0xf9, 0xb1, 0xc1, 0xc9, 0x4b, 0x3d, 0x79, 0xdb, 0xc, 0xf8, 0x51, 0xfd, 0xe7, 0xd, 0x79, 0x8d, 0x96, 0x48}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4b\x93\xdb\xb8\xf1\xbf\xeb\x53\xf4\xaa\x74\x20\x5d\x1a\xf2\xff\xaf\xdc\x26\xa5\x43\x32\x76\x1c\xd7\x6e\xec\xa9\x9d\x49\xf6\x90\x4d\x4d\x41\x64\x53\x42\x06\x04\xb8\x00\xc4\xb1\x4a\xe6\x77\x4f\xe1\xc1\xa7\x48\x8d\xe4\x75\x79\xe7\x30\x73\xb1\x04\x74\x37\xba\x7f\xfd\x04\xe4\x38\x86\x1b\x91\x22\x6c\x90\xa3\x24\x1a\x53\x58\xef\x61\x23\x9a\xef\x50\x52\x02\x94\x6b\x94\x9c\xb0\x38\xc9\xd3\x58\xa1\x2c\x69\x82\x7f\x86\xb7\x9f\xe0\xe3\xa7\x7b\x78\xf7\xf6\xc3\x7d\x34\x2b\x48\xf2\x48\x36\x08\x87\x03\x44\x1f\x49\x8e\x50\x55\xb3\x19\xcd\x0b\x21\x35\x04\x33\x00\x80\x79\x22\xb8\xc6\xcf\x7a\xee\xbe\x51\x31\x9f\xb9\x4f\x1b\xaa\xb7\xbb\x75\x94\x88\x3c\x26\x42\x5d\xa5\x58\xc6\x1b\x71\xa5\xb4\x90\x64\x83\x71\xf9\xa7\xb8\x78\xdc\xc4\xc8\xd3\x42\x50\x5e\x73\x9f\xc5\x93\x48\x4c\x91\x6b\x4a\xd8\x25\x5c\x5b\xad\x8b\x84\x51\x3c\xff\x2c\x8f\x88\x72\xf4\xd1\x19\x1c\x7a\x5f\x18\xf2\x70\x36\x2b\x89\x84\x07\x68\x35\x8d\x6e\xa5\x28\x69\x8a\xd2\xef\xd4\x76\x47\xff\x22\x6c\x87\x7e\xf1\xce\x49\xaa\x69\xea\xf3\xa3\x3b\xf7\xe1\x9d\x94\xa2\xde\x6b\xad\x89\x3e\x15\x9a\x0a\xae\x66\xb3\x38\x86\xfb\x7d\x81\x40\x15\xe8\x2d\x82\x51\x06\x32\x21\x7b\xbe\x4b\x04\x57\xda\x91\xad\x60\xde\xd9\x99\x5b\x7e\x7f\x12\x90\x92\x50\x46\xd6\x0c\xa1\x20\x54\xaa\xc8\xf3\x05\xb3\xc3\xe1\x0a\x24\xe1\x1b\x84\xc5\xc3\x12\x16\x25\x5c\xaf\x20\xba\x35\x34\x46\xba\xc1\xc9\x50\xd0\x0c\xb8\xd0\xb0\x28\xa3\xf7\x4c\xac\x09\x6b\xf7\xcc\xda\x5b\x54\x89\xa4\x56\xeb\xfe\xc6\xdf\x76\x8c\x79\x75\xbc\x76\x8b\x5a\xbd\x07\x47\xd1\x28\x5b\x9f\x84\x3c\x35\x32\x3a\x1f\x43\x6b\xc8\xa7\xf5\x7f\x31\xd1\xff\x40\x4d\x52\xa2\x09\x18\x1f\xa1\xaa\x11\x85\xbc\x5e\x37\xf0\x08\x4b\x1a\xcd\x2c\x5e\x47\x7c\x72\x97\x68\x38\x8c\xdb\xfd\x81\x67\xe2\x4c\xbb\xaf\x60\x51\x70\xa3\xfc\xf5\xaa\xb1\xe3\x0b\x68\x71\x4b\x54\xd2\xa7\xa3\x99\xc5\x88\xaa\x82\x91\x7d\xed\x36\xf0\x7f\x1d\x41\xab\x09\xb2\x0e\x14\xcf\x42\xee\x24\x55\x95\xa7\xb2\x61\x71\x2c\xa6\xf3\xb1\xb2\xe0\xbe\x47\x3d\xc0\xe9\x89\x32\x06\x1b\xd4\x43\xfc\x32\x29\x72\xbf\x16\xcd\xe2\xd8\x30\x5f\xc1\xfd\x96\x2a\xc8\x76\x3c\xb1\xea\xa8\xad\xd8\xb1\xd4\xe2\xb6\x46\x48\x08\x63\xae\x58\xd5\xbe\xa2\x79\xc1\x30\x47\x53\xaa\xa2\x9a\x1f\x41\xa2\xde\x49\x4e\xf9\x66\x78\x22\x55\x20\x91\xa4\x20\x38\xdb\x03\xe1\xe9\x40\x7e\x2e\x52\x9a\x51\x4c\xa3\x99\x51\xe0\xd8\x92\x40\xc0\x1b\xb7\x12\x0e\x25\x1f\x2c\x2e\x22\x5f\x82\x78\x34\x6e\x14\xd1\x7b\xd4\x3e\x61\x1a\xf6\xd0\x12\xd1\xcc\xd0\x1c\x1a\xb7\x39\x6d\x41\xe4\x51\xd0\x17\xea\xc8\x1d\xe2\x9e\xa8\x4f\x70\xa8\x31\x57\xe3\x98\xab\x63\xcc\x29\xd7\xe2\x3c\xcc\x2d\x46\x2d\xe8\x82\x27\xb8\x84\x82\x21\x51\x08\x39\x79\x44\x50\x3b\x89\x40\x18\x03\x2b\x78\x4b\x14\xac\x11\x39\x3c\x49\xaa\x35\x72\x58\x63\x26\x24\x1a\x1d\x3c\x9c\x47\x4a\xb6\x70\x2e\xa1\x89\x84\xc6\xf8\x1a\xd2\xe8\xee\x18\x48\x91\x87\xc6\xf2\xd3\xf5\x66\x2a\xe7\xce\xc9\xb7\x38\x86\x5f\xa8\xde\xf6\xd2\xc0\x42\x4a\x8a\x82\xed\xa1\x57\x6f\xa0\x34\x55\x1a\x0c\xae\xbe\xd8\x8e\xa6\x95\xc5\x60\x28\x34\x28\xfb\xd9\x15\x82\x51\xff\x38\x38\xcc\x6a\xbb\xf8\x23\xee\xaf\x8f\xab\xe2\xb2\xd9\xb7\x6d\xe3\x1a\xca\xa5\x0f\xa0\x5e\x96\x76\x3e\x8e\x03\x68\xc4\xa9\x82\x24\xd8\xab\x5e\x1a\xf3\x82\x99\xd9\x60\x6e\x8a\xfe\x03\xc7\xa7\xb9\x0d\x83\x3b\x66\xf2\x30\x18\xc3\x31\xb4\x8b\xf8\x34\x2d\x46\x75\x65\xd4\x12\xac\x55\x3c\x99\x38\xbd\x0e\xd3\x67\x59\x87\x76\xa6\x98\x51\xde\x9e\xdb\x2f\xbe\xc6\x70\xca\x53\xfc\x0c\x11\xfc\xdf\x44\xed\x5d\xd8\x38\xef\x10\xfe\xbf\x95\x1d\xc7\xf0\x16\x33\xb2\x63\xda\x39\x16\xaa\xca\x85\x20\x55\xe6\x4c\xb3\xe1\xfa\xa4\xed\x27\xaa\xc0\x84\x66\x34\x01\x62\xad\x70\x7d\x65\x9c\xbf\x69\x2f\xb5\x02\x43\x4f\x39\x85\x7a\xa5\xfc\x38\x94\xe1\xdf\xff\x31\xe2\x86\x65\xbb\x9a\x9d\x27\x76\xdc\x6f\x3d\xec\x0b\x0e\x8b\xf2\x64\x63\x38\xc2\xdf\x85\x4f\x9b\x8b\x7d\xf8\xeb\xf5\x8c\x1f\xa3\xed\x37\x6c\x8d\x5d\x64\x7c\x2c\x77\x8d\x47\xcc\x21\x0d\x9c\xe6\x83\x61\xa9\xaa\x7a\xfa\x29\x88\x54\x98\x7a\x84\x9d\x0f\x06\x1c\x86\xa1\xaa\xfa\x3e\x70\x5e\xf4\x78\xda\x95\x38\x86\x9f\xf1\xb7\x1d\x95\x98\xba\xdd\x31\x50\xcd\x46\xad\x6e\x43\xed\xf1\xfa\x3b\x51\xf6\x50\x42\xe5\x98\xef\x00\xd6\x42\xb0\xb6\x23\x4f\x92\xb5\xdb\x13\x6d\xda\x6b\xeb\x2a\x14\x61\xe7\x69\xdb\x50\x7f\x6b\x6d\xcf\xd6\xf7\x7d\x73\x43\x39\x4b\xe1\x96\xfc\x7b\xe3\x5b\x87\x9d\x54\x78\x3b\x11\x7b\xb6\x7f\x58\x0a\x57\xe4\x95\x4d\x1f\xdb\x90\xdf\x4c\xc4\xab\x6b\x1a\xa7\xa4\x06\xa2\xd0\x75\x4c\x86\x10\x4c\xc8\x59\x02\x9a\xeb\x41\xdd\x53\x25\x2a\x53\x95\xae\x57\x53\x79\xd2\xb6\x1a\x0b\xfb\x35\x98\x53\xea\x6e\x62\xff\x31\xb5\xec\x61\x09\xb6\x60\x38\x67\x58\x45\x5a\x46\xf5\x44\x75\xb2\x85\x32\xfa\x11\xf7\x9d\xe5\xf1\x8c\xb9\x30\x6b\xcc\x5f\x62\xe6\x90\xc6\x2b\x9d\x36\x78\xdd\x90\xf8\x61\xcb\x59\x1b\x3d\x13\x0a\x87\x1e\x9b\x3d\x41\x70\x4d\xf9\x0e\x7b\x1b\x55\xef\xdb\x79\xa2\x57\xa0\xe5\x40\x8c\x67\x3c\xcd\x55\xba\xfb\x5f\x14\x0c\x83\x2f\xec\x81\xd6\xc9\x98\xe9\x2c\xbf\x30\xd3\x5f\x11\x3e\x8d\xf0\x58\x5d\x7a\x06\xe2\xa3\xda\x74\x01\xc6\x76\xc2\xac\xaf\x16\x89\xe0\x25\x4a\xdd\xc9\xd6\x69\x1b\x83\x69\x0b\xc3\xa1\x17\x7b\x97\x92\x6f\xe0\xdd\x49\x0f\x1f\x7b\xf9\x77\x79\xfa\x7c\x6f\xdb\xd7\x94\x9e\x16\x80\xcc\x38\xe0\xab\x95\xc9\x08\x53\x53\xe1\x3b\x12\x39\x55\xb7\x84\x5e\x50\xf0\x68\x06\x3f\x5c\xea\x06\x7f\x73\x98\xaa\xf0\xd5\xb2\x7d\x42\xfa\x88\x4f\xa6\x7f\xd4\xa7\xda\xa7\xa4\xc0\x8d\x66\xbd\xb0\xbc\xaa\x13\xe3\xa8\xfd\x75\xef\xa8\x4e\xd1\x25\x70\xca\x66\xa7\xc7\xc0\x97\x3d\x02\x36\x1c\xaf\x43\xe0\xeb\x10\xf8\x87\x0f\x81\x81\x82\x37\xcd\x66\xf8\x3a\x12\x7e\xfd\x48\xf8\x42\x47\x8a\xef\x3a\xb4\xbd\x50\x0c\xfe\xc8\xb1\x4a\x45\xdf\x75\xb0\x7a\x51\xe3\x0e\x1c\x0e\x34\x03\xee\x1e\x73\xe6\xfe\xb5\x75\xde\x45\xb4\x63\x8e\x8a\xcc\x99\xb7\x82\xd1\x64\x1f\xfd\x85\x31\xf8\xf2\xa5\xbf\xd6\x29\x77\xd3\x5b\x97\xcf\x92\x97\x0f\x34\xff\xe4\x6a\x57\x14\x42\xea\x7a\xa6\x29\xc3\x33\x06\xd1\xc3\xc1\xa0\x34\x62\xfb\xd7\x0f\x85\x5e\x2c\x4f\x07\x52\x4f\x0e\x8b\xfe\xf1\xb0\x1f\xb2\x67\x39\xea\x42\x27\x8d\x05\xe7\xb7\x86\xba\x9a\x9d\x05\xf1\xe8\x7d\x61\x88\xdc\xeb\x14\xdd\x4c\xd1\x9d\xd7\xf0\x6f\xf6\xa0\x3d\x82\xea\xf4\xbb\xb0\xfb\x41\xf2\x27\x91\xf4\xdb\x50\xff\xc9\x98\x99\xed\x87\x5a\xd7\xc9\xc7\xe3\x06\x0d\x53\xa4\x26\x85\x9d\x2f\xa6\xfb\x3b\xe7\xb3\xcf\xd2\xad\xd8\x53\x40\x76\xf7\xc6\xee\x26\xe0\xa7\xc4\x67\xae\x27\xe0\xda\x5d\x37\x07\xed\xc7\xb1\x9f\x62\xe3\xb8\x26\xef\xff\x4c\x67\x27\xc9\x44\xa2\x01\x85\x80\xff\x7f\x16\xb0\xde\xd7\x75\x23\x72\x43\x59\x3b\x3b\x2e\x0a\x5e\x55\x61\xe7\xd0\xc0\x3e\x73\x47\xb7\x44\x92\x5c\x45\x77\x5a\x52\xbe\x31\x14\x7e\xfd\x67\x1b\x81\xdd\x8d\x36\x2d\x12\xfd\xd9\x3f\x45\x98\x53\xa3\xbf\x92\xe4\x71\x23\xc5\x8e\xa7\x41\x38\x4c\x1d\xd5\x29\x35\xbf\x50\xbd\xbd\x71\x3c\x41\xa2\x3f\x2f\xa1\xa7\xc1\x0d\x61\x0c\x65\x9b\x1d\xc7\x30\x75\xf8\x4f\x20\x76\xca\xe6\x81\x06\x8d\x05\x7e\x6d\xa0\xd1\x45\x98\xb8\x9b\xe1\x0a\x48\x51\x20\x4f\xed\xdc\xad\x96\xa0\x22\xef\x0f\xfb\xa3\x4e\x07\x8b\x28\x8a\x5a\xac\x4a\x22\xcd\xb4\x3c\x55\x67\x66\xdd\xa6\x80\xd2\x5a\x18\x84\x87\x41\x95\xb4\x95\x46\x6f\xeb\xc0\xf3\x36\xdc\x12\xbd\x75\xc8\x0e\xdb\x84\xcf\x5f\xc2\x53\x08\xf0\x37\xcf\x3c\x9f\x87\xfe\x5b\xa7\xc1\x84\x63\xa3\x80\x2b\xa0\x7a\x0b\x2b\x98\x2f\x7f\x9d\xff\x3a\x3f\xea\x43\x23\x4d\xcd\xfc\xa1\x94\x60\xe6\xad\x4c\xc8\x9c\x68\x57\x27\xe7\x0e\x5f\x93\x2c\x55\x35\xb7\x97\x93\xf6\x80\xaa\x82\x16\xaa\x2a\x08\x5b\x38\x44\xa1\x97\x8d\xbc\x93\x97\x22\xeb\x8e\x56\x0a\xcd\x2c\xdb\x0f\x2b\x53\x60\x07\x1d\xd0\x05\x6e\xa7\xdd\x8c\x86\x74\x3f\xb9\x6f\x48\x8e\x76\x2e\x3c\x0e\xeb\x7b\x49\xf3\x9f\x88\xd2\x3e\xbe\xdf\xf1\xd4\x5c\x84\xb6\x37\x22\xcf\x49\x55\x19\x13\xea\x80\x9f\xaa\x4d\xc3\xfa\xf9\x5a\xa1\x5e\x48\x36\xc6\x31\x7c\xd8\x70\x21\xd1\x5d\xa6\xe1\x69\x4b\x19\xc2\x96\xf0\x94\x51\xbe\x01\xeb\x37\x63\xa0\x6d\xd1\x51\x3f\x6a\x1f\xce\x8e\xd9\x4b\xc2\xef\x77\x47\xde\xff\x02\x00\x00\xff\xff\xa3\x9d\x55\x4f\x1c\x28\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xaa, 0xea, 0x2a, 0x4b, 0x73, 0xca, 0xa7, 0x57, 0xe1, 0x9a, 0xb3, 0x83, 0xe3, 0x92, 0x6e, 0xbb, 0x36, 0xb1, 0x48, 0x73, 0x46, 0x8b, 0x9a, 0xb9, 0x84, 0x7a, 0xb5, 0x14, 0xcf, 0x4f, 0x5c, 0xa1}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl": {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl": {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl": {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl": {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl": {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
