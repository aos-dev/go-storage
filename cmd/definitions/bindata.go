// Code generated by go-bindata. DO NOT EDIT.
// sources:
// cmd/definitions/tmpl/function.tmpl (567B)
// cmd/definitions/tmpl/info.tmpl (1.702kB)
// cmd/definitions/tmpl/object.tmpl (2.388kB)
// cmd/definitions/tmpl/operation.tmpl (1.698kB)
// cmd/definitions/tmpl/pair.tmpl (502B)
// cmd/definitions/tmpl/service.tmpl (11.08kB)

// +build tools

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\x8f\x25\x87\xae\xec\xe6\x07\x08\x9e\x8a\x82\xb0\xc8\xa2\xde\x25\x64\xa7\x6b\xb0\x99\x94\x66\x5a\x17\x62\xfe\xbb\xa4\x55\x17\x11\x0f\xde\x3c\x25\xcc\xcc\x7b\xf3\x3e\x26\xa5\x2d\x06\xc3\x47\x82\x7a\xda\x40\x4d\xb8\xbc\x82\xd2\x37\x23\xdb\x88\x9c\xab\xd2\x76\x2d\x38\x08\xd4\xa4\x6f\x7d\xdf\x91\x27\x16\x3a\x7c\x36\x55\xcb\x2f\xb3\x66\xd2\x77\xc6\x13\xde\x20\xa1\x31\x9e\xba\x65\xa0\x88\xd5\xa4\x77\xc1\x9a\xb9\xd2\x8e\x6c\x51\x47\x5c\xa4\x04\x75\x56\xec\x4d\x5c\x06\xd6\x48\xa9\x58\xe6\x5c\xa7\xa4\x26\xbd\x37\x83\xf1\x51\x3f\x0e\xce\xef\x4c\x14\xfd\x20\x83\xe3\xe3\x35\x1f\xe2\xab\x93\xe7\x26\x78\x6f\x72\x46\xe8\x05\xbd\x71\xc3\x2f\xa6\xa5\x5c\x62\x7e\xdf\xb4\x2c\xb8\xa7\x38\x76\x12\x3f\x8c\xe7\x00\x15\x00\xf4\x86\x9d\xad\x57\x05\xdc\x9d\xa9\x57\xeb\x6a\xa6\xa2\x2e\xd2\x1f\x71\xac\x9c\x60\x03\x0b\x9d\x44\x37\xcb\xbb\xc1\x3f\x66\xdc\x82\xf8\xeb\xca\x3f\xbe\xef\x01\x00\x00\xff\xff\x41\xc8\xae\xbf\x37\x02\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xfc, 0xb, 0xf4, 0xfb, 0xf, 0x94, 0xca, 0x64, 0x7a, 0xb8, 0x48, 0xf9, 0x69, 0xf1, 0x88, 0x46, 0x59, 0xd3, 0xbc, 0x0, 0x4e, 0xe7, 0x8, 0x1e, 0xdf, 0x27, 0x59, 0x81, 0x75, 0x52, 0xa2}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xe5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x92\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\xe4\x24\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x13\xc7\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x23\x5d\x63\xa9\x37\x31\x32\x99\xc7\x39\x15\x42\x09\x27\xb4\xb2\xef\x70\x7a\x85\xcb\xab\x1b\x9c\x9d\x9e\xdf\x2c\x58\xc5\xb3\x15\x5f\x12\xdc\xba\x22\xcb\x98\x90\x95\x36\x0e\x33\x06\x00\x93\x42\xba\x09\x8b\x18\x6b\xdb\x03\x18\xae\x96\x84\xe9\x6a\x8e\xa9\x50\x85\xb6\x78\x9b\x60\x71\x1e\x56\x17\xbc\x82\xf7\xac\x6d\x31\xb5\x64\x1a\x91\xd1\x25\x97\x14\xf6\xa7\x2b\xdc\xc1\xe9\x13\x2e\xa9\x0c\x47\x58\x1c\xe3\xbd\xa0\x32\x87\x50\x39\xdd\x42\x28\xb4\xed\x76\x92\xf7\x48\x85\x63\x99\x56\x36\x40\xec\xe8\x36\x5d\xcd\x5e\xdd\xfb\x0e\x71\x37\xfd\x3c\xd4\x0d\x24\xcd\xa2\x83\x08\xf2\x9f\xb8\xcd\x78\xd0\x47\x82\xa3\xe3\xe3\xb0\xbb\xea\x81\x0f\x40\x2a\x0f\xcb\x88\xb1\x60\x00\x76\x7b\x18\xa7\x5b\x67\xea\xcc\xa1\x1d\x94\x37\x6c\xdf\x9e\x62\x0b\x18\x37\xeb\xaa\xaf\xe5\xfd\xd6\x97\xfb\x33\x1b\x86\x2e\x8e\xe3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\xd3\xef\x94\x39\x34\xbc\xac\x69\x8e\x43\x48\xe2\xca\x42\x69\x07\x4b\x6e\x8e\xa3\xe1\x83\x25\xd7\x95\xea\xea\x08\xe5\xde\xbc\xee\x42\x09\xc9\xab\x2f\xd6\x19\xa1\x96\x5f\x85\x72\x64\x0a\x9e\x51\xeb\xd9\xa0\xfc\xbc\xd7\x61\x57\x14\x81\xfe\xec\xb6\x9b\x10\xef\x59\x51\xab\x0c\x33\x89\x57\xcf\xba\x16\xe1\x03\xb9\xbe\xf1\x53\x61\xab\x92\xaf\x07\x37\x66\xd1\xd8\x8f\xc1\x57\x43\xae\x36\x0a\x72\xf1\xc0\xbe\x40\xfa\xa7\x9a\xd7\x4f\x68\x36\x63\xcd\xe8\x37\x85\x06\xa6\x47\x60\x90\xa0\x19\xf1\xb2\x61\xa0\x4a\xdb\xb1\xfe\x03\x77\x66\x23\xd4\x39\x52\xad\xcb\x68\x20\x12\x05\xe4\x22\xdc\xf0\xcb\x3d\x9f\xc0\x8b\x04\x87\x43\x8d\xe7\xdd\x9e\xc3\x99\x9a\xba\x83\x7e\xbb\xd1\x2d\xa8\x3b\xfc\x20\xa3\x3f\x87\x79\xec\x12\x0a\x5e\x5a\xda\xe7\x96\x2e\x6a\xeb\xf6\x9b\x8e\xbf\xee\x3b\x19\xf7\x5d\x71\x25\xb2\x59\x21\xdd\xe2\xba\x32\x42\xb9\x62\x36\x79\x8c\xf5\x23\xa5\x3c\xbd\x7f\xb9\xbf\xee\x5e\x6c\x9e\xdd\x24\x8a\x1e\x5a\xf4\xdf\xcc\x6e\x6f\xe5\x5d\xb2\x9f\x97\x8f\x8e\x7d\xff\x0f\xdb\xf9\xa5\xdd\x2f\x7f\x06\x00\x00\xff\xff\x26\xf5\xd0\xb3\xa6\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x9d, 0xdc, 0x29, 0x17, 0xc8, 0x8a, 0x14, 0x25, 0x13, 0xa5, 0x85, 0x13, 0x6, 0xf, 0xb3, 0x4a, 0x21, 0xd1, 0x20, 0x4e, 0x6f, 0x92, 0x60, 0xe2, 0x6e, 0x29, 0x96, 0x4a, 0xee, 0x99, 0x66}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4f\x6f\xe3\xb6\x13\x3d\x87\x9f\xe2\xfd\x82\xe0\x57\xbb\xb0\xa5\xdd\xb6\xe8\x21\x5d\x1f\x8a\x75\xda\x06\x68\xe2\x05\x9c\xf6\x1c\x9a\x1a\xd9\x6c\x28\x52\x25\x47\x5e\x7b\x1d\x7d\xf7\x82\x92\x9c\xd8\x89\xbd\xf5\xa2\x68\x4f\xe6\x9f\x99\xc7\x99\x37\x6f\xc6\x4a\x53\xbc\x77\x19\x61\x4e\x96\xbc\x64\xca\x30\x5b\x63\xee\x9e\xf6\x50\x45\x96\x66\x94\x6b\xab\x59\x3b\x1b\x7e\xc0\x78\x82\xdb\xc9\x1d\xae\xc6\xd7\x77\x89\x28\xa5\x7a\x90\x73\x02\xaf\x4b\x0a\x42\xe8\xa2\x74\x9e\xd1\x13\x00\x70\x9e\x17\x7c\xde\xae\x58\x17\xd4\x2d\xc3\xda\xaa\x73\xd1\x17\x22\x4d\xf1\x93\x26\x93\x41\xdb\x8c\x56\xd0\x16\x6e\xf6\x07\x29\xc6\x4c\xb3\x50\xce\x86\x88\xb3\xd9\x0c\xe1\xa5\x9d\x13\x2e\x1e\x06\xb8\x58\xe2\x72\x84\x64\xd2\xd8\xdd\x10\x4b\xd4\x75\x83\xda\x7a\x5e\x47\xa0\xcd\x06\x17\xcb\xe4\x56\x16\x84\x47\xb0\xfb\x20\x83\x92\x06\x75\x8d\x4a\x5b\xfe\xfe\x3b\x8c\xf0\xf6\xdd\xbb\x68\xf4\x10\x9d\x23\x3e\xd9\x2c\x2e\xdb\x90\x5a\x6c\xe8\x00\x5e\x10\x42\x21\x8d\xa1\xc0\xa8\xac\xe6\x18\xe2\xdc\x0d\x03\x3b\x2f\xe7\x94\x88\x34\x8d\x0e\xb7\x93\xbb\xab\xe9\x65\x5c\x01\xc3\xce\xfd\xab\x80\x3c\xa6\x16\x30\xfd\x65\xf2\xdb\xaf\x63\x58\xc7\x98\x11\xd4\x22\xa6\x92\xc1\x55\x1c\x74\x46\x08\xe4\x97\x5a\x51\x48\xf6\xdd\xf1\xfe\xc7\xdb\x48\x71\xf4\x70\xa5\xa6\xec\xc5\xb5\x0e\x50\xce\xaa\xca\x7b\xb2\x8c\x20\x73\x7a\x06\xb0\x66\x8d\xfb\xeb\xf1\xfd\x00\xf7\x1f\x24\x2f\xe2\xef\x8d\xcb\xe8\x1e\xd2\x13\x3c\xfd\x59\x69\x4f\x19\xb2\xca\x6b\x3b\x87\xd1\x81\xe1\xca\x58\xe8\x58\xdb\x01\x1c\x2f\xc8\x77\xb1\xb7\x90\x80\x72\x95\xc9\x62\x2c\x39\xb1\x5a\x50\x86\xa5\x96\x30\xf2\xd3\x1a\x81\x25\xc3\xb8\xb9\x56\x97\x58\x30\x97\xe1\x32\x4d\x67\xb4\x76\x36\xdb\x72\xa4\x5d\x9a\x39\x15\xd2\x67\xda\x52\x6d\x99\xbc\x95\x26\x6d\x6b\x36\x8c\x48\xc3\x88\x24\xa2\x86\xb6\x29\x06\xf6\x95\x62\x6c\x4e\x15\x40\x34\xd3\x79\xac\xfc\x98\x82\xf2\xba\x8c\x09\x3d\x5f\x1e\xbd\x78\xaa\xfe\xb3\xdd\xdd\xba\xa4\x46\x3e\x75\xbd\x73\xf2\x42\x2c\xe2\x2c\x4d\xa1\x8c\x8e\x05\xe8\xb4\xb2\xdd\x59\x7c\x5c\x68\xb5\xd8\x29\x96\x34\x7a\x49\x89\x38\xeb\x2c\xa6\x2d\x13\x5e\x34\x8f\xa6\x69\x14\x3c\xaa\x40\x19\x64\x80\x8c\xbb\x42\x96\xc8\x9d\xdf\x36\xc4\x52\x9a\x8a\x06\x78\x83\x82\xa4\x0d\x8d\x98\x02\xf1\x00\x6f\xbb\x83\x40\xdc\x40\x35\x38\x8d\xca\xc5\x59\xe6\x2c\x35\x9b\x6f\xbf\x11\x67\x45\xbc\x8d\x8d\x97\xdc\x54\x4c\x2b\x51\x0b\x71\x0a\xb1\x9b\x4d\xc7\xe9\xd5\xaa\x69\xeb\xba\x16\x79\x65\x15\x7a\x0e\x5f\xb7\x96\x7d\xfc\x4c\xdc\xd1\xab\x43\x69\xe4\xba\x63\xae\xd7\xdf\xe7\x0e\x9b\x26\x42\x4f\x5c\x79\x0b\x97\xbc\xa2\x3a\xc6\xf4\x0a\x7c\x7a\x04\x7c\xb9\x0f\xde\xdf\x7a\x74\xaf\x1c\x80\xc7\x08\xcb\xbd\x08\x44\x57\x4e\x13\x9a\xd7\xa3\xd8\x8f\xa4\x82\x8f\xda\x18\xcc\x89\x71\xf0\x36\xf7\xae\xe8\x6a\xdd\x8c\x84\x83\x62\xfb\x02\xda\x7a\x7b\xa9\x0d\x30\x73\xce\xf4\x9f\x12\x8b\x8d\xd2\xeb\xb7\xca\xd1\x39\x5c\x12\x6b\xfe\xff\x93\xe6\xdf\xff\x46\x78\xd3\xe1\x7c\xbe\x14\x03\xb0\xaf\xa8\x31\xac\xc5\x2e\x69\x3b\x91\x3d\xe2\x13\x79\xf7\x7b\x14\x66\xe3\x91\x4b\x13\x48\xb4\x3c\xde\x54\x81\xff\x4b\x2e\x3f\xf3\xde\x11\x19\xfe\x23\x1e\x47\xfb\x3c\x96\xd2\x6a\xd5\xcb\x0b\x4e\xa6\xa5\xd7\x96\xf3\xde\x79\xd7\xb6\x3b\x08\x75\x1d\xe7\x40\xd7\xb8\xe7\xfd\x7e\x47\xee\xdf\xb7\x44\x9a\x1e\x6b\x82\x96\xca\x70\x8c\x4a\x6d\xd9\x7d\x39\x95\xff\x42\xc3\xb5\xd4\x3e\x8e\x4e\xe1\xf6\x60\x87\xb6\x03\x77\x77\xf6\xbe\x0a\x5b\x19\x67\xa9\xb7\xda\x39\xd9\x3c\xcd\xf7\x53\xbe\x1e\x0e\x86\xbf\x3a\x54\x92\x17\xff\x1a\x3b\x19\x36\x0e\xf1\xd3\xa5\x16\x7f\x05\x00\x00\xff\xff\xa7\xaa\x95\x75\x54\x09\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2d, 0x61, 0x7d, 0x5b, 0xc0, 0xc8, 0xe7, 0x81, 0xf1, 0x98, 0xf, 0xb1, 0xee, 0x37, 0x9f, 0xa2, 0xc0, 0x15, 0x45, 0xcd, 0xb, 0x28, 0xe8, 0x1b, 0xcb, 0xb2, 0x9f, 0x24, 0x62, 0x3b, 0xf4, 0x3a}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4d\x8f\xd3\x30\x10\xbd\xfb\x57\x8c\xac\x1e\x12\x69\x49\xef\x48\x7b\x82\x45\x5a\x09\x75\x2b\x10\xe2\x88\x5c\x67\xda\xb5\x48\x6c\x33\x9e\xec\x87\x82\xff\x3b\xb2\x93\x76\xd3\xaa\x10\x15\x10\xe2\x16\x7b\x66\xde\x9b\xf7\xc6\x13\xaf\xf4\x57\xb5\x43\xe0\x67\x8f\x41\x08\xd3\x7a\x47\x0c\x85\x00\x00\x90\xda\x59\xc6\x27\x96\xc3\xc9\x38\x29\x4a\x21\xfa\xfe\x15\x90\xb2\x3b\x84\xc5\x97\x2b\x58\x18\x78\x7d\x0d\xd5\xad\x65\xa4\xad\xd2\x18\x20\x46\xd1\xf7\xb0\x30\xd5\x5b\x0c\x9a\x8c\x67\xe3\x6c\xba\x4c\x0c\x30\x46\x4c\xf0\x8d\x7a\x5e\xa9\x16\x21\x46\x30\xfb\x62\xe8\x33\x53\x62\x30\x5b\x70\x04\x05\x7e\x4b\xf9\x39\x51\x06\xa4\x07\xa3\x91\x64\x79\x72\xcf\x8e\xd4\x2e\xdd\xc7\x98\xeb\x3f\x32\x19\xbb\x2b\x4a\x08\xf9\xe3\x80\x89\xb6\x4e\x8d\x8c\xe7\xa9\x08\xe7\x93\x8a\x85\xa9\xee\x7c\x16\x90\x32\x96\xcb\xdc\xad\xf3\x03\xcd\x77\x60\xb7\x56\x41\xab\x26\xb5\x3c\x46\x4e\x24\x8e\xc0\xe7\x6b\x8a\x31\xf2\xce\x51\xab\x78\xad\x48\xb5\x89\xab\x84\xe3\xc0\x07\x0c\x5d\xc3\xe1\xb3\xe1\xfb\xf5\x30\x9b\x23\x95\x32\x95\x4c\x5d\xb2\x8e\x73\xf5\x7b\x37\xd0\xcc\xf6\x9e\x90\xdf\x0c\x83\xfd\x1d\x19\x93\xf2\x42\xf3\x13\x8c\x6f\xa4\x1a\xef\xae\xfe\xba\xca\xfd\xd8\x8e\x4f\xf9\xd8\x76\x81\x6f\xda\x0d\xd6\x9f\xac\x69\x7d\x83\x2d\x5a\xc6\xfa\xdc\x1b\x2b\x4a\x11\x85\x58\x2e\x61\x36\x33\x83\xc2\x06\x01\x13\x70\x8d\x35\xb0\x83\x7b\xf5\x80\xb0\x75\xf4\xa8\xa8\x06\xed\x5a\xaf\xd8\x6c\x1a\x84\x03\x96\x4a\xde\x85\x6a\x78\xe4\xf3\x1c\x81\xa9\xd3\x0c\x7d\x14\x62\xdb\x59\x0d\x45\x98\x2f\x2a\x2f\x92\x7b\x29\xf6\xc9\xce\x8c\x9b\x48\xc8\x1d\x59\x90\xb3\x00\x32\xd9\xfb\xeb\x9d\xba\xa0\x99\x7f\xb2\x44\xc7\x3f\x9b\xb3\x6b\x84\x44\x70\x0d\x2b\x7c\xbc\xf3\x48\x79\xc4\x2b\xc7\xb7\x2f\xdd\xdf\x10\x39\x2a\xe4\xb4\xdb\x18\x65\x79\xfa\xc3\x79\x71\x52\x44\xf1\x33\xbe\x0b\xec\xf9\x0f\x76\x73\x34\xef\x4f\x0c\x9a\x38\xb2\x37\x6a\xfa\x75\x70\xef\x47\x00\x00\x00\xff\xff\xbd\xe8\x37\x32\xa2\x06\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc2, 0xaf, 0x9a, 0xb8, 0xf7, 0x9f, 0x1b, 0x53, 0xaa, 0x36, 0x95, 0x6d, 0xe6, 0x56, 0x7d, 0xb9, 0x8e, 0xd7, 0x4, 0x74, 0xce, 0x5b, 0x9, 0x4f, 0xb6, 0x92, 0xc, 0x1e, 0x49, 0x5, 0x4c, 0x4c}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x6b\xe3\x30\x10\x85\xef\xfa\x15\x0f\xe3\x43\x02\x89\x75\xd9\x53\x96\x3d\x6d\xf6\xb0\x14\x92\x1c\x42\x7b\x2c\x8a\x3c\x51\x44\x6c\x49\xc8\x63\xb7\xc6\xf5\x7f\x2f\xb2\x93\x40\xe9\xa5\x3a\xcd\x7c\x33\xef\xf1\x46\x52\xe2\xaf\x2f\x09\x86\x1c\x45\xc5\x54\xe2\xd4\xc3\xf8\x47\x0f\x5d\x97\xb2\xa4\xb3\x75\x96\xad\x77\xcd\x6f\x6c\xf7\xd8\xed\x8f\xf8\xb7\xfd\x7f\x2c\x44\x50\xfa\xaa\x0c\x21\x28\x1b\x1b\x21\x6c\x1d\x7c\x64\x2c\x04\x00\x64\xda\x3b\xa6\x77\xce\xc4\xdc\x1a\xcb\x97\xf6\x54\x68\x5f\xcb\x13\xf5\xde\x95\x0d\xfb\xa8\x0c\x49\xe3\xd7\xf7\xb2\xfb\x25\xc3\xd5\xc8\x0b\x73\xd0\x95\x25\xc7\xd9\xa4\x2d\x7e\xac\xe6\x3e\x50\x93\x09\xb1\x14\x62\x18\xd6\x88\xca\x19\x42\xfe\xba\x42\xde\x61\xf3\x07\xc5\x21\x05\xc5\x38\x4e\xd3\x3c\x38\x55\x53\xe2\x79\x57\xec\x52\xf9\x01\xf6\x07\xd5\x68\x55\xa5\x1d\x29\xf1\x62\xf9\x32\x0c\xf7\xcd\x71\xc4\x9b\xad\x2a\xa8\x10\xaa\x1e\x89\xdf\x74\xe3\x88\x4e\x55\x2d\x81\x3d\xf6\x61\xfa\xa9\x42\x48\x29\xe6\x95\x2d\x35\x3a\xda\x09\x27\xdb\x73\xeb\xf4\x37\xe3\x45\x77\xf3\x3b\xf6\x21\xf5\x4b\xa4\xa8\x18\xa6\xfb\x23\x71\x1b\xdd\x44\x66\x90\xde\x13\xf5\x1b\x64\x5f\x42\x64\xab\xc7\xf4\x39\xc5\xd9\xa0\x9b\xc9\x28\xe6\x8b\xc9\x95\x29\xc1\x67\x00\x00\x00\xff\xff\x81\x9d\x53\x8d\xf6\x01\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1b, 0x1a, 0xbf, 0xf0, 0xe9, 0x47, 0x35, 0xe6, 0xa7, 0xc, 0xe6, 0xba, 0xc0, 0x5e, 0x39, 0xda, 0x2d, 0xb9, 0xd0, 0xee, 0xbc, 0x1, 0xc0, 0xd1, 0x5e, 0xa2, 0xbf, 0x4d, 0xcd, 0x4, 0xe9, 0xc0}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x8f\xdb\xb8\x15\x7e\xf7\xaf\x38\x2b\x0c\x0a\x3b\x70\xa4\xdd\xa2\x2f\x9d\xc2\x0f\xed\x24\x4d\x07\x9b\xcb\x20\x93\xed\x3e\x64\x17\x03\x5a\x3a\xb2\x59\x4b\xa4\x42\xd2\x9e\x31\x5c\xfd\xf7\x82\x17\x5d\x4d\xc9\x76\xd2\xdd\x60\x81\xcc\x4b\x64\xf2\xf0\xf0\xf0\x5c\x3e\x7e\x24\x13\x45\x70\xc3\x13\x84\x15\x32\x14\x44\x61\x02\xcb\x3d\xac\x78\xfd\x1b\x76\x94\x40\x9c\x27\x51\x82\x29\x65\x54\x51\xce\xe4\xdf\xe0\xc5\x3b\x78\xfb\xee\x03\xbc\x7c\x71\xfb\x21\x9c\x14\x24\xde\x90\x15\xc2\xe1\x00\xe1\x5b\x92\x23\x94\xe5\x64\x42\xf3\x82\x0b\x05\xd3\x09\x00\x40\x10\x73\xa6\xf0\x49\x05\xf6\x17\xe5\xc1\xc4\x7e\xad\xa8\x5a\x6f\x97\x61\xcc\xf3\x68\x89\x7b\xce\x12\xa9\xb8\x20\x2b\x8c\x56\xfc\x79\xf5\xb9\xfb\x4b\x54\x6c\x56\x51\x2c\x30\x41\xa6\x28\xc9\x82\x8b\xc7\xae\x95\x2a\xe2\x8c\x22\x53\x97\x8d\x95\x28\x76\x34\x46\x69\x47\x85\x67\x8f\x53\xfb\x42\x0f\x9a\x4d\x26\x3b\x22\xe0\x01\x1a\xdb\xc3\x3b\xc1\x77\x34\x41\xe1\x7a\xee\xed\xa0\xea\x67\x35\x61\x78\x6f\x3f\x5e\x0a\xc1\xab\xbe\x66\x11\xe1\xbb\xc2\xc4\x61\x32\x89\x22\xf8\xb0\x2f\x10\xa8\x04\xb5\x46\xd0\xf3\x42\xca\x45\x27\x14\x31\x67\x52\x59\xb1\x05\x04\xad\x9e\xc0\x8c\x7f\xb7\xfc\x0f\xc6\xea\x7e\x2f\x15\xe6\x6f\x50\x91\x84\x28\x02\x7a\x2d\x28\x41\x9a\x56\xc8\xab\x66\xad\x9a\x1b\xf9\x70\x62\xe6\x1a\x18\x2c\xb6\xb1\x82\xc3\xe4\x70\x78\x0e\x82\xb0\x15\xc2\xd5\xc3\x1c\xae\x76\x70\xbd\x80\xf0\x96\xa5\x5c\x6a\xbb\xb4\x4b\xb5\x04\x4d\x01\x3f\xc1\xd5\x2e\xbc\x8f\x79\x81\x10\xd8\x09\x82\x9e\x08\xe3\x4a\xcb\xbc\xca\xf8\x92\x64\xed\xbe\xab\x82\xe9\xe5\x5c\x2f\x74\xb7\x59\xd9\x7f\x41\xf1\x3b\x22\xe3\xae\x1c\x4d\xb5\xc0\x0b\x2a\x8b\x8c\xec\x2b\xdf\x80\xfb\x6b\x29\x5a\x0c\x88\x69\x11\x64\x49\xf3\xd3\xc8\xa1\x8c\x05\x35\xd1\x68\x77\x58\x4d\x65\xe9\xa4\x8c\xef\x87\xd4\xd4\x3f\x5b\x9f\xa5\x89\xcc\x2b\x54\x5e\xff\x3e\xd2\x2c\x83\x15\x2a\xbf\xf7\x53\xc1\x73\xd7\x13\x4e\xa2\x48\x2b\x7a\x0e\x1f\xd6\x54\x42\xba\x65\xb1\xb1\x54\xae\xf9\x36\x4b\x8c\x4b\x97\x08\x31\xc9\x32\x5b\xf6\x2e\xfb\x80\xe6\x45\x86\x39\x32\x85\x22\xac\xc6\x23\x08\x54\x5b\xc1\x28\x5b\x55\xf3\x5a\xe9\x7a\x62\x2a\x41\x20\x49\x80\xb3\x6c\x0f\x84\x25\xbd\x69\x72\x9e\xd0\x94\x62\x12\x4e\xb4\x1d\x43\x8b\x9b\x72\x78\x66\xdb\x67\xfe\xe5\x1d\x8c\xdb\x64\x3e\x07\xbe\xd1\x41\xe7\xe1\x2b\xec\xeb\x98\x19\x19\x9a\x6a\x91\x43\x1d\x63\x6b\x3f\xc8\x3c\x9c\xfa\x34\xdb\x41\x36\x2a\x4e\xd4\x27\x76\xa8\xa2\x23\xc7\xa2\x23\x87\xa2\x43\x99\xe2\xe7\x45\xc7\xb8\xb1\x09\x0f\x67\x31\xce\xa1\xc8\x90\x48\x84\x9c\x6c\x10\xe4\x56\x20\x90\x2c\x03\xa3\x78\x4d\x24\x2c\x11\x19\x3c\x0a\xaa\x14\x32\x58\x62\xca\x05\x6a\x4b\x9c\xc7\x07\x0c\x6e\x3c\x3e\x07\x99\x7b\xad\x9e\x39\x2f\xf2\xf0\xfe\xc8\xd7\x32\x9f\x39\x87\x38\x28\x3b\x1f\x49\x1c\x60\x9a\x46\x87\x27\x43\x3a\xbe\x08\x50\xdc\x3c\x41\xbf\xe0\x87\x50\xc5\x03\x0a\xa3\xe8\xd2\xd3\x39\x8c\x32\x17\xa0\x4d\x5b\xb4\x05\x17\x4d\xf3\x00\xfa\xb4\x05\x46\x50\xe8\x72\x24\xf2\x47\xa6\x86\x22\x1f\x08\xb9\x21\x6f\x4c\x78\x9b\x5c\x6f\x23\x89\x5f\xeb\xc5\x48\xe2\x55\x33\x95\xf0\xac\x65\xc2\x6c\x60\xb2\x3e\xa0\xc8\xcf\x01\x14\xaf\x6a\x0f\xa2\x78\xe5\xda\x90\x32\xe2\x66\x79\xec\x66\x83\x26\x03\x6e\xfe\x9d\x20\xe5\x1c\xd7\x1b\x60\xf1\xbb\xa8\x72\xff\x30\xb2\x78\x6b\xfe\x8e\x50\x21\xab\x54\xf5\xd5\xf1\x39\xb5\xdb\xd4\xeb\x0d\x67\x69\x46\x63\xa5\x5b\xa3\x08\x5e\x60\x21\x30\xd6\x64\xf8\x1a\x7e\x92\x08\x85\x9e\x2d\xfc\x99\xaa\x75\xa7\xac\x28\x93\x0a\x49\x62\x9c\xde\x2a\x99\x28\x82\x23\x51\x13\x40\x52\x14\xd9\xde\x15\xa3\xab\x75\xd8\x91\x6c\x8b\xa0\xf7\x04\x4b\xe9\x9c\x32\x4f\x75\x1b\x87\xf7\x15\x4f\x77\xdd\xe2\x9e\x81\xf6\xcc\x71\x8e\xea\xd6\xa6\xf1\x47\xdc\x5f\x1b\x26\xd8\x18\x12\xcc\xeb\xde\x7f\x6b\x93\xae\x61\x37\x77\xe9\xdb\xc1\x83\xd6\xa7\xa1\xa5\xda\x35\x6f\x48\x01\x0b\xc8\x49\xf1\x51\x2a\x41\xd9\xea\x57\xfb\x8f\xb3\x62\x3c\x7e\x97\xe0\x6c\xcf\xe2\x7a\x09\x6e\xed\x6e\x09\x5d\xf0\xf2\xce\xae\x35\xc8\x82\xc4\xd8\x31\x41\x61\x5e\x64\xfa\xc4\x13\x50\xcd\x7c\x52\xdd\x1f\x98\xba\xb8\xcf\x34\x2b\xaa\xa6\xbe\xda\x85\xb7\xb5\x80\x5f\x41\x8a\x44\x6d\xc5\xe0\xf0\x7f\x6e\x59\x2c\xcd\x87\x93\xf3\x6b\xd1\xbe\x7d\x60\xf8\xd8\xd6\x32\xf5\xf9\x67\x66\x1a\xf1\x71\x58\x4d\xcf\x92\xc6\x08\xbf\xf9\x0e\x37\xc6\xed\xef\x65\x83\xfe\x36\x67\xc4\x9e\x03\x9b\x62\xd4\xbe\xa7\x2c\xc1\x27\x08\xe1\xfb\xba\xdd\xc8\xca\x76\xdf\x0f\xba\x4f\x27\xd7\x74\x30\x81\xaa\x51\xce\xfc\x87\x76\x55\x75\x12\x07\x16\xf0\x27\x5b\x30\xdd\xf6\xc3\xd1\xa6\x37\x1b\x5c\x4d\x13\xcd\xa1\xb5\x1c\xe3\xca\x55\xca\x8e\xd7\x64\x3b\x3a\xed\x7f\x36\xb3\x19\xee\xe3\xcc\x2c\xcb\x3a\x2b\x6a\xde\x33\xe8\x86\x54\x9e\x75\x1e\xf1\x7a\x66\xc9\x79\x76\x5c\x31\x43\x4e\x68\x92\xf1\x54\x40\x53\x76\xb4\xf0\xaa\x63\x63\x8d\x66\xbe\x0a\xd7\xb8\xa9\x27\xa9\xdd\xa0\x3f\xf4\x10\x8d\xb4\xf6\x78\x5b\x10\x21\x31\x71\x6e\xb1\x4e\xeb\x8d\xd0\x03\xca\xb2\xeb\x38\x93\xff\xf0\xf1\x57\x8d\x39\xf6\xda\x21\x8a\xe0\x3d\x7e\xda\x52\x81\x89\xed\xf5\x39\x58\x77\x54\xe6\xd6\xd2\xce\xa7\xff\x22\xd2\x4c\x4a\xa8\xf0\x79\x16\xda\xbe\x1d\x13\x6b\xba\x47\x8e\x88\xfa\x8c\x6e\x22\x4a\xb2\xf3\xac\xad\xa5\xff\xdf\xd6\x9e\xb6\xb7\x0a\xa3\x90\x78\x37\x10\x4b\xb3\x15\x1a\x09\xbb\x57\x49\x83\x2e\x86\xc9\x3c\x1b\x88\xbf\xdd\xfb\xc6\xb4\x4e\x79\xa1\xaa\x18\xcf\x60\x3a\xa0\x67\x0e\x28\x04\x17\x15\xe9\x10\x28\xb7\x99\xd2\x5e\x1b\x90\x6f\x76\x4c\xe3\xf7\x6b\xd0\xb3\x54\xdb\xa2\xf9\x47\x1f\x63\x1e\xe6\x60\x8a\xd1\x46\xc3\x18\xd2\x0c\x94\x8f\x54\xc5\x6b\xd8\x85\x3f\xe2\xbe\xd5\xec\xcf\xc0\x0b\xb3\x50\xff\xc5\x9a\xbb\x05\xdd\xb8\xe9\xbd\xb1\x73\x18\xa0\xa9\x5b\x6b\x78\x22\x15\x0e\x47\x47\x95\x98\x33\x45\xd9\x16\x3b\x1d\xdd\xa3\xc6\x79\xaa\x17\xa0\x44\x4f\x8d\x1b\x38\x3e\x6a\x17\x1a\x3e\x12\x4e\xfb\xa9\x37\x1b\x3a\xc8\x0c\xd7\xcc\x85\x75\xf3\xcd\xbf\x83\xfe\x2d\xdb\x45\x70\x41\xca\xd2\x14\xbe\xbb\xd4\x55\x8e\xc2\x0e\xd5\x68\x39\x6f\x6e\x4d\x75\xf9\x57\x53\x9a\xab\xd3\x83\xe6\xba\xf2\xfa\xa3\xa3\xa4\x07\x4f\x28\xa1\xac\x57\xd3\x5b\x6c\xfb\xe0\x66\x8d\x9e\x03\xa3\xd9\x89\x4d\xf2\x0c\xca\x63\x4e\x57\xfe\x3d\xb2\x70\x7b\x64\x31\xb8\x47\xbe\xc0\x94\x6c\x33\x65\x5d\xa1\x3d\x60\xb9\x34\x95\xda\x0a\xdd\xe3\x36\x3c\x73\xc3\x52\x60\x4c\x53\x1a\x03\x31\x7c\xce\x6e\x99\x03\x0a\x46\x2f\x59\xac\xc9\xa7\x18\x85\xdb\x63\xbb\xfb\x81\x27\x43\x8e\x55\x82\x97\xb5\x76\xe8\x67\xc1\xe0\x6a\x37\x7a\x57\x71\x14\x8a\x2f\xe0\x2a\xe3\x71\xb8\x98\xce\x6c\x2e\xe7\x33\xbd\x21\x27\x28\xcd\xd7\x20\x2f\xe7\xd1\x97\x3f\x10\x51\xd9\x7c\x0e\x53\xd9\x78\xa8\xca\x54\xc2\xb3\xa6\x77\x36\x3a\xcd\x20\x75\xd9\x5c\xca\x5d\x36\xbf\x13\x79\xf9\x46\x51\x2e\xde\x42\xbd\x76\x7a\xf6\xd5\x6f\xec\xe4\x37\x73\xad\xdb\x1d\xaf\xbd\x57\xf6\x05\xd3\x2b\x70\x07\xef\xd7\x9c\xdb\x72\xed\x5f\xaa\x47\x11\x64\xba\xef\xc1\xc4\xc5\x5d\x0b\x68\x40\x10\x3c\xd9\xc6\x98\x00\x65\xf0\xea\xfe\xee\xf9\x0f\xdf\xff\x35\xec\x0f\xbc\x4d\x61\x2b\x51\x00\x32\xb2\xcc\x10\x94\xb9\x9f\xb5\x1a\x6a\x02\x53\xdd\xd3\xd2\x15\xe3\x02\xcd\xa5\xa6\xdc\x16\xe6\x1d\xdd\xcc\x68\x10\x20\xec\x07\x57\x86\xd5\x05\x45\xd8\x58\xfe\x59\xb1\x1c\x78\x6c\x38\x22\x60\x9b\x71\x06\xf6\x13\x73\x56\x57\x24\x4c\x37\x5e\xef\x06\xd8\x63\x14\xc1\xcd\x1a\xe3\x0d\x88\xce\x81\x28\xfc\x2a\xd4\xf2\xc4\xca\xbe\x26\xb7\x6c\x5d\xca\x75\xef\x4d\xc7\xae\xa2\x6a\x31\x3f\xe5\xf4\xb8\x78\x98\x9b\xd9\xab\xf2\xd7\xbc\xf7\xf2\xd5\xa5\x6d\x99\xee\x7e\xa8\x6c\x1d\x24\x70\xb5\x37\x32\x79\xf4\x26\x75\x7c\x0f\x79\x5a\xcd\xa9\x67\x2c\xaf\x27\x3f\x97\x1e\x9e\x43\xfd\x5a\x34\xc2\x7e\xf6\xaf\xe6\xec\x43\x4d\xf7\x99\xc6\x10\x8e\x58\xa0\x5e\x3c\x01\xf7\x7f\x66\x60\xb9\xaf\xb0\x2b\x6c\xb3\x8b\xab\x82\x95\xe5\xac\x35\xd1\xd4\x5c\x7f\x85\x77\x44\x90\x5c\x86\xf7\x26\x29\xb5\x84\x6b\x7f\x6f\xb2\xac\xdd\x61\xeb\x20\x56\x4f\x7a\x2d\x6e\xb6\xf0\x1f\x24\xde\xac\x04\xdf\xb2\xc4\xbd\x7a\x55\xaf\x5c\x61\x33\xd3\xcf\x54\xad\x6f\xac\xfc\x34\x56\x4f\x73\xe8\xcc\x7c\x43\xb2\x0c\x85\x86\xe8\xbe\x2b\x5a\xe3\x06\xbc\x32\xb6\xbe\xde\xac\xb5\xc5\xae\xad\x67\xc5\xd9\xeb\x4f\x30\x45\x61\x62\x30\x9d\x75\x39\xce\x55\x41\xd4\xba\x8a\xb3\x53\x7b\x47\xd4\xda\x2e\xd0\x53\x1e\x84\x25\x30\xc5\x4f\x6e\x60\x10\xcc\xdc\x2f\x06\x81\xfb\xcf\x12\xc1\xcc\xfb\x50\xab\xc5\x17\x10\xcc\x7f\x09\x7e\x09\x8e\x9e\xa9\x7b\x88\x8c\x42\xc0\x42\x83\x3e\x17\x39\x51\x06\x89\xa6\x81\x5d\xa2\xce\xc5\xb2\x0c\x0c\x55\x6c\x14\x97\x25\xb8\x97\xc8\xe9\xac\x29\x79\x9a\x02\x43\x4b\x2c\xcc\x8b\xff\x1b\x9e\x20\x04\x5d\x6c\xc9\x75\x5b\x45\x3f\x1a\xa9\x63\x88\xd1\xd8\xcb\x43\xdd\x19\xde\x1a\xe8\x35\x23\xcb\x72\x3a\x6b\x81\xad\x33\xbc\xc2\xd3\x46\xe1\x2d\xdb\x91\x8c\x3a\x50\x7d\xf9\x54\x60\x6c\x5e\xde\x74\x57\x4b\xd7\x1c\xfe\x1e\xab\x2d\xc9\xae\xc1\xce\x54\xf6\x50\x7c\x04\x67\xed\x71\x69\x01\xa4\x28\x90\x25\x86\x62\xcb\x39\xc8\xd0\x95\x95\x39\xff\xb6\xd2\x3b\x0c\x43\xeb\xb0\x1d\x11\x9a\x12\x0f\x5d\x3d\x58\xe5\xbc\x50\xf3\x3a\x28\xa3\x77\x94\x66\xde\xfa\x29\x59\x0f\xf9\x6e\xa1\x41\xff\x68\x43\x6a\x6f\x8f\xbd\xf2\x6b\xf0\xe6\x86\xe4\xa8\x03\xe0\xa9\xc0\x0f\x82\xe6\xaf\x89\x54\xae\x14\x5f\xb2\x44\x33\xf9\xf5\x0d\xcf\x73\x52\x96\xda\xe2\xd9\xc8\x46\xd3\x87\xf0\xb1\xdd\xa6\xdd\xe7\x03\xcb\x2a\xc3\x4f\x00\xa6\xe3\x01\x27\x41\xd3\xca\x55\xe2\x97\x82\xa7\x1e\xf6\x1b\x00\xe8\x97\x64\xd8\xd9\x59\xe6\x96\x7c\x6b\x99\xa1\x21\x82\xf0\xb8\xa6\x19\xc2\x9a\xb0\x24\xa3\x6c\x05\x26\x6e\x7a\x81\xee\x21\xb9\x1a\x66\x12\xf4\xe1\xec\xf4\xec\x93\x23\x63\xf7\x40\xea\x5d\x9c\x75\x36\xb1\xdb\x99\x67\x02\x42\x19\x55\x35\x56\x9c\xf9\x64\xab\xff\x6a\x30\x79\x8f\x2b\x2a\x15\x8a\xa1\xab\x29\x31\xd5\xe7\x86\x39\xbc\xc5\xc7\x41\x91\x99\xef\xf6\xe2\x68\x86\xfb\x78\x8d\x39\x71\xea\xdc\xeb\xb7\xae\xa6\xff\x05\x00\x00\xff\xff\xee\x3e\xda\x40\x48\x2b\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa8, 0x9e, 0xb9, 0xb1, 0xf3, 0x96, 0xc, 0xe1, 0xd5, 0x61, 0xb6, 0x25, 0x75, 0x21, 0xce, 0x60, 0x57, 0xd0, 0xab, 0x8, 0x50, 0x68, 0xb4, 0x56, 0xbc, 0x77, 0xc0, 0x2d, 0xb1, 0xbc, 0x86, 0x1}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl": {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl": {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl": {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl": {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl": {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
