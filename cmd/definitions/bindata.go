// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/function.tmpl (258B)
// tmpl/info.tmpl (1.466kB)
// tmpl/operation.tmpl (755B)
// tmpl/pair.tmpl (2.219kB)
// tmpl/service.tmpl (7.578kB)
// ../../definitions/infos.hcl (510B)
// ../../definitions/operations.hcl (4.636kB)
// ../../definitions/pairs.hcl (2.075kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x4a\xc4\x40\x10\x45\xf7\x39\xc5\x67\xc8\x22\x33\x68\x1f\x40\x70\x15\x74\x25\x32\xa8\x17\x28\xda\x1e\x6d\x4c\x55\x9a\x54\x05\x07\xda\xba\xbb\xf4\x44\x04\x5d\x15\xd4\xff\xbc\xff\x6a\xbd\x46\x7f\x92\x0f\xdc\xdc\xa2\x0f\xf7\xab\xc4\xf0\x48\x9c\xf0\x05\x9b\x47\xe2\x34\xc1\xbd\x3b\xad\x12\x31\x28\x0e\xb5\xa2\xbf\xe4\x5a\x28\x6e\xa5\x23\x69\xa4\xd6\xda\xa3\xd6\x46\x72\x1f\xa2\x9d\x11\x67\xb1\x74\xb6\x30\x6e\xf7\xaa\xa5\x1b\xff\x48\x0b\xb1\x86\x97\x25\xf3\x03\xa9\x85\x67\x5b\xb2\xbc\xdd\xc9\xab\x7e\x66\x7b\x1f\x67\x66\x72\xc7\x5c\x0c\x87\x42\x79\xf9\xb7\xe9\xde\x1e\xcd\xf8\xef\xfa\xf0\xcb\x7f\x4a\xba\x4e\xa6\x3f\xdc\x8b\x58\x07\x00\x85\x24\xc7\x61\x97\xb9\x4c\x89\x93\x18\xb2\xed\xf6\x9d\x7f\x07\x00\x00\xff\xff\x5b\xb1\x71\xf7\x02\x01\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf3, 0x17, 0x45, 0xc4, 0x8, 0xb1, 0x57, 0xf3, 0x99, 0x7b, 0x1f, 0xcd, 0xe4, 0x30, 0x7e, 0x3, 0x30, 0xba, 0x28, 0xed, 0x36, 0x1c, 0xd3, 0x4a, 0x24, 0xfc, 0x10, 0x73, 0xfe, 0xf7, 0xda, 0x75}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcf\x8b\xdb\x3e\x10\xc5\xef\xfa\x2b\xde\xd7\x64\x21\x86\x7c\xed\x7b\x4b\x0e\x65\x53\xca\x1e\x9a\x2d\x24\xf4\xd0\x52\x8a\xe2\x8c\x8d\x88\x2c\x19\x49\x71\x49\xb3\xfe\xdf\x8b\x1c\xa5\xfe\x91\xa4\xa4\x65\x2f\x21\xf6\xbc\x79\x33\x9f\x37\x4e\x53\x3c\xea\x2d\xa1\x20\x45\x86\x3b\xda\x62\x73\x40\xa1\x7f\x3f\x43\x28\x47\x46\x71\x99\x66\xe5\xf6\x2d\x16\xcf\x58\x3e\xaf\xf1\x7e\xf1\xb4\x4e\x58\xc5\xb3\x1d\x2f\x08\xee\x50\x91\x65\x4c\x94\x95\x36\x0e\x53\x06\x00\x91\x13\x25\x45\x2c\x66\x2c\x4d\xf1\x4e\x4a\xf0\x9a\x0b\xc9\x37\x92\x50\x92\xe3\x5b\xee\x78\xc2\x32\xad\xac\x6f\x38\x1e\xff\x87\xe1\xaa\x20\x4c\xbe\xcf\x30\xa9\xf1\x66\x8e\xe4\x49\xe5\xda\xa2\x69\x5a\x3b\xaf\x98\x54\x8a\x97\xe4\x6b\x93\x3a\x59\xfa\xbf\x2f\x70\xfa\x13\xb7\x19\x97\x7d\x9d\xc8\xbd\x60\x21\x6c\x25\xf9\xa1\xd5\x85\xe2\xc8\x68\x7e\x43\xe6\x25\xa4\xb6\xdd\xa3\xd7\xad\x32\x5d\x8d\x06\x9e\x0a\x8f\xdc\x51\xa1\xcd\xe1\xb2\x76\x9a\xd2\x34\x98\x23\x3a\x69\xc3\x94\x88\xf5\x46\xc4\xec\x2e\xfc\xd7\xa2\xff\x07\x78\x4b\xa6\x16\x19\x2d\xc3\xf8\xca\x08\xe5\x72\x44\x0f\xf6\xc1\x46\x98\x5e\xc9\x26\x6e\xdf\x5e\x09\x26\x3e\xdb\xa6\x29\x3e\x90\x1b\x84\xf4\x43\x48\x89\x82\x1c\x06\x51\xa1\xe6\x72\x4f\xc8\x8d\x2e\x7b\xdf\x8d\xb7\xc8\xf7\x2a\xc3\xb4\xbc\xd8\xb0\x69\xe2\xb1\xf7\x34\xc6\xf4\xe4\xba\x3e\x54\xfe\xc5\x0c\x1b\xad\x65\x0c\x1c\x5b\xab\x7a\x06\xbd\xf3\x68\x65\x52\x7e\xbd\xf4\xeb\x5b\x7d\x6b\x1b\x44\x8e\xff\xf4\x2e\x74\x77\xa1\x7f\x21\xa3\x3f\xb7\xfb\xf6\x22\x37\xe4\xf6\x46\x05\xaa\xbe\x62\x86\x9c\x4b\x4b\x5d\xea\xd2\xde\x6e\x6c\x17\x7f\xc1\xcf\x3f\xf5\x77\x57\x3b\xfd\x06\x83\x3a\x19\xc2\xc7\x33\x38\xb3\xa7\x20\x3c\x9f\xe3\xe3\xde\xba\x10\x5b\x17\xfe\x6b\xde\xa4\x37\xa0\x77\x97\xc1\x66\xe7\x7b\x84\xc5\xef\xb8\xc6\x18\x6d\x04\xb5\xba\x0a\x64\x6f\x00\x09\xe5\xf4\x5f\x00\xad\x46\x30\xf5\x10\x26\xbe\xd2\x14\xf8\xee\x00\xc3\x1c\xf5\x20\x8b\x40\xd6\x3b\xf4\xaf\x00\x00\x00\xff\xff\x31\xc4\x25\xbf\xba\x05\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x31, 0x26, 0x6e, 0xf5, 0x88, 0x13, 0x39, 0x22, 0xf2, 0x4a, 0x8a, 0xfc, 0xe5, 0x28, 0x32, 0x20, 0x62, 0x81, 0x72, 0x52, 0xb2, 0x20, 0xc, 0x8, 0x11, 0x99, 0x4c, 0xc3, 0x92, 0x2c, 0x90, 0xcf}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\x4b\x4f\xc3\x30\x0c\xbe\xe7\x57\x58\x55\x0f\xad\x34\xba\x3b\x12\x27\x1e\x12\x17\x98\xe0\xc0\x11\x99\xcc\x2b\x16\x6b\x13\x12\x83\x36\x85\xfc\x77\x94\x36\x1d\xdb\x04\x42\x42\xdc\x12\xdb\xdf\xc3\x0f\x8b\xfa\x05\x5b\x02\xd9\x5a\xf2\x4a\x71\x67\x8d\x13\xa8\x14\x00\x40\xa1\x4d\x2f\xb4\x91\x62\xfc\xb1\x29\x54\xad\x54\x08\x27\xe0\xb0\x6f\x09\xca\xc7\x19\x94\x0c\xa7\x67\xd0\x5c\xf7\x42\x6e\x85\x9a\x3c\xc4\xa8\x42\x80\x92\x9b\x0b\xf2\xda\xb1\x15\x36\x7d\x0a\x26\x05\xc8\x19\xf6\x76\x8d\xdb\x1b\xec\x08\x62\x04\x9e\xc0\x10\x06\xa5\xa4\xc0\x2b\x30\x0e\x2a\x7a\x4d\xf5\x43\x61\xe1\xc9\xbd\xb3\x26\x57\xd4\x47\x71\x31\x0e\xdb\x14\x8f\x71\xc0\xdf\x8b\xe3\xbe\xad\x6a\xf0\xc3\x63\xc7\x49\xfd\x32\x19\xd9\xfd\xf7\xba\xa0\xee\x89\x96\xa9\x93\x92\x9b\xcb\xe1\x9d\xb9\xc6\xda\x5c\x70\x64\xfc\x07\xe2\x7d\x5e\x63\x33\xe9\xad\xf5\x13\x62\x3e\x1f\x18\x8d\x1d\xfd\x7f\x80\x98\x05\x7a\x8d\xeb\x34\x8b\x9c\x39\x9a\xdd\xe4\xe2\x5b\x4c\x95\x33\x57\xc6\x75\x28\x0b\x74\xd8\x25\xad\x1a\x0e\x13\x77\xe4\xdf\xd6\xe2\x1f\x58\x9e\x17\xe3\xd2\x0f\xc6\x57\x24\xc8\xaf\xfe\x12\xfa\x7c\xbc\x8a\xbf\x58\xdd\x83\x57\x5a\x36\x90\x0f\xac\xc9\xb1\xd9\x3f\x77\x12\xc2\xb4\x9a\xa8\xbe\xf6\xf4\x19\x00\x00\xff\xff\xad\xfc\xbb\x7f\xf3\x02\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd0, 0x3a, 0x99, 0xf6, 0x41, 0xfa, 0xdd, 0xc0, 0x2e, 0x3, 0xc1, 0x31, 0x43, 0x68, 0xa5, 0x42, 0xca, 0x90, 0x7f, 0xb7, 0x15, 0x72, 0x87, 0xb, 0x71, 0xa6, 0x44, 0xc8, 0x5a, 0x98, 0x33, 0xa4}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\xcc\x0a\x46\x20\x2d\x64\x69\xb1\x47\x2d\x7c\x58\x6c\x7c\x58\x14\x8d\x73\x30\xda\x43\x10\x14\x0c\x35\x96\x09\x53\x24\x41\xd2\x4c\x0d\x55\xff\xbd\x20\x65\x3b\xb2\x65\xe7\xe3\x50\xa0\x3c\x89\x9c\x37\x33\x6f\xde\x70\xa8\xa2\x80\xff\x64\x85\x50\xa3\x40\x4d\x2c\x56\xf0\xb4\x83\x5a\x1e\xf7\xc0\x84\x45\x2d\x08\x2f\x68\x53\xfd\x03\xb7\x0b\xb8\x5b\x2c\x61\x7e\xfb\xff\x32\x8f\x14\xa1\x1b\x52\x23\x28\xc2\xb4\x89\x22\xd6\x28\xa9\x2d\x24\x11\x00\x40\x4c\xa5\xb0\xf8\xdd\xc6\x51\xbf\xad\x99\x5d\x6f\x9f\x72\x2a\x9b\x82\x48\x33\xad\xd0\x15\xb5\x9c\x1a\x2b\x35\xa9\xb1\x70\x7f\x17\x6a\x53\x17\x28\x2a\x25\x99\xb0\xf1\x07\x7c\xa8\xc6\x0a\x85\x65\x84\x7f\xc4\x6b\x6d\xad\xa2\x9c\xe1\xfb\x73\xd9\x9d\x42\x13\x47\x69\x14\x15\x05\xfc\xcb\x39\x10\x47\x18\x27\x4f\x7c\x5f\x7f\x1e\x51\x29\x8c\x2f\xbf\x6d\xa7\xa0\x89\xa8\x11\x26\xdf\x32\x98\x38\x28\x67\x90\xdf\x7b\x0c\x74\x5d\xc8\xe6\x11\x13\x25\x48\x83\xde\x36\x71\xf9\x9d\xff\xfc\x01\x56\xde\x13\x43\x09\x3f\xe0\x8a\x02\xda\xf6\x80\xec\x3a\x78\x66\x9c\x87\x13\x97\xdf\xa2\xa1\x9a\x29\xcb\xa4\x78\x89\x3a\x80\xce\x20\xee\x81\x77\xfd\x41\x1c\x68\xa1\xa8\x3c\x3a\x8d\xde\x20\xf9\x1e\x82\x45\x01\x5f\x99\x5d\x8f\x09\x12\xa5\xf8\x0e\x4e\xb2\x83\x23\x7c\x8b\x60\x25\x2c\x02\x65\xe3\xbd\x97\x6b\x66\x82\x76\xc0\x0c\x6c\x0d\x56\xde\x7e\xb1\xba\xd5\x56\xd0\x51\xb2\xc4\xed\xc1\xcb\x9d\xf2\xfb\x14\xfe\x0c\x3d\x0a\x55\x40\x1b\x24\xd1\x68\xb7\x5a\xc0\xcd\x8b\xa1\x3f\xf7\xeb\x13\xee\xca\x13\xcd\xb2\xa3\xe9\x8b\x67\x5b\x82\xeb\x4f\xba\xa8\x1b\x8a\xe7\xa9\xdf\x13\x6d\xb0\xaf\x56\x85\x4f\x02\x9b\xa9\x83\x86\x28\x5f\x43\xb8\x0f\x60\x38\xa3\x98\xf7\xdc\x03\x3e\x69\x3c\xe0\xc1\x58\xcd\x44\xfd\x18\xe6\x6a\x45\x28\xb6\x5d\x0a\xc9\xc3\xe3\x80\x7c\x06\xa8\xb5\xd4\xe9\xbe\x88\x3e\x5c\x39\x83\x86\x6c\xf0\x1c\xf9\x57\x06\x1c\x45\xd2\xa4\x69\x3f\x68\x8e\x68\xef\xdd\x47\xe8\x8f\x56\x52\xc3\x26\x83\xd0\xe2\xbe\xe5\x0d\xbc\xc8\xe0\x1d\x94\x83\x01\x9d\xa3\xc9\x3c\x33\x4b\xd7\xb0\x19\xa0\xdf\xbe\xdb\x43\xe4\x7b\xee\xf8\x61\x51\x62\xf0\xa4\x1d\xe5\x89\x79\xc0\x47\x87\xac\x2e\x4f\xbc\x0e\xe9\x80\xdc\x28\xd4\xf1\x6e\x8c\x63\x05\x61\x1d\xcc\x40\xbb\x91\xcd\x53\x67\x2b\xef\x1e\xfa\xa6\xcf\xa9\x1e\x73\xf4\xad\xbc\x16\x3c\xb4\x11\x66\xd0\xb6\xc7\x48\x5d\x97\x68\x97\x5e\xc4\xb3\x55\x80\xff\x31\x03\xc1\xf8\x85\xa2\x0e\x6b\x7f\xa5\x05\xe3\x19\xdc\xcc\x7d\x97\xaf\x63\x17\xaa\x84\x38\x5c\xd0\x38\xbb\x0a\x9a\x6b\x5d\xfa\xd4\xd7\x11\xaf\x4c\xca\xf9\xf2\x7a\x97\x87\xa7\x67\x2f\xfe\x2b\xb9\x4f\x07\xed\x7c\x8d\x55\x1f\x9f\x0c\x06\xf3\xdc\x54\xe1\x8a\x6c\xb9\xbd\xdc\x9e\x5f\x23\xe3\x5c\x6b\x3f\x0c\xbe\xf0\xcf\xcc\x34\xc4\xd2\xf5\xef\x2e\x6b\x77\x32\xdb\x17\xa4\xbc\x2a\xa3\xff\xc3\x33\xb1\xc5\x68\x1c\xaa\x7f\xb2\x66\xfe\x57\x80\xa2\x4a\xc2\x36\x3b\x79\x86\x43\xf1\x9b\xec\x40\x55\xb9\x2e\xdd\x3f\xb6\xc3\x87\x7b\xef\x28\x18\x8f\xba\xe8\x67\x00\x00\x00\xff\xff\xa4\x19\x45\x28\xab\x08\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xab, 0x1e, 0x79, 0x73, 0x22, 0xcc, 0xed, 0x33, 0xba, 0x50, 0x21, 0x70, 0x7a, 0x5b, 0x77, 0xe, 0xd1, 0x8, 0xd9, 0x88, 0x2c, 0x47, 0xcb, 0xd7, 0xc6, 0xa8, 0xfa, 0xe4, 0x63, 0x4c, 0x5c, 0x1}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x5b\x6f\xdb\xbe\x15\x7f\xf7\xa7\x38\x7f\xc1\x2d\xa4\xc2\x91\xb6\x3d\xba\xf0\xcb\x92\x36\x2d\xba\x25\xc1\x92\xad\xc0\xda\x20\x60\x24\xca\x26\x2c\x91\x2a\x49\x2b\xf1\x5c\x7d\xf7\x81\x17\x49\x94\x2c\xb9\x76\x97\x76\x7e\x68\x6d\xf1\x5c\x7f\xe7\x4a\x25\x8a\xe0\x9c\x25\x18\x96\x98\x62\x8e\x24\x4e\xe0\x71\x0b\x4b\xd6\xfc\x86\x92\x20\x20\x54\x62\x4e\x51\x16\xc5\x79\x12\x09\xcc\x4b\x12\xe3\xb7\x70\x71\x0d\x57\xd7\x77\xf0\xee\xe2\xe3\x5d\x38\x29\x50\xbc\x46\x4b\x0c\xbb\x1d\x84\x57\x28\xc7\x50\x55\x93\x09\xc9\x0b\xc6\x25\xf8\x13\x00\x00\x2f\x66\x54\xe2\x67\xe9\x99\x5f\x84\x79\x13\xf3\x6d\x49\xe4\x6a\xf3\x18\xc6\x2c\x8f\x10\x13\x67\x09\x2e\xa3\x25\x3b\x13\x92\x71\xb4\xc4\x51\xf9\x17\xef\x38\xb2\xa8\x58\x2f\x23\x4c\x93\x82\x11\x2a\x4f\xe1\x89\x39\x4e\x30\x95\x04\x65\xa7\x70\xad\xa4\x2c\xe2\x8c\xe0\xe3\x75\x59\xe0\xc4\xb1\xf4\x72\x5b\xd4\xc4\x85\x38\x96\x3e\x2a\x10\xe1\xc2\x9b\x04\x93\x49\x89\x38\x3c\x40\xeb\x5d\x78\xc3\x59\x49\x12\xcc\xed\x49\x8d\x55\xff\xb9\xc0\xcb\x1c\x53\x19\xde\x9a\xff\xeb\xa7\x46\x51\x78\x6b\xfe\x6f\x89\x8d\x53\xe1\xad\xf9\xf2\x8e\x73\x56\x9f\xb5\x10\x85\xd7\x85\x24\x8c\x8a\xc9\x24\x8a\xe0\x6e\x5b\x60\x20\x02\xe4\x0a\x83\xb2\x19\x52\xc6\x3b\x79\x13\x33\x2a\xa4\x21\x5b\x80\xe7\x9c\x78\x9a\xdf\x6a\x02\x54\x22\x92\xa1\xc7\x0c\x83\xf6\x39\xb4\x7c\xfe\x64\xb7\x3b\x03\x8e\xe8\x12\xc3\xf4\x61\x06\xd3\x12\xe6\x0b\x08\x6f\x14\x8d\x92\xae\xf0\x54\x14\x24\x05\xca\x24\x4c\xcb\xf0\x32\x63\x8f\x28\x73\xcf\xa6\x05\x55\x1a\xe7\x0b\x75\xac\x95\x7f\x07\xc9\x6e\x90\x88\x5b\xba\x28\x52\x46\x5b\xca\xaa\x82\x27\x92\x65\xfa\x49\x19\x5e\x60\x11\x73\xa2\x5d\xae\xa9\x95\xfa\x0e\xb9\xf1\x6c\x5a\xbb\xf6\x60\x38\x1b\x47\x6b\x4b\x30\x4d\x94\x08\xe7\x6b\x30\x02\x02\xa1\x29\xfb\x11\x08\x1f\x15\xcd\x4b\x82\x60\x65\x28\x9f\x89\x28\x32\xb4\xad\x63\x08\xf6\xe3\x08\x5a\x8c\x90\x39\xbe\xa9\x9f\xca\x46\x03\xc6\x6d\xcc\x8a\x9e\x52\x73\x70\x8e\x24\x5e\x32\xbe\xdd\x3f\x1b\x83\xf7\xec\x14\x78\x0f\xe7\xcf\x18\x6c\xc7\x40\x16\x45\xf0\x99\xc8\xd5\x7e\xde\xa0\xa2\xc8\xb6\xd0\x31\x12\x4a\x94\x6d\x30\x48\x06\x75\xf1\xa8\xda\x59\x11\xa1\xd3\x5d\x15\xd0\x46\xe0\x44\x9d\x0f\x26\x5d\xba\xa1\xf1\x9e\x32\xbf\xb4\xc4\xba\xb8\xaa\x2a\x80\x37\xba\x6b\x68\xef\x60\xd7\x44\x8d\x63\xb9\xe1\x14\x5e\xb7\x87\xed\xd9\x27\xbc\x9d\xef\xa5\xf3\xac\x39\xfe\x97\xb2\x7a\x0e\xa5\x79\x52\x4d\x3a\xe0\x3a\x5f\x47\x60\x3e\x21\x43\x5f\x2a\x41\x4f\xcc\x4f\xc5\x60\xbb\xde\x95\x55\x5f\x70\x42\x65\x0a\xde\x2b\xf1\x4a\x78\xe0\x0f\xa4\x6e\xa0\x9f\x0e\xe4\x6d\xe0\xb4\x93\x4b\x2c\xf7\x33\x63\x89\xe5\x60\x5e\xa4\x9c\xe5\x90\x63\x89\x12\x24\x51\xa8\x45\xe8\x90\xf7\x84\xf8\xb9\x6e\x0c\x61\xdf\x6a\x15\x7b\xbf\x93\x0b\x33\x78\x64\x2c\x0b\xc0\xa6\x41\x39\x03\xb6\x56\xce\xe5\xe1\x25\x96\x7e\x5d\x95\x5d\x19\xae\xa6\x40\xb3\x91\x14\xfe\x60\x6b\x2b\xa3\x05\xff\xdf\x98\x33\x9d\x19\x2e\xf4\x36\xcb\x8c\x15\x2e\xc5\x0c\x52\x94\x09\xdc\xa2\x9f\x89\x71\x46\x6d\xfe\x77\xf8\xcf\x21\xfe\x36\x7a\xe6\x5f\x2b\xa0\x0c\xbb\x10\x04\x33\x90\x7c\x83\x2d\x61\x1d\x16\x61\x10\x6d\x03\xa0\xe3\x22\x46\xe2\x42\xa8\x64\x43\x71\x11\xc7\xc6\x65\x06\x7b\x45\x3a\x42\x69\x51\xb6\xce\xe4\xe1\xed\x51\x71\x9a\x41\x19\x38\x50\x8c\x54\xe7\x60\x71\x2a\x69\xa2\x40\x31\xee\x54\xa8\xc4\x79\x91\xa9\x55\xd1\x53\x8d\xc9\x83\x1c\xad\xf1\x6d\xa6\x86\x93\x3f\x54\x98\x81\x7e\x88\x9f\xc6\x45\x08\x57\x46\x2d\x61\x5a\x86\xef\x37\x34\x1e\xd1\xac\x20\xd6\x4d\xf2\x47\xac\x7d\x1f\x13\x9c\x12\xda\xea\xed\x8e\x3f\xe5\x34\xa1\x09\x7e\x86\x10\xfe\x34\xd2\x5c\xa6\x2a\xce\x2e\xe1\x9f\xb5\xec\xfa\xb8\x8f\xa1\x21\xef\x0d\xc8\x71\x04\x95\x11\xd3\x72\xbf\x11\xd9\xaf\x43\x5e\x1c\x76\xc2\x3d\x4b\xe9\xb8\xdd\xd3\x94\xea\xea\x9f\xa6\x74\xa8\xb5\xd6\xb5\x51\x34\x73\xc0\x66\x99\x62\xab\xaa\xbf\xa3\x02\x56\x2c\x4b\x04\x20\x35\xdc\xba\x8b\x9a\x69\x2f\x88\x1f\x62\x5e\x40\x8e\x8a\x2f\x42\x72\x42\x97\xf7\x42\xf2\x4d\x2c\x77\x55\x3b\x83\xa2\x08\xfe\x81\xbf\x6d\x08\xc7\x89\x23\x73\x00\x73\x3d\x2a\xad\x1b\x0d\x47\xbf\xfb\x23\xc2\xc3\xf7\x9b\x2c\xb3\xc5\x32\x87\x46\xa1\x33\xd7\x7a\x7d\xc4\x5a\x61\x46\x33\xca\x8e\xb7\xa2\xe1\x78\x41\x2b\x2e\x9b\xcb\xdb\xd1\x66\xb4\x2c\x2f\x61\xc7\x0f\x13\xa2\xde\xf7\x0b\xc4\xd5\xd2\x62\x44\x6a\x1e\x7d\x03\x18\xe3\x32\x74\xce\x62\xa2\xfd\x83\x2f\xf7\xce\xda\x32\xf9\x85\x59\xb1\x9f\xf9\x9d\x63\xdb\xa0\x7f\x4b\x8e\x7c\x40\xe2\xb0\x59\x6a\x7a\x1f\xeb\xc1\xc9\x3e\xbc\x5c\x86\xb5\x1b\x9d\x56\x7f\x81\x53\xb4\xc9\xe4\xff\xe2\xe9\x9e\xbd\x2f\x14\x3e\x37\xa9\xb9\xc0\x37\x23\x39\xaa\xb7\x01\x4d\xd1\x59\xa6\x85\xee\xdf\x7a\x1b\x78\x33\x92\xde\xed\x72\x70\x48\x81\xcf\x0a\xd9\x4b\xf9\x00\xfc\x31\x99\x33\xc0\xea\x06\x1e\x34\xbb\x81\x50\xe8\xce\x17\xf0\x7a\x84\xa1\x57\x5b\x73\x50\xea\x66\x2e\x00\x7a\xaf\x11\x7a\x15\x44\x6b\xec\x3b\x8d\x59\xbf\x17\x4a\x51\x8c\x77\x76\xfb\x53\x37\xf9\x07\xb5\xc0\xcc\x17\x36\x2d\xb4\xf1\xbb\xa1\xf8\xfb\x2b\x24\x6e\x38\x4e\xc9\xb3\x31\xc5\xbb\xc2\x4f\x5e\xe0\xc6\x83\xa4\x4a\x98\xd9\x42\xc7\x67\xc5\x97\x32\xfc\x84\xb7\xf7\x6f\x9d\xbd\xb3\xfe\xd8\xcd\x88\x92\x6c\xd6\xbe\xa8\xb8\xc2\x4f\x0a\xc3\x7f\x52\xb1\x29\x0a\xc6\x25\x4e\xf4\x3b\x0b\xdf\x6e\x45\xd0\x6c\x46\x23\xd9\x65\xe0\xb0\x5a\x61\x01\x65\xa8\xd7\x4e\x17\x31\xeb\x25\xe3\xdd\x0e\xd3\x29\xed\xc1\x12\x51\x53\xb1\x04\x07\xd6\xe6\x29\x5b\xb7\x69\xef\xee\x30\x36\x43\x3f\x20\x9a\x64\x18\xf8\x7e\xfb\x3b\xb9\xf5\xa9\xa5\x61\x8d\xb7\x9a\x68\xa4\x8a\x5a\x2c\x74\x78\x16\x35\x26\x86\xb9\x33\x40\xce\xaa\xea\xde\x0d\xe8\x69\x41\xaa\x2d\x34\x11\x1a\x16\x3f\x14\x36\x05\xfe\xbe\x1e\x55\x0a\x7a\x8d\xd6\xfe\xe9\x97\x04\xf6\x06\xe0\xb6\x83\xbe\xbc\x5e\x0a\xb4\x60\xb3\xfd\xbe\x7e\xf2\xdc\xff\xb5\x60\x77\x30\xb0\xfe\xd7\xdd\xb5\x81\xa0\xb9\xf1\xfc\x12\x90\x96\x03\x83\xe3\x67\x86\xc6\x6f\x83\xe9\x98\x09\x75\x34\x9c\x03\xed\xe3\x67\x11\x76\x6c\x3b\x68\xd7\x48\x8d\x0d\x28\x6d\x34\x8e\x48\x1a\xed\x82\xfd\xfe\x63\x2b\xd8\x28\x99\xa9\x4a\xb6\xcd\x70\xec\xb2\xe5\xdc\xd6\xfe\xdf\x17\xae\xda\x94\x13\x2e\x5d\xa3\xee\xbc\xc4\xcd\xeb\xd8\x8b\x97\xb3\x80\x98\xaf\x43\x2f\x9d\xa3\xa8\x26\xd7\xef\x0d\x6b\x3b\xcd\xca\x12\x73\xac\x10\x40\x60\xff\x2e\x03\x8f\x5b\xe5\x91\xca\x04\xe7\xb5\x85\x2f\xe0\xcd\x6e\x37\x2d\x68\x55\x05\x8e\x52\x7f\xb7\x53\x3a\x6f\x10\x47\xb9\x08\x6f\xf5\x3a\x60\x5f\x29\x99\xc9\xa2\x52\xc1\x3d\x68\xf3\x31\x96\xcf\xca\x3f\xab\x35\xfc\x2b\x8a\xd7\x4b\xce\x36\x34\xf1\x83\xfe\x0b\x1e\x11\xb6\x1a\x3f\x13\xb9\x3a\x37\x3c\x7e\x2c\x9f\x67\xd0\xb1\xe0\x1c\x65\x19\xe6\x75\xd5\x0c\xc1\xe4\xf0\x1f\x40\xec\x90\xcf\x3d\x0b\x1a\x0f\xec\xb3\x9e\x45\x27\x61\x92\xe0\x14\x73\xad\xdc\x0f\xba\x95\x6b\xdb\x97\x5c\xd5\x39\x61\xc5\xdf\x20\xb9\x32\x4e\xf7\xcb\xd6\x36\x09\x44\x13\xf0\xf1\x37\xcb\xec\x79\x81\xfd\x45\xc1\xb3\x7f\x3b\xe8\x2e\x5b\x2d\xbb\x65\x59\x80\x37\xfb\xea\x7d\xf5\xbc\x21\x05\xbd\xa6\xa6\x3e\x98\x73\x58\x80\x08\x53\xc6\x73\x24\xcd\xc4\x6e\xe6\xf9\x75\xd1\x5b\x51\x5b\x3d\x55\x05\x4e\xaf\x73\x92\x40\xaf\x3d\x85\x3c\xbc\x3e\xab\x0f\x2b\xe4\xcc\xaa\x3f\xb8\x48\xeb\x09\x14\xb8\x9d\x5f\x31\xfd\xb1\x50\x1d\x6b\x70\x29\x71\x5a\xf0\x60\x6a\x76\x8b\xf4\x1c\xe5\x58\xd5\xe8\x40\x7a\xde\x71\x92\xff\x0d\x09\x69\xf3\xf4\x1d\x4d\xc4\x93\xce\xa6\x3c\x47\x55\xa5\x1c\x08\xf6\x5a\xe6\x7f\x03\x00\x00\xff\xff\xbe\x82\xaa\x18\x9a\x1d\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7a, 0xa6, 0xe, 0xc, 0x5f, 0xc4, 0xc2, 0xe1, 0xad, 0xae, 0xa3, 0x2a, 0xbe, 0x89, 0x5, 0xd6, 0x9a, 0xd5, 0x5e, 0xdb, 0x40, 0x85, 0x9e, 0x19, 0x4a, 0xf0, 0xef, 0xf4, 0xea, 0xdf, 0xf, 0xf4}}
	return a, nil
}

var _definitionsInfosHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd0\xb1\x4e\xc5\x30\x0c\x85\xe1\x3d\x4f\x61\x79\x87\x89\xcb\xc6\x04\x8c\x6c\x77\xaf\x4c\x62\x2a\xa3\xc6\xa9\x9a\xd3\xa1\x20\xde\x1d\x15\x84\x5a\x10\x0d\xa2\x6b\xf5\xfd\x3a\x4e\x30\x7f\x2a\xc4\xe5\xf1\x59\x23\x98\x38\x2b\x84\x89\x63\x71\xa8\xe3\x22\xa7\x13\xd3\x6b\x20\xc2\x32\x2a\x7d\x7d\x37\xc4\x15\x93\x79\xcf\x81\x28\x59\x1d\x07\x59\x3a\x97\xac\xeb\x9f\xdb\x4f\xfa\x70\x77\xe2\xf0\xf6\x47\x7e\xad\xee\xfa\xbb\xee\x91\x54\x48\xff\xdf\x45\xf7\x67\x69\x14\xab\xbd\xfc\xd8\x60\x8e\xeb\xab\x63\x30\x8f\x49\xa0\xa9\x13\x7c\x67\xb0\xac\x97\x67\xcb\xba\xd1\x8a\x32\x49\xaf\x9b\x1d\x4a\x14\x58\xf1\xf6\xd1\x1b\xab\x10\x58\x85\xc5\x8f\x47\x9b\x1d\xcd\xa5\xbf\xbb\xc6\x81\xef\x01\x00\x00\xff\xff\x02\x23\xd7\x14\xfe\x01\x00\x00")

func definitionsInfosHclBytes() ([]byte, error) {
	return bindataRead(
		_definitionsInfosHcl,
		"definitions/infos.hcl",
	)
}

func definitionsInfosHcl() (*asset, error) {
	bytes, err := definitionsInfosHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/infos.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xbe, 0x6b, 0x10, 0xd3, 0xa5, 0x80, 0x0, 0xf, 0xc9, 0x79, 0x8d, 0xa8, 0xa0, 0x81, 0xeb, 0x15, 0xfd, 0xf3, 0x35, 0x71, 0xda, 0x20, 0x1, 0xc4, 0xff, 0x21, 0x88, 0xb0, 0x57, 0x1f, 0xca}}
	return a, nil
}

var _definitionsOperationsHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x4d\x8b\xe3\x48\x0c\xbd\xe7\x57\x08\x5f\x06\x86\x26\xa7\x65\x6f\x7d\x1a\x58\xd8\xc3\xb0\xcb\xf4\x61\x0f\xcb\xd0\xa8\x6d\x39\xd1\x62\x57\x19\x95\x9c\x4c\xcf\xd2\xff\x7d\x50\xf9\xdb\x71\x1c\xa7\xe9\x5b\xec\x7a\x2a\x3d\xbd\x92\x9e\x2b\xec\x94\x24\xc7\x94\x20\x49\x7d\xc5\x24\x09\xfc\xbf\x03\xc8\x28\xa4\xc2\x95\xb2\x77\xf0\x08\x09\x07\xd0\x23\xc1\x00\xce\xbd\xc0\x17\x5f\xbd\xee\x93\xdd\x0e\xc0\x57\x31\xfa\xb5\x89\xbd\x88\x3e\x73\x51\x80\xad\x03\x3a\xf8\xeb\xe5\x3f\x4a\x15\xbc\x40\x59\x17\xca\x55\x41\xe0\x9b\x57\xec\x62\x92\x40\x72\xe2\x94\xf6\x49\xdc\xaa\x42\xc1\x32\xc0\x23\xfc\x1b\x1f\x01\x92\x20\x69\xf2\xd0\x3d\x64\x41\x93\xef\x3b\x80\xb7\xdd\xdb\x6e\x54\x4a\xc6\xf2\x5c\x70\xd0\xeb\xe5\xd4\x81\xb2\x58\x45\xc6\x42\xa9\x7a\x79\x85\x17\xb4\x77\x41\xbd\xe0\xa1\xa7\x01\xea\xc1\x76\x6a\x49\x06\xa8\x5d\x46\x02\x68\x71\x43\xf1\x86\x78\xce\x58\xd6\x04\x10\xd2\x5a\x5c\xb3\x19\x42\xa8\x28\xe5\x9c\xd3\x76\x9f\xe5\x52\x6d\xc7\xef\xf1\x41\x28\xd4\x85\x4e\x16\x3d\x5f\xab\x3c\xd0\xa1\x24\xa7\xe1\xa3\x25\xe8\xf6\x9d\x69\x00\x40\xe5\x0b\x65\x3d\xb7\xa4\xc5\x91\x91\x9f\x09\xd4\x73\x5b\x53\x6a\x9a\xec\xc4\xf8\x7e\x91\xc2\xa2\x48\xec\x32\xfa\xf1\x3c\xd0\xdc\xdc\xf2\x31\xb0\x53\xa9\x09\xdf\x28\x00\x3b\xd6\xe7\x49\xde\x35\x05\x0c\x6d\xc3\x72\x2d\xdf\x92\x0e\x15\xea\x71\x45\x08\x3a\xb4\x4a\x34\x7c\xce\xc2\x4a\xdb\x09\x45\x38\xa0\xa5\xb5\x41\x55\x7f\x2f\x3b\xcb\xdf\x4f\xad\x0c\x3f\xe3\x1e\xc3\x63\xe0\x9f\xb4\x74\x62\xa5\x3f\xdd\x73\x4e\x5f\xfd\x89\x86\xe9\xb4\xe0\xb5\xe2\x6c\xdd\xea\xf9\x78\x1f\xaa\x84\x72\xfe\xb1\x75\x0e\x1b\xf4\x9d\x3e\xd4\x04\xcd\xac\xa8\x79\xf9\xc1\x6e\xd4\x6e\x7a\xa7\x21\xb5\x12\xdc\xeb\x49\x9b\xb4\xb8\x30\xa4\x5e\x8c\xcd\x9e\x34\xa3\xb7\xd9\x96\xde\xad\xd2\xb2\x23\x09\x61\x7a\xbc\xa7\xc3\xbf\x59\xc0\x70\xea\x31\x7e\x8d\x7c\x25\xfe\xc4\x99\x8d\xf0\x19\x5f\x1f\xe0\x7c\xe4\xf4\x08\x29\x3a\x88\x91\x31\x41\xd3\x59\xef\xf4\x97\x5a\x8a\xa5\xba\x66\x1e\x1b\x57\x1c\x16\xf0\x08\x2a\x35\x75\xec\xf1\xc5\x8b\x6e\xb1\xa1\x08\xb4\x7e\xdd\xe0\x36\x63\xb7\x4b\x7d\x59\x15\xa4\xb4\x25\x47\x87\x1d\xd2\x00\xba\x0c\x4a\x92\x03\x99\x4e\x65\xeb\x7f\xf0\x07\x17\x2b\xee\xd0\x33\x98\xe9\x11\x3b\x78\xf9\xa0\xed\x38\x4a\x64\xa7\xc8\xae\xbd\x1d\x99\xdd\xce\xba\x3f\x8c\xee\x5c\x42\xa8\xab\xd6\xd6\x20\x00\xc1\xd1\xb9\xdb\xc8\x3e\x63\x41\xd1\xad\x78\x9b\xc3\x92\x56\x5a\x58\xbd\xd0\x44\xdf\x8c\x4c\xb1\x35\x22\x0d\xc2\x34\xbd\x9f\x44\x97\xe5\x40\xab\x07\x77\x20\x6b\x8d\x13\x16\x9c\x5d\x66\x89\x43\x73\xcb\xd2\xef\x2d\xdb\x1c\xe1\xa6\x63\x60\x51\x5c\xd2\xe9\x2c\x4b\x8f\x1c\x66\xb4\x16\x33\x2f\x9a\x46\x50\x54\x0e\xca\x29\xa3\xdb\xee\x1c\x4f\x5d\x14\x16\x43\x27\x85\xe1\xe5\xfa\x6c\xd4\x4e\x3b\xbe\x9f\x02\xf4\x61\xe1\x01\x42\x9d\x1e\x01\x03\x3c\xf1\x4f\x7a\x80\x2f\x86\x5c\xab\xa8\x0d\x5c\xae\xab\x51\x6b\x7b\x4d\xb3\x11\x19\xea\xda\xde\x98\xfd\x3f\x93\x5c\x7c\x79\xb3\x53\x7a\x33\xec\x5a\xa1\x24\xc5\x0c\x15\x37\x7c\x73\xd3\x5a\xc4\x5c\xa5\x2b\xf3\x53\x80\x2e\xfa\xba\x60\x86\x98\x24\x14\xc2\x6c\x3d\x19\x66\x51\xa9\x9c\x0b\x3b\xaa\xd1\xf6\x57\xca\xe9\x2f\x33\xe7\x49\x22\x3b\xaa\xb5\x44\xb6\x1e\x6f\x86\x7a\xb4\x0f\xb3\x4d\x21\xbb\xdc\x83\xcf\x87\x3b\xd5\x3b\x3f\x2a\xfe\xf2\xca\x7a\xfb\x92\x6a\x85\x76\x16\x9d\xaf\x59\xf4\xb4\x68\xe9\x3b\x71\x97\x33\x15\x59\xf3\xc7\x22\x66\xd3\xd7\x8a\x2c\x49\x50\x61\x77\x48\x76\x6f\x3d\xa2\x1b\xff\xab\x08\x92\xd9\x1e\x24\xe2\x65\x04\x68\xee\xbf\x13\x08\x3b\x1d\x01\xe2\xc1\x4f\xd6\x9f\x9a\xbe\xf9\x6a\x0b\x03\x2e\x7a\xd7\x3a\x19\x3f\x5d\xff\xdc\x34\xfc\x18\xc0\x8b\x88\x3f\x95\x04\x75\x42\xbb\x42\x96\x30\x05\xef\xf7\xfb\xcf\x7f\x23\x4f\x51\x7a\xbc\xc1\x69\x7c\x53\xbd\x0a\x9a\x69\xc8\x7e\xff\x8d\x30\xa3\x71\x2a\xfb\xde\x4e\x55\x6a\xbf\xf4\x23\xc8\xbc\xba\x16\xb2\x50\x5e\xfc\x1b\x32\x3f\x94\xdf\x7f\x1b\x23\x24\xbd\x41\x7a\xb0\xb8\xa5\xd3\xeb\x5d\x78\x12\x61\x1f\x98\x25\xf4\x98\x9b\xdd\xb4\xd6\x33\x9f\x2f\xe4\xfa\xc7\x26\x63\x52\xa0\x5e\x88\xd1\x66\x1a\xa9\xf1\x2b\x00\x00\xff\xff\xb0\x45\x65\x88\x1c\x12\x00\x00")

func definitionsOperationsHclBytes() ([]byte, error) {
	return bindataRead(
		_definitionsOperationsHcl,
		"definitions/operations.hcl",
	)
}

func definitionsOperationsHcl() (*asset, error) {
	bytes, err := definitionsOperationsHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/operations.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe0, 0x90, 0x9b, 0x92, 0x3b, 0x9f, 0xf1, 0xf4, 0x3e, 0xcd, 0x14, 0x9d, 0xb6, 0x1c, 0x75, 0xa5, 0xc4, 0xf, 0x8c, 0x72, 0x0, 0xb8, 0xa8, 0xe0, 0xaa, 0x59, 0x42, 0x5d, 0xb1, 0xf2, 0x4d, 0x56}}
	return a, nil
}

var _definitionsPairsHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\x4f\x6f\xd3\x40\x10\xc5\xef\xf9\x14\x4f\x39\xb5\xa8\x4a\x2f\xc0\x8d\x0b\x48\x48\x1c\x10\x48\xc0\x09\x50\xb4\xd9\x1d\xc7\x43\xec\x1d\x33\x3b\x4e\x1a\x10\xdf\x1d\xad\xff\x34\x51\xeb\xa4\x55\x7a\xab\x66\xe6\xbd\xdf\xbe\x9d\x8d\x67\x8d\x63\xc5\xdc\x97\xe4\x37\xa9\xad\xe7\xf8\x3b\x03\x6c\xdf\x10\x86\xbf\x37\x98\x27\x53\x8e\xeb\xf9\x0c\x08\x94\xbc\x72\x63\x2c\xb1\x2b\x34\xe4\xb9\xd8\x63\x9c\x46\x21\x0a\x2b\x39\x41\xe9\x77\x4b\xc9\x6e\xe0\xa5\xad\x02\x56\x84\x36\x51\x80\x4b\xf0\x12\x8d\xa2\xa1\x0e\xaf\x20\x0a\x32\xb7\x9e\xcf\xfe\x8d\x18\xb9\x78\x67\x93\x14\x43\x6d\xf1\x6e\xe8\x79\x8c\x33\x74\x80\x23\x5c\x55\x8d\x0c\x7d\x63\xe1\xda\xca\x1e\x4a\xbd\x75\x7e\xb3\x56\x69\x63\xb8\xba\x3e\x82\x50\x0a\x14\x8d\x5d\x35\xc9\xf1\xe2\x50\x5f\x7c\x56\xd9\x72\x20\x3d\x93\x4d\x29\x3b\x98\xa0\xe9\x3b\x71\x18\xee\xc2\x4a\xa4\x5b\xf6\x94\x93\x48\x26\xea\xd6\x94\xa5\x1a\xa7\x89\xf4\x70\xf2\x23\xc3\x5c\x39\xa0\x52\x0c\x8d\x70\x9c\x0e\x6c\x2c\x5e\x40\x39\x8e\x3e\x9f\xf1\x60\xf6\x80\xf0\xae\x61\xa5\x49\xbe\xcc\x7d\x9a\x68\x57\x52\x84\x95\x84\x56\xf3\x55\x5a\xab\x91\x02\x56\x7b\x28\x39\x5f\x62\xc7\x55\x85\x41\xfc\x31\x4d\xf7\xef\x87\xac\x3f\x72\x94\x66\xcd\xd2\x57\x4c\xd1\x96\xd2\x99\xa5\xe9\xdb\xcd\x8d\x7d\xdf\xe2\xd3\xd0\x37\x01\x49\x4d\x07\x99\xf9\x06\xb5\x61\xf7\x09\x59\x00\xbd\xc2\xc1\x9e\x63\xa0\xbb\x0b\x52\xc8\x82\xdd\x2c\xa4\xe8\x5f\x56\xa2\x75\x4d\xfd\xcc\x93\x87\xae\xc4\xbb\xac\x78\xd9\xab\xce\xde\xa3\xc2\xc9\x45\x18\xad\xa2\xab\xa7\x6f\xf9\x59\x36\x83\x1c\x3a\x95\x7b\x4d\x29\x8a\x44\xd3\xbb\xcd\xd1\x5e\xbf\x3c\x23\xda\x8f\x4e\xfc\x1e\x8d\x4e\xdd\xfe\x24\xa2\x4d\x5e\xfb\xae\x65\x18\x59\x51\x21\x4a\x79\xcb\xc2\x99\x8c\xb3\xf9\x88\xd9\xa8\xfc\x22\x3f\xcd\xf9\xe4\xe9\x87\xe1\xee\xe4\xb7\x1c\x0e\xc4\xe7\xc2\xce\x70\x4b\xef\xaa\x6a\xe5\xfc\x66\x59\xb4\xd1\x4f\x9a\xe7\xc2\xd5\xf7\x9f\xab\xbd\xd1\xf5\xd9\x97\xe6\x0c\x26\x41\x40\x5b\xd2\x3d\x8c\x6b\xc2\xae\x8f\x00\xc1\x99\x43\xa1\x52\x23\x49\xab\xfe\x08\x22\xf1\x9f\x93\xef\xfa\xec\xdd\xe4\xc1\xa7\x6e\x46\x62\xb5\xef\x01\x2a\xae\xd9\x28\xdc\x7f\x37\x32\xd0\x33\x2f\x66\x27\xba\x59\x06\xd6\xcb\xf7\x32\x2b\x20\xb0\x9e\x58\xff\x9b\x21\x31\x69\x48\xfb\x67\xd2\xc1\xaf\x72\x76\x95\x33\xde\xd2\xfd\x76\x05\xd6\x05\x46\x20\x7c\xfc\xf6\xe5\x2b\x92\x39\x35\xec\xd8\x4a\xdc\x76\x06\xbd\xd8\x98\xc3\x60\x97\x8e\xc6\x46\xf5\xf1\x73\x66\x82\x5b\x70\x81\x28\x86\x44\xb6\xc0\x8f\x88\xf7\xa2\x28\xd2\x43\x15\x74\x6c\x31\xc8\x2e\xa1\xa9\x9c\x15\xa2\xf5\x4d\x77\xc4\x15\x95\x6e\xcb\xa2\xe0\x84\x36\x06\x2a\x38\x52\x58\xe4\x10\xff\x07\x00\x00\xff\xff\x02\x6f\xed\xe4\x1b\x08\x00\x00")

func definitionsPairsHclBytes() ([]byte, error) {
	return bindataRead(
		_definitionsPairsHcl,
		"definitions/pairs.hcl",
	)
}

func definitionsPairsHcl() (*asset, error) {
	bytes, err := definitionsPairsHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/pairs.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0x3f, 0x7d, 0x7e, 0xac, 0x4, 0x4f, 0x97, 0x5c, 0x8e, 0x38, 0x8f, 0xee, 0x9f, 0x8e, 0x5c, 0x60, 0x2b, 0x18, 0xf5, 0x28, 0x55, 0x14, 0xd4, 0x7c, 0xe1, 0x51, 0x4d, 0x6d, 0x41, 0x30, 0x70}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
	"definitions/infos.hcl":               definitionsInfosHcl,
	"definitions/operations.hcl":          definitionsOperationsHcl,
	"definitions/pairs.hcl":               definitionsPairsHcl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": &bintree{nil, map[string]*bintree{
		"definitions": &bintree{nil, map[string]*bintree{
			"tmpl": &bintree{nil, map[string]*bintree{
				"function.tmpl":  &bintree{cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl":      &bintree{cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"operation.tmpl": &bintree{cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl":      &bintree{cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl":   &bintree{cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
	"definitions": &bintree{nil, map[string]*bintree{
		"infos.hcl":      &bintree{definitionsInfosHcl, map[string]*bintree{}},
		"operations.hcl": &bintree{definitionsOperationsHcl, map[string]*bintree{}},
		"pairs.hcl":      &bintree{definitionsPairsHcl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
