// Code generated by go-bindata. DO NOT EDIT.
// sources:
// cmd/definitions/tmpl/function.tmpl (567B)
// cmd/definitions/tmpl/info.tmpl (1.699kB)
// cmd/definitions/tmpl/object.tmpl (1.904kB)
// cmd/definitions/tmpl/operation.tmpl (2.051kB)
// cmd/definitions/tmpl/pair.tmpl (487B)
// cmd/definitions/tmpl/service.tmpl (10.465kB)

// +build tools

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\x8f\x25\x87\xae\xec\xe6\x07\x08\x9e\x8a\x82\xb0\xc8\xa2\xde\x25\x64\xa7\x6b\xb0\x99\x94\x66\x5a\x17\x62\xfe\xbb\xa4\x55\x17\x11\x0f\xde\x3c\x25\xcc\xcc\x7b\xf3\x3e\x26\xa5\x2d\x06\xc3\x47\x82\x7a\xda\x40\x4d\xb8\xbc\x82\xd2\x37\x23\xdb\x88\x9c\xab\xd2\x76\x2d\x38\x08\xd4\xa4\x6f\x7d\xdf\x91\x27\x16\x3a\x7c\x36\x55\xcb\x2f\xb3\x66\xd2\x77\xc6\x13\xde\x20\xa1\x31\x9e\xba\x65\xa0\x88\xd5\xa4\x77\xc1\x9a\xb9\xd2\x8e\x6c\x51\x47\x5c\xa4\x04\x75\x56\xec\x4d\x5c\x06\xd6\x48\xa9\x58\xe6\x5c\xa7\xa4\x26\xbd\x37\x83\xf1\x51\x3f\x0e\xce\xef\x4c\x14\xfd\x20\x83\xe3\xe3\x35\x1f\xe2\xab\x93\xe7\x26\x78\x6f\x72\x46\xe8\x05\xbd\x71\xc3\x2f\xa6\xa5\x5c\x62\x7e\xdf\xb4\x2c\xb8\xa7\x38\x76\x12\x3f\x8c\xe7\x00\x15\x00\xf4\x86\x9d\xad\x57\x05\xdc\x9d\xa9\x57\xeb\x6a\xa6\xa2\x2e\xd2\x1f\x71\xac\x9c\x60\x03\x0b\x9d\x44\x37\xcb\xbb\xc1\x3f\x66\xdc\x82\xf8\xeb\xca\x3f\xbe\xef\x01\x00\x00\xff\xff\x41\xc8\xae\xbf\x37\x02\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xfc, 0xb, 0xf4, 0xfb, 0xf, 0x94, 0xca, 0x64, 0x7a, 0xb8, 0x48, 0xf9, 0x69, 0xf1, 0x88, 0x46, 0x59, 0xd3, 0xbc, 0x0, 0x4e, 0xe7, 0x8, 0x1e, 0xdf, 0x27, 0x59, 0x81, 0x75, 0x52, 0xa2}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xf5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x93\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\x64\x27\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x93\xa6\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x63\xb1\xc6\x52\x6f\x62\x08\xe5\xc8\x28\x5e\xa6\x99\xcc\xdf\xe1\xf4\x0a\x97\x57\x37\x38\x3b\x3d\xbf\x99\xb1\x8a\x67\x2b\xbe\x24\xb8\x75\x45\x96\x31\x21\x2b\x6d\x1c\x26\x0c\x00\x46\x85\x74\x23\x96\x30\xd6\xb6\x07\x30\x5c\x2d\x09\xe3\xd5\x14\x63\xa1\x0a\x6d\xf1\x76\x8e\xd9\x79\x58\x5d\xf0\x0a\xde\xb3\xb6\xc5\xd8\x92\x69\x44\x46\x97\x5c\x52\xd8\x1f\xaf\x70\x07\xa7\x4f\xb8\xa4\x32\x1c\x61\x69\x8a\xf7\x82\xca\x1c\x42\xe5\x74\x0b\xa1\xd0\xb6\xdb\x49\xde\x63\x21\x1c\xcb\xb4\xb2\x01\x62\x47\xb7\x89\x35\x3b\x75\xef\x23\xe2\x6e\xfa\x79\xa8\x1b\x48\x9a\x59\x84\x08\xf2\x9f\xb8\xcd\x78\xd0\xc7\x1c\x47\xc7\xc7\x61\x77\xd5\x01\x1f\x80\x54\x1e\x96\x09\x63\xc1\x00\xec\xf6\x30\x4c\xb7\xce\xd4\x99\x43\xdb\x2b\x6f\xd8\xbe\x3d\xc5\x16\x30\x6e\xd6\x55\x57\xcb\xfb\xad\x2f\xf7\x67\x36\x0c\x31\x4e\xd3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\x17\xdf\x29\x73\x68\x78\x59\xd3\x14\x87\x90\xc4\x95\x85\xd2\x0e\x96\xdc\x14\x47\xfd\x07\x4b\x2e\x96\x8a\x75\x84\x72\x6f\x5e\xc7\x50\x42\xf2\xea\x8b\x75\x46\xa8\xe5\xd7\x38\x10\x05\xcf\xa8\xf5\xac\x57\x7e\xde\xeb\xb0\x2b\x8a\x40\x7f\x76\x1b\x27\xc4\x7b\x56\xd4\x2a\xc3\x44\xe2\xd5\xb3\xae\x25\xf8\x40\xae\x6b\xfc\x54\xd8\xaa\xe4\xeb\xde\x8d\x49\x32\xf4\xa3\xf7\xd5\x90\xab\x8d\x82\x9c\x3d\xb0\x2f\x90\xfe\xa9\xe6\xf5\x13\x9a\xcd\x50\x33\xf9\x4d\xa1\x9e\xe9\x11\x18\xcc\xd1\x0c\x78\x59\x3f\x50\xa5\x8d\xac\xff\xc0\x9d\xc9\x00\x75\x8a\x85\xd6\x65\xd2\x13\x89\x02\x72\x16\x6e\xf8\xe5\x9e\x4f\xe0\xc5\x1c\x87\x7d\x8d\xe7\xdd\x9e\xc2\x99\x9a\xe2\x41\xbf\xdd\xe8\x16\xd4\x1d\x7e\x90\xd1\x9f\xc3\x3c\xc6\x84\x82\x97\x96\xf6\xb9\xa5\x8b\xda\xba\xfd\xa6\xe3\xaf\xfb\x9e\x0f\xfb\xae\xb8\x12\xd9\xa4\x90\x6e\x76\x5d\x19\xa1\x5c\x31\x19\x3d\xc6\xfa\x91\x16\x7c\x71\xff\x72\x7f\xdd\xbd\xd8\x3c\xbb\x51\x92\x3c\xb4\xe8\xbf\x99\xdd\xce\xca\xbb\xf9\x7e\x5e\x3e\x3a\xf6\xdd\x3f\x6c\xe7\x97\x76\xbf\xfc\x19\x00\x00\xff\xff\x1a\xaf\xa4\x3e\xa3\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbe, 0xfc, 0x4d, 0xd5, 0xaa, 0x43, 0xd, 0x38, 0x2a, 0xe9, 0x1b, 0x28, 0x33, 0xa1, 0xf, 0x25, 0xb3, 0x72, 0xf8, 0xb5, 0xf, 0xf, 0x28, 0x3d, 0xdd, 0x4d, 0x3d, 0x95, 0x9e, 0xd1, 0x56, 0x3e}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x8f\xe3\x34\x10\x7e\x5e\xff\x8a\x8f\x6a\x05\x09\xea\x26\x77\x80\x78\x38\xae\x0f\xe8\xba\xc0\x49\x6c\x8b\xd4\xc2\xbb\xeb\x4c\x5a\xb3\x89\x1d\xd9\x93\xd2\xd2\xcd\x7f\x47\x4e\xd2\x6e\xba\xdb\x43\x3d\xf1\xc2\x9b\xed\x99\xf9\x66\xbe\x6f\xc6\x76\x9a\xe2\x83\xcd\x08\x6b\x32\xe4\x24\x53\x86\xd5\x1e\x6b\x7b\xda\x43\x1b\x26\x67\x64\x91\xaa\x32\xfb\x01\xd3\x39\x66\xf3\x25\xee\xa7\x1f\x97\x89\xa8\xa4\x7a\x94\x6b\x02\xef\x2b\xf2\x42\xe8\xb2\xb2\x8e\x11\x09\x00\x18\xe5\x25\x8f\xba\x15\xeb\x92\xfa\xa5\xdf\x1b\x35\x12\xb1\x10\x69\x8a\x9f\x34\x15\x19\xb4\xc9\x68\x07\x6d\x60\x57\x7f\x92\x62\xac\x34\x0b\x65\x8d\x0f\x38\x87\xc3\x1d\x9c\x34\x6b\xc2\xed\xe3\x18\xb7\x5b\xbc\x9b\x20\x99\xb7\x7e\x0f\xc4\x12\x4d\xd3\xa2\x76\x91\x1f\x03\xd0\xe1\x80\xdb\x6d\x32\x93\x25\xe1\x09\x6c\x7f\x93\x5e\xc9\x02\x4d\x83\x5a\x1b\xfe\xfe\x3b\x4c\xf0\xf6\xfd\xfb\xe0\xf4\x18\x82\x03\x3e\x99\x2c\x2c\xbb\x92\x3a\x6c\x68\x0f\xde\x10\x7c\x29\x8b\x82\x3c\xa3\x36\x9a\x43\x89\x6b\x7b\xe7\xd9\x3a\xb9\xa6\x44\xa4\x69\x08\x98\xcd\x97\xf7\x8b\x77\x61\x05\xdc\xf5\xe1\x5f\x79\xe4\x81\x9a\xc7\xe2\x97\xf9\xef\xbf\x4e\x61\x2c\x63\x45\x50\x9b\x40\x25\x83\xad\xd9\xeb\x8c\xe0\xc9\x6d\xb5\x22\x9f\x9c\x87\xe3\xc3\x8f\xb3\x20\x71\x88\xb0\x95\xa6\xec\x85\x59\x7b\x28\x6b\x54\xed\x1c\x19\x86\x97\x39\x25\x22\x34\xe0\x68\xf7\xec\x6a\xc5\x38\x5c\xab\x5e\x70\xd3\x79\x90\x6d\x4a\x5e\x39\x5d\xb1\xb6\xe6\xd9\xf8\x49\xc3\x49\xba\x67\xbf\xe5\xbe\xa2\x56\xfb\xa6\x19\x9c\xbc\x50\x5a\xdc\xa4\x29\x54\xa1\x43\xf5\xbd\xd0\xc7\x9d\xc1\x5f\x1b\xad\x36\x03\xa6\xb2\xd0\x5b\x4a\xc4\x4d\xef\xb1\xe8\xd4\x77\xa2\x4d\x9a\xa6\x61\x5a\x50\x7b\xca\x20\x3d\x64\xd8\x95\xb2\x42\x6e\xdd\x71\x9a\xb6\xb2\xa8\x69\x8c\x37\x28\x49\x1a\xdf\x76\xc2\x13\x8f\xf1\xb6\x3f\xf0\xc4\x2d\x54\x8b\xd3\x8e\x88\xb8\xc9\xac\xa1\x76\xf3\xed\x37\xe2\xa6\x0c\xd6\x30\xb5\xc9\x43\xcd\xb4\x13\x8d\x10\xd7\x08\xfb\x2c\xea\xfd\xae\xbd\x14\x4d\x23\xf2\xda\x28\x44\x16\x5f\x77\xae\x31\x7e\x26\xee\xf5\xd5\xbe\x2a\xe4\xbe\x97\x2e\x8a\xcf\xc5\xc3\xa1\x2d\xd1\x11\xd7\xce\xc0\x26\xaf\xb4\x0e\x45\xbd\x02\x5f\x7c\x02\x7c\x7b\x0e\x1e\x1f\x23\xfa\x2c\x17\xe0\x31\xc1\xf6\xac\x02\xd1\xf7\xb3\xf0\x6d\xf6\xcf\x21\x16\x9d\x25\x1f\x63\x65\x6d\x11\x9f\x52\x7b\x96\x1c\xc5\x5d\x73\x75\x0e\x9b\x84\xb6\x7c\x79\xd5\xfd\xfe\x62\x82\x37\x3d\xce\xbf\x8b\x35\x06\xbb\x9a\x5a\xc7\x46\x0c\x69\x0d\x2a\x7b\xc2\xdf\xe4\xec\x1f\x61\x76\xda\x88\x5c\x16\x9e\x2e\xaa\xfc\x50\x7b\xfe\xbc\x36\xfe\x27\x96\x93\x73\x96\x95\x34\x5a\x45\x79\xc9\xc9\xa2\x72\xda\x70\x1e\x8d\xfa\xb9\x1f\x20\x34\x4d\xb8\x48\xfd\xe4\x8f\xe2\xb8\xa7\xfe\xff\x18\xa9\x8e\xfc\xd3\xe4\x1a\xf6\x17\x67\xb0\x7b\x53\x86\xcf\xcb\xab\xb2\x55\x61\x0d\x45\xbb\xc1\xc9\xe1\xf4\x84\x5d\xf3\xbb\x5c\x2c\x7f\x77\x49\xb4\x17\x0f\xe3\x80\x61\x1b\x10\xbe\xb6\xe6\x9f\x00\x00\x00\xff\xff\xa3\xa3\x68\x3e\x70\x07\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdc, 0xf7, 0x57, 0x9a, 0x13, 0xa4, 0x6f, 0xa6, 0xe6, 0xfb, 0xa7, 0xc2, 0xfa, 0x39, 0x86, 0xe6, 0xad, 0x49, 0x22, 0xca, 0xd3, 0xf5, 0xfa, 0xf7, 0xbf, 0x4f, 0x4b, 0xbc, 0xd3, 0xd7, 0x99, 0xff}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6f\xd4\x30\x0c\x7e\xcf\xaf\xb0\xaa\x7b\x68\xa5\xd1\xbe\x23\xed\x01\xc1\x90\x26\xa1\xad\x02\x21\x1e\x51\xae\xf5\xdd\x22\xda\x24\x38\xbe\xdb\xa6\x92\xff\x8e\x92\x76\x77\xbd\xd2\x51\x0e\x10\xe2\x2d\x89\xed\xcf\xf6\x97\x7c\xb1\x95\xd5\x17\xb9\x45\xe0\x47\x8b\x4e\x08\xd5\x5a\x43\x0c\xa9\x00\x00\x48\x2a\xa3\x19\x1f\x38\xe9\x77\xca\x24\x22\x13\xa2\xeb\x5e\x00\x49\xbd\x45\x58\x7d\xbe\x80\x95\x82\x97\x97\x90\x5f\x6b\x46\xda\xc8\x0a\x1d\x78\x2f\xba\x0e\x56\x2a\x7f\x83\xae\x22\x65\x59\x19\x1d\x0e\x43\x06\x18\x2c\xca\xd9\x46\x3e\xde\xc8\x16\xc1\x7b\x50\x4f\xc1\xd0\xc5\x4c\x21\x83\xda\x80\x21\x48\xf1\x6b\xf0\x8f\x8e\x89\x43\xda\xab\x0a\x29\xc9\x26\xe7\x6c\x48\x6e\xc3\xb9\xf7\x31\xfe\x03\x93\xd2\xdb\x34\x03\x17\x17\x07\x4c\xd4\x75\x28\x64\xd8\x8f\x9b\x30\x36\x74\xb1\x52\xf9\xad\x8d\x0d\x04\x8f\xa2\x88\xd5\x1a\xdb\xa7\xf9\x06\x6c\x4a\xe9\x2a\xd9\x84\x92\x07\xcb\xa4\xc5\x01\x78\x3e\x26\x1d\x2c\x6f\x0d\xb5\x92\x4b\x49\xb2\x0d\xb9\x32\x38\x35\xbc\x47\xb7\x6b\xd8\x7d\x52\x7c\x57\xf6\x77\x73\xd2\x65\x12\x42\xc6\x2c\x69\xc3\x31\xfa\x9d\xe9\xd3\x2c\xd6\x1e\x90\x5f\xf7\x17\xfb\x3b\x6d\x8c\xc2\xd3\x8a\x1f\x60\x78\x23\xf9\x70\x76\xf1\xd7\xbb\x7c\xba\xb6\xd3\x5d\xdc\xb6\x3b\xc7\x57\xed\x1a\xeb\x8f\x5a\xb5\xb6\xc1\x16\x35\x63\x3d\xf7\xc6\xd2\x4c\x78\x21\x8a\x02\x16\x3d\x23\x28\xac\x11\x30\x00\xd7\x58\x03\x1b\xb8\x93\x7b\x84\x8d\xa1\x7b\x49\x35\x54\xa6\xb5\x92\xd5\xba\x41\x38\x60\xc9\xc0\x9d\xcb\xfb\x47\xbe\x9c\xc3\x31\xed\x2a\x86\xce\x0b\xb1\xd9\xe9\x0a\x52\xb7\x1c\x94\x9d\xd5\xee\xb9\xd8\x13\xcd\x0c\x4a\x24\xe4\x1d\x69\x48\x16\x01\x92\x40\xef\xcf\x35\x75\x46\x31\xff\x44\x44\xa7\x9f\xcd\xac\x8c\x90\x08\x2e\xe1\x06\xef\x6f\x2d\x52\xbc\xe2\x1b\xc3\xd7\xc7\xea\xaf\x88\x0c\xa5\xc9\xb8\x5a\xef\x93\x6c\xfa\xe1\x1c\x99\x14\x5e\x3c\x97\xef\x0c\x7a\xfe\x03\x6d\x0e\xe4\xfd\x09\x41\x23\x46\x9e\x88\x1a\xaf\x8e\xdf\x75\xd4\x54\x29\x15\x95\xa6\x51\xd5\xe3\x41\x3c\x11\xe5\x55\xd3\xc0\xda\x98\xe6\x17\xc7\x52\x60\x1e\x67\x46\x4a\x30\x17\x05\x58\xa9\xc8\x05\xa1\x8f\x67\x52\x77\xf0\x3f\x21\x7b\x9a\x71\x6e\x86\x3c\x3f\x40\x66\x8b\xde\x47\x04\x63\xf3\x32\xd6\xb1\x04\x12\x0c\xfb\x09\xee\x01\xf6\x47\x22\xe7\x97\x5e\x7c\x0f\x00\x00\xff\xff\xb4\x30\x5a\x77\x03\x08\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0x7e, 0x5d, 0x16, 0x44, 0x6e, 0xcf, 0xa, 0x57, 0xf1, 0xe8, 0x1c, 0xfb, 0x8, 0x6e, 0x26, 0x89, 0xc2, 0x13, 0x34, 0xfd, 0xea, 0x2a, 0xe1, 0x4c, 0x12, 0xa1, 0x32, 0x35, 0xc4, 0x9d, 0x75}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x31\x6b\xfb\x30\x10\xc5\x77\x7d\x8a\x87\xf1\x90\x40\x62\x0d\xff\x2d\x7f\x3a\x35\x1d\x4a\x21\xc9\x10\xda\xb1\x28\xf2\x55\x11\xb1\x25\x21\x9f\xdd\x1a\xd7\xdf\xbd\xc8\x4e\x03\xa5\x4b\x35\xe9\x7e\xf7\xde\xe3\x9d\x94\xb8\xf7\x25\xc1\x90\xa3\xa8\x98\x4a\x9c\x7a\x18\x7f\x9b\x61\x1d\x53\x74\xaa\x92\xba\x2e\xff\x63\xbb\xc7\x6e\x7f\xc4\xc3\xf6\xf1\x58\x88\xa0\xf4\x45\x19\x42\x50\x36\x36\x42\xd8\x3a\xf8\xc8\x58\x08\x00\xc8\xb4\x77\x4c\x1f\x9c\x89\x79\x34\x96\xcf\xed\xa9\xd0\xbe\x96\xca\x37\xeb\x92\x3a\x69\xfc\xba\x61\x1f\x95\x21\xd9\xfd\x93\xe1\x62\xe4\x99\x39\xe8\xca\x92\xe3\x6c\x72\x15\x7f\xf0\x71\x1f\xa8\xc9\x84\x58\x0a\x31\x0c\x6b\x44\xe5\x0c\x21\x7f\x5d\x21\xef\xb0\xb9\x43\x71\x48\xe5\x30\x8e\xd3\x36\x0f\x4e\xd5\x94\x78\xde\x15\xbb\xf4\xfd\x04\xfb\x83\x6a\xb4\xaa\x92\x46\x4a\xbc\x58\x3e\x0f\xc3\xb7\x72\x1c\xf1\x6e\xab\x0a\x2a\x84\xaa\x47\xe2\x57\xdf\x38\xa2\x53\x55\x4b\x60\x8f\x7d\x60\xeb\x5d\x53\x08\x29\xc5\x2c\xd9\x52\xa3\xa3\x9d\x70\x8a\x7d\x6b\x9d\xfe\x15\xbc\xe8\xae\x79\xc7\x3e\xa4\x79\x89\x54\x15\xc3\x74\x79\x24\x6e\xa3\x9b\xc8\x0c\xd2\x7b\xa2\x7e\x83\xec\x47\x89\x6c\x75\xdb\x3e\xa7\x3a\x1b\x74\x33\x19\xc5\x7c\x31\xb9\x32\x35\xf8\x0a\x00\x00\xff\xff\x34\x17\xe1\xb9\xe7\x01\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0xdd, 0x71, 0xc8, 0xa0, 0x32, 0x44, 0xf3, 0x95, 0xa1, 0x4a, 0x2a, 0xbf, 0x3b, 0xe3, 0xdb, 0x28, 0xd, 0x10, 0x2f, 0xcf, 0xe, 0x89, 0xa2, 0x31, 0xab, 0x9c, 0xb1, 0x57, 0x85, 0x68, 0x12}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x6f\xe3\xb8\xf5\x7f\xf7\xa7\x38\x6b\xe4\x41\x1a\x38\xd2\xff\x8f\xbe\xa5\xf0\x43\x9b\x99\x4e\x07\xbb\x9d\x09\x26\x69\xf7\x61\x77\x11\xd0\xd2\x91\xcd\x86\x22\xb5\x24\xed\x8c\xe1\xd1\x77\x2f\x78\xd1\x5d\x72\xec\x69\x30\x9b\x02\xf1\x4b\x24\xf2\xf0\xf0\x9c\xdf\xb9\x92\x4a\x1c\xc3\xb5\x48\x11\xd6\xc8\x51\x12\x8d\x29\xac\xf6\xb0\x16\xf5\x3b\xec\x28\x01\xca\x35\x4a\x4e\x58\x9c\xe4\x69\xac\x50\xee\x68\x82\x7f\x86\xb7\x9f\xe0\xe3\xa7\x3b\x78\xf7\xf6\xc3\x5d\x34\x2b\x48\xf2\x40\xd6\x08\x87\x03\x44\x1f\x49\x8e\x50\x96\xb3\x19\xcd\x0b\x21\x35\x04\x33\x00\x80\x79\x22\xb8\xc6\x2f\x7a\xee\xde\xa8\x98\xcf\xdc\xd3\x9a\xea\xcd\x76\x15\x25\x22\x8f\x89\x50\x97\x29\xee\xe2\xb5\xb8\x54\x5a\x48\xb2\xc6\x78\xf7\xa7\xb8\x78\x58\xc7\xc8\xd3\x42\x50\x5e\xad\x3e\x69\x4d\x22\x31\x45\xae\x29\x61\xe7\xac\xda\x68\x5d\x24\x8c\xe2\xe9\x7b\x79\x44\x94\xa3\x8f\x4e\x58\xa1\xf7\x85\x21\x0f\x67\xb3\x1d\x91\x70\x0f\x8d\xa4\xd1\x8d\x14\x3b\x9a\xa2\xf4\x33\x95\xde\xd1\xbf\x08\xdb\xa2\x1f\xbc\x75\x9c\x2a\x9a\x6a\xff\xe8\xd6\x3d\xbc\x93\x52\x54\x73\x8d\x36\xd1\xa7\x42\x53\xc1\xd5\x6c\x16\xc7\x70\xb7\x2f\x10\xa8\x02\xbd\x41\x30\xc2\x40\x26\x64\xc7\x76\x89\xe0\x4a\x3b\xb2\x25\xcc\x5b\x33\x73\xbb\xde\xef\x04\x64\x47\x28\x23\x2b\x86\x50\x10\x2a\x55\xe4\xd7\x05\xb3\xc3\xe1\x12\x24\xe1\x6b\x84\x8b\xfb\x05\x5c\xec\xe0\x6a\x09\xd1\x8d\xa1\x31\xdc\x0d\x4e\x86\x82\x66\xc0\x85\x86\x8b\x5d\xf4\x9e\x89\x15\x61\xcd\x9c\x19\x7b\x8b\x2a\x91\xd4\x4a\xdd\x9d\xf8\xdb\x96\x31\x2f\x8e\x97\xee\xa2\x12\xef\xde\x51\xd4\xc2\x56\x3b\x21\x4f\x0d\x8f\xd6\x63\x68\x15\xf9\xb4\xfa\x37\x26\xfa\x1f\xa8\x49\x4a\x34\x01\x63\x23\x54\x15\xa2\x90\x57\xe3\x06\x1e\x61\x49\xa3\x99\xc5\x6b\xb0\x4e\x6e\x13\x0d\x87\x71\xbd\x3f\xf0\x4c\x9c\xa8\xf7\x25\x5c\x14\xdc\x08\x7f\xb5\xac\xf5\xf8\x0a\x5a\xdc\x10\x95\x74\xe9\x68\x66\x31\xa2\xaa\x60\x64\x5f\x99\x0d\xfc\xaf\xc5\x68\x39\x41\xd6\x82\xe2\x49\xc8\x1d\xa7\xb2\xf4\x54\xd6\x2d\x86\x6c\x5a\x8f\xa5\x05\xf7\x3d\xea\x1e\x4e\x8f\x94\x31\x58\xa3\xee\xe3\x97\x49\x91\xfb\xb1\x68\x16\xc7\x66\xf1\x25\xdc\x6d\xa8\x82\x6c\xcb\x13\x2b\x8e\xda\x88\x2d\x4b\x2d\x6e\x2b\x84\x84\x30\xe6\x92\x55\x65\x2b\x9a\x17\x0c\x73\x34\xa9\x2a\xaa\xd6\x23\x48\xd4\x5b\xc9\x29\x5f\xf7\x77\xa4\x0a\x24\x92\x14\x04\x67\x7b\x20\x3c\xed\xf1\xcf\x45\x4a\x33\x8a\x69\x34\x33\x02\x0c\x35\x09\x04\xbc\x71\x23\x61\x9f\xf3\xc1\xe2\x22\xf2\x05\x88\x07\x63\x46\x11\xbd\x47\xed\x03\xa6\x5e\x1e\x5a\x22\x9a\x19\x9a\x43\x6d\x36\x27\x2d\x88\x3c\x0a\xba\x4c\x1d\xb9\x43\xdc\x13\x75\x09\x0e\x15\xe6\x6a\x1c\x73\x35\xc4\x9c\x72\x2d\x4e\xc3\xdc\x62\xd4\x80\x2e\x78\x82\x0b\x28\x18\x12\x85\x90\x93\x07\x04\xb5\x95\x08\x84\x31\xb0\x8c\x37\x44\xc1\x0a\x91\xc3\xa3\xa4\x5a\x23\x87\x15\x66\x42\xa2\x91\xc1\xc3\x39\x10\xb2\x81\x73\x01\xb5\x27\xd4\xca\x57\x90\x46\xb7\x43\x20\x45\x1e\x1a\xcd\x8f\xe7\x9b\xa9\x98\x3b\x25\xde\xe2\x18\x7e\xa6\x7a\xd3\x09\x03\x0b\x29\x29\x0a\xb6\x87\x4e\xbe\x81\x9d\xc9\xd2\x60\x70\x75\xc9\xd6\x02\x3b\x1a\x5a\x16\x87\x3e\xe3\x60\xd7\x8d\xb0\x10\x8c\x0a\x43\x07\x31\xa3\xcd\xe0\x8f\xb8\xbf\x1a\x66\xc6\x45\x3d\x6f\x4b\xc7\x15\xec\x16\xde\x89\x3a\x91\xda\x7a\x1c\x07\xd1\xb0\x53\x05\x49\xb0\x93\xc1\x34\xe6\x05\x33\xfd\xc1\xdc\x24\xfe\x7b\x8e\x8f\x73\xeb\x0a\xb7\xcc\xc4\x62\x30\x86\x65\x68\x07\xf1\x71\x9a\x8d\x6a\xf3\xa8\x38\x58\xad\x78\x32\xb1\x7b\xe5\xaa\x4f\x2e\xed\xeb\x99\x62\x46\x79\xb3\x6f\x37\x01\x1b\xc5\x29\x4f\xf1\x0b\x44\xf0\x7f\x13\xf9\xf7\xc2\xfa\x7a\x8b\xf0\xff\x2d\xef\x38\x86\xb7\x98\x91\x2d\xd3\xce\xb0\x50\x96\xce\x0d\xa9\x32\x7b\x9a\x09\x57\x2b\x6d\x4d\x51\x05\x26\x34\xa3\x09\x10\xab\x85\xab\x2d\xe3\xeb\xeb\x12\x53\x09\xd0\xb7\x94\x13\xa8\x93\xce\x87\xee\x0c\xbf\xfc\x66\xd8\xf5\x53\x77\x39\x3b\x8d\xed\xb8\xdd\x3a\xd8\x17\x1c\x2e\x76\x47\x8b\xc3\x00\x7f\xe7\x3e\x4d\x3c\x76\xe1\xaf\xc6\x33\x3e\x44\xdb\x4f\xd8\x3c\x7b\x91\xf1\xb1\xf8\x35\x16\x31\x9b\xd4\x70\x9a\x07\xb3\xa4\x2c\xab\x0e\xa8\x20\x52\x61\xea\x11\x76\x36\xe8\xad\x30\x0b\xca\xb2\x6b\x03\x67\x45\x8f\xa7\x1d\x89\x63\xf8\x8c\xbf\x6f\xa9\xc4\xd4\xcd\x8e\x81\x6a\x26\x2a\x71\x6b\x6a\x8f\xd7\xdf\x89\xb2\x9b\x12\x2a\xc7\x6c\x07\xb0\x12\x82\x35\x55\x79\x92\xac\x99\x9e\x28\xd5\x5e\x5a\x97\xa5\x08\x3b\x4d\xda\x9a\xfa\xb9\xa5\x3d\x59\xde\xf7\xf5\x29\xe5\x24\x81\x1b\xf2\xef\x8d\x6f\xe5\x76\x52\xe1\xcd\x84\xef\xd9\x1a\x62\x29\x5c\x92\x57\x36\x7c\x6c\x51\x7e\x33\xe1\xaf\xae\x68\x1c\xe3\x1a\x88\x42\x57\x3e\x19\x42\x30\xc1\x67\x01\x68\x8e\x08\x55\x5d\x95\xa8\x4c\x56\xba\x5a\x4e\xc5\x49\x53\x6a\x2c\xec\x57\x60\x76\xa9\xaa\x89\xfd\x63\x72\xd9\xfd\x02\x6c\xc2\x70\xc6\xb0\x82\x34\x0b\xd5\x23\xd5\xc9\x06\x76\xd1\x8f\xb8\x6f\x0d\x8f\x47\xcc\x99\x51\x63\x7e\x89\xe9\x45\x6a\xab\xb4\xca\xe0\x55\x4d\xe2\x1b\x2e\xa7\x6d\xf4\x84\x2b\x1c\x3a\xcb\xec\x0e\x82\x6b\xca\xb7\xd8\x99\x28\x3b\x6f\xa7\xb1\x5e\x82\x96\x3d\x36\x7e\xe1\xf1\x55\x3b\x77\x06\x8c\x82\xbe\xf3\x85\x1d\xd0\x5a\x11\x33\x1d\xe5\x67\x46\xfa\x2b\xc2\xc7\x11\x1e\xcb\x4b\x4f\x40\x3c\xc8\x4d\x67\x60\x6c\xbb\xcc\xea\x78\x91\x08\xbe\x43\xa9\x5b\xd1\x3a\xad\x63\x30\xad\x61\xd8\xb7\x62\xe7\x60\xf2\x0c\xd6\x9d\xb4\xf0\xd0\xca\xff\x95\xa5\x4f\xb7\xb6\xbd\x51\xe9\x48\x01\xc8\x8c\x01\xbe\x59\x98\x8c\x30\x35\xe5\xbe\x23\x9e\x53\xb6\x53\xe8\x19\x09\x8f\x66\xf0\xc3\xb9\x66\xf0\x27\x87\xa9\x0c\x5f\x2e\x9a\x6b\x24\x53\x3c\xaa\x2d\xed\x5d\xd2\xc1\x1c\x31\xd4\xd5\x2f\xbf\x29\x2d\x29\x5f\x1f\x7c\x9b\xdc\xf1\xd1\xcb\xb2\x84\xb2\xd6\xa8\xa7\x70\xfb\xdc\xea\x04\x5f\x00\xa7\x6c\x76\xbc\x2d\x7c\xd9\x2d\x61\xbd\xe2\xb5\x29\x7c\x6d\x0a\xff\xf0\xa6\x30\x50\xf0\xa6\x9e\x0c\x5f\x5b\xc4\x6f\x6f\x11\x5f\x68\x8b\xf1\x5d\x9b\xb8\x17\x8a\xc1\x1f\xd9\x66\xa9\xe8\xbb\x36\x5a\x2f\xaa\xfd\x81\xc3\x81\x66\xc0\xdd\xe5\xce\xdc\xdf\xc0\xce\xdb\x88\xb6\xd4\x51\x91\xd9\xf3\x46\x30\x9a\xec\xa3\xbf\x30\x06\x5f\xbf\x76\xc7\x5a\xe9\x6e\x7a\xea\xfc\xde\xf2\xcc\x06\xe7\x9f\x5c\x6d\x8b\x42\x48\x5d\xf5\x38\x66\xf0\x6a\x37\x54\x69\x38\x72\x38\x18\x9c\x46\xb4\xff\xf6\x36\xd1\xb3\xe5\x69\x8f\xeb\xd1\xf6\xd1\x5f\x27\x76\x9d\xf6\x24\x53\x9d\x69\xa6\x31\xf7\x7c\x7e\xb0\xcb\xd9\x49\x20\x8f\x9e\x21\xfa\xd8\xfd\xcf\x74\xd6\x27\x36\xd6\xcf\xd6\x57\xb7\xee\xcb\x9f\xed\xca\x7b\x04\xe3\xe9\x9b\x63\xf7\xd9\xf2\x27\x91\x74\x0b\x53\xf7\x52\x99\x99\xe9\xfb\x4a\xd6\xc9\xeb\xe5\x1a\x0d\x93\xb6\x26\x99\x9d\xce\xa6\xfd\x35\xf4\xc9\x8b\xeb\x86\xed\x31\x20\xdb\x73\x63\xa7\x15\xf0\x7d\xe3\x13\x07\x16\x70\x05\xb0\x1d\x93\xf6\x71\xec\x83\x6d\x1c\x57\xe4\xdd\x8f\x79\xb6\xb7\x4c\x24\x1a\x50\x08\xf8\xff\xc6\x80\xd5\xbe\xca\x23\x91\x6b\xd3\x9a\x6e\xf2\xa2\xe0\x65\x19\xb6\x36\x0d\xec\x45\x78\x74\x43\x24\xc9\x55\x74\x6b\x7d\xd6\x50\xf8\xf1\xcf\xd6\x03\xdb\x13\x4d\x90\x24\xfa\x8b\xbf\xac\x30\xbb\x46\x7f\x25\xc9\xc3\x5a\x8a\x2d\x4f\x83\xb0\x1f\x48\xaa\x95\x7a\x7e\xa6\x7a\x73\xed\xd6\x04\x89\xfe\xb2\x80\x8e\x04\xd7\x84\x31\x94\x55\xdf\x30\x06\x53\x6b\xfd\x11\xc4\x8e\xe9\xdc\x93\xa0\xd6\xc0\x8f\xf5\x24\x3a\x0b\x13\x77\x56\x5c\x02\x29\x0a\xe4\xa9\xed\xc4\xd5\x02\x54\xe4\xed\x61\x3f\xfb\xb4\xb0\x88\xa2\xa8\xc1\x6a\x47\xa4\xe9\x9f\xa7\xb2\xce\xac\x5d\x24\x50\x5a\x0d\x83\xf0\xd0\xcb\x99\x36\xd7\xe8\x4d\xe5\x78\x5e\x87\x1b\xa2\x37\x0e\xd9\x7e\xd9\xf0\xf1\x4b\x78\x0a\x01\xfe\xee\x17\xcf\xe7\xa1\x7f\x6b\x15\x9c\x70\xac\x39\x70\xe9\x54\x6f\x60\x09\xf3\xc5\xaf\xf3\x5f\xe7\x83\xba\x34\x52\xe4\xcc\x0f\xa5\x04\xd3\x81\x65\x42\xe6\x44\xdb\xc4\x19\xcc\x1d\xbe\x26\x58\xca\x72\x6e\x8f\x2b\xcd\x06\x65\x09\x0d\x54\x65\x10\x36\x70\x88\x42\x2f\x6a\x7e\x47\x8f\x49\xd6\x1c\x0d\x17\x9a\xd9\x65\x3f\x2c\x4d\x82\xed\x55\x44\xe7\xb8\xad\xe2\x33\xea\xd2\xdd\xe0\xbe\x26\x39\xda\x4e\x71\xe8\xd6\x77\x92\xe6\x3f\x11\xa5\xbd\x7f\xbf\xe3\xa9\x39\x1a\x6d\xae\x45\x9e\x93\xb2\x34\x2a\x54\x0e\x3f\x95\x9b\xfa\xf9\xf3\x35\x43\xbd\x90\x68\x8c\x63\xf8\xb0\xe6\x42\xa2\x3b\x5e\xc3\xe3\x86\x32\x84\x0d\xe1\x29\xa3\x7c\x0d\xd6\x6e\x46\x41\xff\xcf\x03\x1d\xaf\xbd\x3f\xd9\x67\xcf\x71\xbf\x67\xf0\x3c\x6b\x10\xca\xa9\x0e\xc2\x23\x9f\xa7\x47\xfe\x91\xc0\xfc\xea\xde\xe8\x33\xae\xa9\xd2\x28\xa7\xbe\x5c\xcb\xc0\x9c\xa0\x16\xf0\x11\x1f\x27\x49\xc2\xe1\x95\xcb\x7f\x02\x00\x00\xff\xff\x6e\x2a\xc8\x01\xe1\x28\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc9, 0xdd, 0xcd, 0x3b, 0x36, 0x93, 0xe, 0x95, 0x6d, 0xd7, 0x3b, 0xd7, 0x90, 0x72, 0x4a, 0xdf, 0x73, 0x10, 0xfa, 0xc1, 0x44, 0x15, 0xb1, 0x78, 0xc4, 0x6f, 0xb, 0x48, 0x74, 0x60, 0xa8, 0x73}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl": {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl": {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl": {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl": {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl": {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
