// Code generated by go-bindata. DO NOT EDIT.
// sources:
// cmd/definitions/tmpl/function.tmpl (567B)
// cmd/definitions/tmpl/info.tmpl (1.702kB)
// cmd/definitions/tmpl/object.tmpl (1.907kB)
// cmd/definitions/tmpl/operation.tmpl (2.051kB)
// cmd/definitions/tmpl/pair.tmpl (490B)
// cmd/definitions/tmpl/service.tmpl (10.847kB)

// +build tools

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\x8f\x25\x87\xae\xec\xe6\x07\x08\x9e\x8a\x82\xb0\xc8\xa2\xde\x25\x64\xa7\x6b\xb0\x99\x94\x66\x5a\x17\x62\xfe\xbb\xa4\x55\x17\x11\x0f\xde\x3c\x25\xcc\xcc\x7b\xf3\x3e\x26\xa5\x2d\x06\xc3\x47\x82\x7a\xda\x40\x4d\xb8\xbc\x82\xd2\x37\x23\xdb\x88\x9c\xab\xd2\x76\x2d\x38\x08\xd4\xa4\x6f\x7d\xdf\x91\x27\x16\x3a\x7c\x36\x55\xcb\x2f\xb3\x66\xd2\x77\xc6\x13\xde\x20\xa1\x31\x9e\xba\x65\xa0\x88\xd5\xa4\x77\xc1\x9a\xb9\xd2\x8e\x6c\x51\x47\x5c\xa4\x04\x75\x56\xec\x4d\x5c\x06\xd6\x48\xa9\x58\xe6\x5c\xa7\xa4\x26\xbd\x37\x83\xf1\x51\x3f\x0e\xce\xef\x4c\x14\xfd\x20\x83\xe3\xe3\x35\x1f\xe2\xab\x93\xe7\x26\x78\x6f\x72\x46\xe8\x05\xbd\x71\xc3\x2f\xa6\xa5\x5c\x62\x7e\xdf\xb4\x2c\xb8\xa7\x38\x76\x12\x3f\x8c\xe7\x00\x15\x00\xf4\x86\x9d\xad\x57\x05\xdc\x9d\xa9\x57\xeb\x6a\xa6\xa2\x2e\xd2\x1f\x71\xac\x9c\x60\x03\x0b\x9d\x44\x37\xcb\xbb\xc1\x3f\x66\xdc\x82\xf8\xeb\xca\x3f\xbe\xef\x01\x00\x00\xff\xff\x41\xc8\xae\xbf\x37\x02\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xfc, 0xb, 0xf4, 0xfb, 0xf, 0x94, 0xca, 0x64, 0x7a, 0xb8, 0x48, 0xf9, 0x69, 0xf1, 0x88, 0x46, 0x59, 0xd3, 0xbc, 0x0, 0x4e, 0xe7, 0x8, 0x1e, 0xdf, 0x27, 0x59, 0x81, 0x75, 0x52, 0xa2}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xe5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x92\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\xe4\x24\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x13\xc7\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x23\x5d\x63\xa9\x37\x31\x32\x99\xc7\x39\x15\x42\x09\x27\xb4\xb2\xef\x70\x7a\x85\xcb\xab\x1b\x9c\x9d\x9e\xdf\x2c\x58\xc5\xb3\x15\x5f\x12\xdc\xba\x22\xcb\x98\x90\x95\x36\x0e\x33\x06\x00\x93\x42\xba\x09\x8b\x18\x6b\xdb\x03\x18\xae\x96\x84\xe9\x6a\x8e\xa9\x50\x85\xb6\x78\x9b\x60\x71\x1e\x56\x17\xbc\x82\xf7\xac\x6d\x31\xb5\x64\x1a\x91\xd1\x25\x97\x14\xf6\xa7\x2b\xdc\xc1\xe9\x13\x2e\xa9\x0c\x47\x58\x1c\xe3\xbd\xa0\x32\x87\x50\x39\xdd\x42\x28\xb4\xed\x76\x92\xf7\x48\x85\x63\x99\x56\x36\x40\xec\xe8\x36\x5d\xcd\x5e\xdd\xfb\x0e\x71\x37\xfd\x3c\xd4\x0d\x24\xcd\xa2\x83\x08\xf2\x9f\xb8\xcd\x78\xd0\x47\x82\xa3\xe3\xe3\xb0\xbb\xea\x81\x0f\x40\x2a\x0f\xcb\x88\xb1\x60\x00\x76\x7b\x18\xa7\x5b\x67\xea\xcc\xa1\x1d\x94\x37\x6c\xdf\x9e\x62\x0b\x18\x37\xeb\xaa\xaf\xe5\xfd\xd6\x97\xfb\x33\x1b\x86\x2e\x8e\xe3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\xd3\xef\x94\x39\x34\xbc\xac\x69\x8e\x43\x48\xe2\xca\x42\x69\x07\x4b\x6e\x8e\xa3\xe1\x83\x25\xd7\x95\xea\xea\x08\xe5\xde\xbc\xee\x42\x09\xc9\xab\x2f\xd6\x19\xa1\x96\x5f\x85\x72\x64\x0a\x9e\x51\xeb\xd9\xa0\xfc\xbc\xd7\x61\x57\x14\x81\xfe\xec\xb6\x9b\x10\xef\x59\x51\xab\x0c\x33\x89\x57\xcf\xba\x16\xe1\x03\xb9\xbe\xf1\x53\x61\xab\x92\xaf\x07\x37\x66\xd1\xd8\x8f\xc1\x57\x43\xae\x36\x0a\x72\xf1\xc0\xbe\x40\xfa\xa7\x9a\xd7\x4f\x68\x36\x63\xcd\xe8\x37\x85\x06\xa6\x47\x60\x90\xa0\x19\xf1\xb2\x61\xa0\x4a\xdb\xb1\xfe\x03\x77\x66\x23\xd4\x39\x52\xad\xcb\x68\x20\x12\x05\xe4\x22\xdc\xf0\xcb\x3d\x9f\xc0\x8b\x04\x87\x43\x8d\xe7\xdd\x9e\xc3\x99\x9a\xba\x83\x7e\xbb\xd1\x2d\xa8\x3b\xfc\x20\xa3\x3f\x87\x79\xec\x12\x0a\x5e\x5a\xda\xe7\x96\x2e\x6a\xeb\xf6\x9b\x8e\xbf\xee\x3b\x19\xf7\x5d\x71\x25\xb2\x59\x21\xdd\xe2\xba\x32\x42\xb9\x62\x36\x79\x8c\xf5\x23\xa5\x3c\xbd\x7f\xb9\xbf\xee\x5e\x6c\x9e\xdd\x24\x8a\x1e\x5a\xf4\xdf\xcc\x6e\x6f\xe5\x5d\xb2\x9f\x97\x8f\x8e\x7d\xff\x0f\xdb\xf9\xa5\xdd\x2f\x7f\x06\x00\x00\xff\xff\x26\xf5\xd0\xb3\xa6\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x9d, 0xdc, 0x29, 0x17, 0xc8, 0x8a, 0x14, 0x25, 0x13, 0xa5, 0x85, 0x13, 0x6, 0xf, 0xb3, 0x4a, 0x21, 0xd1, 0x20, 0x4e, 0x6f, 0x92, 0x60, 0xe2, 0x6e, 0x29, 0x96, 0x4a, 0xee, 0x99, 0x66}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6f\xdb\x36\x10\x7e\x36\x7f\xc5\x37\x23\xd8\xa4\xc1\x91\x92\x6d\xd8\x43\x16\x3f\x0c\x71\xb6\x06\x68\xec\x02\x76\xfb\x4e\x53\x27\x9b\x8d\x44\x0a\x24\xe5\xda\x75\xf4\xdf\x0b\x4a\xb2\x23\x27\x4e\xe1\xa0\x2f\x7d\x23\x79\x77\xdf\xdd\xf7\xdd\x91\x8c\x63\xdc\xe8\x84\xb0\x20\x45\x86\x3b\x4a\x30\xdf\x60\xa1\xf7\x7b\x88\x3c\x89\x13\x4a\xa5\x92\x4e\x6a\x65\xff\xc1\x68\x82\xf1\x64\x86\xdb\xd1\xdd\x2c\x62\x05\x17\x0f\x7c\x41\x70\x9b\x82\x2c\x63\x32\x2f\xb4\x71\x08\x18\x00\xf4\xd3\xdc\xf5\x9b\x95\x93\x39\xb5\x4b\xbb\x51\xa2\xcf\x42\xc6\xe2\x18\xff\x49\xca\x12\x48\x95\xd0\x1a\x52\x41\xcf\x3f\x93\x70\x98\x4b\xc7\x84\x56\xd6\xe3\x6c\xb7\xe7\x30\x5c\x2d\x08\x67\x0f\x03\x9c\xad\x70\x35\x44\x34\xa9\xfd\xee\xc9\x71\x54\x55\x8d\xda\x44\xde\x79\xa0\xed\x16\x67\xab\x68\xcc\x73\xc2\x23\x9c\xfe\xc0\xad\xe0\x19\xaa\x0a\xa5\x54\xee\xef\xbf\x30\xc4\xe5\xf5\xb5\x77\x7a\xf0\xc1\x1e\x9f\x54\xe2\x97\x4d\x49\x0d\x36\xa4\x85\x5b\x12\x6c\xce\xb3\x8c\xac\x43\xa9\xa4\xf3\x25\x2e\xf4\xb9\x75\xda\xf0\x05\x45\x2c\x8e\x7d\xc0\x78\x32\xbb\x9d\x5e\xf9\x15\x70\xde\x86\xff\x66\x91\x7a\x6a\x16\xd3\x77\x93\x8f\xef\x47\x50\xda\x61\x4e\x10\x4b\x4f\x25\x81\x2e\x9d\x95\x09\xc1\x92\x59\x49\x41\x36\x3a\x0c\xc7\xcd\xbf\x63\x2f\xb1\x8f\xd0\x85\xa4\xe4\x99\x59\x5a\x08\xad\x44\x69\x0c\x29\x07\xcb\x53\x8a\x98\x6f\xc0\xce\x6e\x9d\x29\x85\xc3\xf6\x54\xf5\xbc\x9b\x4c\xbd\x6c\x23\xb2\xc2\xc8\xc2\x77\xfa\xc9\xf8\xaa\x61\x2f\xdd\x93\xdf\x6c\x53\x50\xad\x7d\x55\x75\x4e\x9e\x29\xcd\x7a\x71\x0c\x91\x49\x5f\x7d\x2b\xf4\x6e\xa7\xf0\x65\x29\xc5\xb2\xc3\x94\x67\x72\x45\x11\xeb\xb5\x1e\xd3\x46\x7d\xc3\xea\xa4\x71\xec\xa7\x05\xa5\xa5\x04\xdc\x82\xfb\x5d\xce\x0b\xa4\xda\xec\xa6\x69\xc5\xb3\x92\x06\xb8\x40\x4e\x5c\xd9\xba\x13\x96\xdc\x00\x97\xed\x81\x25\x57\x43\xd5\x38\xf5\x88\xb0\x5e\xa2\x15\xd5\x9b\x3f\xff\x60\xbd\xdc\x5b\xfd\xd4\x46\xf7\xa5\xa3\x35\xab\x18\x3b\x45\xd8\x27\x51\x6f\xd7\xf5\xa5\xa8\x2a\x96\x96\x4a\x20\xd0\xf8\xbd\x71\x0d\xf1\x3f\xb9\x56\x5f\x69\x8b\x8c\x6f\x5a\xe9\x82\xf0\x50\x3c\x6c\xeb\x12\x0d\xb9\xd2\x28\xe8\xe8\x85\xd6\xbe\xa8\x17\xe0\xd3\x57\xc0\x57\x87\xe0\xe1\x2e\xa2\xcd\x72\x04\x1e\x43\xac\x0e\x2a\x60\x6d\x3f\x33\x5b\x67\x7f\x0b\xb1\xe0\x20\xf9\x00\x73\xad\xb3\x70\x9f\xda\x3a\xee\x82\xb0\x69\xae\x4c\xa1\x23\xdf\x96\x5f\x4f\xba\xdf\xbf\x0c\x71\xd1\xe2\x7c\x5f\xac\x01\x9c\x29\xa9\x76\xac\x58\x97\x56\xa7\xb2\x47\x7c\x25\xa3\x3f\xf9\xd9\xa9\x23\x52\x9e\x59\x3a\xaa\xf2\x7d\x69\xdd\xdb\xda\xf8\x43\x2c\x87\x87\x2c\x0b\xae\xa4\x08\xd2\xdc\x45\xd3\xc2\x48\xe5\xd2\xa0\xdf\xce\x7d\x07\xa1\xaa\xfc\x45\x6a\x27\xbf\x1f\x86\x2d\xf5\x9f\x63\xa4\x1a\xf2\x8f\xc3\x53\xd8\x1f\x9d\xc1\xe6\x4d\xe9\x3e\x2f\x2f\xca\x16\x99\x56\x14\xac\x3b\x27\xdb\xfd\x13\x76\xca\xef\x72\xb4\xfc\xf5\x31\xd1\x9e\x3d\x8c\x1d\x86\x75\x80\xff\xda\xaa\x6f\x01\x00\x00\xff\xff\x94\x03\xb8\x29\x73\x07\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0x64, 0x33, 0x31, 0x2b, 0x9e, 0xa5, 0x1c, 0x46, 0x19, 0x57, 0xa8, 0x78, 0xb3, 0xc9, 0x92, 0xd7, 0x11, 0xee, 0xde, 0xf1, 0xa5, 0xf2, 0x26, 0x22, 0x58, 0x32, 0x8d, 0xfb, 0xb5, 0x58, 0xdc}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6f\xd4\x30\x0c\x7e\xcf\xaf\xb0\xaa\x7b\x68\xa5\xd1\xbe\x23\xed\x01\xc1\x90\x26\xa1\xad\x02\x21\x1e\x51\xae\xf5\xdd\x22\xda\x24\x38\xbe\xdb\xa6\x92\xff\x8e\x92\x76\x77\xbd\xd2\x51\x0e\x10\xe2\x2d\x89\xed\xcf\xf6\x97\x7c\xb1\x95\xd5\x17\xb9\x45\xe0\x47\x8b\x4e\x08\xd5\x5a\x43\x0c\xa9\x00\x00\x48\x2a\xa3\x19\x1f\x38\xe9\x77\xca\x24\x22\x13\xa2\xeb\x5e\x00\x49\xbd\x45\x58\x7d\xbe\x80\x95\x82\x97\x97\x90\x5f\x6b\x46\xda\xc8\x0a\x1d\x78\x2f\xba\x0e\x56\x2a\x7f\x83\xae\x22\x65\x59\x19\x1d\x0e\x43\x06\x18\x2c\xca\xd9\x46\x3e\xde\xc8\x16\xc1\x7b\x50\x4f\xc1\xd0\xc5\x4c\x21\x83\xda\x80\x21\x48\xf1\x6b\xf0\x8f\x8e\x89\x43\xda\xab\x0a\x29\xc9\x26\xe7\x6c\x48\x6e\xc3\xb9\xf7\x31\xfe\x03\x93\xd2\xdb\x34\x03\x17\x17\x07\x4c\xd4\x75\x28\x64\xd8\x8f\x9b\x30\x36\x74\xb1\x52\xf9\xad\x8d\x0d\x04\x8f\xa2\x88\xd5\x1a\xdb\xa7\xf9\x06\x6c\x4a\xe9\x2a\xd9\x84\x92\x07\xcb\xa4\xc5\x01\x78\x3e\x26\x1d\x2c\x6f\x0d\xb5\x92\x4b\x49\xb2\x0d\xb9\x32\x38\x35\xbc\x47\xb7\x6b\xd8\x7d\x52\x7c\x57\xf6\x77\x73\xd2\x65\x12\x42\xc6\x2c\x69\xc3\x31\xfa\x9d\xe9\xd3\x2c\xd6\x1e\x90\x5f\xf7\x17\xfb\x3b\x6d\x8c\xc2\xd3\x8a\x1f\x60\x78\x23\xf9\x70\x76\xf1\xd7\xbb\x7c\xba\xb6\xd3\x5d\xdc\xb6\x3b\xc7\x57\xed\x1a\xeb\x8f\x5a\xb5\xb6\xc1\x16\x35\x63\x3d\xf7\xc6\xd2\x4c\x78\x21\x8a\x02\x16\x3d\x23\x28\xac\x11\x30\x00\xd7\x58\x03\x1b\xb8\x93\x7b\x84\x8d\xa1\x7b\x49\x35\x54\xa6\xb5\x92\xd5\xba\x41\x38\x60\xc9\xc0\x9d\xcb\xfb\x47\xbe\x9c\xc3\x31\xed\x2a\x86\xce\x0b\xb1\xd9\xe9\x0a\x52\xb7\x1c\x94\x9d\xd5\xee\xb9\xd8\x13\xcd\x0c\x4a\x24\xe4\x1d\x69\x48\x16\x01\x92\x40\xef\xcf\x35\x75\x46\x31\xff\x44\x44\xa7\x9f\xcd\xac\x8c\x90\x08\x2e\xe1\x06\xef\x6f\x2d\x52\xbc\xe2\x1b\xc3\xd7\xc7\xea\xaf\x88\x0c\xa5\xc9\xb8\x5a\xef\x93\x6c\xfa\xe1\x1c\x99\x14\x5e\x3c\x97\xef\x0c\x7a\xfe\x03\x6d\x0e\xe4\xfd\x09\x41\x23\x46\x9e\x88\x1a\xaf\x8e\xdf\x75\xd4\x54\x29\x15\x95\xa6\x51\xd5\xe3\x41\x3c\x11\xe5\x55\xd3\xc0\xda\x98\xe6\x17\xc7\x52\x60\x1e\x67\x46\x4a\x30\x17\x05\x58\xa9\xc8\x05\xa1\x8f\x67\x52\x77\xf0\x3f\x21\x7b\x9a\x71\x6e\x86\x3c\x3f\x40\x66\x8b\xde\x47\x04\x63\xf3\x32\xd6\xb1\x04\x12\x0c\xfb\x09\xee\x01\xf6\x47\x22\xe7\x97\x5e\x7c\x0f\x00\x00\xff\xff\xb4\x30\x5a\x77\x03\x08\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0x7e, 0x5d, 0x16, 0x44, 0x6e, 0xcf, 0xa, 0x57, 0xf1, 0xe8, 0x1c, 0xfb, 0x8, 0x6e, 0x26, 0x89, 0xc2, 0x13, 0x34, 0xfd, 0xea, 0x2a, 0xe1, 0x4c, 0x12, 0xa1, 0x32, 0x35, 0xc4, 0x9d, 0x75}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x31\x6b\xeb\x30\x14\x85\x77\xfd\x8a\x83\xf1\x90\x40\x62\x0d\x6f\xcb\xe3\x4d\x2f\x1d\x4a\x21\xc9\x10\xda\xb1\x28\xf2\x8d\x22\x62\x4b\x42\xbe\x76\x6b\x5c\xff\xf7\x22\x3b\x0d\x94\x2e\xf5\xe4\xfb\xdd\x73\x0e\xe7\x4a\x4a\xfc\xf7\x25\xc1\x90\xa3\xa8\x98\x4a\x9c\x7a\x18\x7f\x9f\xa1\xeb\x52\x96\x74\xb6\xce\xb2\xf5\xae\xf9\x8b\xed\x1e\xbb\xfd\x11\x0f\xdb\xc7\x63\x21\x82\xd2\x57\x65\x08\x41\xd9\xd8\x08\x61\xeb\xe0\x23\x63\x21\x00\x20\xd3\xde\x31\xbd\x73\x26\xe6\xd1\x58\xbe\xb4\xa7\x42\xfb\x5a\x2a\xdf\xac\x4b\xea\xa4\xf1\xeb\x86\x7d\x54\x86\x64\xf7\x47\x86\xab\x91\x17\xe6\xa0\x2b\x4b\x8e\xb3\xc9\x55\xfc\xc2\xc7\x7d\xa0\x26\x13\x62\x29\xc4\x30\xac\x11\x95\x33\x84\xfc\x75\x85\xbc\xc3\xe6\x1f\x8a\x43\x2a\x87\x71\x9c\xb6\x79\x70\xaa\xa6\xc4\xf3\xae\xd8\xa5\xdf\x0f\xb0\x3f\xa8\x46\xab\x2a\x69\xa4\xc4\x8b\xe5\xcb\x30\x7c\x29\xc7\x11\x6f\xb6\xaa\xa0\x42\xa8\x7a\x24\x7e\xf3\x8d\x23\x3a\x55\xb5\x04\xf6\xd8\x87\xe9\x75\x0a\x21\xa5\x98\x25\x5b\x6a\x74\xb4\x13\x4e\xb1\xe7\xd6\xe9\x1f\xc1\x8b\xee\x96\x77\xec\x43\x9a\x97\x48\x55\x31\x4c\x97\x47\xe2\x36\xba\x89\xcc\x20\x7d\x4f\xd4\x6f\x90\x7d\x2b\x91\xad\xee\xdb\xe7\x54\x67\x83\x6e\x26\xa3\x98\x2f\x26\x57\xa6\x06\x9f\x01\x00\x00\xff\xff\x5b\x98\x18\x63\xea\x01\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfb, 0xf0, 0x11, 0x20, 0x7, 0x36, 0xf5, 0x1, 0x25, 0x49, 0xa9, 0xe4, 0x49, 0xaf, 0xb0, 0x5f, 0x1d, 0x1e, 0xf1, 0x82, 0x1c, 0x59, 0xf5, 0xcd, 0x76, 0x89, 0x55, 0x8a, 0x8f, 0xbb, 0xe2, 0xbd}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6f\xe3\xb8\x11\x7f\xf7\x5f\x31\x67\xe4\x41\x3e\x38\x52\x8b\xbe\xb9\xc8\xc3\x75\x77\xbb\x0d\xee\xba\x1b\x6c\xd2\xde\xc3\xdd\x21\xa0\xa5\x91\xcd\x86\x22\x75\x24\xed\xc4\xf0\xea\x7f\x2f\xf8\xa1\x6f\xc9\x91\xb7\xc1\xde\x16\x48\x5e\x22\x93\xc3\xe1\xcc\x6f\x3e\x49\x29\x8a\xe0\x8d\x48\x10\x36\xc8\x51\x12\x8d\x09\xac\x0f\xb0\x11\xd5\x6f\xd8\x53\x02\x71\x96\x44\x09\xa6\x94\x53\x4d\x05\x57\x7f\x85\xb7\x1f\xe1\xc3\xc7\x3b\x78\xf7\xf6\xfa\x2e\x9c\xe5\x24\x7e\x20\x1b\x84\xe3\x11\xc2\x0f\x24\x43\x28\x8a\xd9\x8c\x66\xb9\x90\x1a\x82\x19\x00\xc0\x3c\x16\x5c\xe3\x93\x9e\xbb\x5f\x54\xcc\x67\xee\x69\x43\xf5\x76\xb7\x0e\x63\x91\x45\x44\xa8\xcb\x04\xf7\xd1\x46\x5c\x2a\x2d\x24\xd9\x60\xb4\xff\x4b\x94\x3f\x6c\x22\xe4\x49\x2e\x28\x2f\x57\x4f\x5a\x13\x4b\x4c\x90\x6b\x4a\xd8\x39\xab\xb6\x5a\xe7\x31\xa3\x38\x7d\x2f\x85\x72\x4f\x63\x54\x8e\x3e\x9c\xb0\x42\x1f\x72\x43\xbe\x98\xcd\xf6\x44\xc2\x3d\xd4\x92\x86\x37\x52\xec\x69\x82\xd2\xcf\x94\x7a\x87\xff\x26\x6c\x87\x7e\xf0\xd6\x71\x2a\x69\xca\xfd\xc3\x5b\xf7\xf0\x4e\x4a\x51\xce\xd5\xda\x84\x1f\x73\x6b\xb8\xd9\x2c\x8a\xe0\xee\x90\x23\x50\x05\x7a\x8b\x60\x84\x81\x54\xc8\x96\xed\x62\xc1\x95\x76\x64\x57\x30\x6f\xcc\xcc\xed\x7a\xbf\x13\x90\x3d\xa1\x8c\xac\x19\x42\x4e\xa8\x54\xa1\x5f\x17\xcc\x8e\xc7\x4b\x90\x84\x6f\x10\x2e\xee\x97\x70\xb1\x87\xd5\x15\x84\x37\x86\xc6\x70\x37\x38\x19\x0a\x9a\x02\x17\x1a\x2e\xf6\xe1\x7b\x26\xd6\x84\xd5\x73\x66\xec\x2d\xaa\x58\x52\x2b\x75\x7b\xe2\xef\x3b\xc6\xbc\x38\x5e\xba\x8b\x52\xbc\x7b\x47\x51\x09\x5b\xee\x84\x3c\x31\x3c\x1a\x8f\x0b\xab\xc8\xc7\xf5\x7f\x30\xd6\xff\x44\x4d\x12\xa2\x09\x18\x1b\xa1\x2a\x11\x85\xac\x1c\x37\xf0\x08\x4b\x1a\xce\x2c\x5e\xbd\x75\x72\x17\x6b\x38\x0e\xeb\x7d\xcd\x53\x31\x51\xef\x4b\xb8\xc8\xb9\x11\x7e\x75\x55\xe9\xf1\x19\xb4\xb8\x21\x2a\x6e\xd3\xd1\xd4\x62\x44\x55\xce\xc8\xa1\x34\x1b\xf8\xbf\x06\xa3\xab\x11\xb2\x06\x14\xcf\x42\xee\x38\x15\x85\xa7\xb2\x6e\xd1\x67\xd3\x78\x2c\x2c\xb8\xef\x51\x77\x70\x7a\xa4\x8c\xc1\x06\x75\x17\xbf\x54\x8a\xcc\x8f\x85\xb3\x28\x32\x8b\x2f\xe1\x6e\x4b\x15\xa4\x3b\x1e\x5b\x71\xd4\x56\xec\x58\x62\x71\x5b\x23\xc4\x84\x31\x97\xa7\x4a\x5b\xd1\x2c\x67\x98\x21\xd7\x28\xc3\x72\x3d\x82\x44\xbd\x93\x9c\xf2\x4d\x77\x47\xaa\x40\x22\x49\x40\x70\x76\x00\xc2\x93\x0e\xff\x4c\x24\x34\xa5\x98\x84\x33\x23\x40\x5f\x93\x40\xc0\xf7\x6e\x64\xd1\xe5\x7c\xb4\xb8\x88\x6c\x09\xe2\xc1\x98\x51\x84\xef\x51\xfb\x80\xa9\x96\x2f\x2c\x11\x4d\x0d\xcd\xb1\x32\x9b\x93\x16\x44\x16\x06\x6d\xa6\x8e\xdc\x21\xee\x89\xda\x04\xc7\x12\x73\x35\x8c\xb9\xea\x63\x4e\xb9\x16\xd3\x30\xb7\x18\xd5\xa0\x0b\x1e\xe3\x12\x72\x86\x44\x21\x64\xe4\x01\x41\xed\x24\x02\x61\x0c\x2c\xe3\x2d\x51\xb0\x46\xe4\xf0\x28\xa9\xd6\xc8\x61\x8d\xa9\x90\x68\x64\xf0\x70\xf6\x84\xac\xe1\x5c\x42\xe5\x09\x95\xf2\x25\xa4\xe1\x6d\x1f\x48\x91\x2d\x8c\xe6\xa7\xf3\xcd\x58\xcc\x4d\x89\xb7\x28\x82\x9f\xa9\xde\xb6\xc2\xc0\x42\x4a\xf2\x9c\x1d\xa0\x95\x6f\x60\x6f\xb2\x34\x18\x5c\x5d\xb2\xb5\xc0\x0e\x86\x96\xc5\xa1\xcb\x38\xd8\xb7\x23\x6c\x01\x46\x85\xbe\x83\x98\xd1\x7a\xf0\x47\x3c\xac\xfa\x99\x71\x59\xcd\xdb\xd2\xb1\x82\xfd\xd2\x3b\x51\x2b\x52\x1b\x8f\xc3\x20\x1a\x76\x2a\x27\x31\xb6\x32\x98\xc6\x2c\x67\xa6\x35\x98\x9b\xc4\x7f\xcf\xf1\x71\x6e\x5d\xe1\x96\x99\x58\x0c\x86\xb0\x5c\xd8\x41\x7c\x1c\x67\xa3\x9a\x3c\x4a\x0e\x56\x2b\x1e\x8f\xec\x5e\xba\xea\xb3\x4b\xbb\x7a\xda\x56\xa6\xde\xb7\x9d\x80\x8d\xe2\x94\x27\xf8\x04\x21\xfc\x69\x24\xff\x5e\x58\x5f\x6f\x10\xfe\xd9\xf2\x8e\x22\x78\x8b\x29\xd9\x31\xed\x0c\x0b\x45\xe1\xdc\x90\x2a\xb3\xa7\x99\x70\xb5\xd2\xd6\x14\x95\x63\x4c\x53\x1a\x03\xb1\x5a\xb8\xda\x32\xbc\xbe\x2a\x31\xa5\x00\x5d\x4b\x39\x81\x5a\xe9\xbc\xef\xce\xf0\xcb\x6f\x86\x5d\x37\x75\x17\xb3\x69\x6c\x87\xed\xd6\xc2\x3e\xe7\x70\xb1\x3f\x59\x1c\x7a\xf8\x3b\xf7\xa9\xe3\xb1\x0d\x7f\x39\x9e\xf2\x3e\xda\x7e\xc2\xe6\xd9\x8b\x94\x0f\xc5\xaf\xb1\x88\xd9\xa4\x82\xd3\x3c\x98\x25\x45\x51\x76\x40\x39\x91\x0a\x13\x8f\xb0\xb3\x41\x67\x85\x59\x50\x14\x6d\x1b\x38\x2b\x7a\x3c\xed\x48\x14\xc1\x27\xfc\x7d\x47\x25\x26\x6e\x76\x08\x54\x33\x51\x8a\x5b\x51\x7b\xbc\xfe\x41\x94\xdd\x94\x50\x39\x64\x3b\x80\xb5\x10\xac\xae\xca\xa3\x64\xf5\xf4\x48\xa9\xf6\xd2\xba\x2c\x45\xd8\x34\x69\x2b\xea\x97\x96\x76\xb2\xbc\xef\xab\x03\xca\x24\x81\x6b\xf2\xaf\x8d\x6f\xe9\x76\x52\xe1\xcd\x88\xef\xd9\x1a\x62\x29\x5c\x92\x57\x36\x7c\x6c\x51\xfe\x7e\xc4\x5f\x5d\xd1\x38\xc5\x35\x10\xb9\x2e\x7d\x72\x01\xc1\x08\x9f\x25\xa0\x39\x22\x94\x75\x55\xa2\x32\x59\x69\x75\x35\x16\x27\x75\xa9\xb1\xb0\xaf\xc0\xec\x52\x56\x13\xfb\xcf\xe4\xb2\xfb\x25\xd8\x84\xe1\x8c\x61\x05\xa9\x17\xaa\x47\xaa\xe3\x2d\xec\xc3\x1f\xf1\xd0\x18\x1e\x8e\x98\x33\xa3\xc6\xfc\xc5\xa6\x17\xa9\xac\xd2\x28\x83\xab\x8a\xc4\x37\x5c\x4e\xdb\xf0\x19\x57\x38\xb6\x96\xd9\x1d\x04\xd7\x94\xef\xb0\x35\x51\xb4\x7e\x4d\x63\x7d\x05\x5a\x76\xd8\xf8\x85\xa7\x57\xed\xdd\x19\x30\x0c\xba\xce\xb7\x68\x81\xd6\x88\x98\xf1\x28\x3f\x33\xd2\x5f\x11\x3e\x8d\xf0\x50\x5e\x7a\x06\xe2\x5e\x6e\x3a\x03\x63\xdb\x65\x96\xc7\x8b\x58\xf0\x3d\x4a\xdd\x88\xd6\x71\x1d\x83\x71\x0d\x17\x5d\x2b\xb6\x0e\x26\x2f\x60\xdd\x51\x0b\xf7\xad\xfc\x3f\x59\x7a\xba\xb5\xed\x8d\x4a\x4b\x0a\x40\x66\x0c\xf0\xc5\xc2\xa4\x84\xa9\x31\xf7\x1d\xf0\x9c\xa2\x99\x42\xcf\x48\x78\x34\x85\xef\xce\x35\x83\x3f\x39\x8c\x65\xf8\x62\x59\x5f\x23\x99\xe2\x51\x6e\x69\xef\x92\x8e\xe6\x88\xa1\x56\xbf\xfc\xa6\xb4\xa4\x7c\x73\xf4\x6d\x72\xcb\x47\x2f\x8b\x02\x8a\x4a\xa3\x8e\xc2\xcd\x73\xab\x13\x7c\x09\x9c\xb2\xd9\xe9\xb6\xf0\xdb\x6e\x09\xab\x15\xaf\x4d\xe1\x6b\x53\xf8\x87\x37\x85\x81\x82\xef\xab\xc9\xc5\x6b\x8b\xf8\xe5\x2d\xe2\x37\xda\x62\x7c\xd5\x26\xee\x1b\xc5\xe0\x8f\x6c\xb3\x54\xf8\x55\x1b\xad\x6f\xaa\xfd\x81\xe3\x91\xa6\xc0\xdd\xe5\xce\xdc\xdf\xc0\xce\x9b\x88\x36\xd4\x51\xa1\xd9\xf3\x46\x30\x1a\x1f\xc2\x1f\x18\x83\xcf\x9f\xdb\x63\x8d\x74\x37\x3e\x75\x7e\x6f\x79\x66\x83\xf3\x2f\xae\x76\x79\x2e\xa4\x2e\x7b\x1c\x33\xb8\xda\xf7\x55\xea\x8f\x1c\x8f\x06\xa7\x01\xed\xbf\xbc\x4d\xf4\x6c\x79\xd2\xe1\x7a\xb2\x7d\xf4\xd7\x89\x6d\xa7\x9d\x64\xaa\x33\xcd\x34\xe4\x9e\x2f\x0f\x76\x31\x9b\x04\xf2\xe0\x19\xa2\x8b\xdd\xff\x4d\x67\x3d\xb1\xb1\x7e\xb1\xbe\xba\x71\x5f\xfe\x62\x57\xde\x03\x18\x8f\xdf\x1c\xbb\xd7\x96\x3f\x89\xb8\x5d\x98\xda\x97\xca\xcc\x4c\xdf\x97\xb2\x8e\x5e\x2f\x57\x68\x98\xb4\x35\xca\x6c\x3a\x9b\xe6\xdb\xd0\x67\x2f\xae\x6b\xb6\xa7\x80\x6c\xce\x0d\x9d\x56\xc0\xf7\x8d\xcf\x1c\x58\xc0\x15\xc0\x66\x4c\xda\xc7\xa1\x17\xb6\x51\x54\x92\xb7\x5f\xe6\xd9\xde\x32\x96\x68\x40\x21\xe0\xbf\xc6\x80\xf5\xa1\xcc\x23\xa1\x6b\xd3\xea\x6e\xf2\x22\xe7\x45\xb1\x68\x6c\x1a\xd8\x8b\xf0\xf0\x86\x48\x92\xa9\xf0\xd6\xfa\xac\xa1\xf0\xe3\x9f\xac\x07\x36\x27\xea\x20\x89\xf5\x93\xbf\xac\x30\xbb\x86\x7f\x23\xf1\xc3\x46\x8a\x1d\x4f\x82\x45\x37\x90\x54\x23\xf5\xfc\x4c\xf5\xf6\x8d\x5b\x13\xc4\xfa\x69\x09\x2d\x09\xde\x10\xc6\x50\x96\x7d\xc3\x10\x4c\x8d\xf5\x27\x10\x3b\xa5\x73\x47\x82\x4a\x03\x3f\xd6\x91\xe8\x2c\x4c\x12\x4c\x51\xda\xcd\x83\xc5\xb1\x93\xce\x6c\x1a\xd0\xdb\xd2\x27\x3c\xfb\x1b\xa2\xb7\x4e\xe9\x6e\x46\xf7\xa1\x45\x78\x02\x01\xfe\xee\x17\xcf\xe7\x0b\xff\xab\x51\x0b\x16\x43\x75\xdb\x65\x3a\xbd\x85\x2b\x98\x2f\x7f\x9d\xff\x3a\xef\x95\x8c\x81\xfa\x63\xfe\x50\x4a\x30\xcd\x51\x2a\x64\x46\xb4\xcd\x69\xc1\xdc\xa9\x6e\xfc\xb8\x28\xe6\xf6\x24\x51\x6f\x50\x14\x50\x5b\xbc\x08\x16\xb3\x91\xa8\xcd\x44\x82\xf7\xf1\x16\xe3\x87\x56\xdc\x9a\xbe\xd6\xbd\x1c\x16\x09\x36\xa1\x71\xa3\xf6\x47\xf5\xfd\x51\xc9\xd9\x1d\xca\xaf\x80\xe4\x39\xf2\xc4\x1e\x79\xd4\x12\x54\xe8\x1d\xdf\xbe\x5f\x6b\x38\x5d\x18\x86\xb5\x88\x7b\x22\xcd\x41\x65\x2c\xbd\xd7\x9b\x88\x5c\x2f\x2b\x38\x4e\x1e\xc0\xec\xfe\xf5\x0e\x34\xb5\xcb\xbe\xbb\x32\xa9\xbb\x53\x6b\x5d\x48\x34\xca\xda\x60\xb0\xb4\xd3\xc6\x1b\x92\xa1\xed\x41\xfb\x01\x73\x27\x69\xf6\x13\x51\xda\x47\xce\x3b\x9e\x98\x43\xd7\xf6\x8d\xc8\x32\x52\x14\x46\x85\x32\x94\xc6\xb2\x5e\x37\x33\xbf\xe6\xbe\xe7\xe3\xfc\xab\xb8\x5f\x14\xc1\xf5\x86\x0b\x89\xee\xe0\x0e\x8f\x5b\xca\x10\xb6\x84\x27\x8c\xf2\x0d\x58\xbb\x19\x05\xfd\x67\x09\x2d\xaf\xbd\x9f\xec\xb3\xe7\xb8\xdf\x0b\x7b\x5e\x33\x21\x34\x3d\xcb\x8c\x4f\x6a\x5e\x44\xcf\x03\x1b\x89\xd3\x74\xcc\x96\xd3\x7c\xde\x68\x05\x0d\x00\xc2\x98\xc4\x64\x9b\xf0\xda\x36\x84\x96\xaa\x28\x82\xa6\x85\x7d\xd8\x97\x6d\x5e\x9d\xa1\xae\xf9\x9e\x30\xea\x7b\xbd\x77\x4f\x39\xc6\x1a\x93\x15\x98\xa9\x06\xaf\x25\xfc\x10\xeb\x1d\x61\x2b\x10\x76\xa7\x62\x36\x10\xff\x27\x1b\x13\xeb\xb9\x94\x53\x5d\x89\x35\xf1\x5b\x0e\xf3\x57\xc9\xfd\x09\x37\x54\x69\x94\x63\x1f\x0f\xc8\xc0\x1c\x62\x97\xf0\x01\x1f\x47\x49\x16\xfd\x5b\xaf\xff\x06\x00\x00\xff\xff\x08\x9d\x9a\x35\x5f\x2a\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd0, 0x50, 0x2c, 0x2c, 0xb4, 0x15, 0x7c, 0xb0, 0xaa, 0x4f, 0xf0, 0xad, 0xa4, 0x14, 0x46, 0xdf, 0x86, 0xa, 0x2b, 0x97, 0x6, 0x1b, 0x42, 0x95, 0x5f, 0xcd, 0x58, 0x40, 0xc8, 0x59, 0xfd, 0x2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl":  {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl":      {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl":    {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl":      {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl":   {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
