// Code generated by go-bindata. DO NOT EDIT.
// sources:
// cmd/definitions/tmpl/function.tmpl (567B)
// cmd/definitions/tmpl/info.tmpl (1.702kB)
// cmd/definitions/tmpl/object.tmpl (1.907kB)
// cmd/definitions/tmpl/operation.tmpl (1.698kB)
// cmd/definitions/tmpl/pair.tmpl (729B)
// cmd/definitions/tmpl/service.tmpl (11.896kB)

// +build tools

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\x8f\x25\x87\xae\xec\xe6\x07\x08\x9e\x8a\x82\xb0\xc8\xa2\xde\x25\x64\xa7\x6b\xb0\x99\x94\x66\x5a\x17\x62\xfe\xbb\xa4\x55\x17\x11\x0f\xde\x3c\x25\xcc\xcc\x7b\xf3\x3e\x26\xa5\x2d\x06\xc3\x47\x82\x7a\xda\x40\x4d\xb8\xbc\x82\xd2\x37\x23\xdb\x88\x9c\xab\xd2\x76\x2d\x38\x08\xd4\xa4\x6f\x7d\xdf\x91\x27\x16\x3a\x7c\x36\x55\xcb\x2f\xb3\x66\xd2\x77\xc6\x13\xde\x20\xa1\x31\x9e\xba\x65\xa0\x88\xd5\xa4\x77\xc1\x9a\xb9\xd2\x8e\x6c\x51\x47\x5c\xa4\x04\x75\x56\xec\x4d\x5c\x06\xd6\x48\xa9\x58\xe6\x5c\xa7\xa4\x26\xbd\x37\x83\xf1\x51\x3f\x0e\xce\xef\x4c\x14\xfd\x20\x83\xe3\xe3\x35\x1f\xe2\xab\x93\xe7\x26\x78\x6f\x72\x46\xe8\x05\xbd\x71\xc3\x2f\xa6\xa5\x5c\x62\x7e\xdf\xb4\x2c\xb8\xa7\x38\x76\x12\x3f\x8c\xe7\x00\x15\x00\xf4\x86\x9d\xad\x57\x05\xdc\x9d\xa9\x57\xeb\x6a\xa6\xa2\x2e\xd2\x1f\x71\xac\x9c\x60\x03\x0b\x9d\x44\x37\xcb\xbb\xc1\x3f\x66\xdc\x82\xf8\xeb\xca\x3f\xbe\xef\x01\x00\x00\xff\xff\x41\xc8\xae\xbf\x37\x02\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xfc, 0xb, 0xf4, 0xfb, 0xf, 0x94, 0xca, 0x64, 0x7a, 0xb8, 0x48, 0xf9, 0x69, 0xf1, 0x88, 0x46, 0x59, 0xd3, 0xbc, 0x0, 0x4e, 0xe7, 0x8, 0x1e, 0xdf, 0x27, 0x59, 0x81, 0x75, 0x52, 0xa2}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xe5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x92\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\xe4\x24\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x13\xc7\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x23\x5d\x63\xa9\x37\x31\x32\x99\xc7\x39\x15\x42\x09\x27\xb4\xb2\xef\x70\x7a\x85\xcb\xab\x1b\x9c\x9d\x9e\xdf\x2c\x58\xc5\xb3\x15\x5f\x12\xdc\xba\x22\xcb\x98\x90\x95\x36\x0e\x33\x06\x00\x93\x42\xba\x09\x8b\x18\x6b\xdb\x03\x18\xae\x96\x84\xe9\x6a\x8e\xa9\x50\x85\xb6\x78\x9b\x60\x71\x1e\x56\x17\xbc\x82\xf7\xac\x6d\x31\xb5\x64\x1a\x91\xd1\x25\x97\x14\xf6\xa7\x2b\xdc\xc1\xe9\x13\x2e\xa9\x0c\x47\x58\x1c\xe3\xbd\xa0\x32\x87\x50\x39\xdd\x42\x28\xb4\xed\x76\x92\xf7\x48\x85\x63\x99\x56\x36\x40\xec\xe8\x36\x5d\xcd\x5e\xdd\xfb\x0e\x71\x37\xfd\x3c\xd4\x0d\x24\xcd\xa2\x83\x08\xf2\x9f\xb8\xcd\x78\xd0\x47\x82\xa3\xe3\xe3\xb0\xbb\xea\x81\x0f\x40\x2a\x0f\xcb\x88\xb1\x60\x00\x76\x7b\x18\xa7\x5b\x67\xea\xcc\xa1\x1d\x94\x37\x6c\xdf\x9e\x62\x0b\x18\x37\xeb\xaa\xaf\xe5\xfd\xd6\x97\xfb\x33\x1b\x86\x2e\x8e\xe3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\xd3\xef\x94\x39\x34\xbc\xac\x69\x8e\x43\x48\xe2\xca\x42\x69\x07\x4b\x6e\x8e\xa3\xe1\x83\x25\xd7\x95\xea\xea\x08\xe5\xde\xbc\xee\x42\x09\xc9\xab\x2f\xd6\x19\xa1\x96\x5f\x85\x72\x64\x0a\x9e\x51\xeb\xd9\xa0\xfc\xbc\xd7\x61\x57\x14\x81\xfe\xec\xb6\x9b\x10\xef\x59\x51\xab\x0c\x33\x89\x57\xcf\xba\x16\xe1\x03\xb9\xbe\xf1\x53\x61\xab\x92\xaf\x07\x37\x66\xd1\xd8\x8f\xc1\x57\x43\xae\x36\x0a\x72\xf1\xc0\xbe\x40\xfa\xa7\x9a\xd7\x4f\x68\x36\x63\xcd\xe8\x37\x85\x06\xa6\x47\x60\x90\xa0\x19\xf1\xb2\x61\xa0\x4a\xdb\xb1\xfe\x03\x77\x66\x23\xd4\x39\x52\xad\xcb\x68\x20\x12\x05\xe4\x22\xdc\xf0\xcb\x3d\x9f\xc0\x8b\x04\x87\x43\x8d\xe7\xdd\x9e\xc3\x99\x9a\xba\x83\x7e\xbb\xd1\x2d\xa8\x3b\xfc\x20\xa3\x3f\x87\x79\xec\x12\x0a\x5e\x5a\xda\xe7\x96\x2e\x6a\xeb\xf6\x9b\x8e\xbf\xee\x3b\x19\xf7\x5d\x71\x25\xb2\x59\x21\xdd\xe2\xba\x32\x42\xb9\x62\x36\x79\x8c\xf5\x23\xa5\x3c\xbd\x7f\xb9\xbf\xee\x5e\x6c\x9e\xdd\x24\x8a\x1e\x5a\xf4\xdf\xcc\x6e\x6f\xe5\x5d\xb2\x9f\x97\x8f\x8e\x7d\xff\x0f\xdb\xf9\xa5\xdd\x2f\x7f\x06\x00\x00\xff\xff\x26\xf5\xd0\xb3\xa6\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x9d, 0xdc, 0x29, 0x17, 0xc8, 0x8a, 0x14, 0x25, 0x13, 0xa5, 0x85, 0x13, 0x6, 0xf, 0xb3, 0x4a, 0x21, 0xd1, 0x20, 0x4e, 0x6f, 0x92, 0x60, 0xe2, 0x6e, 0x29, 0x96, 0x4a, 0xee, 0x99, 0x66}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6f\xdb\x36\x10\x7e\x36\x7f\xc5\x37\x23\xd8\xa4\xc1\x91\x92\x6d\xd8\x43\x16\x3f\x0c\x71\xb6\x06\x68\xec\x02\x76\xfb\x4e\x53\x27\x9b\x8d\x44\x0a\x24\xe5\xda\x75\xf4\xdf\x0b\x4a\xb2\x23\x27\x4e\xe1\xa0\x2f\x7d\x23\x79\x77\xdf\xdd\xf7\xdd\x91\x8c\x63\xdc\xe8\x84\xb0\x20\x45\x86\x3b\x4a\x30\xdf\x60\xa1\xf7\x7b\x88\x3c\x89\x13\x4a\xa5\x92\x4e\x6a\x65\xff\xc1\x68\x82\xf1\x64\x86\xdb\xd1\xdd\x2c\x62\x05\x17\x0f\x7c\x41\x70\x9b\x82\x2c\x63\x32\x2f\xb4\x71\x08\x18\x00\xf4\xd3\xdc\xf5\x9b\x95\x93\x39\xb5\x4b\xbb\x51\xa2\xcf\x42\xc6\xe2\x18\xff\x49\xca\x12\x48\x95\xd0\x1a\x52\x41\xcf\x3f\x93\x70\x98\x4b\xc7\x84\x56\xd6\xe3\x6c\xb7\xe7\x30\x5c\x2d\x08\x67\x0f\x03\x9c\xad\x70\x35\x44\x34\xa9\xfd\xee\xc9\x71\x54\x55\x8d\xda\x44\xde\x79\xa0\xed\x16\x67\xab\x68\xcc\x73\xc2\x23\x9c\xfe\xc0\xad\xe0\x19\xaa\x0a\xa5\x54\xee\xef\xbf\x30\xc4\xe5\xf5\xb5\x77\x7a\xf0\xc1\x1e\x9f\x54\xe2\x97\x4d\x49\x0d\x36\xa4\x85\x5b\x12\x6c\xce\xb3\x8c\xac\x43\xa9\xa4\xf3\x25\x2e\xf4\xb9\x75\xda\xf0\x05\x45\x2c\x8e\x7d\xc0\x78\x32\xbb\x9d\x5e\xf9\x15\x70\xde\x86\xff\x66\x91\x7a\x6a\x16\xd3\x77\x93\x8f\xef\x47\x50\xda\x61\x4e\x10\x4b\x4f\x25\x81\x2e\x9d\x95\x09\xc1\x92\x59\x49\x41\x36\x3a\x0c\xc7\xcd\xbf\x63\x2f\xb1\x8f\xd0\x85\xa4\xe4\x99\x59\x5a\x08\xad\x44\x69\x0c\x29\x07\xcb\x53\x8a\x98\x6f\xc0\xce\x6e\x9d\x29\x85\xc3\xf6\x54\xf5\xbc\x9b\x4c\xbd\x6c\x23\xb2\xc2\xc8\xc2\x77\xfa\xc9\xf8\xaa\x61\x2f\xdd\x93\xdf\x6c\x53\x50\xad\x7d\x55\x75\x4e\x9e\x29\xcd\x7a\x71\x0c\x91\x49\x5f\x7d\x2b\xf4\x6e\xa7\xf0\x65\x29\xc5\xb2\xc3\x94\x67\x72\x45\x11\xeb\xb5\x1e\xd3\x46\x7d\xc3\xea\xa4\x71\xec\xa7\x05\xa5\xa5\x04\xdc\x82\xfb\x5d\xce\x0b\xa4\xda\xec\xa6\x69\xc5\xb3\x92\x06\xb8\x40\x4e\x5c\xd9\xba\x13\x96\xdc\x00\x97\xed\x81\x25\x57\x43\xd5\x38\xf5\x88\xb0\x5e\xa2\x15\xd5\x9b\x3f\xff\x60\xbd\xdc\x5b\xfd\xd4\x46\xf7\xa5\xa3\x35\xab\x18\x3b\x45\xd8\x27\x51\x6f\xd7\xf5\xa5\xa8\x2a\x96\x96\x4a\x20\xd0\xf8\xbd\x71\x0d\xf1\x3f\xb9\x56\x5f\x69\x8b\x8c\x6f\x5a\xe9\x82\xf0\x50\x3c\x6c\xeb\x12\x0d\xb9\xd2\x28\xe8\xe8\x85\xd6\xbe\xa8\x17\xe0\xd3\x57\xc0\x57\x87\xe0\xe1\x2e\xa2\xcd\x72\x04\x1e\x43\xac\x0e\x2a\x60\x6d\x3f\x33\x5b\x67\x7f\x0b\xb1\xe0\x20\xf9\x00\x73\xad\xb3\x70\x9f\xda\x3a\xee\x82\xb0\x69\xae\x4c\xa1\x23\xdf\x96\x5f\x4f\xba\xdf\xbf\x0c\x71\xd1\xe2\x7c\x5f\xac\x01\x9c\x29\xa9\x76\xac\x58\x97\x56\xa7\xb2\x47\x7c\x25\xa3\x3f\xf9\xd9\xa9\x23\x52\x9e\x59\x3a\xaa\xf2\x7d\x69\xdd\xdb\xda\xf8\x43\x2c\x87\x87\x2c\x0b\xae\xa4\x08\xd2\xdc\x45\xd3\xc2\x48\xe5\xd2\xa0\xdf\xce\x7d\x07\xa1\xaa\xfc\x45\x6a\x27\xbf\x1f\x86\x2d\xf5\x9f\x63\xa4\x1a\xf2\x8f\xc3\x53\xd8\x1f\x9d\xc1\xe6\x4d\xe9\x3e\x2f\x2f\xca\x16\x99\x56\x14\xac\x3b\x27\xdb\xfd\x13\x76\xca\xef\x72\xb4\xfc\xf5\x31\xd1\x9e\x3d\x8c\x1d\x86\x75\x80\xff\xda\xaa\x6f\x01\x00\x00\xff\xff\x94\x03\xb8\x29\x73\x07\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0x64, 0x33, 0x31, 0x2b, 0x9e, 0xa5, 0x1c, 0x46, 0x19, 0x57, 0xa8, 0x78, 0xb3, 0xc9, 0x92, 0xd7, 0x11, 0xee, 0xde, 0xf1, 0xa5, 0xf2, 0x26, 0x22, 0x58, 0x32, 0x8d, 0xfb, 0xb5, 0x58, 0xdc}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4d\x8f\xd3\x30\x10\xbd\xfb\x57\x8c\xac\x1e\x12\x69\x49\xef\x48\x7b\x82\x45\x5a\x09\x75\x2b\x10\xe2\x88\x5c\x67\xda\xb5\x48\x6c\x33\x9e\xec\x87\x82\xff\x3b\xb2\x93\x76\xd3\xaa\x10\x15\x10\xe2\x16\x7b\x66\xde\x9b\xf7\xc6\x13\xaf\xf4\x57\xb5\x43\xe0\x67\x8f\x41\x08\xd3\x7a\x47\x0c\x85\x00\x00\x90\xda\x59\xc6\x27\x96\xc3\xc9\x38\x29\x4a\x21\xfa\xfe\x15\x90\xb2\x3b\x84\xc5\x97\x2b\x58\x18\x78\x7d\x0d\xd5\xad\x65\xa4\xad\xd2\x18\x20\x46\xd1\xf7\xb0\x30\xd5\x5b\x0c\x9a\x8c\x67\xe3\x6c\xba\x4c\x0c\x30\x46\x4c\xf0\x8d\x7a\x5e\xa9\x16\x21\x46\x30\xfb\x62\xe8\x33\x53\x62\x30\x5b\x70\x04\x05\x7e\x4b\xf9\x39\x51\x06\xa4\x07\xa3\x91\x64\x79\x72\xcf\x8e\xd4\x2e\xdd\xc7\x98\xeb\x3f\x32\x19\xbb\x2b\x4a\x08\xf9\xe3\x80\x89\xb6\x4e\x8d\x8c\xe7\xa9\x08\xe7\x93\x8a\x85\xa9\xee\x7c\x16\x90\x32\x96\xcb\xdc\xad\xf3\x03\xcd\x77\x60\xb7\x56\x41\xab\x26\xb5\x3c\x46\x4e\x24\x8e\xc0\xe7\x6b\x8a\x31\xf2\xce\x51\xab\x78\xad\x48\xb5\x89\xab\x84\xe3\xc0\x07\x0c\x5d\xc3\xe1\xb3\xe1\xfb\xf5\x30\x9b\x23\x95\x32\x95\x4c\x5d\xb2\x8e\x73\xf5\x7b\x37\xd0\xcc\xf6\x9e\x90\xdf\x0c\x83\xfd\x1d\x19\x93\xf2\x42\xf3\x13\x8c\x6f\xa4\x1a\xef\xae\xfe\xba\xca\xfd\xd8\x8e\x4f\xf9\xd8\x76\x81\x6f\xda\x0d\xd6\x9f\xac\x69\x7d\x83\x2d\x5a\xc6\xfa\xdc\x1b\x2b\x4a\x11\x85\x58\x2e\x61\x36\x33\x83\xc2\x06\x01\x13\x70\x8d\x35\xb0\x83\x7b\xf5\x80\xb0\x75\xf4\xa8\xa8\x06\xed\x5a\xaf\xd8\x6c\x1a\x84\x03\x96\x4a\xde\x85\x6a\x78\xe4\xf3\x1c\x81\xa9\xd3\x0c\x7d\x14\x62\xdb\x59\x0d\x45\x98\x2f\x2a\x2f\x92\x7b\x29\xf6\xc9\xce\x8c\x9b\x48\xc8\x1d\x59\x90\xb3\x00\x32\xd9\xfb\xeb\x9d\xba\xa0\x99\x7f\xb2\x44\xc7\x3f\x9b\xb3\x6b\x84\x44\x70\x0d\x2b\x7c\xbc\xf3\x48\x79\xc4\x2b\xc7\xb7\x2f\xdd\xdf\x10\x39\x2a\xe4\xb4\xdb\x18\x65\x79\xfa\xc3\x79\x71\x52\x44\xf1\x33\xbe\x0b\xec\xf9\x0f\x76\x73\x34\xef\x4f\x0c\x9a\x38\xb2\x37\x6a\xfa\x75\x70\xef\x47\x00\x00\x00\xff\xff\xbd\xe8\x37\x32\xa2\x06\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc2, 0xaf, 0x9a, 0xb8, 0xf7, 0x9f, 0x1b, 0x53, 0xaa, 0x36, 0x95, 0x6d, 0xe6, 0x56, 0x7d, 0xb9, 0x8e, 0xd7, 0x4, 0x74, 0xce, 0x5b, 0x9, 0x4f, 0xb6, 0x92, 0xc, 0x1e, 0x49, 0x5, 0x4c, 0x4c}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x4f\x8f\xd3\x30\x10\xc5\xcf\xf1\xa7\x78\x8a\x2a\xd4\x4a\xdd\xf8\xc2\x29\x88\x13\xe5\xb0\x42\xdb\xee\xa1\x82\x23\x72\x9d\x69\x6a\x6d\x6a\x5b\x8e\x93\x25\x32\xfe\xee\xc8\x4e\x76\x45\x41\x82\xf5\xc9\xf3\xe6\xdf\x6f\x1e\xe7\xf8\x64\x1a\x42\x4b\x9a\x9c\xf0\xd4\xe0\x34\xa1\x35\xaf\x31\xe4\xb5\xe1\x0d\x9d\x95\x56\x5e\x19\xdd\x7f\xc0\xee\x80\xfd\xe1\x88\xcf\xbb\xfb\x63\xc5\xac\x90\x4f\xa2\x25\x58\xa1\x5c\xcf\x98\xba\x5a\xe3\x3c\xd6\x0c\x00\x4a\x69\xb4\xa7\x1f\xbe\x64\x73\xd8\x2a\x7f\x19\x4e\x95\x34\x57\x7e\xa2\xc9\xe8\xa6\xf7\xc6\x89\x96\x78\x6b\xee\x5e\xbe\xe3\x7b\x6e\x9f\x5a\x7e\xf1\xde\xca\x4e\x91\xf6\x65\xee\xad\xde\xdc\xed\x27\x4b\x7d\xc9\xd8\x86\xb1\x10\xee\xe0\x84\x6e\x09\xab\xef\x5b\xac\x46\xd4\x1f\x51\x3d\x26\x50\xc4\x98\xb3\x2b\xab\xc5\x95\x92\xbe\x1a\xab\x7d\xfa\xfe\x84\x37\x8f\xa2\x97\xa2\x4b\x35\x9c\xe3\x9b\xf2\x97\x10\x5e\x2a\x63\xc4\xb3\xea\x3a\x08\x6b\xbb\x09\x49\x5f\xfa\x62\xc4\x28\xba\x81\xe0\x0d\x0e\x36\x3b\x55\x31\xce\xd9\x5c\xb2\xa3\x5e\x3a\x95\xe5\x34\xf6\x3c\x68\xf9\xd7\xe0\xf5\xb8\xcc\x3b\x4e\x36\xc5\x1b\x24\x54\x84\x7c\xbf\x23\x3f\x38\x9d\x95\x59\x48\xef\x0b\x4d\x35\xca\x1b\x88\x72\xfb\x9a\xfd\x9a\x70\x6a\x8c\xb3\x12\xd9\x7c\x31\xe9\x26\x11\xcc\x08\x6d\x67\x4e\xa2\xcb\x8e\xac\xe7\x75\x0f\xc2\x22\xb0\xe2\xb7\x75\x0f\xc2\x06\x56\x14\xff\xf6\x72\xce\xff\xcf\xcd\xa2\xf8\x03\xb6\xce\x1b\xee\xf5\xd9\x84\x3d\x3d\xd7\x48\x50\xeb\x8d\xd2\x9e\xdc\x59\x48\x0a\x11\x61\x21\x79\xd7\x7b\x37\x48\x1f\xf2\x51\xb7\x3e\xc5\x10\x63\xdc\x2e\x08\xcb\x79\x45\x64\xf1\x57\x00\x00\x00\xff\xff\x48\x29\xe1\x16\xd9\x02\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x29, 0x5d, 0x3b, 0x63, 0xae, 0x36, 0x1, 0x25, 0xd8, 0x10, 0xe2, 0x3e, 0xb1, 0x0, 0x6, 0x17, 0xbf, 0xaf, 0xeb, 0xac, 0xa5, 0xe2, 0xf6, 0xc, 0x72, 0x84, 0x6f, 0x5a, 0x38, 0x6b, 0x0, 0xa3}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4b\x8f\x1b\xb9\x11\x3e\x5b\xbf\xa2\x56\x18\x18\x92\x21\xb7\x12\x20\x27\x05\x73\xd8\x8c\x1f\x19\xac\x1f\x03\x8f\x93\x3d\xec\x2e\x06\x54\x77\xb5\xc4\x0c\x45\xf6\x92\x94\xc6\x03\xb9\xff\x7b\x50\x24\xfb\xdd\xad\x87\xe3\x60\x9d\xc0\x73\x19\xa9\x59\x55\xac\xfa\x58\x4f\xaa\xe7\x73\xb8\x52\x09\xc2\x0a\x25\x6a\x66\x31\x81\xe5\x23\xac\x54\xf9\x1d\x76\x9c\x41\xbc\x49\xe6\x09\xa6\x5c\x72\xcb\x95\x34\x7f\x85\x17\xef\xe1\xdd\xfb\x8f\xf0\xf2\xc5\xf5\xc7\x68\x94\xb1\xf8\x9e\xad\x10\xf6\x7b\x88\xde\xb1\x0d\x42\x9e\x8f\x46\x7c\x93\x29\x6d\x61\x32\x02\x00\x18\xc7\x4a\x5a\xfc\x64\xc7\xfe\x1b\x57\xe3\x91\xff\xb4\xe2\x76\xbd\x5d\x46\xb1\xda\xcc\x97\xf8\xa8\x64\x62\xac\xd2\x6c\x85\xf3\x95\x7a\x5e\x7c\xdc\xfd\x65\x9e\xdd\xaf\xe6\x28\x93\x4c\x71\x59\xc8\x38\x83\x33\xd6\x98\xa0\xb4\x9c\x89\xf3\x79\xd7\xd6\x66\xb1\xe0\x78\xf6\xbe\x8c\x6b\x73\x1e\x8b\x41\xbd\xe3\x31\x06\xae\xe8\x64\x3e\xfb\x98\x11\xd3\x74\x34\xda\x31\x0d\x77\x50\x99\x1b\xdd\x68\xb5\xe3\x09\xea\xb0\x52\x40\x18\xfd\x93\x89\x2d\x86\x87\xb7\x5e\x52\x41\x53\x68\x11\xdd\xfa\x0f\x2f\xb5\x56\xc5\x5a\x05\x46\xf4\x3e\x73\x9e\x30\x1a\xcd\xe7\xf0\xf1\x31\x43\xe0\x06\xec\x1a\x81\x94\x81\x54\xe9\x86\x33\xc4\x4a\x1a\xeb\xc9\x2e\x61\x5c\x5b\x19\x3b\xfe\xb0\x13\xb0\x1d\xe3\x82\x2d\x05\x82\x43\x2f\x0a\x7c\x93\xd1\x7e\xff\x1c\x34\x93\x2b\x84\x8b\xbb\x19\x5c\xec\x60\x71\x09\xd1\x0d\xd1\x90\x74\x42\x8b\x28\x78\x0a\x52\x59\xb8\xd8\x45\xaf\x85\x5a\x32\x51\xad\xd1\xb3\x17\x68\x62\xcd\x9d\xd6\xcd\x85\x57\x5b\x21\x82\x3a\x41\xbb\x8b\x42\xbd\x3b\x4f\x51\x2a\x5b\xec\x84\x32\x21\x19\xb5\x8f\x53\x67\xc8\xfb\xe5\xbf\x30\xb6\x6f\xd1\xb2\x84\x59\x06\x74\x46\x68\x0a\x44\x61\x53\x3c\x27\x78\x94\x23\x8d\x46\x0e\xaf\x0e\x9f\xde\xc6\x16\xf6\xfd\x76\x5f\xcb\x54\x9d\x68\xf7\x73\xb8\xc8\x24\x29\xbf\xb8\x2c\xed\xf8\x0c\x56\xdd\x30\x13\x37\xe9\x78\xea\x30\xe2\x26\x13\xec\xb1\x38\x36\x08\x7f\x35\x41\x97\x03\x64\x35\x28\x8e\x42\xee\x25\xe5\x79\xa0\x72\x6e\xd1\x15\x53\xfb\x98\x3b\x70\x5f\xa3\x6d\xe1\xf4\xc0\x85\x80\x15\xda\x36\x7e\xa9\x56\x9b\xf0\x2c\x1a\xcd\xe7\xc4\xfc\x1c\x3e\xae\xb9\x81\x74\x2b\x63\xa7\x8e\x59\xab\xad\x48\x1c\x6e\x4b\x84\x98\x09\xe1\x13\x5f\x71\x56\x7c\x93\x09\xdc\xa0\xb4\xa8\xa3\x82\x1f\x41\xa3\xdd\x6a\xc9\xe5\xaa\xbd\x23\x37\xa0\x91\x25\xa0\xa4\x78\x04\x26\x93\x96\xfc\x8d\x4a\x78\xca\x31\x89\x46\xa4\x40\xd7\x92\x89\x82\x67\xfe\xc9\xb4\x2d\x79\xef\x70\x51\x9b\x19\xa8\x7b\x3a\x46\x15\xbd\x46\x1b\x02\xa6\x64\x9f\x3a\x22\x9e\x12\xcd\xbe\x3c\x36\xaf\x2d\xa8\x4d\x34\x69\x0a\xf5\xe4\x1e\xf1\x40\xd4\x24\xd8\x17\x98\x9b\x7e\xcc\x4d\x17\x73\x2e\xad\x3a\x0d\x73\x87\x51\x05\xba\x92\x31\xce\x20\x13\xc8\x0c\xc2\x86\xdd\x23\x98\xad\x46\x60\x42\x80\x13\xbc\x66\x06\x96\x88\x12\x1e\x34\xb7\x16\x25\x2c\x31\x55\x1a\x49\x87\x00\x67\x47\xc9\x0a\xce\x19\x94\x9e\x50\x1a\x5f\x40\x1a\xdd\x76\x81\x54\x9b\x29\x59\x7e\x38\xdf\x0c\xc5\xdc\x29\xf1\x36\x9f\xc3\xcf\xdc\xae\x1b\x61\xe0\x20\x65\x59\x26\x1e\xa1\x91\x6f\x60\x47\x59\x1a\x08\x57\x9f\x6c\x1d\xb0\xbd\xa1\xe5\x70\x68\x0b\x9e\xec\x9a\x11\x36\x05\x32\xa1\xeb\x20\xf4\xb4\x7a\xf8\x13\x3e\x2e\xba\x99\x71\x56\xae\xbb\xd2\xb1\x80\xdd\x2c\x38\x51\x23\x52\x6b\x1f\x8b\xb3\x71\x00\x3b\xec\x26\xd3\x90\xd7\xe9\xdb\x5b\x96\xc1\x7e\xf4\x24\xa8\xd0\x78\xbe\x1f\x3d\x79\x72\x3c\xe3\x1f\xcb\x7e\xa7\x66\xc0\x27\x4f\xc6\xcd\x2c\xbf\xa8\x69\x43\xb9\x76\xff\x0e\x1f\x16\xce\x8b\x27\x53\x4e\x09\x21\x65\x31\xee\x73\xd8\x07\xdd\x9f\xfa\x74\xbd\x77\xc0\x34\x11\xcf\xf7\x39\x41\xe7\xcd\x09\xb8\x34\xbf\xe4\x83\xee\x46\xea\x98\x8c\xc5\xd8\xc8\xf5\x16\x37\x99\xa0\xae\x6c\x5c\xaa\x62\xc6\x2e\x6c\x6e\x05\xe5\xad\xc2\x8e\x8b\x5d\x74\x5d\x12\xf4\x0b\x48\x91\xd9\xad\x1e\x64\x7f\xb5\x95\xf1\x00\x27\xe1\x73\x27\xf1\xa1\xce\x39\xe9\x83\x77\xea\x1e\xe2\xc3\xb0\x98\x2f\xd8\xbd\xc8\x27\x47\x59\xeb\xce\x48\x9f\x5d\x03\xdb\x42\xae\x0a\x5b\x02\x9d\xcb\x04\x3f\x41\x04\x7f\x2a\x9f\x3b\x5a\x53\x5f\xfb\x33\xad\x51\x3b\x34\x29\x75\x6b\x9f\x5d\xc1\x15\xd4\xbf\xab\x87\x75\xc3\xf9\xe0\x12\x9e\xfa\x88\x6d\x3e\xdf\x77\xaa\xe1\x74\xd0\x9a\xea\x18\x87\x6c\x69\xfa\xbb\x23\x49\x65\xd7\x26\xdf\x8a\x04\x75\xf2\xfc\x55\x90\x5b\x75\x23\xa4\xd2\x1b\xa5\x0c\xbe\xcf\x68\x32\xe0\x4a\xfe\x28\x04\x2c\x95\x12\xc3\x48\xd0\x46\x01\x86\x26\xeb\x20\x24\x0d\x79\x85\xc1\x2e\xf1\x70\x6d\xb7\x4c\x9c\xb4\x79\x2a\xdb\xbb\x17\x4d\x4e\x2a\xa3\x5b\xbe\xd9\x0a\x37\xe9\x84\xb5\xb6\x64\xd2\x2d\x95\xa7\x2a\x77\x40\x57\x4a\x21\x5f\xa4\xa6\x40\xe9\x54\x08\x72\x9a\x7a\xba\x7c\x3d\xa4\x62\x67\xbb\x96\x96\x3d\x27\x54\xec\x02\x67\x6c\x73\xd6\xf1\xb5\xbe\x0e\x47\x66\x95\x58\x8e\xc5\x65\x2a\xbb\xfe\x1b\x16\xee\x0b\xb3\x7a\x92\x3d\xd5\xdf\x2c\xd8\xe5\xbc\xdc\x1b\x78\x4f\x9a\x87\x01\x26\x63\xda\x60\x12\xbc\xde\xc7\x44\x8b\x83\x18\xf2\xbc\x19\x17\x2e\x97\xc1\x2f\xbf\x11\x68\xde\x05\xe6\x73\xf8\x80\xbf\x6f\xb9\xc6\xc4\xaf\xf6\x1d\x01\x2d\x14\xea\x96\xd4\x01\xb1\xbf\x33\xe3\x36\x65\x5c\xf7\x01\x0d\x75\xa8\x0f\x91\x55\xcb\x03\x9d\x76\xd0\xd6\x37\x19\x4c\x9c\xa6\x6d\x49\xfd\xb5\xb5\x3d\xae\x6f\x71\x8c\xda\xe0\xcd\xc0\x59\xba\x96\xca\x51\xf8\x9e\xc7\xb8\x22\xe1\x7a\xd4\x67\x03\xe7\xef\xfb\x95\x43\x52\x27\x2a\xb3\xc5\x19\x4f\x61\x32\x20\x67\x06\x48\x13\x73\xd1\x66\x6a\x34\x5b\x61\x09\xb5\x01\xfa\xaa\xf3\x72\xb8\x2f\x80\x76\x29\x9a\x2b\xf7\x8f\xc6\xc5\xbb\x19\xb8\x70\xf5\xa7\xe1\x14\xa9\x18\xcd\x03\xb7\xf1\x1a\x76\xd1\x4f\xf8\x58\x7b\xdc\xef\x81\x67\x7a\x21\xfd\xc5\xd4\x9a\x97\xa7\x52\xeb\x0a\x17\x25\x49\x98\x3f\xbc\xb5\xd1\x11\x67\xd8\x37\xd8\xdc\x0e\x4a\x5a\x2e\xb7\xd8\x58\xc8\x1b\xdf\x4e\x13\x7d\x09\x56\xb7\xc4\x04\xc6\xc3\x5c\x3b\x7f\x25\x12\x4d\xda\xce\x37\x6d\x80\x56\x8b\x98\xe1\xa8\x39\x33\x72\xbe\x23\x7c\x00\xe1\xbc\x1e\x08\x67\xb8\x2d\x4f\xe1\x87\x73\xa1\xaa\xcd\x22\x7d\x71\x9a\xcf\xaa\xbb\x31\x4a\x01\xc5\x96\xee\x82\x6c\x4f\x73\x93\x59\xfc\xf2\x9b\xb1\x9a\xcb\xd5\x3e\x8c\x1e\x8d\xd3\x7c\x9e\xe7\x90\x97\x16\x41\x4f\xdb\x10\x34\xf0\x8a\xcf\x40\x72\x71\xa4\x58\xfa\xae\x0f\xaa\x51\xe7\x50\xe7\x57\x92\xb9\xb9\xba\x53\x3e\x83\x43\xbf\xc0\x94\x6d\x85\x2d\x11\xf0\x43\x17\x37\xb4\x2f\x2d\x84\x52\x47\x49\xc9\x64\x18\xf3\x94\xc7\xc0\x5c\x43\xee\x24\xb8\x82\xd9\x2f\xa3\x51\x30\x7b\x7b\x11\xa7\x58\x63\x7e\x1b\xe8\x32\x42\xa1\xed\x71\x9a\x7e\x57\x19\x12\xdf\x1e\x47\x1a\x23\x45\x26\xe1\x62\x77\xf0\x62\xaa\x73\x1e\xdf\x76\xe3\x52\x72\x1c\x69\x5d\xfe\x88\x26\xe5\xb4\x36\xe5\xdb\x6c\x48\x8e\x68\xd6\x6a\xaf\xff\x4f\x3a\xa5\x89\x81\x67\xe5\xe2\xf4\x7f\xb2\x6f\x9a\xcf\x81\x9b\x7f\x48\xb3\xcd\x32\xa5\x2d\x26\x0e\x00\x8d\xb1\xd2\x89\x81\x87\x35\xda\x35\x6a\x88\xb7\x5a\xa3\xf4\x69\x8f\x42\x6d\x5b\xd1\x47\xa5\xa4\xae\x98\xc5\x25\xa4\x4c\x18\x1c\x1d\xeb\xd2\xbe\xf7\x62\x5f\xd0\x29\xf4\xea\xd9\xd3\x3e\x7c\x6f\xc3\xfe\x18\x70\x5b\x29\xef\x9b\xc1\x76\x3e\x87\xeb\x14\xb6\x06\x35\xa0\x64\x4b\x81\xbe\x74\xee\x82\xba\xce\x84\x70\xa1\x36\x83\x07\x84\x98\x51\x3f\x68\x7a\xa8\x5c\x86\xe4\x36\x6a\x2b\x6f\xa2\xe2\x42\x2e\x6a\x5d\x02\x7d\xfe\x3c\xb0\x58\xe5\xb4\x13\xc9\xce\x83\xe5\x8b\xfd\xe9\x6b\xfb\xd4\x89\x67\xd4\xcd\xa5\x2d\xdd\x7a\x5c\x31\xf4\xa6\x8b\xf3\x04\xe5\x55\x72\xa6\x79\xa1\x4b\xbf\x3f\x1c\x13\x35\xfe\x01\xc7\x12\x4a\x19\x2a\x3b\xe1\x62\xb1\xe1\x5b\xae\xf2\xf2\x95\x54\xda\x97\xde\xda\xe6\x6e\xa4\x88\x46\xfd\x6e\xd5\xbd\x82\x6d\xba\x4c\xf7\x9e\x35\x94\xfa\xa3\xd6\x54\x87\x7e\xd6\x20\xd4\x56\x7c\x4f\x0f\x17\xbb\x46\x3f\x3e\x9f\xc3\xd5\x1a\xe3\x7b\xd0\x8d\x1b\x89\xe8\xfb\x5c\xd7\xbd\xd0\xaf\x7e\xdf\xf8\xaa\xb3\xdd\xc9\x23\x91\x7f\x17\xe0\x8d\x8a\xbb\x3f\xa6\x55\xd3\x92\xa0\xe5\xbb\x42\xd7\xc1\xb9\xa9\x44\x43\x98\xce\x2b\x05\xdd\x9f\x74\x8e\x8b\xe9\xbd\x50\x3e\x86\xe4\x97\x4e\x65\xa7\x0c\x65\xf5\xf8\xf2\x97\xe5\xad\x9f\x66\xfd\x6f\xe1\xcd\x5f\xc2\x5d\xe8\xc7\x1a\xc9\x78\x06\xe1\xdd\x28\x58\x3e\x16\x79\x2c\xaa\xb7\xd8\x17\x99\xcc\xf3\x69\x6d\xa3\x89\xbb\x82\x8e\x6e\x98\x66\x1b\x13\xdd\x3a\xc7\x24\x8a\xf0\xfc\x83\xf3\xb2\xfa\x82\x0f\x85\xd8\x7e\x22\x5b\xc2\x6e\xd1\xdf\x58\x7c\xbf\xd2\x6a\x2b\x93\xf0\xfa\x40\x70\x52\x13\x55\x3b\xfd\xcc\xed\xfa\xca\xd3\x4f\x62\xfb\x69\x06\x8d\x9d\xaf\x98\x10\xa8\x29\xcb\xb7\xa1\xa8\xf1\x0d\xa0\x72\xc8\xbe\xd6\xae\xa5\xc6\xe1\x59\x4b\x8b\x93\xed\x4f\x30\x45\x1d\x7e\xc7\x6d\xb6\xdf\x17\x19\xb3\xeb\xe2\x9c\x83\xd8\x1b\x66\xd7\xde\xc0\x9e\xf0\x60\x32\x81\x09\xfe\x1e\x18\xc7\xe3\x69\xf8\x26\x61\x1c\xde\x28\x18\x4f\xeb\x6c\x50\xce\x6a\x76\x0d\x97\x30\x9e\xfd\x3a\xfe\x75\x3c\x6e\x0b\x6e\xd5\x34\xd4\x54\xb0\x4c\x94\x2a\xbd\x61\xd6\x65\xa3\xc9\xd8\x9b\x48\xbe\x98\xe7\x63\x37\x32\x55\x82\xf3\x1c\xc2\x9b\x1d\x93\x69\x15\xf2\x43\x3f\x7a\xf9\x8a\x55\xf4\x34\x9d\x12\x45\xa3\x8e\x54\x36\x54\xb3\xa4\xaa\x58\x2c\xb6\x20\xf8\x3d\x82\x25\x97\xae\xf8\x02\x7d\xf5\xe2\x4c\x18\x8f\x28\x63\x77\x1b\x9a\x46\xfd\x7a\xfa\xf4\x20\x49\x6f\x09\xf3\xe8\xbc\xc3\x87\x92\xec\x9d\xb2\xd7\xd5\xe6\x25\x5e\x55\xf0\xe6\xf9\x78\xda\x2a\x0a\x07\x72\x76\xf1\x6e\x01\xfa\x69\xc1\xbf\x43\xa2\x12\x84\x71\x33\x2f\x6f\xe8\x59\x31\x53\x54\x54\xdd\xf4\x4c\x40\xa8\x88\x16\xa3\x6b\x57\xb9\x1c\x67\x9e\x4f\xa6\x1d\xb3\xca\x7a\x54\x09\xbc\x96\x3b\x26\x78\x28\x4a\x2f\x3f\x65\x18\x5b\x4c\x16\x40\x4b\x35\x59\x33\xf8\x31\x26\xec\x16\xe0\x77\x6a\xd7\xf4\x03\xf6\xfa\x6b\xa0\x4b\x60\x59\x86\x32\x71\x53\xba\x99\x81\x89\x42\x4a\x72\x57\x78\xb5\xd4\x10\x45\x91\x07\x73\xc7\x34\xcd\xd5\x43\xe5\xd5\x0b\x57\x99\x9d\x95\x0e\x7d\xf0\xae\xc0\xed\x5b\xbe\xcf\x44\x2c\x3f\x5c\x52\xc1\xec\xd4\xf3\x7a\x77\xd1\x4a\x5d\x55\xae\xbe\x62\x1b\xa4\x03\xe8\xc9\x5e\x1f\x35\xdf\xbc\x61\xc6\x86\x34\xf6\x52\x26\x34\xa0\xaf\xaf\xd4\x66\xc3\xf2\x9c\x34\x9e\x1e\x28\xd2\xed\xf2\x77\xa8\x52\xd7\xd7\xfa\x0a\x4d\x91\x1d\x8e\x14\x9b\x10\xb4\x47\x0b\x8e\xa7\x2b\xc8\xcf\x2d\x3c\xc4\xf6\x5f\x28\x3e\xff\x89\x87\x9d\xec\x65\x45\x5a\xf3\x3d\xb5\xbb\x4e\x82\x87\x35\x17\x08\x6b\x26\x13\xc1\xe5\x0a\xdc\xb9\x91\x81\xe1\x85\xaa\x82\xcd\x39\xe8\xdd\xc9\xee\xd9\xee\x2d\x9d\xde\x03\xae\x77\xb6\xd7\x79\xc7\xee\xbc\x4a\xc5\x25\xb7\x65\xae\x38\xf1\x95\x21\xfa\x2b\x93\xc9\x07\x5c\x71\x63\x51\x0f\xdd\xaa\xeb\x09\x8d\x6d\x33\x4a\xaa\x83\x24\xd3\xbe\xbb\x4f\xdf\xca\x17\xe2\x6f\xab\x57\xbe\xde\xb2\x2c\xc8\x6c\xbe\x07\x46\x91\xf5\xef\x00\x00\x00\xff\xff\xb3\xa0\xb2\xa3\x78\x2e\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7a, 0xa7, 0x49, 0xc0, 0xb, 0x4f, 0xb7, 0x74, 0xd4, 0x4c, 0xc3, 0x78, 0xa9, 0xcf, 0x76, 0xfb, 0x87, 0x81, 0x77, 0xf3, 0xb7, 0x17, 0x5d, 0xe7, 0xf0, 0x89, 0x38, 0x61, 0x1a, 0xe, 0xc4, 0x99}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl": {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl": {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl": {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl": {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl": {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
