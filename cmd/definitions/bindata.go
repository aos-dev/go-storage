// Code generated by go-bindata. DO NOT EDIT.
// sources:
// cmd/definitions/tmpl/function.tmpl (567B)
// cmd/definitions/tmpl/info.tmpl (1.702kB)
// cmd/definitions/tmpl/object.tmpl (1.907kB)
// cmd/definitions/tmpl/operation.tmpl (1.698kB)
// cmd/definitions/tmpl/pair.tmpl (811B)
// cmd/definitions/tmpl/service.tmpl (11.791kB)

// +build tools

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\x8f\x25\x87\xae\xec\xe6\x07\x08\x9e\x8a\x82\xb0\xc8\xa2\xde\x25\x64\xa7\x6b\xb0\x99\x94\x66\x5a\x17\x62\xfe\xbb\xa4\x55\x17\x11\x0f\xde\x3c\x25\xcc\xcc\x7b\xf3\x3e\x26\xa5\x2d\x06\xc3\x47\x82\x7a\xda\x40\x4d\xb8\xbc\x82\xd2\x37\x23\xdb\x88\x9c\xab\xd2\x76\x2d\x38\x08\xd4\xa4\x6f\x7d\xdf\x91\x27\x16\x3a\x7c\x36\x55\xcb\x2f\xb3\x66\xd2\x77\xc6\x13\xde\x20\xa1\x31\x9e\xba\x65\xa0\x88\xd5\xa4\x77\xc1\x9a\xb9\xd2\x8e\x6c\x51\x47\x5c\xa4\x04\x75\x56\xec\x4d\x5c\x06\xd6\x48\xa9\x58\xe6\x5c\xa7\xa4\x26\xbd\x37\x83\xf1\x51\x3f\x0e\xce\xef\x4c\x14\xfd\x20\x83\xe3\xe3\x35\x1f\xe2\xab\x93\xe7\x26\x78\x6f\x72\x46\xe8\x05\xbd\x71\xc3\x2f\xa6\xa5\x5c\x62\x7e\xdf\xb4\x2c\xb8\xa7\x38\x76\x12\x3f\x8c\xe7\x00\x15\x00\xf4\x86\x9d\xad\x57\x05\xdc\x9d\xa9\x57\xeb\x6a\xa6\xa2\x2e\xd2\x1f\x71\xac\x9c\x60\x03\x0b\x9d\x44\x37\xcb\xbb\xc1\x3f\x66\xdc\x82\xf8\xeb\xca\x3f\xbe\xef\x01\x00\x00\xff\xff\x41\xc8\xae\xbf\x37\x02\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xfc, 0xb, 0xf4, 0xfb, 0xf, 0x94, 0xca, 0x64, 0x7a, 0xb8, 0x48, 0xf9, 0x69, 0xf1, 0x88, 0x46, 0x59, 0xd3, 0xbc, 0x0, 0x4e, 0xe7, 0x8, 0x1e, 0xdf, 0x27, 0x59, 0x81, 0x75, 0x52, 0xa2}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xe5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x92\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\xe4\x24\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x13\xc7\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x23\x5d\x63\xa9\x37\x31\x32\x99\xc7\x39\x15\x42\x09\x27\xb4\xb2\xef\x70\x7a\x85\xcb\xab\x1b\x9c\x9d\x9e\xdf\x2c\x58\xc5\xb3\x15\x5f\x12\xdc\xba\x22\xcb\x98\x90\x95\x36\x0e\x33\x06\x00\x93\x42\xba\x09\x8b\x18\x6b\xdb\x03\x18\xae\x96\x84\xe9\x6a\x8e\xa9\x50\x85\xb6\x78\x9b\x60\x71\x1e\x56\x17\xbc\x82\xf7\xac\x6d\x31\xb5\x64\x1a\x91\xd1\x25\x97\x14\xf6\xa7\x2b\xdc\xc1\xe9\x13\x2e\xa9\x0c\x47\x58\x1c\xe3\xbd\xa0\x32\x87\x50\x39\xdd\x42\x28\xb4\xed\x76\x92\xf7\x48\x85\x63\x99\x56\x36\x40\xec\xe8\x36\x5d\xcd\x5e\xdd\xfb\x0e\x71\x37\xfd\x3c\xd4\x0d\x24\xcd\xa2\x83\x08\xf2\x9f\xb8\xcd\x78\xd0\x47\x82\xa3\xe3\xe3\xb0\xbb\xea\x81\x0f\x40\x2a\x0f\xcb\x88\xb1\x60\x00\x76\x7b\x18\xa7\x5b\x67\xea\xcc\xa1\x1d\x94\x37\x6c\xdf\x9e\x62\x0b\x18\x37\xeb\xaa\xaf\xe5\xfd\xd6\x97\xfb\x33\x1b\x86\x2e\x8e\xe3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\xd3\xef\x94\x39\x34\xbc\xac\x69\x8e\x43\x48\xe2\xca\x42\x69\x07\x4b\x6e\x8e\xa3\xe1\x83\x25\xd7\x95\xea\xea\x08\xe5\xde\xbc\xee\x42\x09\xc9\xab\x2f\xd6\x19\xa1\x96\x5f\x85\x72\x64\x0a\x9e\x51\xeb\xd9\xa0\xfc\xbc\xd7\x61\x57\x14\x81\xfe\xec\xb6\x9b\x10\xef\x59\x51\xab\x0c\x33\x89\x57\xcf\xba\x16\xe1\x03\xb9\xbe\xf1\x53\x61\xab\x92\xaf\x07\x37\x66\xd1\xd8\x8f\xc1\x57\x43\xae\x36\x0a\x72\xf1\xc0\xbe\x40\xfa\xa7\x9a\xd7\x4f\x68\x36\x63\xcd\xe8\x37\x85\x06\xa6\x47\x60\x90\xa0\x19\xf1\xb2\x61\xa0\x4a\xdb\xb1\xfe\x03\x77\x66\x23\xd4\x39\x52\xad\xcb\x68\x20\x12\x05\xe4\x22\xdc\xf0\xcb\x3d\x9f\xc0\x8b\x04\x87\x43\x8d\xe7\xdd\x9e\xc3\x99\x9a\xba\x83\x7e\xbb\xd1\x2d\xa8\x3b\xfc\x20\xa3\x3f\x87\x79\xec\x12\x0a\x5e\x5a\xda\xe7\x96\x2e\x6a\xeb\xf6\x9b\x8e\xbf\xee\x3b\x19\xf7\x5d\x71\x25\xb2\x59\x21\xdd\xe2\xba\x32\x42\xb9\x62\x36\x79\x8c\xf5\x23\xa5\x3c\xbd\x7f\xb9\xbf\xee\x5e\x6c\x9e\xdd\x24\x8a\x1e\x5a\xf4\xdf\xcc\x6e\x6f\xe5\x5d\xb2\x9f\x97\x8f\x8e\x7d\xff\x0f\xdb\xf9\xa5\xdd\x2f\x7f\x06\x00\x00\xff\xff\x26\xf5\xd0\xb3\xa6\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x9d, 0xdc, 0x29, 0x17, 0xc8, 0x8a, 0x14, 0x25, 0x13, 0xa5, 0x85, 0x13, 0x6, 0xf, 0xb3, 0x4a, 0x21, 0xd1, 0x20, 0x4e, 0x6f, 0x92, 0x60, 0xe2, 0x6e, 0x29, 0x96, 0x4a, 0xee, 0x99, 0x66}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6f\xdb\x36\x10\x7e\x36\x7f\xc5\x37\x23\xd8\xa4\xc1\x91\x92\x6d\xd8\x43\x16\x3f\x0c\x71\xb6\x06\x68\xec\x02\x76\xfb\x4e\x53\x27\x9b\x8d\x44\x0a\x24\xe5\xda\x75\xf4\xdf\x0b\x4a\xb2\x23\x27\x4e\xe1\xa0\x2f\x7d\x23\x79\x77\xdf\xdd\xf7\xdd\x91\x8c\x63\xdc\xe8\x84\xb0\x20\x45\x86\x3b\x4a\x30\xdf\x60\xa1\xf7\x7b\x88\x3c\x89\x13\x4a\xa5\x92\x4e\x6a\x65\xff\xc1\x68\x82\xf1\x64\x86\xdb\xd1\xdd\x2c\x62\x05\x17\x0f\x7c\x41\x70\x9b\x82\x2c\x63\x32\x2f\xb4\x71\x08\x18\x00\xf4\xd3\xdc\xf5\x9b\x95\x93\x39\xb5\x4b\xbb\x51\xa2\xcf\x42\xc6\xe2\x18\xff\x49\xca\x12\x48\x95\xd0\x1a\x52\x41\xcf\x3f\x93\x70\x98\x4b\xc7\x84\x56\xd6\xe3\x6c\xb7\xe7\x30\x5c\x2d\x08\x67\x0f\x03\x9c\xad\x70\x35\x44\x34\xa9\xfd\xee\xc9\x71\x54\x55\x8d\xda\x44\xde\x79\xa0\xed\x16\x67\xab\x68\xcc\x73\xc2\x23\x9c\xfe\xc0\xad\xe0\x19\xaa\x0a\xa5\x54\xee\xef\xbf\x30\xc4\xe5\xf5\xb5\x77\x7a\xf0\xc1\x1e\x9f\x54\xe2\x97\x4d\x49\x0d\x36\xa4\x85\x5b\x12\x6c\xce\xb3\x8c\xac\x43\xa9\xa4\xf3\x25\x2e\xf4\xb9\x75\xda\xf0\x05\x45\x2c\x8e\x7d\xc0\x78\x32\xbb\x9d\x5e\xf9\x15\x70\xde\x86\xff\x66\x91\x7a\x6a\x16\xd3\x77\x93\x8f\xef\x47\x50\xda\x61\x4e\x10\x4b\x4f\x25\x81\x2e\x9d\x95\x09\xc1\x92\x59\x49\x41\x36\x3a\x0c\xc7\xcd\xbf\x63\x2f\xb1\x8f\xd0\x85\xa4\xe4\x99\x59\x5a\x08\xad\x44\x69\x0c\x29\x07\xcb\x53\x8a\x98\x6f\xc0\xce\x6e\x9d\x29\x85\xc3\xf6\x54\xf5\xbc\x9b\x4c\xbd\x6c\x23\xb2\xc2\xc8\xc2\x77\xfa\xc9\xf8\xaa\x61\x2f\xdd\x93\xdf\x6c\x53\x50\xad\x7d\x55\x75\x4e\x9e\x29\xcd\x7a\x71\x0c\x91\x49\x5f\x7d\x2b\xf4\x6e\xa7\xf0\x65\x29\xc5\xb2\xc3\x94\x67\x72\x45\x11\xeb\xb5\x1e\xd3\x46\x7d\xc3\xea\xa4\x71\xec\xa7\x05\xa5\xa5\x04\xdc\x82\xfb\x5d\xce\x0b\xa4\xda\xec\xa6\x69\xc5\xb3\x92\x06\xb8\x40\x4e\x5c\xd9\xba\x13\x96\xdc\x00\x97\xed\x81\x25\x57\x43\xd5\x38\xf5\x88\xb0\x5e\xa2\x15\xd5\x9b\x3f\xff\x60\xbd\xdc\x5b\xfd\xd4\x46\xf7\xa5\xa3\x35\xab\x18\x3b\x45\xd8\x27\x51\x6f\xd7\xf5\xa5\xa8\x2a\x96\x96\x4a\x20\xd0\xf8\xbd\x71\x0d\xf1\x3f\xb9\x56\x5f\x69\x8b\x8c\x6f\x5a\xe9\x82\xf0\x50\x3c\x6c\xeb\x12\x0d\xb9\xd2\x28\xe8\xe8\x85\xd6\xbe\xa8\x17\xe0\xd3\x57\xc0\x57\x87\xe0\xe1\x2e\xa2\xcd\x72\x04\x1e\x43\xac\x0e\x2a\x60\x6d\x3f\x33\x5b\x67\x7f\x0b\xb1\xe0\x20\xf9\x00\x73\xad\xb3\x70\x9f\xda\x3a\xee\x82\xb0\x69\xae\x4c\xa1\x23\xdf\x96\x5f\x4f\xba\xdf\xbf\x0c\x71\xd1\xe2\x7c\x5f\xac\x01\x9c\x29\xa9\x76\xac\x58\x97\x56\xa7\xb2\x47\x7c\x25\xa3\x3f\xf9\xd9\xa9\x23\x52\x9e\x59\x3a\xaa\xf2\x7d\x69\xdd\xdb\xda\xf8\x43\x2c\x87\x87\x2c\x0b\xae\xa4\x08\xd2\xdc\x45\xd3\xc2\x48\xe5\xd2\xa0\xdf\xce\x7d\x07\xa1\xaa\xfc\x45\x6a\x27\xbf\x1f\x86\x2d\xf5\x9f\x63\xa4\x1a\xf2\x8f\xc3\x53\xd8\x1f\x9d\xc1\xe6\x4d\xe9\x3e\x2f\x2f\xca\x16\x99\x56\x14\xac\x3b\x27\xdb\xfd\x13\x76\xca\xef\x72\xb4\xfc\xf5\x31\xd1\x9e\x3d\x8c\x1d\x86\x75\x80\xff\xda\xaa\x6f\x01\x00\x00\xff\xff\x94\x03\xb8\x29\x73\x07\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0x64, 0x33, 0x31, 0x2b, 0x9e, 0xa5, 0x1c, 0x46, 0x19, 0x57, 0xa8, 0x78, 0xb3, 0xc9, 0x92, 0xd7, 0x11, 0xee, 0xde, 0xf1, 0xa5, 0xf2, 0x26, 0x22, 0x58, 0x32, 0x8d, 0xfb, 0xb5, 0x58, 0xdc}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4d\x8f\xd3\x30\x10\xbd\xfb\x57\x8c\xac\x1e\x12\x69\x49\xef\x48\x7b\x82\x45\x5a\x09\x75\x2b\x10\xe2\x88\x5c\x67\xda\xb5\x48\x6c\x33\x9e\xec\x87\x82\xff\x3b\xb2\x93\x76\xd3\xaa\x10\x15\x10\xe2\x16\x7b\x66\xde\x9b\xf7\xc6\x13\xaf\xf4\x57\xb5\x43\xe0\x67\x8f\x41\x08\xd3\x7a\x47\x0c\x85\x00\x00\x90\xda\x59\xc6\x27\x96\xc3\xc9\x38\x29\x4a\x21\xfa\xfe\x15\x90\xb2\x3b\x84\xc5\x97\x2b\x58\x18\x78\x7d\x0d\xd5\xad\x65\xa4\xad\xd2\x18\x20\x46\xd1\xf7\xb0\x30\xd5\x5b\x0c\x9a\x8c\x67\xe3\x6c\xba\x4c\x0c\x30\x46\x4c\xf0\x8d\x7a\x5e\xa9\x16\x21\x46\x30\xfb\x62\xe8\x33\x53\x62\x30\x5b\x70\x04\x05\x7e\x4b\xf9\x39\x51\x06\xa4\x07\xa3\x91\x64\x79\x72\xcf\x8e\xd4\x2e\xdd\xc7\x98\xeb\x3f\x32\x19\xbb\x2b\x4a\x08\xf9\xe3\x80\x89\xb6\x4e\x8d\x8c\xe7\xa9\x08\xe7\x93\x8a\x85\xa9\xee\x7c\x16\x90\x32\x96\xcb\xdc\xad\xf3\x03\xcd\x77\x60\xb7\x56\x41\xab\x26\xb5\x3c\x46\x4e\x24\x8e\xc0\xe7\x6b\x8a\x31\xf2\xce\x51\xab\x78\xad\x48\xb5\x89\xab\x84\xe3\xc0\x07\x0c\x5d\xc3\xe1\xb3\xe1\xfb\xf5\x30\x9b\x23\x95\x32\x95\x4c\x5d\xb2\x8e\x73\xf5\x7b\x37\xd0\xcc\xf6\x9e\x90\xdf\x0c\x83\xfd\x1d\x19\x93\xf2\x42\xf3\x13\x8c\x6f\xa4\x1a\xef\xae\xfe\xba\xca\xfd\xd8\x8e\x4f\xf9\xd8\x76\x81\x6f\xda\x0d\xd6\x9f\xac\x69\x7d\x83\x2d\x5a\xc6\xfa\xdc\x1b\x2b\x4a\x11\x85\x58\x2e\x61\x36\x33\x83\xc2\x06\x01\x13\x70\x8d\x35\xb0\x83\x7b\xf5\x80\xb0\x75\xf4\xa8\xa8\x06\xed\x5a\xaf\xd8\x6c\x1a\x84\x03\x96\x4a\xde\x85\x6a\x78\xe4\xf3\x1c\x81\xa9\xd3\x0c\x7d\x14\x62\xdb\x59\x0d\x45\x98\x2f\x2a\x2f\x92\x7b\x29\xf6\xc9\xce\x8c\x9b\x48\xc8\x1d\x59\x90\xb3\x00\x32\xd9\xfb\xeb\x9d\xba\xa0\x99\x7f\xb2\x44\xc7\x3f\x9b\xb3\x6b\x84\x44\x70\x0d\x2b\x7c\xbc\xf3\x48\x79\xc4\x2b\xc7\xb7\x2f\xdd\xdf\x10\x39\x2a\xe4\xb4\xdb\x18\x65\x79\xfa\xc3\x79\x71\x52\x44\xf1\x33\xbe\x0b\xec\xf9\x0f\x76\x73\x34\xef\x4f\x0c\x9a\x38\xb2\x37\x6a\xfa\x75\x70\xef\x47\x00\x00\x00\xff\xff\xbd\xe8\x37\x32\xa2\x06\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc2, 0xaf, 0x9a, 0xb8, 0xf7, 0x9f, 0x1b, 0x53, 0xaa, 0x36, 0x95, 0x6d, 0xe6, 0x56, 0x7d, 0xb9, 0x8e, 0xd7, 0x4, 0x74, 0xce, 0x5b, 0x9, 0x4f, 0xb6, 0x92, 0xc, 0x1e, 0x49, 0x5, 0x4c, 0x4c}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\xc1\x8a\xdb\x30\x10\x3d\x5b\x5f\xf1\x30\x39\xd8\x90\xb5\x2e\x3d\xa5\xf4\xd4\x94\x52\xca\x6e\x96\x12\xda\x63\x51\xe4\x59\x45\xac\x23\x09\x59\x76\x6b\x5c\xff\x7b\x91\xe5\x18\x36\x85\xb6\xeb\xd3\xcc\x9b\x79\xe3\xf7\x1e\xe2\x1c\xef\x6d\x4d\x50\x64\xc8\x8b\x40\x35\x4e\x03\x94\x5d\x7b\xc8\x4b\xcd\x6b\x7a\xd2\x46\x07\x6d\x4d\xfb\x16\xfb\x03\x1e\x0e\x47\x7c\xd8\x7f\x3a\x56\xcc\x09\xf9\x2c\x14\xc1\x09\xed\x5b\xc6\xf4\xc5\x59\x1f\x50\x30\x00\xc8\xa5\x35\x81\x7e\x86\x9c\xa5\x56\xe9\x70\xee\x4e\x95\xb4\x17\x7e\xa2\xc1\x9a\xba\x0d\xd6\x0b\x45\x5c\xd9\xbb\x6b\xd9\xbf\xe1\xee\x59\xf1\x73\x08\x4e\x36\x9a\x4c\xc8\x5f\xc5\x6d\xc9\xf7\x5a\x52\x9b\x58\xd5\x7f\xf3\xc2\xe0\x22\x89\x95\x8c\x8d\xe3\x1d\xbc\x30\x8a\xb0\xf9\xbe\xc5\xa6\xc7\xee\x1d\xaa\xc7\x68\x0f\xd3\x34\x4f\x37\xce\x88\x0b\x45\x7c\xd3\x57\x0f\xb1\xfc\x85\x60\x1f\x45\x2b\x45\x13\x77\x38\xc7\x37\x1d\xce\xe3\x78\xdd\x9c\x26\xfc\xd0\x4d\x03\xe1\x5c\x33\x20\xe2\x0b\x6f\x9a\xd0\x8b\xa6\x23\x04\x8b\x83\x9b\xf3\xad\x18\xe7\x2c\xad\xec\xa9\x95\x5e\xcf\x70\x3c\xfb\xd4\x19\xf9\xc7\xe1\xa2\x5f\xee\x1d\x07\x17\xfb\x12\x51\x2a\xc6\xd9\xbf\xa7\xd0\x79\x33\x23\x09\x88\xdf\x67\x1a\x76\xc8\x5f\x88\xc8\xb7\xeb\xf4\x6b\x94\xb3\x43\x9f\x90\x89\x25\xc7\x64\xea\xa8\x20\x49\x50\x8d\x3d\x89\x66\x4e\xa4\x28\x71\x4d\x7c\x8e\xe8\x5e\x38\x8c\x2c\x5b\xfe\x7b\x3b\x1a\x59\x96\xfd\x3d\xdd\x34\xff\x57\xbe\x59\x76\x23\x7f\xf5\xb3\x84\x90\x6f\x97\x4b\x8b\xee\x2c\xfa\x48\xe2\xe3\x33\x2e\xca\x25\x9f\x55\xe0\x17\x52\xba\x0d\xe4\x3f\xae\xd6\xee\x85\x2b\x5e\x18\x2d\xd9\xf4\x3b\x00\x00\xff\xff\xf7\x5f\xa2\x07\x2b\x03\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x39, 0x82, 0x3e, 0xc0, 0x1c, 0xbe, 0xae, 0xf, 0xee, 0xba, 0xca, 0x1a, 0x29, 0xb9, 0x46, 0x55, 0xa7, 0x9c, 0x33, 0x72, 0xda, 0xf8, 0x38, 0x54, 0x92, 0xd, 0x85, 0xb6, 0x25, 0x71, 0xbf, 0x55}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x8f\xdb\xb8\x15\x7e\x8e\x7f\xc5\x59\x61\x10\xd8\x81\x43\xb7\x40\x9f\x5c\xcc\xc3\x76\x72\xe9\x60\x73\x19\x64\xd2\xee\xc3\xee\x62\x40\x4b\x47\x36\x3b\x14\xa9\x25\x69\x4f\x06\x8e\xfe\x7b\xc1\x8b\xee\x92\x2f\x69\x8a\x4d\x8b\xcc\xcb\xc8\xe4\x39\x87\x87\x1f\xcf\x95\xd2\x62\x01\x57\x32\x41\x58\xa3\x40\x45\x0d\x26\xb0\x7a\x84\xb5\xac\x7e\xc3\x8e\x51\x88\xb3\x64\x91\x60\xca\x04\x33\x4c\x0a\xfd\x57\x78\xf1\x1e\xde\xbd\xff\x08\x2f\x5f\x5c\x7f\x24\x93\x9c\xc6\xf7\x74\x8d\xb0\xdf\x03\x79\x47\x33\x84\xa2\x98\x4c\x58\x96\x4b\x65\x60\x3a\x01\x00\x88\x62\x29\x0c\x7e\x32\x91\xff\xc5\x64\x34\xf1\x4f\x6b\x66\x36\xdb\x15\x89\x65\xb6\x58\xe1\xa3\x14\x89\x36\x52\xd1\x35\x2e\xd6\xf2\x79\xf9\xb8\xfb\xcb\x22\xbf\x5f\x2f\x50\x24\xb9\x64\xa2\x94\x71\x06\x67\xac\x30\x41\x61\x18\xe5\xe7\xf3\x6e\x8c\xc9\x63\xce\xf0\xdc\x75\x35\xaa\x1d\x8b\x51\x7b\x2e\x72\x32\x9f\x79\xcc\x2d\xd3\x6c\x32\xd9\x51\x05\x77\x50\xeb\x4e\x6e\x94\xdc\xb1\x04\x55\x98\x29\xf1\x20\xff\xa4\x7c\x8b\x61\xf0\xd6\x4b\x2a\x69\x4a\x2d\xc8\xad\x7f\x78\xa9\x94\x2c\xe7\xea\x9d\x91\xf7\xb9\x3b\xd6\xc9\x64\xb1\x80\x8f\x8f\x39\x02\xd3\x60\x36\x08\x56\x19\x48\xa5\x6a\x9d\x6c\x2c\x85\x36\x9e\xec\x12\xa2\xc6\x4c\xe4\xf8\xc3\x4a\x40\x77\x94\x71\xba\xe2\x08\x39\x65\x4a\x93\xc0\x37\x9d\xec\xf7\xcf\x41\x51\xb1\x46\xb8\xb8\x9b\xc3\xc5\x0e\x96\x97\x40\x6e\x2c\x8d\x95\x6e\xd1\xb2\x14\x2c\x05\x21\x0d\x5c\xec\xc8\x6b\x2e\x57\x94\xd7\x73\x76\xec\x05\xea\x58\x31\xa7\x75\x7b\xe2\xd5\x96\xf3\xa0\x4e\xd0\xee\xa2\x54\xef\xce\x53\x54\xca\x96\x2b\xa1\x48\xac\x8c\xc6\xe3\xcc\x6d\xe4\xfd\xea\x5f\x18\x9b\xb7\x68\x68\x42\x0d\x05\x7b\x46\xa8\x4b\x44\x21\x2b\xc7\x2d\x3c\xd2\x91\x92\x89\xc3\xab\xc7\xa7\xb6\xb1\x81\xfd\xf0\xbe\xaf\x45\x2a\x4f\xdc\xf7\x73\xb8\xc8\x85\x55\x7e\x79\x59\xed\xe3\x33\x18\x79\x43\x75\xdc\xa6\x63\xa9\xc3\x88\xe9\x9c\xd3\xc7\xf2\xd8\x20\xfc\x35\x04\x5d\x8e\x90\x35\xa0\x38\x0a\xb9\x97\x54\x14\x81\xca\x99\x45\x5f\x4c\xe3\xb1\x70\xe0\xbe\x46\xd3\xc1\xe9\x81\x71\x0e\x6b\x34\x5d\xfc\x52\x25\xb3\x30\x46\x26\x8b\x85\x65\x7e\x0e\x1f\x37\x4c\x43\xba\x15\xb1\x53\x47\x6f\xe4\x96\x27\x0e\xb7\x15\x42\x4c\x39\xf7\x51\xac\x3c\x2b\x96\xe5\x1c\x33\x14\x06\x15\x29\xf9\x11\x14\x9a\xad\x12\x4c\xac\xbb\x2b\x32\x0d\x0a\x69\x02\x52\xf0\x47\xa0\x22\xe9\xc8\xcf\x64\xc2\x52\x86\x09\x99\x58\x05\xfa\x3b\x99\x4a\x78\xe6\x47\x66\x5d\xc9\x7b\x87\x8b\xcc\xe6\x20\xef\xed\x31\x4a\xf2\x1a\x4d\x70\x98\x8a\x7d\xe6\x88\x58\x6a\x69\xf6\xd5\xb1\x79\x6d\x41\x66\x64\xda\x16\xea\xc9\x3d\xe2\x81\xa8\x4d\xb0\x2f\x31\xd7\xc3\x98\xeb\x3e\xe6\x4c\x18\x79\x1a\xe6\x0e\xa3\x1a\x74\x29\x62\x9c\x43\xce\x91\x6a\x84\x8c\xde\x23\xe8\xad\x42\xa0\x9c\x83\x13\xbc\xa1\x1a\x56\x88\x02\x1e\x14\x33\x06\x05\xac\x30\x95\x0a\xad\x0e\x01\xce\x9e\x92\x35\x9c\x73\xa8\x2c\xa1\xda\x7c\x09\x29\xb9\xed\x03\x29\xb3\x99\xdd\xf9\xe1\x78\x33\xe6\x73\xa7\xf8\xdb\x62\x01\x3f\x33\xb3\x69\xb9\x81\x83\x94\xe6\x39\x7f\x84\x56\xbc\x81\x9d\x8d\xd2\x60\x71\xf5\xc1\xd6\x01\x3b\xe8\x5a\x0e\x87\xae\xe0\xe9\xae\xed\x61\x33\xb0\x5b\xe8\x1b\x88\x1d\xad\x07\x7f\xc2\xc7\x65\x3f\x32\xce\xab\x79\x97\x3a\x96\xb0\x9b\x07\x23\x6a\x79\x6a\xe3\xb1\x3c\x1b\x07\xb0\xc3\x6e\x3a\xab\x93\x8b\x1d\x78\x4b\x73\xd8\x4f\x9e\x04\x2d\xba\x53\xfb\xc9\x93\x27\xc7\xe3\xfe\xb1\x18\x78\x6a\x1c\x7c\xf2\x24\x6a\xc7\xfa\x25\x44\x2d\xf0\xa2\x79\xd0\x27\x6c\xaf\xfd\xa3\x18\xb5\x1a\x2b\x4f\xe7\x34\xc6\x56\xc8\x36\x98\xe5\xdc\x56\x4a\x11\xb3\x21\x26\xb5\xf3\x91\xb3\xfe\x5b\x6e\xc3\x4f\xa9\xc8\xc5\x8e\x5c\x57\x04\xc3\x02\x52\xa4\x66\xab\x46\xd9\x5f\x6d\x45\x3c\xc2\x69\x93\xec\x9d\xc0\x87\x26\xe7\x74\x08\x9f\x99\x1b\xc4\x87\x71\x31\x5f\xb0\x7a\x19\x16\x8e\xb2\x36\x6d\xca\x3e\xbb\xa2\xb2\x83\x5c\xed\x7d\x16\x74\x26\x12\xfc\x04\x04\xfe\x54\x8d\x3b\x5a\xdd\x9c\xfb\xb3\x9d\xb3\x55\xcd\xb4\xd2\xad\x7b\x76\x25\x57\x50\xff\xae\xe9\x9d\x2d\xeb\x81\x4b\x78\xea\x1d\xaf\x3d\xbe\xef\x25\xb5\xd9\xe8\x6e\xea\x63\x1c\xdb\x4b\xdb\x60\x1d\x49\x2a\xfa\x7b\xf2\x15\x45\x50\xa7\x28\x5e\x05\xb9\x75\x51\x61\x55\x7a\x23\xa5\xc6\xf7\xb9\xad\xd6\x99\x14\x3f\x72\x0e\x2b\x29\xf9\x38\x12\x76\xa1\x00\x43\x9b\x75\x14\x92\x96\xbc\x72\xc3\x2e\x7e\x30\x65\xb6\x94\x9f\xb4\x78\x2a\xba\xab\x97\xb5\x4a\x2a\xc8\x2d\xcb\xb6\xdc\x75\x1f\x61\xae\x2b\xd9\xea\x96\x8a\x53\x95\x3b\xa0\xab\x8d\x38\x5f\xa4\x26\x47\xe1\x54\x08\x72\xda\x7a\xba\xb0\x3b\xa6\x62\x6f\xb9\x8e\x96\x03\x27\x54\xae\x02\x67\x2c\x73\xd6\xf1\x75\x7e\x8e\x7b\x66\x1d\x58\x8e\xf9\x65\x2a\xfa\xf6\x1b\x26\xee\xcb\x6d\x0d\x44\x6b\x9b\x46\xf3\xb0\x2f\x67\xe5\x7e\x83\xf7\x56\xf3\xd0\x87\xe4\x54\x69\x4c\x82\xd5\x7b\x9f\xe8\x70\x58\x86\xa2\x68\xfb\x85\x8b\x65\xf0\xcb\x6f\x16\x34\x6f\x02\x8b\x05\x7c\xc0\xdf\xb7\x4c\x61\xe2\x67\x87\x8e\xc0\x4e\x94\xea\x56\xd4\x01\xb1\xbf\x53\xed\x16\xa5\x4c\x0d\x01\x0d\x4d\xa8\x0f\x91\xd5\xd3\x23\x05\x73\xd0\xd6\xd7\x0a\x94\x9f\xa6\x6d\x45\xfd\xb5\xb5\x3d\xae\x6f\x79\x8c\x4a\xe3\xcd\xc8\x59\xba\xca\xc8\x51\xf8\xd2\x45\xbb\x24\xe1\x4a\xcd\x67\x23\xe7\xef\xcb\x8e\x43\x52\xa7\x32\x37\xe5\x19\xcf\x60\x3a\x22\x67\x0e\x68\x1b\xdf\xb2\x5a\x54\xa8\xb7\xdc\x58\xd4\x46\xe8\xeb\x02\xca\xe1\xbe\x04\xbb\x4a\x59\x23\xb9\x7f\xb6\xeb\xbb\x9b\x83\x73\x57\x7f\x1a\x4e\x91\x9a\x51\x3f\x30\x13\x6f\x60\x47\x7e\xc2\xc7\xc6\xf0\xb0\x05\x9e\x69\x85\xf6\x2f\xb6\x15\x76\x75\x2a\x8d\xe2\x6e\x59\x91\x84\x36\xc2\xef\x96\x1c\x31\x86\x7d\x8b\xcd\xad\x20\x85\x61\x62\x8b\xad\x89\xa2\xf5\xeb\x34\xd1\x97\x60\x54\x47\x4c\x60\x3c\xcc\xb5\xf3\x37\x1b\x64\xda\x35\xbe\x59\x0b\xb4\x86\xc7\x8c\x7b\xcd\x99\x9e\xf3\x1d\xe1\x03\x08\x17\x4d\x47\x38\xc3\x6c\x59\x0a\x3f\x9c\x0b\x55\xe8\x27\xc6\xfc\xb4\x98\xb7\x5b\x8d\x72\x49\x77\xcf\xb5\xb7\xed\x8f\x5e\xfe\xf2\x9b\x36\x8a\x89\xf5\x3e\xf4\x0e\xad\xd3\x7c\x5e\x14\x50\x54\x3b\x82\x81\xb2\x21\x68\xe0\x15\x9f\x83\x60\xfc\x48\xb2\xf4\x55\x1f\xd4\xbd\xca\xa1\xca\xaf\x22\x73\xed\x71\x2f\x7d\x06\x83\x7e\x81\x29\xdd\x72\x53\x21\xe0\xbb\x26\xa6\xed\xba\x76\x22\xa4\x3a\x1b\x94\x74\x8e\x31\x4b\x59\x0c\xd4\x15\xe4\x4e\x82\x4b\x98\xc3\x32\x5a\x09\x73\xb0\x16\x71\x8a\xb5\x1a\xb0\x91\x2a\x23\x24\xda\x01\xa3\x19\x36\x95\x31\xf1\xdd\x76\xa4\xd5\x52\xe4\x02\x2e\x76\x07\xef\x97\x7a\xe7\xf1\x6d\x17\x2e\x15\xc7\x91\xd2\xe5\x8f\x28\x52\x4e\x2b\x53\xbe\xcd\x82\xe4\x88\x66\x9d\xf2\xfa\xff\xa4\x52\x9a\x6a\x78\x56\x4d\xce\xfe\x27\xeb\xa6\xc5\x02\x98\xfe\x87\xd0\xdb\x3c\x97\xca\x60\xe2\x00\x50\x18\x4b\x95\x68\x78\xd8\xa0\xd9\xa0\x82\x78\xab\x14\x0a\x1f\xf6\xac\xab\x6d\x6b\x7a\x52\x49\xea\x8b\x59\x5e\x42\x4a\xb9\xc6\xc9\xb1\x2a\xed\x7b\x2d\xf6\x05\x95\xc2\xa0\x9e\x03\xe5\xc3\xf7\x32\xec\x8f\x01\xb7\x13\xf2\xbe\x19\x6c\x17\x0b\xb8\x4e\x61\xab\x51\x01\x0a\xba\xe2\xe8\x53\xe7\x2e\xa8\xeb\xb6\x10\x2e\xd4\xe6\xf0\x80\x10\x53\x5b\x0f\xea\x01\x2a\x17\x21\x99\x21\x5d\xe5\x35\x29\x2f\xe4\x48\xe7\x12\xe8\xf3\xe7\x91\xc9\x3a\xa6\x9d\x48\x76\x1e\x2c\x5f\x6c\x4f\x5f\xdb\xa6\x4e\x3c\xa3\x7e\x2c\xed\xe8\x36\x60\x8a\xa1\x36\x5d\x9e\x27\xa8\xa8\x83\xb3\xed\x17\xfa\xf4\xfb\xc3\x3e\xd1\xe0\x1f\x31\x2c\x2e\xa5\xb6\x69\x27\x5c\x2c\xb6\x6c\xcb\x65\x5e\xb6\x16\x52\xf9\xd4\xdb\x58\xdc\xb5\x14\x64\x32\x6c\x56\xfd\x2b\xd8\xb6\xc9\xf4\xef\x59\x43\xaa\x3f\xba\x9b\xfa\xd0\xcf\x6a\x84\xba\x8a\xef\xed\xe0\x72\xd7\xaa\xc7\x17\x0b\xb8\xda\x60\x7c\x0f\xaa\x75\x23\x41\xbe\xf7\x75\xfd\x0b\xfd\xfa\xfd\xc6\x57\xed\xed\x4e\x6e\x89\xfc\x2b\xfd\x37\x32\xee\xbf\x0d\xab\xbb\x25\x6e\xa7\xef\x4a\x5d\x47\xfb\xa6\x0a\x0d\xae\x7b\x5f\x06\xf4\x5f\xe9\x1c\x17\x33\x78\xa1\x7c\x0c\xc9\x2f\xed\xca\x4e\x69\xca\x9a\xfe\xe5\x2f\xcb\x3b\x6f\x58\xfd\x2b\xed\xf6\x0b\x6d\xe7\xfa\xb1\x42\xbb\x79\x0a\xe1\x7b\x25\x58\x3d\x96\x71\x8c\x34\x4b\xec\x8b\x5c\x14\xc5\xac\xb1\xd0\xd4\x5d\x41\x93\x1b\xaa\x68\xa6\xc9\xad\x33\x4c\x4b\x11\xc6\x3f\x38\x2b\x6b\x4e\x78\x57\x88\xcd\x27\xbb\x97\xb0\x1a\xf9\x1b\x8d\xef\xd7\x4a\x6e\x45\x12\xbe\x02\x28\x5f\xa7\x92\x7a\xa5\x9f\x99\xd9\x5c\x79\xfa\x69\x6c\x3e\xcd\xa1\xb5\xf2\x15\xe5\x1c\x95\x8d\xf2\x5d\x28\x1a\x7c\x23\xa8\x1c\xda\x5f\x67\xd5\x4a\xe3\x30\xd6\xd1\xe2\xe4\xfd\x27\x98\xa2\x72\x67\x30\x9d\xb5\xcb\xef\x8b\x9c\x9a\x4d\x79\xce\x41\xec\x0d\x35\x1b\xbf\xc1\x01\xf7\xa0\x22\x81\x29\xfe\x1e\x18\xa3\x68\x16\x7e\x09\x88\xc2\x87\x01\xd1\xac\xc9\x06\x55\xaf\x66\x36\x70\x09\xd1\xfc\xd7\xe8\xd7\x28\xea\x0a\xee\xe4\x34\x54\x36\x61\x69\x92\x4a\x95\x51\xe3\xa2\xd1\x34\xf2\x5b\xb4\xb6\x58\x14\x91\x6b\x99\x6a\xc1\x45\x01\xe1\x03\x8d\xe9\xac\x76\xf9\xb1\x97\x5e\x3e\x63\x95\x35\x4d\x2f\x45\xd9\x56\x47\x48\x13\xb2\x59\x52\x67\x2c\x1a\x1b\xe0\xec\x1e\xc1\x58\x93\xae\xf9\x02\x7d\xfd\xfd\x4b\x68\x8f\x6c\xc4\xee\x17\x34\xad\xfc\xf5\xf4\xe9\x41\x92\xc1\x14\xe6\xd1\x79\x87\x0f\x15\xd9\x3b\x69\xae\xeb\xc5\x2b\xbc\x6a\xe7\x2d\x8a\x68\xd6\x49\x0a\x07\x62\x76\xf9\x71\x00\xfa\x6e\xc1\x7f\x0a\x22\x13\x84\xa8\x1d\x97\x33\x3b\x56\xf6\x14\x35\x55\x3f\x3c\x5b\x20\x24\xb1\x93\xe4\xda\x65\x2e\xc7\x59\x14\xd3\x59\x6f\x5b\x55\x3e\xaa\x05\x5e\x8b\x1d\xe5\x2c\x24\xa5\x97\x9f\x72\x8c\x0d\x26\x4b\xb0\x53\x0d\x59\x73\xf8\x31\xb6\xd8\x2d\xc1\xaf\xd4\xcd\xe9\x07\xf6\xeb\xaf\x81\x2e\x81\xe6\x39\x8a\xc4\x75\xe9\x7a\x0e\x9a\x84\x90\xe4\xae\xf0\x1a\xa1\x81\x10\xe2\xc1\xdc\x51\x65\xfb\xea\xb1\xf4\xea\x85\xcb\xdc\xcc\x2b\x83\x3e\x78\x57\xe0\xd6\xad\x3e\x4b\xb2\x2c\x3f\x5c\xda\x84\xd9\xcb\xe7\xcd\xea\xa2\x13\xba\xea\x58\x7d\x45\x33\xb4\x07\x30\x10\xbd\x3e\x2a\x96\xbd\xa1\xda\x84\x30\xf6\x52\x24\xb6\x41\xdf\x5c\xc9\x2c\xa3\x45\x61\x35\x9e\x1d\x48\xd2\xdd\xf4\x77\x28\x53\x37\xe7\x86\x12\x4d\x19\x1d\x8e\x24\x9b\xe0\xb4\x47\x13\x8e\xa7\x2b\xc9\xcf\x4d\x3c\x96\xed\xbf\x90\x7c\xfe\x13\x0b\x3b\xd9\xca\xca\xb0\xe6\x6b\x6a\x77\x9d\x04\x0f\x1b\xc6\x11\x36\x54\x24\x9c\x89\x35\xb8\x73\xb3\x1b\x0c\xdf\x45\x95\x6c\xce\x40\xef\x4e\x36\xcf\x6e\x6d\xe9\xf4\x1e\x31\xbd\xb3\xad\xce\x1b\x76\xef\x8b\x28\x26\x98\xa9\x62\xc5\x89\x9f\x0c\xd9\xbf\x2a\x98\x7c\xc0\x35\xd3\x06\xd5\xd8\xad\xba\x9a\xda\xb6\x6d\x6e\x83\xea\x28\xc9\x6c\xe8\xee\xb3\xb7\xc2\x6d\xfd\xf1\xd6\x5b\x9a\x07\xb1\xed\x2f\xba\xac\x73\xfd\x3b\x00\x00\xff\xff\xec\x6d\xaa\x2d\x0f\x2e\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa8, 0xb0, 0xa1, 0x31, 0x81, 0x98, 0x87, 0xbb, 0x59, 0xf1, 0xf2, 0xb8, 0xb7, 0xef, 0xe5, 0x8c, 0xa7, 0x15, 0x5e, 0x80, 0xfe, 0x98, 0xd5, 0xdd, 0x0, 0xf, 0x4f, 0x40, 0x57, 0xd0, 0xca, 0xa4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl": {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl": {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl": {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl": {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl": {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
