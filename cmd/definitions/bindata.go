// Code generated by go-bindata. DO NOT EDIT.
// sources:
// cmd/definitions/tmpl/function.tmpl (567B)
// cmd/definitions/tmpl/info.tmpl (1.702kB)
// cmd/definitions/tmpl/object.tmpl (2.388kB)
// cmd/definitions/tmpl/operation.tmpl (1.698kB)
// cmd/definitions/tmpl/pair.tmpl (502B)
// cmd/definitions/tmpl/service.tmpl (13.571kB)

// +build tools

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\x8f\x25\x87\xae\xec\xe6\x07\x08\x9e\x8a\x82\xb0\xc8\xa2\xde\x25\x64\xa7\x6b\xb0\x99\x94\x66\x5a\x17\x62\xfe\xbb\xa4\x55\x17\x11\x0f\xde\x3c\x25\xcc\xcc\x7b\xf3\x3e\x26\xa5\x2d\x06\xc3\x47\x82\x7a\xda\x40\x4d\xb8\xbc\x82\xd2\x37\x23\xdb\x88\x9c\xab\xd2\x76\x2d\x38\x08\xd4\xa4\x6f\x7d\xdf\x91\x27\x16\x3a\x7c\x36\x55\xcb\x2f\xb3\x66\xd2\x77\xc6\x13\xde\x20\xa1\x31\x9e\xba\x65\xa0\x88\xd5\xa4\x77\xc1\x9a\xb9\xd2\x8e\x6c\x51\x47\x5c\xa4\x04\x75\x56\xec\x4d\x5c\x06\xd6\x48\xa9\x58\xe6\x5c\xa7\xa4\x26\xbd\x37\x83\xf1\x51\x3f\x0e\xce\xef\x4c\x14\xfd\x20\x83\xe3\xe3\x35\x1f\xe2\xab\x93\xe7\x26\x78\x6f\x72\x46\xe8\x05\xbd\x71\xc3\x2f\xa6\xa5\x5c\x62\x7e\xdf\xb4\x2c\xb8\xa7\x38\x76\x12\x3f\x8c\xe7\x00\x15\x00\xf4\x86\x9d\xad\x57\x05\xdc\x9d\xa9\x57\xeb\x6a\xa6\xa2\x2e\xd2\x1f\x71\xac\x9c\x60\x03\x0b\x9d\x44\x37\xcb\xbb\xc1\x3f\x66\xdc\x82\xf8\xeb\xca\x3f\xbe\xef\x01\x00\x00\xff\xff\x41\xc8\xae\xbf\x37\x02\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xfc, 0xb, 0xf4, 0xfb, 0xf, 0x94, 0xca, 0x64, 0x7a, 0xb8, 0x48, 0xf9, 0x69, 0xf1, 0x88, 0x46, 0x59, 0xd3, 0xbc, 0x0, 0x4e, 0xe7, 0x8, 0x1e, 0xdf, 0x27, 0x59, 0x81, 0x75, 0x52, 0xa2}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xe5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x92\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\xe4\x24\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x13\xc7\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x23\x5d\x63\xa9\x37\x31\x32\x99\xc7\x39\x15\x42\x09\x27\xb4\xb2\xef\x70\x7a\x85\xcb\xab\x1b\x9c\x9d\x9e\xdf\x2c\x58\xc5\xb3\x15\x5f\x12\xdc\xba\x22\xcb\x98\x90\x95\x36\x0e\x33\x06\x00\x93\x42\xba\x09\x8b\x18\x6b\xdb\x03\x18\xae\x96\x84\xe9\x6a\x8e\xa9\x50\x85\xb6\x78\x9b\x60\x71\x1e\x56\x17\xbc\x82\xf7\xac\x6d\x31\xb5\x64\x1a\x91\xd1\x25\x97\x14\xf6\xa7\x2b\xdc\xc1\xe9\x13\x2e\xa9\x0c\x47\x58\x1c\xe3\xbd\xa0\x32\x87\x50\x39\xdd\x42\x28\xb4\xed\x76\x92\xf7\x48\x85\x63\x99\x56\x36\x40\xec\xe8\x36\x5d\xcd\x5e\xdd\xfb\x0e\x71\x37\xfd\x3c\xd4\x0d\x24\xcd\xa2\x83\x08\xf2\x9f\xb8\xcd\x78\xd0\x47\x82\xa3\xe3\xe3\xb0\xbb\xea\x81\x0f\x40\x2a\x0f\xcb\x88\xb1\x60\x00\x76\x7b\x18\xa7\x5b\x67\xea\xcc\xa1\x1d\x94\x37\x6c\xdf\x9e\x62\x0b\x18\x37\xeb\xaa\xaf\xe5\xfd\xd6\x97\xfb\x33\x1b\x86\x2e\x8e\xe3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\xd3\xef\x94\x39\x34\xbc\xac\x69\x8e\x43\x48\xe2\xca\x42\x69\x07\x4b\x6e\x8e\xa3\xe1\x83\x25\xd7\x95\xea\xea\x08\xe5\xde\xbc\xee\x42\x09\xc9\xab\x2f\xd6\x19\xa1\x96\x5f\x85\x72\x64\x0a\x9e\x51\xeb\xd9\xa0\xfc\xbc\xd7\x61\x57\x14\x81\xfe\xec\xb6\x9b\x10\xef\x59\x51\xab\x0c\x33\x89\x57\xcf\xba\x16\xe1\x03\xb9\xbe\xf1\x53\x61\xab\x92\xaf\x07\x37\x66\xd1\xd8\x8f\xc1\x57\x43\xae\x36\x0a\x72\xf1\xc0\xbe\x40\xfa\xa7\x9a\xd7\x4f\x68\x36\x63\xcd\xe8\x37\x85\x06\xa6\x47\x60\x90\xa0\x19\xf1\xb2\x61\xa0\x4a\xdb\xb1\xfe\x03\x77\x66\x23\xd4\x39\x52\xad\xcb\x68\x20\x12\x05\xe4\x22\xdc\xf0\xcb\x3d\x9f\xc0\x8b\x04\x87\x43\x8d\xe7\xdd\x9e\xc3\x99\x9a\xba\x83\x7e\xbb\xd1\x2d\xa8\x3b\xfc\x20\xa3\x3f\x87\x79\xec\x12\x0a\x5e\x5a\xda\xe7\x96\x2e\x6a\xeb\xf6\x9b\x8e\xbf\xee\x3b\x19\xf7\x5d\x71\x25\xb2\x59\x21\xdd\xe2\xba\x32\x42\xb9\x62\x36\x79\x8c\xf5\x23\xa5\x3c\xbd\x7f\xb9\xbf\xee\x5e\x6c\x9e\xdd\x24\x8a\x1e\x5a\xf4\xdf\xcc\x6e\x6f\xe5\x5d\xb2\x9f\x97\x8f\x8e\x7d\xff\x0f\xdb\xf9\xa5\xdd\x2f\x7f\x06\x00\x00\xff\xff\x26\xf5\xd0\xb3\xa6\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x9d, 0xdc, 0x29, 0x17, 0xc8, 0x8a, 0x14, 0x25, 0x13, 0xa5, 0x85, 0x13, 0x6, 0xf, 0xb3, 0x4a, 0x21, 0xd1, 0x20, 0x4e, 0x6f, 0x92, 0x60, 0xe2, 0x6e, 0x29, 0x96, 0x4a, 0xee, 0x99, 0x66}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4f\x6f\xe3\xb6\x13\x3d\x87\x9f\xe2\xfd\x82\xe0\x57\xbb\xb0\xa5\xdd\xb6\xe8\x21\x5d\x1f\x8a\x75\xda\x06\x68\xe2\x05\x9c\xf6\x1c\x9a\x1a\xd9\x6c\x28\x52\x25\x47\x5e\x7b\x1d\x7d\xf7\x82\x92\x9c\xd8\x89\xbd\xf5\xa2\x68\x4f\xe6\x9f\x99\xc7\x99\x37\x6f\xc6\x4a\x53\xbc\x77\x19\x61\x4e\x96\xbc\x64\xca\x30\x5b\x63\xee\x9e\xf6\x50\x45\x96\x66\x94\x6b\xab\x59\x3b\x1b\x7e\xc0\x78\x82\xdb\xc9\x1d\xae\xc6\xd7\x77\x89\x28\xa5\x7a\x90\x73\x02\xaf\x4b\x0a\x42\xe8\xa2\x74\x9e\xd1\x13\x00\x70\x9e\x17\x7c\xde\xae\x58\x17\xd4\x2d\xc3\xda\xaa\x73\xd1\x17\x22\x4d\xf1\x93\x26\x93\x41\xdb\x8c\x56\xd0\x16\x6e\xf6\x07\x29\xc6\x4c\xb3\x50\xce\x86\x88\xb3\xd9\x0c\xe1\xa5\x9d\x13\x2e\x1e\x06\xb8\x58\xe2\x72\x84\x64\xd2\xd8\xdd\x10\x4b\xd4\x75\x83\xda\x7a\x5e\x47\xa0\xcd\x06\x17\xcb\xe4\x56\x16\x84\x47\xb0\xfb\x20\x83\x92\x06\x75\x8d\x4a\x5b\xfe\xfe\x3b\x8c\xf0\xf6\xdd\xbb\x68\xf4\x10\x9d\x23\x3e\xd9\x2c\x2e\xdb\x90\x5a\x6c\xe8\x00\x5e\x10\x42\x21\x8d\xa1\xc0\xa8\xac\xe6\x18\xe2\xdc\x0d\x03\x3b\x2f\xe7\x94\x88\x34\x8d\x0e\xb7\x93\xbb\xab\xe9\x65\x5c\x01\xc3\xce\xfd\xab\x80\x3c\xa6\x16\x30\xfd\x65\xf2\xdb\xaf\x63\x58\xc7\x98\x11\xd4\x22\xa6\x92\xc1\x55\x1c\x74\x46\x08\xe4\x97\x5a\x51\x48\xf6\xdd\xf1\xfe\xc7\xdb\x48\x71\xf4\x70\xa5\xa6\xec\xc5\xb5\x0e\x50\xce\xaa\xca\x7b\xb2\x8c\x20\x73\x7a\x06\xb0\x66\x8d\xfb\xeb\xf1\xfd\x00\xf7\x1f\x24\x2f\xe2\xef\x8d\xcb\xe8\x1e\xd2\x13\x3c\xfd\x59\x69\x4f\x19\xb2\xca\x6b\x3b\x87\xd1\x81\xe1\xca\x58\xe8\x58\xdb\x01\x1c\x2f\xc8\x77\xb1\xb7\x90\x80\x72\x95\xc9\x62\x2c\x39\xb1\x5a\x50\x86\xa5\x96\x30\xf2\xd3\x1a\x81\x25\xc3\xb8\xb9\x56\x97\x58\x30\x97\xe1\x32\x4d\x67\xb4\x76\x36\xdb\x72\xa4\x5d\x9a\x39\x15\xd2\x67\xda\x52\x6d\x99\xbc\x95\x26\x6d\x6b\x36\x8c\x48\xc3\x88\x24\xa2\x86\xb6\x29\x06\xf6\x95\x62\x6c\x4e\x15\x40\x34\xd3\x79\xac\xfc\x98\x82\xf2\xba\x8c\x09\x3d\x5f\x1e\xbd\x78\xaa\xfe\xb3\xdd\xdd\xba\xa4\x46\x3e\x75\xbd\x73\xf2\x42\x2c\xe2\x2c\x4d\xa1\x8c\x8e\x05\xe8\xb4\xb2\xdd\x59\x7c\x5c\x68\xb5\xd8\x29\x96\x34\x7a\x49\x89\x38\xeb\x2c\xa6\x2d\x13\x5e\x34\x8f\xa6\x69\x14\x3c\xaa\x40\x19\x64\x80\x8c\xbb\x42\x96\xc8\x9d\xdf\x36\xc4\x52\x9a\x8a\x06\x78\x83\x82\xa4\x0d\x8d\x98\x02\xf1\x00\x6f\xbb\x83\x40\xdc\x40\x35\x38\x8d\xca\xc5\x59\xe6\x2c\x35\x9b\x6f\xbf\x11\x67\x45\xbc\x8d\x8d\x97\xdc\x54\x4c\x2b\x51\x0b\x71\x0a\xb1\x9b\x4d\xc7\xe9\xd5\xaa\x69\xeb\xba\x16\x79\x65\x15\x7a\x0e\x5f\xb7\x96\x7d\xfc\x4c\xdc\xd1\xab\x43\x69\xe4\xba\x63\xae\xd7\xdf\xe7\x0e\x9b\x26\x42\x4f\x5c\x79\x0b\x97\xbc\xa2\x3a\xc6\xf4\x0a\x7c\x7a\x04\x7c\xb9\x0f\xde\xdf\x7a\x74\xaf\x1c\x80\xc7\x08\xcb\xbd\x08\x44\x57\x4e\x13\x9a\xd7\xa3\xd8\x8f\xa4\x82\x8f\xda\x18\xcc\x89\x71\xf0\x36\xf7\xae\xe8\x6a\xdd\x8c\x84\x83\x62\xfb\x02\xda\x7a\x7b\xa9\x0d\x30\x73\xce\xf4\x9f\x12\x8b\x8d\xd2\xeb\xb7\xca\xd1\x39\x5c\x12\x6b\xfe\xff\x93\xe6\xdf\xff\x46\x78\xd3\xe1\x7c\xbe\x14\x03\xb0\xaf\xa8\x31\xac\xc5\x2e\x69\x3b\x91\x3d\xe2\x13\x79\xf7\x7b\x14\x66\xe3\x91\x4b\x13\x48\xb4\x3c\xde\x54\x81\xff\x4b\x2e\x3f\xf3\xde\x11\x19\xfe\x23\x1e\x47\xfb\x3c\x96\xd2\x6a\xd5\xcb\x0b\x4e\xa6\xa5\xd7\x96\xf3\xde\x79\xd7\xb6\x3b\x08\x75\x1d\xe7\x40\xd7\xb8\xe7\xfd\x7e\x47\xee\xdf\xb7\x44\x9a\x1e\x6b\x82\x96\xca\x70\x8c\x4a\x6d\xd9\x7d\x39\x95\xff\x42\xc3\xb5\xd4\x3e\x8e\x4e\xe1\xf6\x60\x87\xb6\x03\x77\x77\xf6\xbe\x0a\x5b\x19\x67\xa9\xb7\xda\x39\xd9\x3c\xcd\xf7\x53\xbe\x1e\x0e\x86\xbf\x3a\x54\x92\x17\xff\x1a\x3b\x19\x36\x0e\xf1\xd3\xa5\x16\x7f\x05\x00\x00\xff\xff\xa7\xaa\x95\x75\x54\x09\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2d, 0x61, 0x7d, 0x5b, 0xc0, 0xc8, 0xe7, 0x81, 0xf1, 0x98, 0xf, 0xb1, 0xee, 0x37, 0x9f, 0xa2, 0xc0, 0x15, 0x45, 0xcd, 0xb, 0x28, 0xe8, 0x1b, 0xcb, 0xb2, 0x9f, 0x24, 0x62, 0x3b, 0xf4, 0x3a}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4d\x8f\xd3\x30\x10\xbd\xfb\x57\x8c\xac\x1e\x12\x69\x49\xef\x48\x7b\x82\x45\x5a\x09\x75\x2b\x10\xe2\x88\x5c\x67\xda\xb5\x48\x6c\x33\x9e\xec\x87\x82\xff\x3b\xb2\x93\x76\xd3\xaa\x10\x15\x10\xe2\x16\x7b\x66\xde\x9b\xf7\xc6\x13\xaf\xf4\x57\xb5\x43\xe0\x67\x8f\x41\x08\xd3\x7a\x47\x0c\x85\x00\x00\x90\xda\x59\xc6\x27\x96\xc3\xc9\x38\x29\x4a\x21\xfa\xfe\x15\x90\xb2\x3b\x84\xc5\x97\x2b\x58\x18\x78\x7d\x0d\xd5\xad\x65\xa4\xad\xd2\x18\x20\x46\xd1\xf7\xb0\x30\xd5\x5b\x0c\x9a\x8c\x67\xe3\x6c\xba\x4c\x0c\x30\x46\x4c\xf0\x8d\x7a\x5e\xa9\x16\x21\x46\x30\xfb\x62\xe8\x33\x53\x62\x30\x5b\x70\x04\x05\x7e\x4b\xf9\x39\x51\x06\xa4\x07\xa3\x91\x64\x79\x72\xcf\x8e\xd4\x2e\xdd\xc7\x98\xeb\x3f\x32\x19\xbb\x2b\x4a\x08\xf9\xe3\x80\x89\xb6\x4e\x8d\x8c\xe7\xa9\x08\xe7\x93\x8a\x85\xa9\xee\x7c\x16\x90\x32\x96\xcb\xdc\xad\xf3\x03\xcd\x77\x60\xb7\x56\x41\xab\x26\xb5\x3c\x46\x4e\x24\x8e\xc0\xe7\x6b\x8a\x31\xf2\xce\x51\xab\x78\xad\x48\xb5\x89\xab\x84\xe3\xc0\x07\x0c\x5d\xc3\xe1\xb3\xe1\xfb\xf5\x30\x9b\x23\x95\x32\x95\x4c\x5d\xb2\x8e\x73\xf5\x7b\x37\xd0\xcc\xf6\x9e\x90\xdf\x0c\x83\xfd\x1d\x19\x93\xf2\x42\xf3\x13\x8c\x6f\xa4\x1a\xef\xae\xfe\xba\xca\xfd\xd8\x8e\x4f\xf9\xd8\x76\x81\x6f\xda\x0d\xd6\x9f\xac\x69\x7d\x83\x2d\x5a\xc6\xfa\xdc\x1b\x2b\x4a\x11\x85\x58\x2e\x61\x36\x33\x83\xc2\x06\x01\x13\x70\x8d\x35\xb0\x83\x7b\xf5\x80\xb0\x75\xf4\xa8\xa8\x06\xed\x5a\xaf\xd8\x6c\x1a\x84\x03\x96\x4a\xde\x85\x6a\x78\xe4\xf3\x1c\x81\xa9\xd3\x0c\x7d\x14\x62\xdb\x59\x0d\x45\x98\x2f\x2a\x2f\x92\x7b\x29\xf6\xc9\xce\x8c\x9b\x48\xc8\x1d\x59\x90\xb3\x00\x32\xd9\xfb\xeb\x9d\xba\xa0\x99\x7f\xb2\x44\xc7\x3f\x9b\xb3\x6b\x84\x44\x70\x0d\x2b\x7c\xbc\xf3\x48\x79\xc4\x2b\xc7\xb7\x2f\xdd\xdf\x10\x39\x2a\xe4\xb4\xdb\x18\x65\x79\xfa\xc3\x79\x71\x52\x44\xf1\x33\xbe\x0b\xec\xf9\x0f\x76\x73\x34\xef\x4f\x0c\x9a\x38\xb2\x37\x6a\xfa\x75\x70\xef\x47\x00\x00\x00\xff\xff\xbd\xe8\x37\x32\xa2\x06\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc2, 0xaf, 0x9a, 0xb8, 0xf7, 0x9f, 0x1b, 0x53, 0xaa, 0x36, 0x95, 0x6d, 0xe6, 0x56, 0x7d, 0xb9, 0x8e, 0xd7, 0x4, 0x74, 0xce, 0x5b, 0x9, 0x4f, 0xb6, 0x92, 0xc, 0x1e, 0x49, 0x5, 0x4c, 0x4c}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x6b\xe3\x30\x10\x85\xef\xfa\x15\x0f\xe3\x43\x02\x89\x75\xd9\x53\x96\x3d\x6d\xf6\xb0\x14\x92\x1c\x42\x7b\x2c\x8a\x3c\x51\x44\x6c\x49\xc8\x63\xb7\xc6\xf5\x7f\x2f\xb2\x93\x40\xe9\xa5\x3a\xcd\x7c\x33\xef\xf1\x46\x52\xe2\xaf\x2f\x09\x86\x1c\x45\xc5\x54\xe2\xd4\xc3\xf8\x47\x0f\x5d\x97\xb2\xa4\xb3\x75\x96\xad\x77\xcd\x6f\x6c\xf7\xd8\xed\x8f\xf8\xb7\xfd\x7f\x2c\x44\x50\xfa\xaa\x0c\x21\x28\x1b\x1b\x21\x6c\x1d\x7c\x64\x2c\x04\x00\x64\xda\x3b\xa6\x77\xce\xc4\xdc\x1a\xcb\x97\xf6\x54\x68\x5f\xcb\x13\xf5\xde\x95\x0d\xfb\xa8\x0c\x49\xe3\xd7\xf7\xb2\xfb\x25\xc3\xd5\xc8\x0b\x73\xd0\x95\x25\xc7\xd9\xa4\x2d\x7e\xac\xe6\x3e\x50\x93\x09\xb1\x14\x62\x18\xd6\x88\xca\x19\x42\xfe\xba\x42\xde\x61\xf3\x07\xc5\x21\x05\xc5\x38\x4e\xd3\x3c\x38\x55\x53\xe2\x79\x57\xec\x52\xf9\x01\xf6\x07\xd5\x68\x55\xa5\x1d\x29\xf1\x62\xf9\x32\x0c\xf7\xcd\x71\xc4\x9b\xad\x2a\xa8\x10\xaa\x1e\x89\xdf\x74\xe3\x88\x4e\x55\x2d\x81\x3d\xf6\x61\xfa\xa9\x42\x48\x29\xe6\x95\x2d\x35\x3a\xda\x09\x27\xdb\x73\xeb\xf4\x37\xe3\x45\x77\xf3\x3b\xf6\x21\xf5\x4b\xa4\xa8\x18\xa6\xfb\x23\x71\x1b\xdd\x44\x66\x90\xde\x13\xf5\x1b\x64\x5f\x42\x64\xab\xc7\xf4\x39\xc5\xd9\xa0\x9b\xc9\x28\xe6\x8b\xc9\x95\x29\xc1\x67\x00\x00\x00\xff\xff\x81\x9d\x53\x8d\xf6\x01\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1b, 0x1a, 0xbf, 0xf0, 0xe9, 0x47, 0x35, 0xe6, 0xa7, 0xc, 0xe6, 0xba, 0xc0, 0x5e, 0x39, 0xda, 0x2d, 0xb9, 0xd0, 0xee, 0xbc, 0x1, 0xc0, 0xd1, 0x5e, 0xa2, 0xbf, 0x4d, 0xcd, 0x4, 0xe9, 0xc0}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x6f\x1b\xb9\x15\x7e\xd7\xaf\x38\x2b\x18\x85\x14\x28\xa3\xdd\x76\x5f\xea\xc2\x0f\x5b\x27\x4d\x8d\xcd\xc5\x88\xb3\xbb\x0f\xd9\x85\x41\xcf\x9c\x91\x58\xcd\x90\x13\x92\x92\x63\xa8\xf3\xdf\x0b\x5e\xe6\x4e\x8e\xa4\x64\xe3\xa0\x40\xf2\x12\x99\x3c\x3c\x3c\x3c\x97\x8f\x1f\xc9\x59\x2e\xe1\x92\x27\x08\x2b\x64\x28\x88\xc2\x04\xee\x1e\x60\xc5\xeb\xbf\x61\x47\x09\xc4\x79\xb2\x4c\x30\xa5\x8c\x2a\xca\x99\xfc\x07\x3c\x7b\x03\xaf\xdf\xbc\x83\xe7\xcf\xae\xde\x45\x93\x82\xc4\x1b\xb2\x42\xd8\xef\x21\x7a\x4d\x72\x84\xb2\x9c\x4c\x68\x5e\x70\xa1\x60\x36\x01\x00\x98\xc6\x9c\x29\xfc\xa8\xa6\xf6\x2f\xca\xa7\x13\xfb\x6b\x45\xd5\x7a\x7b\x17\xc5\x3c\x5f\xde\xe1\x03\x67\x89\x54\x5c\x90\x15\x2e\x57\xfc\x69\xf5\x73\xf7\xe3\xb2\xd8\xac\x96\xc8\x92\x82\x53\x56\xe9\x38\x61\x64\x2c\x30\x41\xa6\x28\xc9\x4e\x1f\xbb\x56\xaa\x88\x33\x8a\xa7\xce\x2b\x51\xec\x68\x8c\xd2\x8e\x8a\x8e\x1e\xa7\x1e\x0a\x3d\x68\x3e\x99\xec\x88\x80\x5b\x68\x6c\x8f\xae\x05\xdf\xd1\x04\x85\xeb\xa9\xfc\x11\xfd\x4a\xb2\x2d\xba\xc6\x1b\xab\xa9\x92\xa9\xac\x88\x6e\xec\x8f\xe7\x42\xf0\xaa\xaf\x59\x59\xf4\xa6\x30\x61\x9d\x4c\x96\x4b\x78\xf7\x50\x20\x50\x09\x6a\x8d\xa0\x8d\x81\x94\x8b\x4e\x64\x63\xce\xa4\xb2\x62\x17\x30\x6d\xf5\x4c\xcd\xf8\x37\x77\xff\xc1\x58\xbd\x42\x45\x12\xa2\x08\xe8\xa5\xa1\xac\x0c\x81\xbc\x6a\xd7\x5a\xb9\x11\x8d\x26\xcb\xa5\x1e\xf8\x0c\x0b\x81\xb1\xce\xc0\x73\xf8\x45\xa2\x53\x74\xf3\x20\x15\xe6\xb5\x3a\xca\xa4\x42\x92\x44\x13\x63\xda\x60\x2e\xb1\x8d\x15\xec\x27\xfb\xfd\x53\x10\x84\xad\x10\xce\x6e\x17\x70\xb6\x83\xf3\x0b\x88\xae\x58\xca\xa5\x5e\x80\x0e\x88\x96\xa0\x29\xe0\x07\x38\xdb\x45\x37\x31\x2f\x10\xa6\xd6\x9c\x69\x4f\x84\x71\xa5\x65\x5e\x64\xfc\x8e\x64\xed\xbe\xb3\x82\xe9\x75\x9f\x5f\xe8\x6e\xe3\x82\xff\x82\xe2\xd7\x44\xc6\x5d\x39\x9a\x6a\x81\x67\x54\x16\x19\x79\xa8\x9c\x08\xee\x5f\x4b\xd1\x45\x40\x4c\x8b\x20\x4b\x9a\x3f\x8d\x1c\xca\x58\x50\x13\xb6\x76\x87\xd5\x54\x96\x4e\xca\x04\x29\xa4\xa6\xfe\xb3\xf5\xb3\x34\x21\x7c\x81\xaa\xe7\xd9\x7b\x9a\x65\xb0\x42\xd5\xf7\x78\x2a\x78\xee\xda\xaa\x30\x3e\x85\x77\x6b\x2a\x21\xdd\xb2\xd8\x58\x27\xd7\x7c\x9b\x25\xc6\x8d\x77\x08\x31\xc9\x32\x0b\x31\x55\x46\xd0\xbc\xc8\x30\x47\xa6\x50\x44\xd5\x78\x04\x81\x6a\x2b\x18\x65\xab\xfe\x8c\x54\x82\x40\x92\x00\x67\xd9\x03\x10\x96\xf4\xf4\xe7\x3c\xa1\x29\xc5\x24\x94\x54\xf5\xd2\x42\x79\xa5\xed\x1e\x3a\x60\xc6\xe1\x89\x6d\x99\xf7\x0d\xda\x1b\x77\xf2\x7c\x01\x7c\xa3\x93\x81\x47\x2f\x50\xb9\x72\xab\x87\xcf\x8d\x10\x4d\xb5\xcc\xbe\x0e\xbe\x5d\x24\xf0\x3c\x9a\x75\x95\x5a\x71\x1b\x28\x27\xd4\x15\xd8\x57\xa1\x92\xfe\x50\xc9\x61\xa8\x28\x53\xfc\xb8\x50\x19\xd7\x36\xb1\xe2\x2c\xc6\x05\x14\x19\x12\x89\x90\x93\x0d\x82\xdc\x0a\x04\x92\x65\x60\x14\xaf\x89\x84\x3b\x44\x06\xf7\x82\x2a\x85\x0c\xee\x30\xe5\x02\xb5\x0d\xa1\x28\xc8\xa3\xa2\x30\x58\x5b\x13\x85\x05\xd4\x79\x57\xfb\xac\x8a\x44\x74\x33\xf4\x3f\xcf\xe7\xce\x61\xde\x79\x2b\x90\x32\xad\x7e\x8c\x6a\xe1\xcd\x60\xf0\x37\xd4\xf9\x53\x51\xa7\xe7\xdf\x1e\xf6\xf4\x7a\x1f\x0d\x81\x7a\x29\x75\x3c\x10\x75\x11\xa5\x6b\xfe\x10\x57\x7a\xcb\xb3\x39\x2d\x7b\xe8\xd2\xd5\x31\x0a\x2e\xb2\x06\x97\xee\xa8\x20\xc4\x74\xc5\x86\x40\xe3\x8b\x8e\x0c\x45\xe7\xeb\x80\x4e\x17\x3d\x42\x1e\x5f\x80\xcc\xbd\x56\x77\x91\xa4\x3b\x5a\xd6\x40\xe2\x98\xd6\xf1\x48\xe2\x48\x9e\x69\x74\x78\x12\xd2\xf1\x59\x80\xe2\xe6\x99\xf6\x0b\x3e\x84\x2a\x1e\x50\x18\x45\x97\x9e\xce\x30\xca\x9c\x80\x36\x6d\xd1\x16\x5c\x34\xcd\x01\xf4\x69\x0b\x8c\xa0\xd0\xe9\x48\xe4\x8f\x4c\x0d\x45\x3e\x10\x72\x43\x5e\x99\xf0\x36\xb9\xde\x46\x12\xbf\xd6\x93\x91\xc4\xab\x66\x26\xe1\x49\xcb\x84\x79\x60\xb2\x3e\xa0\xc8\x4f\x01\x14\xaf\x6a\x0f\xa2\x78\xe5\xda\x90\x32\xe2\x66\x39\x74\xb3\x41\x93\x80\x9b\x1f\x09\x52\x8e\x71\xbd\x01\x16\xbf\x8b\x2a\xf7\x87\x91\xc5\x5b\xf3\xd7\x84\x0a\x59\xa5\xaa\xaf\x8e\x8f\xa9\xdd\xa6\x5e\x2f\x39\x4b\x33\x1a\x2b\xdd\xea\x61\x67\x85\x9e\x2d\xfa\x8d\xaa\x75\xa7\xac\x6a\x72\xb6\x5c\xb6\x4b\x66\xb9\x84\x81\xa8\x09\x20\x29\x8a\xec\xc1\x15\xa3\xab\x75\xd8\xe9\xa3\x2a\xe8\x3d\xc1\x9e\x38\x9d\x32\x4f\x75\x1b\x87\xf7\x15\xcf\x76\xdd\xe2\x9e\x83\xf6\xcc\x30\x47\x75\x6b\xd3\xf8\x33\x3e\x9c\x9b\x83\x6a\x63\xc8\x74\x51\xf7\x9a\xd3\xf3\x39\xec\x16\x2e\x7d\x3b\x78\xd0\xfa\x69\x4e\xcd\xda\x35\xaf\x48\x01\x17\x90\x93\xe2\xbd\x54\x82\xb2\xd5\x1f\xf6\x3f\x67\xc5\x78\xfc\x4e\xc1\xd9\x9e\xc5\xf5\x12\xdc\xda\xdd\x12\xba\xe0\xe5\x9d\x5d\x6b\x90\x05\x89\xb1\x63\x82\xc2\xbc\xc8\x88\x42\x98\x52\xcd\x7c\x52\xdd\x3f\x35\x75\x71\x93\x69\x56\x54\x4d\x7d\xb6\x8b\xae\x6a\x01\xbf\x82\x14\x89\xda\x8a\xe0\xf0\x7f\x6d\x59\x2c\xcd\x0f\x27\xe7\xd7\xa2\x7d\x7b\xcb\xf0\xbe\xad\x65\xe6\xf3\xcf\xdc\x34\xe2\x7d\x58\x4d\xcf\x92\xc6\x08\xbf\xf9\x0e\x37\xc6\xed\xef\x65\x83\xfe\x6d\x6e\xc4\x7a\x0e\x6c\x8a\x51\xfb\x9e\xb2\x04\x3f\x42\x04\xdf\xd7\xed\x46\x56\xb6\xfb\x7e\xd0\x7d\x3a\xb9\x66\xc1\x04\xaa\x46\x39\xf3\x6f\xdb\x55\xd5\x49\x1c\xb8\x80\xbf\xd8\x82\xe9\xb6\xef\x07\x9b\xde\x3c\xb8\x9a\x26\x9a\xa1\xb5\x0c\x71\xe5\x2c\x65\xc3\x35\xd9\x8e\x4e\xfb\x5f\xcd\x6c\x86\xfb\x38\x33\xcb\xb2\xce\x8a\x9a\xf7\x68\x53\x7b\xb8\x64\x01\x9e\x62\x96\x34\x38\x9d\xd4\xfd\x9a\xcd\xbf\xb8\xb9\x7e\xfa\xc3\xf7\x7f\xd7\x08\x4f\x18\xd3\x6d\x7a\xe7\xcd\xf9\x0e\x13\xa0\x0c\x76\x3f\x46\x7f\x8b\xbe\x8f\x8c\xee\x97\x9c\x4b\x7c\x53\xa0\x20\x3a\xec\x3f\x65\x19\xdc\x71\x9e\x85\xbd\xaf\x17\xe7\x5c\xff\x78\x66\x05\x43\xdc\xb1\xb5\x0a\xe0\x97\xb6\xed\x57\x2a\xd4\x96\x64\x47\x39\x2d\x65\x7d\xaf\x55\x5b\x4f\xca\xa2\x1b\x9a\x6f\x33\x63\xc0\x23\x78\xb4\x6f\xb5\xf6\x69\xca\x8e\x75\xea\x57\xf2\xb1\xde\x2c\x3e\xc9\xbd\x19\x32\xb3\x3c\xa7\xe7\xf1\xfc\x6b\xb6\xdb\x90\x6b\x07\x4b\xe9\x79\xd7\x53\x6d\xd5\x0a\x1e\x31\x45\x46\x97\x70\x52\x29\xfa\xb2\xc6\xbf\x4e\x79\xd4\xe5\xca\xd1\x13\x87\xf7\xa7\x66\x67\x3d\xb4\x3b\xa5\x6c\x80\xe2\x55\xc7\xa6\x0a\x8e\x87\xae\x68\x12\x58\x38\x0f\x1a\x4c\xb7\xae\xdc\x18\xda\x68\x9f\x12\x0a\x22\x24\x26\x0e\xe3\xed\x0e\xd0\x1b\xa1\x07\x94\x65\x77\x17\x30\x9b\x39\xbc\xff\x43\x87\xa7\x2e\xc0\xb7\xf8\x61\x4b\x05\x26\xb6\xd7\xe7\x60\xdd\x51\x99\x5b\x4b\x3b\x9f\xfe\x9b\x48\x33\x29\xa1\xc2\xe7\x59\x68\xfb\x76\x4c\xac\xe9\x1e\xb9\xef\x5a\x2e\x1d\xd3\x25\xd9\x71\xd6\xd6\xd2\x7f\xb6\xb5\x87\xed\xad\xc2\x28\x24\x5e\x07\x62\x69\x78\xbd\x91\xb0\xc4\x5b\x1a\xaa\x64\x8e\x65\x4f\x02\xf1\xb7\x44\x7e\x4c\xeb\x8c\x17\xaa\x8a\xf1\x1c\x66\x01\x3d\x0b\x40\x21\xb8\xa8\x4e\x50\x02\xe5\x36\x53\xda\x6b\x01\xf9\x86\xfe\x1b\xbf\x9f\x83\x9e\xa5\xe2\xf8\xe6\xbf\x94\x0b\xb8\x5d\x80\x29\x46\x1b\x0d\x63\x48\x33\x50\xde\x53\x15\xaf\x61\x17\xfd\x8c\x0f\xad\x66\x7f\x06\x9e\x98\x85\xfa\x5f\xac\x0f\xa2\xd3\x6e\xdc\x34\xd1\xef\xdc\x6c\xd0\xd4\xad\x35\x3a\x90\x0a\xfb\xc1\xbd\x4b\xcc\x99\xa2\x6c\x8b\x9d\x8e\xee\xbd\xc9\x71\xaa\x2f\x40\x89\x9e\x1a\x37\x70\x7c\xd4\xce\x3e\x4d\x46\xb3\x7e\xea\xcd\x43\xb7\x32\xe1\x9a\x39\xb1\x6e\xbe\xf9\x37\xe8\xdf\xb2\x5d\x04\x27\xa4\x2c\x4d\xe1\xbb\x53\x5d\xe5\xce\xe3\xa1\x1a\x2d\x17\xcd\x0b\xb5\x2e\xff\x6a\x4a\xf3\x4c\xbd\xd7\x07\x77\x79\xfe\xde\x9d\xaf\xf7\x9e\x50\x42\x59\xaf\x06\x3c\xdb\xae\x9b\xdd\x1a\xbd\x00\x46\xb3\x03\x9b\xe4\x11\xe7\x37\x73\x55\xe4\xdf\x23\x0b\xb7\x47\x16\xc1\x3d\xf2\x19\xa6\x64\x9b\x29\xeb\x0a\xed\x01\x7b\x31\x40\xa5\xb6\x42\xf7\xb8\x0d\xcf\x5c\x17\x17\x18\xd3\x94\xc6\x40\xcc\xe1\xd4\x6e\x99\x01\x05\xa3\x37\xc6\xd6\xe4\x43\x8c\xc2\xed\xb1\xdd\xfd\xc0\x93\x21\x43\x95\xe0\x3d\x82\x77\xce\xd2\x05\x83\xb3\xdd\xe8\xc5\xeb\x20\x14\x9f\xc1\x55\xc6\xe3\x70\x32\x9d\xd9\x9c\xce\x67\x7a\x43\x0e\x50\x9a\xaf\x41\x5e\x8e\xa3\x2f\xff\x47\x44\x65\xf3\x29\x4c\x65\xe3\xa1\x2a\x33\x09\x4f\x9a\xde\xf9\xe8\x34\x41\xea\xb2\x39\x95\xbb\x6c\x1e\x89\xbc\x7c\xa3\x28\x27\x6f\xa1\x5e\x3b\x3d\xfb\xea\x37\x76\xf2\xc5\x5c\xeb\x76\xc7\xae\x6f\xaa\x4b\xa5\x82\xe9\x15\xb8\x5b\x44\x73\x87\x66\x2a\xbe\xf7\x42\xb8\x5c\x42\xa6\xfb\x6e\x4d\x5c\xdc\x1d\xa7\x06\x04\xc1\x93\x6d\x6c\xef\x05\xdc\xb5\x41\xd4\x1f\x78\x95\xc2\x56\xa2\x00\x64\xe4\x2e\x43\x50\xe6\xfe\xc1\x6a\xa8\x09\x4c\xf5\xe8\x44\x57\x8c\x0b\x34\x2f\x34\x72\x5b\x98\x4f\x20\xcd\x8c\x06\x01\xa2\x7e\x70\x65\x54\xdd\xb6\x46\x8d\xe5\x9f\x14\xcb\xc0\xcb\xe9\x80\x80\x6d\xc6\x19\xd8\x2f\xcc\x59\x5d\x91\x30\xdd\x78\xbe\x0b\xb0\xc7\xe5\x12\x2e\xd7\x18\x6f\x40\x74\x0e\x44\xd1\x57\xa1\x96\x07\x56\xf6\x35\xb9\x65\xeb\x85\xa1\xfb\x08\x34\x76\xaf\x5e\x8b\xf9\x29\xa7\xc7\xc5\x61\x6e\x66\xdf\xfd\x5e\xf2\xde\x33\x7e\x97\xb6\x65\xba\xfb\xb6\xb2\x35\x48\xe0\x6a\x6f\x64\x72\xf0\xc0\x3e\x7c\x54\x39\xac\xe6\xd0\x9b\xbc\xd7\x93\x9f\x4a\x0f\x8f\xa1\x7e\x2d\x1a\xe1\xae\x04\x7b\x57\x73\xf6\xd5\xb9\xfb\xe6\x6c\x08\x47\x2c\x50\x2f\x9e\x80\xfb\xdc\x19\xee\x1e\x2a\xec\x8a\xda\xec\xe2\xac\x60\x65\x39\x6f\x4d\x34\x33\xd7\x5f\xd1\x35\x11\x24\x97\xd1\x8d\x49\x4a\x2d\xe1\xda\xdf\x9a\x2c\x6b\x77\xd8\x3a\x88\xd5\x47\xbd\x16\x37\x5b\xf4\x4f\x12\x6f\x56\x82\x6f\x59\xe2\x9e\xf0\xab\x27\xfb\xa8\x99\xe9\x37\xaa\xd6\x97\x56\x7e\x16\xab\x8f\x0b\xe8\xcc\x7c\x49\xb2\x0c\x85\x86\xe8\xbe\x2b\x5a\xe3\x02\x5e\x19\x5b\x5f\x6f\xd6\xda\x62\xd7\xd6\xb3\xe2\xe8\xf5\x27\x98\xa2\x30\x31\x98\xcd\xbb\x1c\xe7\xac\x20\x6a\x5d\xc5\xd9\xa9\xbd\x26\x6a\x6d\x17\xe8\x29\x0f\xc2\x12\x98\xe1\x07\x37\x70\x3a\x9d\xbb\xbf\x18\x4c\xdd\x97\x5f\xd3\xb9\xf7\xab\x13\x2d\x7e\x01\xd3\xc5\xef\xd3\xdf\xa7\x83\x6f\x6e\x7a\x88\x8c\x42\xc0\x85\x06\x7d\x2e\x72\xa2\x0c\x12\xcd\xa6\x76\x89\x3a\x17\xcb\x72\x6a\xa8\x62\xa3\xb8\x2c\xc1\x7d\x56\x31\x9b\x4f\xda\x77\xfd\x0c\x2d\xb1\xb0\x9f\x40\xf2\x04\x61\xda\xc5\x96\x5c\xb7\x55\xf4\xa3\x91\x1a\x42\x8c\xc6\x5e\x1e\xe9\xce\xe8\xca\x40\xaf\x19\x59\x96\xb3\x79\x0b\x6c\x9d\xe1\x15\x9e\x36\x0a\xaf\xd8\x8e\x64\xd4\x81\xea\xf3\x8f\x05\xc6\xe6\x8a\x5e\x77\xb5\x74\x2d\xe0\xa7\x58\x6d\x49\x76\x0e\x76\xa6\xb2\x87\xe2\x23\x38\x6b\x8f\x4b\x17\x40\x8a\x02\x59\x62\x28\xb6\x5c\x80\x8c\x5c\x59\x99\xf3\x6f\x2b\xbd\xa3\x28\xb2\x0e\xdb\x11\xa1\x29\x71\xe8\xea\xc1\x2a\xe7\x85\x5a\xd4\x41\x19\xbd\xa3\x34\xf3\xd6\xdf\xc5\xe8\x21\xdf\x5d\x68\xd0\x1f\x6c\x48\xed\xed\xb1\x57\x7e\x0d\xde\x5c\x92\x1c\x75\x00\x3c\x15\xf8\x4e\xd0\xfc\x25\x91\xca\x95\xe2\x73\x96\x68\x26\xbf\xbe\xe4\x79\x4e\xca\x52\x5b\x3c\x1f\xd9\x68\xfa\x10\x3e\xb6\xdb\xb4\xfb\x7c\x60\x59\x65\xf8\x01\xc0\x74\x3c\xe0\x20\x68\x5a\xb9\x4a\xfc\x54\xf0\xd4\xc3\xbe\x00\x80\x7e\x4e\x86\x1d\x9d\x65\x6e\xc9\x57\x96\x19\x1a\x22\x08\xf7\x6b\x9a\x21\xac\x09\x4b\x32\xca\x56\x60\xe2\xa6\x17\xe8\xbe\x8a\xa9\x86\x99\x04\xbd\x3d\x3a\x3d\xfb\xe4\xc8\xd8\x1d\x48\xbd\x93\xb3\xce\x26\x76\x3b\xf3\x4c\x40\x28\xa3\xaa\xc6\x8a\x23\xbf\x3f\xd1\xff\x6a\x30\x79\x8b\x2b\x2a\x15\x8a\xd0\xd5\x94\x98\xe9\x73\xc3\x02\x5e\xe3\x7d\x50\x64\xee\xbb\xbd\x18\xcc\x70\x13\xaf\x31\x27\x4e\x9d\xfb\x94\x47\x57\xd3\xff\x02\x00\x00\xff\xff\x14\x13\x5c\x5a\x03\x35\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xac, 0x19, 0x87, 0x2, 0xf9, 0xfb, 0xfb, 0xd6, 0x16, 0x3d, 0x28, 0xfe, 0xbc, 0x44, 0xc5, 0xe4, 0x55, 0x3a, 0x4, 0x5f, 0x41, 0x9a, 0xef, 0xd0, 0x75, 0x23, 0xb0, 0xe5, 0x89, 0x7b, 0x0, 0x86}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl": {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl": {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl": {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl": {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl": {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
