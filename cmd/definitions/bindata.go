// Code generated by go-bindata. DO NOT EDIT.
// sources:
// cmd/definitions/tmpl/function.tmpl (567B)
// cmd/definitions/tmpl/info.tmpl (1.699kB)
// cmd/definitions/tmpl/object.tmpl (1.908kB)
// cmd/definitions/tmpl/operation.tmpl (1.913kB)
// cmd/definitions/tmpl/pair.tmpl (483B)
// cmd/definitions/tmpl/service.tmpl (9.626kB)

// +build tools

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\x8f\x25\x87\xae\xec\xe6\x07\x08\x9e\x8a\x82\xb0\xc8\xa2\xde\x25\x64\xa7\x6b\xb0\x99\x94\x66\x5a\x17\x62\xfe\xbb\xa4\x55\x17\x11\x0f\xde\x3c\x25\xcc\xcc\x7b\xf3\x3e\x26\xa5\x2d\x06\xc3\x47\x82\x7a\xda\x40\x4d\xb8\xbc\x82\xd2\x37\x23\xdb\x88\x9c\xab\xd2\x76\x2d\x38\x08\xd4\xa4\x6f\x7d\xdf\x91\x27\x16\x3a\x7c\x36\x55\xcb\x2f\xb3\x66\xd2\x77\xc6\x13\xde\x20\xa1\x31\x9e\xba\x65\xa0\x88\xd5\xa4\x77\xc1\x9a\xb9\xd2\x8e\x6c\x51\x47\x5c\xa4\x04\x75\x56\xec\x4d\x5c\x06\xd6\x48\xa9\x58\xe6\x5c\xa7\xa4\x26\xbd\x37\x83\xf1\x51\x3f\x0e\xce\xef\x4c\x14\xfd\x20\x83\xe3\xe3\x35\x1f\xe2\xab\x93\xe7\x26\x78\x6f\x72\x46\xe8\x05\xbd\x71\xc3\x2f\xa6\xa5\x5c\x62\x7e\xdf\xb4\x2c\xb8\xa7\x38\x76\x12\x3f\x8c\xe7\x00\x15\x00\xf4\x86\x9d\xad\x57\x05\xdc\x9d\xa9\x57\xeb\x6a\xa6\xa2\x2e\xd2\x1f\x71\xac\x9c\x60\x03\x0b\x9d\x44\x37\xcb\xbb\xc1\x3f\x66\xdc\x82\xf8\xeb\xca\x3f\xbe\xef\x01\x00\x00\xff\xff\x41\xc8\xae\xbf\x37\x02\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xfc, 0xb, 0xf4, 0xfb, 0xf, 0x94, 0xca, 0x64, 0x7a, 0xb8, 0x48, 0xf9, 0x69, 0xf1, 0x88, 0x46, 0x59, 0xd3, 0xbc, 0x0, 0x4e, 0xe7, 0x8, 0x1e, 0xdf, 0x27, 0x59, 0x81, 0x75, 0x52, 0xa2}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xf5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x93\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\x64\x27\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x93\xa6\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x63\xb1\xc6\x52\x6f\x62\x08\xe5\xc8\x28\x5e\xa6\x99\xcc\xdf\xe1\xf4\x0a\x97\x57\x37\x38\x3b\x3d\xbf\x99\xb1\x8a\x67\x2b\xbe\x24\xb8\x75\x45\x96\x31\x21\x2b\x6d\x1c\x26\x0c\x00\x46\x85\x74\x23\x96\x30\xd6\xb6\x07\x30\x5c\x2d\x09\xe3\xd5\x14\x63\xa1\x0a\x6d\xf1\x76\x8e\xd9\x79\x58\x5d\xf0\x0a\xde\xb3\xb6\xc5\xd8\x92\x69\x44\x46\x97\x5c\x52\xd8\x1f\xaf\x70\x07\xa7\x4f\xb8\xa4\x32\x1c\x61\x69\x8a\xf7\x82\xca\x1c\x42\xe5\x74\x0b\xa1\xd0\xb6\xdb\x49\xde\x63\x21\x1c\xcb\xb4\xb2\x01\x62\x47\xb7\x89\x35\x3b\x75\xef\x23\xe2\x6e\xfa\x79\xa8\x1b\x48\x9a\x59\x84\x08\xf2\x9f\xb8\xcd\x78\xd0\xc7\x1c\x47\xc7\xc7\x61\x77\xd5\x01\x1f\x80\x54\x1e\x96\x09\x63\xc1\x00\xec\xf6\x30\x4c\xb7\xce\xd4\x99\x43\xdb\x2b\x6f\xd8\xbe\x3d\xc5\x16\x30\x6e\xd6\x55\x57\xcb\xfb\xad\x2f\xf7\x67\x36\x0c\x31\x4e\xd3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\x17\xdf\x29\x73\x68\x78\x59\xd3\x14\x87\x90\xc4\x95\x85\xd2\x0e\x96\xdc\x14\x47\xfd\x07\x4b\x2e\x96\x8a\x75\x84\x72\x6f\x5e\xc7\x50\x42\xf2\xea\x8b\x75\x46\xa8\xe5\xd7\x38\x10\x05\xcf\xa8\xf5\xac\x57\x7e\xde\xeb\xb0\x2b\x8a\x40\x7f\x76\x1b\x27\xc4\x7b\x56\xd4\x2a\xc3\x44\xe2\xd5\xb3\xae\x25\xf8\x40\xae\x6b\xfc\x54\xd8\xaa\xe4\xeb\xde\x8d\x49\x32\xf4\xa3\xf7\xd5\x90\xab\x8d\x82\x9c\x3d\xb0\x2f\x90\xfe\xa9\xe6\xf5\x13\x9a\xcd\x50\x33\xf9\x4d\xa1\x9e\xe9\x11\x18\xcc\xd1\x0c\x78\x59\x3f\x50\xa5\x8d\xac\xff\xc0\x9d\xc9\x00\x75\x8a\x85\xd6\x65\xd2\x13\x89\x02\x72\x16\x6e\xf8\xe5\x9e\x4f\xe0\xc5\x1c\x87\x7d\x8d\xe7\xdd\x9e\xc2\x99\x9a\xe2\x41\xbf\xdd\xe8\x16\xd4\x1d\x7e\x90\xd1\x9f\xc3\x3c\xc6\x84\x82\x97\x96\xf6\xb9\xa5\x8b\xda\xba\xfd\xa6\xe3\xaf\xfb\x9e\x0f\xfb\xae\xb8\x12\xd9\xa4\x90\x6e\x76\x5d\x19\xa1\x5c\x31\x19\x3d\xc6\xfa\x91\x16\x7c\x71\xff\x72\x7f\xdd\xbd\xd8\x3c\xbb\x51\x92\x3c\xb4\xe8\xbf\x99\xdd\xce\xca\xbb\xf9\x7e\x5e\x3e\x3a\xf6\xdd\x3f\x6c\xe7\x97\x76\xbf\xfc\x19\x00\x00\xff\xff\x1a\xaf\xa4\x3e\xa3\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbe, 0xfc, 0x4d, 0xd5, 0xaa, 0x43, 0xd, 0x38, 0x2a, 0xe9, 0x1b, 0x28, 0x33, 0xa1, 0xf, 0x25, 0xb3, 0x72, 0xf8, 0xb5, 0xf, 0xf, 0x28, 0x3d, 0xdd, 0x4d, 0x3d, 0x95, 0x9e, 0xd1, 0x56, 0x3e}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x41\x8f\xeb\x34\x10\x3e\xd7\xbf\xe2\xa3\x5a\x41\x82\xba\xc9\x7b\x80\x38\x3c\x5e\x0f\xe8\x75\x81\x95\xd8\x16\xa9\x85\xbb\xeb\x4c\x5a\xb3\x89\x1d\xd9\x93\xd2\xd2\xcd\x7f\x47\x4e\xd2\x25\xdd\x2d\xa8\x2b\x2e\xdc\x3c\x9e\x99\xcf\xf3\x7d\x33\xb6\xd3\x14\x9f\x6c\x46\xd8\x90\x21\x27\x99\x32\xac\x0f\xd8\xd8\x67\x1b\xda\x30\x39\x23\x8b\x54\x95\xd9\x77\x98\x2d\x30\x5f\xac\x70\x37\xbb\x5f\x25\xa2\x92\xea\x51\x6e\x08\x7c\xa8\xc8\x0b\xa1\xcb\xca\x3a\x46\x24\x00\x60\x9c\x97\x3c\xee\x56\xac\x4b\xea\x97\xfe\x60\xd4\x58\xc4\x42\xa4\x29\x7e\xd0\x54\x64\xd0\x26\xa3\x3d\xb4\x81\x5d\xff\x4e\x8a\xb1\xd6\x2c\x94\x35\x3e\xe0\x1c\x8f\xb7\x70\xd2\x6c\x08\x37\x8f\x13\xdc\xec\xf0\x61\x8a\x64\xd1\xc6\x3d\x10\x4b\x34\x4d\x8b\xda\x65\xde\x07\xa0\xe3\x11\x37\xbb\x64\x2e\x4b\xc2\x13\xd8\xfe\x22\xbd\x92\x05\x9a\x06\xb5\x36\xfc\xed\x37\x98\xe2\xfd\xc7\x8f\x21\xe8\x31\x24\x07\x7c\x32\x59\x58\x76\x25\x75\xd8\xd0\x1e\xbc\x25\xf8\x52\x16\x05\x79\x46\x6d\x34\x87\x12\x37\xf6\xd6\xb3\x75\x72\x43\x89\x48\xd3\x90\x30\x5f\xac\xee\x96\x1f\xc2\x0a\xb8\xed\xd3\xbf\xf0\xc8\x03\x35\x8f\xe5\x4f\x8b\x5f\x7f\x9e\xc1\x58\xc6\x9a\xa0\xb6\x81\x4a\x06\x5b\xb3\xd7\x19\xc1\x93\xdb\x69\x45\x3e\x39\x4f\xc7\xa7\xef\xe7\x41\xe2\x90\x61\x2b\x4d\xd9\x0b\xb7\xf6\x50\xd6\xa8\xda\x39\x32\x0c\x2f\x73\x4a\x44\x68\xc0\xc9\xef\xd9\xd5\x8a\x71\xbc\x56\xbd\x10\xa6\xf3\x20\xdb\x8c\xbc\x72\xba\x62\x6d\xcd\xc9\x89\x34\x45\xa7\xe9\x05\xe7\x40\xbe\xce\x0c\x71\xab\x43\x45\xad\xfe\x4d\x33\xd8\x79\xa1\xb6\x18\xa5\x29\x54\xa1\x03\x83\x5e\xec\x93\x65\xf0\xc7\x56\xab\xed\x80\xad\x2c\xf4\x8e\x12\x31\xea\x23\x96\x5d\x07\x9c\x10\x7d\x7d\x6b\xcd\xa8\x3d\x65\x90\x1e\x32\x58\xa5\xac\x90\x5b\x77\x9a\xa8\x9d\x2c\x6a\x9a\xe0\x1d\x4a\x92\xc6\xb7\xdd\xf0\xc4\x13\xbc\xef\x37\x3c\x71\x0b\xd5\xe2\xb4\x63\x22\x46\x99\x35\xd4\x1a\x5f\x7f\x25\x46\x65\xf0\x86\xc9\x4d\x1e\x6a\xa6\xbd\x68\x84\xb8\x46\xdc\xbf\x85\xbd\xdb\xb7\x17\xa3\x69\x44\x5e\x1b\x85\xc8\xe2\xcb\x2e\x34\xc6\x8f\xc4\xbd\xbe\xda\x57\x85\x3c\xf4\xd2\x45\xf1\xb9\x78\x38\xb6\x25\x3a\xe2\xda\x19\xd8\xe4\x95\xd6\xa1\xa8\x57\xe0\xcb\x7f\x00\xdf\x9d\x83\xc7\xa7\x8c\xfe\x94\x0b\xf0\x98\x62\x77\x56\x81\xe8\xfb\x59\xf8\xf6\xf4\xb7\x10\x8b\xce\x0e\x9f\x60\x6d\x6d\x11\x3f\x1f\xed\x59\x72\x14\x77\xcd\xd5\x39\x6c\x12\xda\xf2\xf9\x55\x77\xfc\xb3\x29\xde\xf5\x38\xff\x2e\xd6\x04\xec\x6a\x6a\x03\x1b\x31\xa4\x35\xa8\xec\x09\x7f\x92\xb3\xbf\x85\xd9\x69\x33\x72\x59\x78\xba\xa8\xf2\x43\xed\xf9\x6d\x6d\xfc\x4f\x2c\xa7\xe7\x2c\x2b\x69\xb4\x8a\xf2\x92\x93\x65\xe5\xb4\xe1\x3c\x1a\xf7\x73\x3f\x40\x68\x9a\x70\x91\xfa\xc9\x1f\xc7\x71\x4f\xfd\xff\x31\x52\x1d\xf9\xa7\xe9\x35\xec\x2f\xce\x60\xf7\xa6\x0c\x9f\x97\x57\x65\xab\xc2\x1a\x8a\xf6\x83\x9d\xe3\xf3\x13\x76\xcd\x0f\x73\xb1\xfc\xfd\x25\xd1\x5e\x3c\x8c\x03\x86\x6d\x42\xf8\xde\x9a\xbf\x02\x00\x00\xff\xff\xe0\xaf\xa2\xb9\x74\x07\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0xa8, 0x6e, 0xe2, 0x32, 0xf5, 0x94, 0xf, 0x33, 0xa9, 0x21, 0x65, 0x6b, 0xd, 0xec, 0xdc, 0x2d, 0xd5, 0xda, 0x1d, 0xb8, 0xc7, 0xec, 0x5a, 0xa5, 0x69, 0xb8, 0x45, 0x20, 0x16, 0x5, 0x35}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x4f\x6b\xdc\x3e\x10\xbd\xeb\x53\x0c\x66\x0f\x36\xe4\x67\xdf\x7f\x90\x43\xe9\x1f\x08\x94\xc4\xb4\x94\x1e\x8b\xd6\x9e\xdd\x88\xda\x92\x3a\x9a\xdd\x24\xb8\xfa\xee\x45\xb2\xe3\xb5\x5d\xa7\xdb\xb4\xa5\xf4\x66\x69\x34\xf3\xde\x3c\xbd\x91\xad\xac\x3e\xcb\x3d\x02\x3f\x58\x74\x42\xa8\xd6\x1a\x62\x48\x05\x00\x40\x52\x19\xcd\x78\xcf\x49\xbf\x52\x26\x11\x99\x10\x5d\xf7\x1f\x90\xd4\x7b\x84\xcd\xa7\x0b\xd8\x28\xf8\xff\x12\xf2\x2b\xcd\x48\x3b\x59\xa1\x03\xef\x45\xd7\xc1\x46\xe5\xaf\xd0\x55\xa4\x2c\x2b\xa3\xc3\x66\x40\x80\x21\xa2\x9c\x6d\xe4\xc3\xb5\x6c\x11\xbc\x07\xf5\x98\x0c\x5d\x44\x0a\x08\x6a\x07\x86\x20\xc5\x2f\xe1\x7c\x3c\x98\x38\xa4\xa3\xaa\x90\x92\x6c\xb1\xcf\x86\xe4\x3e\xec\x7b\x1f\xf3\xdf\x33\x29\xbd\x4f\x33\x70\xf1\x63\xac\x89\xba\x0e\x44\x86\xf5\xb4\x09\x63\x43\x17\x1b\x95\xdf\xd8\xd8\x40\x38\x51\x14\x91\xad\xb1\x3d\xcc\x57\x60\x53\x4a\x57\xc9\x26\x50\x1e\x22\x8b\x16\x87\xc2\xeb\x39\xe9\x10\x79\x63\xa8\x95\x5c\x4a\x92\x6d\xc0\xca\x60\x1e\x78\x87\xee\xd0\xb0\xfb\xa8\xf8\xb6\xec\xef\x66\xd6\x65\x12\x52\xa6\x2a\x69\xc3\x31\xfb\xad\xe9\x61\xce\x72\x0f\x95\x5f\xf6\x17\xfb\x2b\x6d\x4c\xd2\xd3\x8a\xef\x61\xf0\x48\x3e\xec\x5d\xfc\xf1\x2e\x1f\xaf\x6d\xbe\xf2\x42\x14\x05\x7c\xd0\xaa\xb5\x0d\xb6\xa8\x19\xeb\x55\x6f\xb5\x07\xc7\xb0\x45\xc0\x76\x8b\x75\x8d\x35\xb0\x81\x5b\x79\x44\xd8\x19\xba\x93\x54\x43\x65\x5a\x2b\x59\x6d\x1b\x84\xb1\x96\x0c\x4a\xb8\xbc\xb7\xec\x79\x0c\xc7\x74\xa8\x18\x3a\x2f\xc4\xee\xa0\x2b\x48\xdd\xf9\xa4\x6c\xe9\xd2\xc1\xfb\x84\x7c\x20\x0d\xc9\xd9\x02\x49\x90\xe0\xc7\x2e\x7e\x06\x99\xbf\x62\xdb\xf9\x78\xaf\x1a\x17\x89\xe0\x12\xae\xf1\xee\xc6\x22\xc5\x6b\xb8\x36\x7c\x75\x62\xff\x9a\xc8\x50\x9a\x4c\xd9\x7a\x9f\x64\xcb\x11\x3f\x29\x29\xbc\x78\x0a\xef\x19\xf2\xfc\x03\xd3\x30\x88\xf7\x3b\x02\x8d\x8a\xcc\x47\x69\xfa\x75\x7a\x24\xa3\xf7\x4b\xa9\xa8\x34\x8d\xaa\x1e\x46\x93\xc7\xe4\x17\x4d\x03\x5b\x63\x9a\x9f\xfc\x19\x04\xf5\x71\xe5\x21\x0f\xe1\xa2\x00\x2b\x15\xb9\x30\x90\xd3\x3f\x41\x37\x9e\x9f\x09\xbe\x44\x5c\x7b\xb9\x9f\x7e\xb6\x57\x49\x1f\x63\x05\x63\xf3\x32\xf2\x38\x57\x24\x04\x8e\x8b\xba\x63\xd9\xef\x85\x5c\xff\xf4\xe2\x5b\x00\x00\x00\xff\xff\xfe\x58\x6b\xae\x79\x07\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x20, 0x70, 0x96, 0x66, 0x1, 0xbf, 0x7a, 0x8e, 0x63, 0x4e, 0x3f, 0xe0, 0x55, 0xc3, 0xc4, 0x88, 0x90, 0xf7, 0x93, 0x75, 0x47, 0xbe, 0xe1, 0xc4, 0x49, 0xae, 0x31, 0xc0, 0x95, 0xce, 0x3e, 0x2a}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x31\x6b\xfb\x30\x10\xc5\x77\x7d\x8a\x87\xf1\x90\x40\x62\x0d\xff\x2d\x7f\x3a\x35\x1d\x4a\x21\xc9\x10\xda\xb1\x28\xf2\x55\x11\xb1\x25\x21\x9f\xdd\x1a\xd7\xdf\xbd\xc8\x4e\x03\xa5\x4b\x35\xe9\x7e\xef\xde\xe3\x9d\x94\xb8\xf7\x25\xc1\x90\xa3\xa8\x98\x4a\x9c\x7a\x18\x7f\x9b\x61\x1d\x53\x74\xaa\x92\xba\x2e\xff\x63\xbb\xc7\x6e\x7f\xc4\xc3\xf6\xf1\x58\x88\xa0\xf4\x45\x19\x42\x50\x36\x36\x42\xd8\x3a\xf8\xc8\x58\x08\x00\xc8\xb4\x77\x4c\x1f\x9c\x89\x79\x34\x96\xcf\xed\xa9\xd0\xbe\x96\xca\x37\xeb\x92\x3a\x69\xfc\xba\x61\x1f\x95\x21\xd9\xfd\x93\xe1\x62\xe4\x99\x39\xe8\xca\x92\xe3\x6c\x72\x15\x7f\xf0\x71\x1f\xa8\xc9\x84\x58\x0a\x31\x0c\x6b\x44\xe5\x0c\x21\x7f\x5d\x21\xef\xb0\xb9\x43\x71\x48\xe5\x30\x8e\x93\x9a\x07\xa7\x6a\x4a\x3c\xef\x8a\x5d\xfa\x7e\x82\xfd\x41\x35\x5a\x55\x69\x47\x4a\xbc\x58\x3e\x0f\xc3\xf7\xe6\x38\xe2\xdd\x56\x15\x54\x08\x55\x8f\xc4\xaf\xbe\x71\x44\xa7\xaa\x96\xc0\x1e\xfb\xc0\xd6\xbb\x46\xcc\xf2\x96\x1a\x1d\xed\x84\x52\xe4\x5b\xeb\xf4\xaf\xd0\x45\x77\xcd\x3a\xf6\x21\xcd\x4b\xa4\x9a\x18\xa6\xab\x23\x71\x1b\xdd\x44\x66\x90\xde\x13\xf5\x1b\x64\x3f\x0a\x64\xab\x9b\xfa\x9c\xaa\x6c\xd0\xcd\x64\x14\xf3\xb5\xe4\xca\xd4\xe0\x2b\x00\x00\xff\xff\x26\xdf\x18\x87\xe3\x01\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0x2f, 0x7a, 0x10, 0x8b, 0x7, 0xa5, 0x4, 0xf7, 0x8a, 0x7d, 0x60, 0x9f, 0xd0, 0xf9, 0xb1, 0xc1, 0xc9, 0x4b, 0x3d, 0x79, 0xdb, 0xc, 0xf8, 0x51, 0xfd, 0xe7, 0xd, 0x79, 0x8d, 0x96, 0x48}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xcd\x6f\xdb\x38\x16\xbf\xeb\xaf\x78\x15\x7c\x90\x0a\x47\xda\xc5\xde\xb2\xf0\x61\x37\xe9\x76\x8b\x76\xda\xa0\xc9\x4c\x0f\xd3\x41\xc0\x48\x94\x4d\x84\x26\x55\x92\x56\x62\xb8\xfa\xdf\x07\xfc\xd0\xa7\x25\x5b\x6e\x8b\x36\x87\xf8\x62\x89\xe4\x7b\x7c\xef\xf7\x3e\x49\xc5\x31\x5c\xf0\x14\xc3\x12\x33\x2c\x90\xc2\x29\xdc\x6d\x61\xc9\xeb\x77\x28\x08\x02\xc2\x14\x16\x0c\xd1\x38\x59\xa7\xb1\xc4\xa2\x20\x09\xfe\x37\x5c\x7e\x80\xf7\x1f\x6e\xe0\xd5\xe5\x9b\x9b\xc8\xcb\x51\x72\x8f\x96\x18\x76\x3b\x88\xde\xa3\x35\x86\xb2\xf4\x3c\xb2\xce\xb9\x50\x10\x78\x00\x00\x7e\xc2\x99\xc2\x8f\xca\xb7\x6f\x84\xfb\x9e\x7d\x5a\x12\xb5\xda\xdc\x45\x09\x5f\xc7\x88\xcb\xb3\x14\x17\xf1\x92\x9f\x49\xc5\x05\x5a\xe2\xb8\xf8\x57\x9c\xdf\x2f\x63\xcc\xd2\x9c\x13\x56\x51\x4f\xa2\x49\x04\x4e\x31\x53\x04\xd1\x53\xa8\x56\x4a\xe5\x09\x25\x78\xfa\x5e\x0e\x11\x69\xd7\x47\x13\x28\xd4\x36\xd7\xcb\x43\xcf\x2b\x90\x80\x5b\x68\x24\x8d\xae\x04\x2f\x48\x8a\x85\x9b\xa9\xf4\x8e\xfe\x40\x74\x83\xdd\xe0\xb5\xe5\x54\xad\xa9\xf6\x8f\xae\xed\xc3\x2b\x21\x78\x35\xd7\x68\x13\x7d\xc8\x15\xe1\x4c\x7a\x5e\x1c\xc3\xcd\x36\xc7\x40\x24\xa8\x15\x06\x2d\x0c\x64\x5c\x74\x6c\x97\x70\x26\x95\x5d\xb6\x00\xbf\x35\xe3\x1b\x7a\xb7\x13\xa0\x02\x11\x8a\xee\x28\x86\x1c\x11\x21\x23\x47\x17\x78\xbb\xdd\x19\x08\xc4\x96\x18\x66\xb7\x73\x98\x15\x70\xbe\x80\xe8\x4a\xaf\xd1\xdc\x35\x4e\x7a\x05\xc9\x80\x71\x05\xb3\x22\x7a\x4d\xf9\x1d\xa2\xcd\x9c\x1e\xbb\xc4\x32\x11\xc4\x48\xdd\x9d\xf8\xdf\x86\x52\x27\x8e\x93\x6e\x56\x89\x77\x6b\x57\xd4\xc2\x56\x3b\x61\x96\x6a\x1e\xad\xc7\x70\x44\x91\x35\x56\x28\x45\x0a\x1d\xd1\xe5\x0d\xcb\xf8\x64\x5d\x72\xa6\xe5\x39\x5f\xd4\xa2\x7d\x05\xc5\xaf\x90\x4c\xda\xcb\x0c\x0b\xad\x36\x91\x39\x45\xdb\xca\x12\xe0\x7e\x0d\x9f\xc5\xc8\xaa\x96\x72\x07\x41\xfc\xcd\x69\xd8\x70\xdc\xc7\xf1\xec\x14\x1c\x8f\x58\x7b\x0c\x1d\x3d\x7e\x0c\x9a\x38\x86\x4f\x44\xad\x3a\xa2\x3e\x10\x4a\x01\xe5\x39\xdd\x42\x47\x4a\x28\x74\x8c\x80\xe2\x50\xb9\xfa\x20\x04\xd9\x86\x25\x7b\x4c\x83\xc2\xf1\x32\x2e\x5f\x96\x21\x68\xf1\x61\x57\xc3\x2f\xb0\xda\x08\x66\x46\x9b\xc1\xb7\x78\x7b\xbe\xef\x93\xf3\x7a\xde\x04\xed\x39\x14\x76\xa4\xf4\x3a\xc0\xb5\x1e\x87\x01\xd4\xec\x64\x8e\x12\xdc\xf1\x33\x85\xd7\x39\xd5\x99\xd9\xd7\x21\x77\xcb\xf0\x83\x0f\x6b\x74\x8f\xaf\xa9\xf6\xe3\x60\x08\xc7\xd0\x0c\xe2\x87\x71\x36\xb2\xcd\xa3\xe2\x60\xb4\x62\xc9\xc8\xee\x1a\x46\x83\xf2\x31\xd2\xbe\x9e\x29\xce\x08\x6b\xf6\x6d\x31\x9f\xe5\x4c\x2b\x4e\x58\x8a\x1f\x21\x82\x7f\x8c\x84\xc9\x4c\x3b\x6f\x7b\xe1\x3f\x0d\xef\x38\x86\x4b\x9c\xa1\x0d\x55\xd6\xb0\x50\x96\xd6\x05\x89\xd4\x7b\xea\x09\x9b\xa5\x4c\xb2\x93\x39\x4e\x48\x46\x12\x40\x46\x0b\xcf\x64\xc1\x61\x7a\xa9\xc4\x26\x51\xce\x17\x86\x2c\x65\x05\xea\x84\xdd\xbe\x2b\xc3\x9f\x7f\x69\x76\xfd\x48\x2a\xbd\x69\x6c\x87\xed\xd6\xc1\x3e\x67\x30\x2b\xf6\x73\xc1\x21\xfc\xad\xfb\x34\xb1\xd8\x85\xbf\x1a\xcf\xd8\x3e\xda\x6e\xe2\xde\x08\x9a\xb1\xa1\xd8\xd5\x16\xd1\x9b\xd4\x70\xea\x07\x4d\x52\x96\x55\xed\xc9\x91\x90\x38\x75\x08\x5b\x1b\xf4\x28\x34\x41\x59\x76\x6d\x60\xad\xe8\xf0\x34\x23\x71\x0c\x1f\xf1\x97\x0d\x11\x38\xb5\xb3\x43\xa0\xea\x89\x4a\xdc\x7a\xb5\xc3\xeb\xff\x48\x9a\x4d\x11\x11\x43\xb6\x03\xb8\xe3\x9c\x36\xf9\x7c\x74\x59\x33\xed\x12\xc9\x50\x66\x8e\x63\x97\xa1\x10\x9d\x26\x6d\xbd\xfa\x47\x4b\x3b\x59\xde\xd7\x75\x7f\x38\x49\xe0\x66\xf9\xcf\xc6\xb7\x72\x3b\x21\xf1\xd5\x88\xef\x99\xfa\x61\x56\xd8\x24\x2f\x4d\xf8\x10\xa6\x38\xbc\x1c\xf1\x57\x5b\x34\x0e\x71\x0d\x78\xae\x2a\x9f\x0c\x21\x18\xe1\x33\x07\xac\x9b\xb3\xd0\x39\xb2\xc0\x52\x67\xa5\xf3\xc5\x58\x9c\x34\xa5\xc6\xc0\x7e\x0e\x7a\x97\xaa\x9a\x98\x3f\x9d\xcb\x6e\xe7\x60\x12\x86\x35\x86\x11\xa4\x21\x94\x0f\x44\x25\x2b\x28\xa2\xb7\x78\xdb\x1a\x1e\x8e\x98\x13\xa3\x46\xff\x12\x24\x71\x63\x95\x56\x19\x3c\xaf\x97\xe8\x1f\xc9\x9c\xb6\xd1\x11\x57\xd8\x75\xc8\xcc\x0e\x9c\x29\xc2\x36\xb8\x33\x51\x76\xde\xa6\xb1\x5e\x80\x12\x3d\x36\x8e\xf0\x30\x55\x61\xbb\xef\x28\xe8\x3b\x5f\xd8\x01\xad\x15\x31\xe3\x51\x7e\x62\xa4\x3f\x23\x7c\x18\xe1\xa1\xbc\x74\x04\xe2\xbd\xdc\x74\x02\xc6\xa6\xc3\x9c\x03\x37\x65\x2f\xe1\xac\xc0\x42\xb5\xa2\x75\x5c\xc7\x60\x5c\xc3\xb0\x6f\x45\x7e\x3f\x60\xa2\xef\xb0\xee\xa8\x85\xf7\xad\xfc\x5d\x96\x9e\x6e\x6d\x73\x96\xed\x48\x01\x98\x6a\x03\x7c\xb3\x30\x19\xa2\x72\xcc\x7d\x07\x3c\xa7\x6c\xa7\xd0\x13\x12\x1e\xc9\xe0\xc5\xa9\x66\x70\x27\x87\xb1\x0c\x5f\xce\x9b\x03\xfc\x7b\xfc\xa0\xeb\x47\xb5\xab\x39\xc8\x07\xb6\x35\xeb\xb8\xe5\x59\x15\x18\x7b\xe5\xcf\x6b\xed\x68\x05\x9d\x03\x23\xd4\x3b\xdc\x06\x3e\xed\x16\xb0\xa6\x78\x6e\x02\x9f\x9b\xc0\x5f\xde\x04\x06\x12\x5e\xd6\x93\xe1\x73\x4b\xf8\xed\x2d\xe1\x13\x6d\x29\x7e\x6a\xd3\xf6\x44\x31\xf8\x95\x6d\x95\x8c\x7e\x6a\x63\xf5\xa4\xda\x1d\xd8\xed\x48\x06\xcc\x5e\xe6\xf8\xee\x72\xda\x6f\x23\xda\x52\x47\x46\x7a\xcf\x2b\x4e\x49\xb2\x8d\xfe\x43\x29\x7c\xfd\xda\x1d\x6b\xa5\xbb\xf1\xa9\xd3\x7b\xc9\xd3\x1b\x9a\xdf\x99\xdc\xe4\x39\x17\xaa\xea\x69\x8a\x70\x42\x23\xba\xdb\x69\x94\x06\x74\xff\xf6\xa6\xd0\xb1\x65\x69\x8f\xeb\xc1\x66\xd1\x5d\x1e\x76\x5d\x76\x92\xa1\x4e\x34\xd2\x90\x73\xfe\x68\xa8\x4b\x6f\x12\xc4\x83\xe7\x85\x3e\x72\xcf\x5d\x74\xdd\x45\xb7\x6e\xc3\x7f\xd8\x85\xf6\x00\xaa\xe3\xf7\xc2\xf6\xdb\xd1\x3b\x9e\x74\xcb\x50\xf7\xca\x98\xea\xe9\xdb\x4a\xd6\xd1\xcb\xe3\x1a\x0d\x9d\xa4\x46\x99\x4d\x67\xd3\xfe\x26\x75\xf4\x5a\xba\x61\x7b\x08\xc8\xf6\xdc\xd0\xd9\x04\x5c\x97\x78\xe4\x78\x02\xb6\xdc\xb5\x63\xd0\x3c\x0e\x7d\x36\x8b\xe3\x6a\xf9\xcd\x8a\x48\xa8\xe4\xb4\x9d\x64\x22\xb0\x06\x05\x81\xfb\xca\x0d\x77\xdb\x2a\x6f\x44\xb6\x29\x6b\x7a\xc7\x59\xce\xca\x32\x6c\x6d\x1a\x98\x6b\xee\xe8\x0a\x09\xb4\x96\xd1\xb5\x12\x84\x2d\xf5\x0a\x37\xfe\xd1\x78\x60\x7b\xa2\x09\x8b\x44\x3d\xba\xab\x08\xbd\x6b\xf4\x5f\x94\xdc\x2f\x05\xdf\xb0\x34\x08\xfb\xa1\x23\x5b\xa9\xe6\x13\x51\xab\x0b\x4b\x13\x24\xea\x71\x0e\x1d\x09\x2e\x10\xa5\x58\x34\xd1\xb1\x0f\x53\x8b\xfe\x00\x62\x87\x74\xee\x49\x50\x6b\xe0\xc6\x7a\x12\x9d\x84\x89\x3d\x19\x2e\x00\xe5\x39\x66\xa9\xe9\xbb\xe5\x1c\x64\xe4\xec\x61\x3e\xea\xb4\xb0\x88\xa2\xa8\xc1\xaa\x40\x42\x77\xcb\x63\x79\xc6\x6b\x17\x05\x2c\x8c\x86\x41\xb8\xeb\x65\x49\x93\x69\xd4\xaa\x72\x3c\xa7\xc3\x15\x52\x2b\x8b\x6c\xbf\x4c\xb8\xf8\x45\x2c\x85\x00\x7f\x71\xc4\xbe\x1f\xba\xb7\x56\x81\x09\x87\x5a\x01\x9b\x40\xd5\x0a\x16\xe0\xcf\x3f\xfb\x9f\xfd\xbd\x3a\x34\x50\xd4\xf4\x0f\x0b\x01\xba\xdf\xca\xb8\x58\x23\x65\xf3\xa4\x6f\xf1\xd5\xc1\x52\x96\xbe\x39\x9c\x34\x1b\x94\x25\x34\x50\x95\x41\xd8\xc0\xc1\x73\x35\xaf\xf9\x1d\x3c\x14\x19\x73\x34\x5c\x48\x66\xc8\x5e\x2c\x74\x82\xed\x55\x40\xeb\xb8\xad\x72\x33\xe8\xd2\xdd\xe0\xbe\x40\x6b\x6c\xfa\xc2\x7d\xb7\xbe\x11\x64\xfd\x0e\x49\xe5\xfc\xfb\x15\x4b\xf5\x41\x68\x75\xc1\xd7\x6b\x54\x96\x5a\x85\xca\xe1\xc7\x72\x53\x3f\x7f\x3e\x67\xa8\x27\x12\x8d\x71\x0c\x6f\x96\x8c\x0b\x6c\x0f\xd3\xf0\xb0\x22\x14\xc3\x0a\xb1\x94\x12\xb6\x04\x63\x37\xad\xa0\x29\xd1\x51\xd7\x6b\x6f\x27\xfb\xec\x29\xee\xf7\xdd\x9e\xf7\x77\x00\x00\x00\xff\xff\x78\xdc\x34\x5c\x9a\x25\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x83, 0x32, 0x4a, 0x83, 0xec, 0x69, 0x7b, 0x9, 0xe3, 0xec, 0x2e, 0xcf, 0x3c, 0x28, 0xc9, 0x49, 0xdd, 0xfb, 0x4d, 0xa8, 0xf, 0xdd, 0x17, 0x2c, 0x48, 0xda, 0xa3, 0x46, 0x24, 0x69, 0x94, 0x63}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl": {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl": {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl": {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl": {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl": {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
