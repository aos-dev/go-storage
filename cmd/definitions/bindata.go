// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/function.tmpl (258B)
// tmpl/info.tmpl (1.802kB)
// tmpl/object.tmpl (1.902kB)
// tmpl/operation.tmpl (982B)
// tmpl/pair.tmpl (1.929kB)
// tmpl/service.tmpl (7.046kB)
// ../../definitions/infos.hcl (1.312kB)
// ../../definitions/operations.hcl (4.729kB)
// ../../definitions/pairs.hcl (2.058kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x4a\xc4\x40\x10\x45\xf7\x39\xc5\x67\xc8\x22\x33\x68\x1f\x40\x70\x15\x74\x25\x32\xa8\x17\x28\xda\x1e\x6d\x4c\x55\x9a\x54\x05\x07\xda\xba\xbb\xf4\x44\x04\x5d\x15\xd4\xff\xbc\xff\x6a\xbd\x46\x7f\x92\x0f\xdc\xdc\xa2\x0f\xf7\xab\xc4\xf0\x48\x9c\xf0\x05\x9b\x47\xe2\x34\xc1\xbd\x3b\xad\x12\x31\x28\x0e\xb5\xa2\xbf\xe4\x5a\x28\x6e\xa5\x23\x69\xa4\xd6\xda\xa3\xd6\x46\x72\x1f\xa2\x9d\x11\x67\xb1\x74\xb6\x30\x6e\xf7\xaa\xa5\x1b\xff\x48\x0b\xb1\x86\x97\x25\xf3\x03\xa9\x85\x67\x5b\xb2\xbc\xdd\xc9\xab\x7e\x66\x7b\x1f\x67\x66\x72\xc7\x5c\x0c\x87\x42\x79\xf9\xb7\xe9\xde\x1e\xcd\xf8\xef\xfa\xf0\xcb\x7f\x4a\xba\x4e\xa6\x3f\xdc\x8b\x58\x07\x00\x85\x24\xc7\x61\x97\xb9\x4c\x89\x93\x18\xb2\xed\xf6\x9d\x7f\x07\x00\x00\xff\xff\x5b\xb1\x71\xf7\x02\x01\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf3, 0x17, 0x45, 0xc4, 0x8, 0xb1, 0x57, 0xf3, 0x99, 0x7b, 0x1f, 0xcd, 0xe4, 0x30, 0x7e, 0x3, 0x30, 0xba, 0x28, 0xed, 0x36, 0x1c, 0xd3, 0x4a, 0x24, 0xfc, 0x10, 0x73, 0xfe, 0xf7, 0xda, 0x75}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x51\x6f\xd3\x3e\x14\xc5\xdf\xfd\x29\xce\xbf\xaa\xfe\x6a\x50\xd7\x6c\x12\xe2\x01\xd6\xa7\x6d\xa0\x09\x6d\x43\xda\xc4\x03\x08\x21\x37\xb9\xa9\x4c\x63\x3b\xb2\x9d\x68\x25\xcd\x77\x47\x76\xb2\xb6\x29\x5d\xa1\x88\x17\xde\xec\xd8\xbe\xe7\xe7\xe3\x73\x13\xc7\xb8\xd0\x29\x61\x4e\x8a\x0c\x77\x94\x62\xb6\xc4\x5c\xaf\xe7\x10\xca\x91\x51\x3c\x8f\x13\x99\xbe\xc1\xe5\x1d\x6e\xef\x1e\x70\x75\x79\xfd\x30\x61\x05\x4f\x16\x7c\x4e\x70\xcb\x82\x2c\x63\x42\x16\xda\x38\x8c\x18\x00\x0c\x32\xe9\x06\x2c\x62\xac\xae\x4f\x60\xb8\x9a\x13\x86\x8b\x31\x86\x42\x65\xda\xe2\xf5\x14\x93\x6b\x3f\xba\xe1\x05\x9a\x86\xd5\x35\x86\x96\x4c\x25\x12\xba\xe5\x92\xfc\xfa\x70\x81\x15\x9c\xbe\xe0\x92\x72\xbf\x85\xc5\x31\xde\x0a\xca\x53\x08\x95\xd2\x23\x84\x42\x5d\x6f\x1f\x6a\x1a\xcc\x84\x63\x89\x56\xd6\x43\xec\xe8\x56\xa1\x66\xab\xde\x34\x01\x71\xf7\xf8\xb5\xaf\xeb\x49\xaa\x49\x80\xf0\xf2\x1f\xb8\x4d\xb8\xd7\xc7\x14\x67\xe7\xe7\x7e\x75\xd1\x02\x9f\x80\x54\xea\x87\x11\x63\xde\x00\xec\xde\xa1\x7f\xdc\x3a\x53\x26\x0e\x75\xa7\xbc\x66\xfb\xfa\x1c\x9b\xc7\x78\x58\x16\x6d\xad\xa6\xd9\xfa\xb2\xd9\xb3\x66\x08\xf3\x38\xf6\x06\xa0\xb4\x94\x82\x5b\x70\x3f\x93\xbc\x40\xa6\x0d\xf4\xec\x1b\x25\x0e\x15\xcf\x4b\x1a\xe3\x14\x92\xb8\xb2\x50\xda\xc1\x92\x1b\xe3\xac\xfb\x60\xc9\x85\x52\xa1\x8e\x50\xee\xd5\xcb\x30\x95\x90\xbc\xf8\x6c\x9d\x11\x6a\xfe\x25\x04\x22\xe3\x09\xd5\x0d\xeb\x94\x0f\x7b\xed\x57\x45\xe6\xe9\xaf\x1e\x43\x42\x9a\x86\x65\xa5\x4a\x30\x92\x78\x71\xd0\xb5\x08\xef\xc8\xb5\x17\xbf\x14\xb6\xc8\xf9\xb2\x73\x63\x14\xf5\xfd\xe8\x7c\x35\xe4\x4a\xa3\x20\x27\x3f\xd9\xe7\x49\x7f\x57\xf3\xfe\x19\xcd\xaa\xaf\x19\xfd\xa2\x50\xc7\xb4\x07\x06\x53\x54\x3d\x5e\xd6\x05\x2a\xb7\x81\xf5\x2f\xb8\x33\xea\xa1\x8e\x31\xd3\x3a\x8f\x3a\x22\x91\x41\x4e\xfc\x0b\xff\x7f\x64\x0b\xfc\x37\xc5\x69\x57\xe3\xb0\xdb\x63\x38\x53\x52\xd8\xb8\x89\x6a\x1b\x81\x4f\x64\xf4\x47\x9f\xc2\xa7\x14\x6f\x55\x6a\xeb\x6c\xef\x18\x23\xe3\xb9\xa5\x4d\xdc\x3b\x87\xf6\x1e\x0c\x97\x5d\xe1\xfb\xa1\xf3\x6d\xbb\x1c\x61\xf1\x4d\x69\xdd\x71\x21\xfc\x63\x7b\xa7\x7d\x7b\x0b\xae\x44\x32\xca\xa4\x9b\xdc\x17\x46\x28\x97\x8d\x06\xfb\x58\xdf\xd3\x8c\xcf\x36\x3f\x88\xa7\x88\x89\x75\x77\x0f\xa2\x68\xeb\x25\xfe\xb5\x16\x69\xad\x5c\x4d\x8f\xf3\x72\x6f\x77\xb5\x6f\xbf\x13\x85\xcd\xf0\x47\x00\x00\x00\xff\xff\xc9\xe7\x0b\xe2\x0a\x07\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd, 0xa2, 0xdc, 0xf4, 0x79, 0x9b, 0xb4, 0x94, 0xfb, 0x8a, 0xe3, 0xb3, 0xca, 0x75, 0x5b, 0x39, 0x8, 0x1a, 0xc4, 0x69, 0x74, 0x63, 0x42, 0x82, 0xec, 0xa5, 0xc6, 0xc, 0xe0, 0x35, 0x8a, 0x7d}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x4d\x6f\xe3\x36\x10\x3d\x9b\xbf\xe2\xd5\x08\x0a\xa9\x70\xa5\xa4\x2d\x7a\x68\xe3\x53\x92\x16\x39\x24\x29\x90\xa0\x87\x16\x7b\xa0\xa5\x91\xc3\x8d\x44\x0a\xe4\xc8\x6b\xaf\xa2\xff\xbe\x20\x25\x7f\x25\xde\xc0\xc1\x5e\xf6\x64\x0e\x39\xf3\xe6\xe3\xbd\xb1\xd2\x14\x17\x26\x27\xcc\x49\x93\x95\x4c\x39\x66\x2b\xcc\xcd\xc6\x86\xd2\x4c\x56\xcb\x32\xcd\xaa\xfc\x4f\x5c\xde\xe1\xf6\xee\x01\x57\x97\xd7\x0f\x89\xa8\x65\xf6\x24\xe7\x04\x5e\xd5\xe4\x84\x50\x55\x6d\x2c\x23\x12\x00\x30\x2e\x2a\x1e\xf7\x27\x56\x15\x0d\x47\xb7\xd2\xd9\x58\xc4\x42\xa4\x29\xfe\x52\x54\xe6\x50\x3a\xa7\x25\x94\x86\x99\x7d\xa4\x8c\x31\x53\x2c\x32\xa3\x9d\xc7\x69\xdb\x9f\x61\xa5\x9e\x13\x4e\x9e\x26\x38\x59\xe0\x8f\x29\x92\xbb\xe0\x77\x43\x2c\xd1\x75\x01\xb5\x8f\xbc\xf6\x40\x6d\x8b\x93\x45\x72\x2b\x2b\xc2\x33\xd8\xfc\x23\x5d\x26\x4b\x74\x1d\xa6\x38\x3b\x3f\xf7\xaf\x4f\x3e\xca\x03\x93\xce\xfd\x31\x16\xc2\x97\x8f\x1e\x16\x8e\x6d\x93\x31\xda\x63\x73\x7b\x37\x55\xf8\xa4\x17\xa6\xaa\x48\xf3\xfa\x01\x69\x8a\xbe\x9a\x17\x0f\x3b\xb9\x7b\xd3\xfb\x3c\xac\x6a\x0a\x55\x77\xdd\xce\xcd\x8b\x52\xc5\x28\x4d\x91\x95\xca\x83\x29\x07\x7e\xa4\x8d\xa5\xf1\xe9\x51\x65\x8f\xeb\x2e\x94\x83\x2c\xd5\x82\x12\x31\x1a\x3c\xee\xd9\x58\x39\x27\x1b\x30\x2a\x38\x36\x96\x5c\xf8\xf1\x04\x5a\x2a\x03\xf5\x15\xb1\xcc\x25\xcb\x24\x94\xe6\x2d\x54\xb2\xfe\xdf\xb1\x55\x7a\xfe\x21\x28\xa1\x90\x19\xb5\x9d\x10\x43\x8b\x33\xc5\x68\x1c\xe5\x90\x0e\xd2\x5b\x95\xac\x51\x18\xbb\xa6\x73\x21\xcb\x86\x26\x38\x45\x45\x52\x3b\x68\xc3\x70\xc4\x13\x9c\x0d\x17\x8e\x38\x40\x05\x1c\xa5\xf9\xf7\xdf\xc4\x28\x37\x9a\x82\xf1\xeb\x2f\x62\x54\xf9\x57\x2f\x9b\xe4\xa6\x61\x5a\x8a\x4e\x88\x63\xb8\xd9\xf2\x72\xb5\x0c\xaa\xec\x3a\x51\x34\x3a\x43\x64\xf0\x53\xef\x1a\xe3\x6f\xe2\x7e\xd8\x97\xca\xd5\xa5\x5c\x0d\x0c\x44\xf1\x3e\x07\x68\x43\x89\x96\xb8\xb1\x1a\x26\x79\x45\x99\x2f\xea\x15\xf8\xfd\x57\xc0\x17\xfb\xe0\xf1\x3a\x62\xc8\x72\x00\x1e\x53\x2c\xf6\x2a\x10\x83\x2c\x4a\x17\xb2\xbf\xa7\xb1\x68\x2f\xf9\x04\x33\x63\xca\x78\x93\xda\xb1\xe4\x28\xee\xc9\x55\x05\x4c\xe2\x69\xf9\xf1\xa8\x05\xfb\x61\x8a\xd3\x01\xe7\xed\x61\x4d\xc0\xb6\xa1\xe0\x38\xc8\x68\xcb\xd5\x7f\x64\xcd\xbf\x5e\x31\x9b\x2d\xda\x42\xf5\x40\xbb\x1e\x13\x14\xb2\x74\xb4\xdd\xaa\x61\x1e\x07\x03\x43\xc7\xcf\xf8\xfc\x56\x7c\xbf\x66\x87\x06\x7a\xd3\x38\x7e\x9f\x5a\xbe\x69\x98\xd3\xfd\x61\xd6\x52\xab\x2c\x2a\x2a\x4e\xee\x6b\xab\x34\x17\xd1\x78\x58\xaf\x1d\x84\xae\xf3\x6b\x3f\x2c\xd8\x38\x8e\x87\x09\x7f\x1f\xca\xed\x9b\x7f\x9e\x1e\xd3\xfd\x41\xa9\xf7\xd4\xec\xfe\x19\xbe\x2a\x3b\x2b\x8d\xa6\x68\xb9\x73\xd3\x6e\xa8\x3d\xe6\x2b\x72\xb0\xfc\xe5\xa1\xa1\xbd\x10\xcc\x10\x1e\xfe\x2e\x43\x84\x3f\x89\x9d\xbe\xc3\xa5\xff\xb0\x75\x5f\x02\x00\x00\xff\xff\x89\x2a\x06\x6f\x6e\x07\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb5, 0x31, 0x99, 0x29, 0x2, 0xc4, 0x9b, 0xd3, 0x91, 0x35, 0x57, 0x52, 0xe1, 0x99, 0xff, 0xb1, 0xec, 0xc7, 0x4, 0x8a, 0x19, 0xaa, 0xa6, 0x88, 0xca, 0x41, 0x3a, 0x9a, 0x1b, 0x95, 0x45, 0x67}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\x4d\x4f\xe3\x30\x10\xbd\xfb\x57\x8c\xa2\x1c\x12\xa9\x4d\xef\x2b\xed\x61\xb5\x1f\xd2\x5e\x20\x82\x03\x47\x64\x5c\x37\x8c\x48\x62\x63\xbb\x55\x2b\xe3\xff\x8e\xc6\x71\x4a\x1a\x15\x8a\x10\x37\x7b\xde\xbc\x99\x37\x33\x4f\x73\xf1\xc4\x1b\x09\xee\xa0\xa5\x65\x0c\x3b\xad\x8c\x83\x82\x01\x00\x64\x42\xf5\x4e\xee\x5d\x36\xfc\x50\x65\xac\x64\xcc\xfb\x25\x18\xde\x37\x12\xf2\xfb\x05\xe4\x08\x3f\x7e\x42\xf5\xbf\x77\xd2\x6c\xb8\x90\x16\x42\x60\xde\x43\x8e\xd5\x1f\x69\x85\x41\xed\x50\xf5\x14\xa4\x0e\x90\x10\xb4\xba\xe5\x87\x2b\xde\x49\x08\x01\x70\x24\x83\x8f\x9d\xa8\x03\x6e\x40\x19\x28\xe4\x33\xe5\xc7\xc4\xcc\x4a\xb3\x43\x21\x4d\x56\xce\xe2\x4e\x19\xde\x50\x3c\x84\xc8\xbf\x75\x06\xfb\xa6\x28\xc1\xc6\xc7\xb1\xa6\xec\xd7\x24\xe4\xf8\x9f\x4c\x21\xbb\x07\xb9\xa6\x49\x72\xac\xfe\xc6\x77\xaa\x35\xe4\xa6\x84\x99\xf0\x77\x0a\x4f\xeb\x2a\x9d\x8a\x5e\x6b\x3b\x32\x56\xab\x58\x51\xe9\x41\xff\x0b\x38\x55\x73\x2b\x78\x4b\xbb\x48\xc8\x6c\x77\xa3\x8a\xb3\x9c\x22\x21\xff\x94\xe9\xb8\xab\xb9\xe1\x1d\xf5\x2a\xe1\x14\xb8\x91\x76\xdb\x3a\x7b\x87\xee\xb1\x1e\x8e\x7e\xb2\xbe\x8c\x28\x17\xf5\x11\xfb\xf7\xe0\x8a\xaf\x48\x9d\xd0\x0b\xe1\xf6\x90\x0c\x56\xa5\xd8\xe2\x9b\x27\xf1\x7e\x3c\x4d\x60\xd3\x3b\x45\x2b\xd6\x1c\x4d\xad\x5a\x14\x07\xf2\xc9\x56\x38\xf0\x9f\xf3\xf6\xf2\xa3\x03\xcf\xe0\x5d\x44\x95\xae\xa8\x9b\xbd\xb8\x1f\x02\x76\x33\x47\xbc\xe9\xfc\x25\x68\xc9\xd3\x49\xce\x3f\x03\x7b\x0d\x00\x00\xff\xff\x03\x6b\xbe\x36\xd6\x03\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbb, 0x61, 0xd5, 0x41, 0x5e, 0xfb, 0x70, 0xf7, 0xe0, 0x1e, 0x87, 0xf6, 0x2e, 0xa2, 0x26, 0xc0, 0xbc, 0x7, 0x36, 0xdf, 0x84, 0xb2, 0xdb, 0xa6, 0xbf, 0x43, 0x74, 0xfb, 0x7c, 0x89, 0x3, 0x0}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\xcc\x0a\xc6\x42\x02\x64\x69\xb1\x47\x2d\x7c\xda\xf8\x50\x14\x8d\x73\x08\xda\x43\x10\x14\x0c\x35\x96\x09\x51\x24\x41\xd1\x4c\x0d\x55\xff\xbd\x20\x29\xab\xf2\x57\xd0\x1c\x7a\xe8\x9c\xcc\x99\x37\xc3\x37\x6f\x46\x74\x51\xc0\xff\xb2\x42\xa8\x51\xa0\x26\x06\x2b\x78\x39\x40\x2d\xa7\x33\x30\x61\x50\x0b\xc2\x0b\xda\x56\xff\xc1\xdd\x06\xee\x37\x8f\xb0\xbe\xfb\xf0\x98\x47\x8a\xd0\x86\xd4\x08\x8a\x30\xdd\x45\x11\x6b\x95\xd4\x06\x92\x08\x00\x20\xa6\x52\x18\xfc\x66\xe2\x28\x1c\x6b\x66\x76\xfb\x97\x9c\xca\xb6\x20\xb2\x5b\x56\x68\x8b\x5a\x2e\x3b\x23\x35\xa9\xb1\xb0\xff\x16\xaa\xa9\x0b\x14\x95\x92\x4c\x98\xf8\x1d\x39\x54\x63\x85\xc2\x30\xc2\xdf\x93\xb5\x33\x46\x51\xce\xf0\x78\x57\xfe\x0b\x79\xe6\xa0\xb0\x8b\xa3\x34\x8a\xfa\x7e\x09\x9a\x88\x1a\x61\xf1\x35\x83\x85\x85\x72\x05\xf9\x83\x53\x01\x86\xc1\x47\x17\x4a\x90\x16\x9d\x7f\x61\xf3\x7b\xf7\xf3\x3b\x18\xf9\x40\x3a\x4a\xb8\xc3\x14\x05\x7c\x61\x66\xd7\xf7\x47\xe4\x30\xc0\x2b\xe3\x1c\x88\x52\xfc\x00\xce\x3f\xe6\x0d\x03\x58\xc2\xf7\x08\x46\xc2\x46\x19\x26\x45\x17\x85\xf0\x1d\x76\x54\x33\xef\x72\x25\xb7\x7b\x41\x2f\x8a\x26\x76\xac\xf5\x78\x50\xee\x9c\x82\xa3\x09\xbd\x6f\x5a\xa3\xd9\x6b\xe1\x3d\xc1\xe1\xec\x23\x1e\x4a\x88\x4f\x08\xc4\xd9\x14\xfd\xec\xa8\x94\x60\x83\x67\x88\x42\xb7\x28\x2a\xc7\xc0\x75\xf5\x40\x74\x87\xa1\x15\xe5\x7f\x12\x68\x96\x16\x5a\xa2\x5c\x03\x7e\x53\xa0\xe3\x8c\x62\x1e\x08\x7b\x7c\xd2\x3a\xc0\x53\x67\x34\x13\xf5\xb3\xdf\xb8\x2d\xa1\xd8\x0f\x29\x24\x4f\xcf\x8e\x5f\x06\xa8\xb5\xd4\xe9\xc8\x3c\xd4\x29\x57\xd0\x92\x06\x27\xc8\x3f\x19\x70\x14\x49\x9b\xa6\x61\xe9\x2c\xd1\x2e\x2d\xa4\x06\xd7\x56\x6a\x68\x32\xf0\x13\x0b\x13\x6c\xe1\x67\xef\x2e\x41\x59\x98\x11\x98\x42\xdd\x2b\x33\x74\x07\xcd\x0c\xfd\xf6\x16\xc0\xcc\x28\xe9\xf0\x5c\xd3\xf2\x04\x31\xbb\x42\xfb\x42\x36\x4f\xdc\xbe\xa5\xb3\xfb\x4e\xaa\x9d\x4c\xf5\xb2\x96\x17\xc9\xc2\x0a\xb4\xbd\x88\x39\xde\x6c\xeb\xd2\xbd\xf8\xfa\x9c\xed\x74\x47\x98\xc7\xad\xe2\x7e\x24\xb0\x82\xbe\x9f\x2a\x0d\x43\xa2\x6d\x7a\x15\xcf\xb6\x1e\xfe\xd7\x0a\x04\xe3\x57\x9a\x3a\xda\xb8\x93\x82\xf1\x0c\xfe\x5e\xbb\xc1\xdd\xc6\x6e\x54\x09\xb1\xdf\xb2\xd9\x86\x9e\xdb\x5a\xeb\xd2\x5d\x7d\x1b\xf1\xf6\xc6\x9f\x9b\x93\x7c\x82\x8f\xfa\xbf\x01\x3f\xfd\x60\xce\xed\x52\xf8\x4b\xcf\xec\x03\x3b\x0f\x55\xb8\x25\x7b\x6e\xae\x4f\xe8\xf7\x28\xb9\xd6\xda\xad\xb8\x6b\xfc\x13\xeb\x5a\x62\xe8\xee\x0f\x50\x76\x38\xf9\x68\xaf\xa8\x79\x53\x49\xf7\x37\xc6\xc4\x1e\xa3\xcb\x52\xe1\x11\x5a\xb9\x27\x1b\x45\x95\xf8\x63\x16\x5e\x53\xdf\x78\x93\x1d\x39\x2a\x3b\xa4\xe3\x83\x39\x7f\x78\xc7\x0c\xc1\x78\x34\x44\x3f\x02\x00\x00\xff\xff\x4b\x4f\x1d\x61\x89\x07\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xca, 0xe6, 0x96, 0xac, 0xdc, 0x65, 0xfa, 0x30, 0xe3, 0xf2, 0xd3, 0x24, 0xf4, 0xbd, 0xa1, 0xc5, 0x36, 0xd3, 0x53, 0xfc, 0xad, 0x83, 0x56, 0xd8, 0xdd, 0x1, 0xad, 0x32, 0x4e, 0x21, 0xdf, 0x48}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x5f\x73\xab\xb8\x15\x7f\xf7\xa7\x38\xcb\x78\x3b\x70\xc7\x81\xb6\x8f\xde\xf1\x4b\x73\x6f\xb3\x3b\xdb\x26\x99\x26\xed\xce\xf4\x6e\x26\xa3\xc0\xc1\x56\x0d\x12\x57\x92\x49\x5c\x2f\xdf\xbd\x23\x21\x40\x60\x70\x9c\x6d\xee\x6e\x1e\x32\x18\x9d\x3f\xbf\xf3\xff\x88\x28\x82\x4b\x9e\x20\xac\x91\xa1\x20\x0a\x13\x78\xda\xc3\x9a\xb7\xbf\xa1\xa4\x04\x28\x53\x28\x18\xc9\xa2\x38\x4f\x22\x89\xa2\xa4\x31\x7e\x07\x1f\x6f\xe0\xfa\xe6\x1e\x3e\x7d\xfc\xe1\x3e\x9c\x15\x24\xde\x92\x35\xc2\xe1\x00\xe1\x35\xc9\x11\xaa\x6a\x36\xa3\x79\xc1\x85\x02\x7f\x06\x00\xe0\xc5\x9c\x29\x7c\x51\x5e\xfd\x8b\x72\x6f\x56\x3f\xad\xa9\xda\xec\x9e\xc2\x98\xe7\x11\xe1\xf2\x22\xc1\x32\x5a\xf3\x0b\xa9\xb8\x20\x6b\x8c\xca\x3f\x47\xc5\x76\x1d\x21\x4b\x0a\x4e\x59\xc3\x7d\x16\x4f\x2c\x30\x41\xa6\x28\xc9\xde\xc2\xb5\x51\xaa\x88\x33\x8a\xe7\xeb\xb2\x1e\x91\x35\x7d\x78\x06\x87\xda\x17\x9a\x3c\x98\xcd\x4a\x22\xe0\x11\x3a\xa4\xe1\xad\xe0\x25\x4d\x50\xd8\x93\xc6\xee\xe1\xfb\xbb\x5a\x58\xf3\xb3\x81\x10\xde\xd5\x0f\x9f\x84\xe0\xcd\x59\x67\x50\x78\x53\x28\xca\x99\x9c\xcd\xa2\x08\xee\xf7\x05\x02\x95\xa0\x36\x08\x1a\x0f\xa4\x5c\xf4\xc2\x17\x73\x26\x55\x4d\xb6\x02\xcf\x39\xf1\x0c\xbf\xd5\x04\xa4\x24\x34\x23\x4f\x19\x42\x41\xa8\x90\xa1\xe5\xf3\x67\x87\xc3\x05\x08\xc2\xd6\x08\xf3\xc7\x05\xcc\x4b\x58\xae\x20\xbc\xd5\x34\x5a\xba\x76\x95\xa6\xa0\x29\x30\xae\x60\x5e\x86\x57\x19\x7f\x22\x59\x77\xa6\xdf\x7d\x44\x19\x0b\x6a\x50\xf7\x0f\xfe\xba\xcb\x32\x0b\xc7\xa2\x9b\x37\xf0\x1e\x6b\x8a\x16\x6c\xa3\x09\x59\xa2\x65\x38\x8f\xc1\xec\x15\x90\x53\x00\xf5\xfb\x79\xc1\xb4\x86\xe5\xaa\x55\xf6\x0b\x28\x7e\x4b\x64\x5c\xd3\x44\x11\xfc\x44\xd5\x46\x83\xa9\x29\xab\x0a\x9e\x69\x96\x01\x29\x8a\x6c\x0f\x3d\x90\x50\x92\x6c\x87\xa0\x38\x34\x11\x1a\x35\x3f\xdd\xb1\xf8\x48\xa8\x5f\x5a\x59\x26\x52\x55\x15\x80\x86\x0f\x07\x63\xb7\xfe\x13\xa8\x76\x82\x99\xb7\xdd\xcb\x1f\x71\xbf\x3c\x76\xe5\xa2\x3d\xff\x97\x06\xb4\x84\xb2\x7e\x53\xcd\x7a\x7e\x73\x1e\x27\x3c\xf8\x03\x4b\xf9\xd9\x61\x7e\xc5\x91\x8e\x08\xed\x12\x2a\x8b\x8c\xec\x9b\x24\x6d\xf0\x76\x72\x56\x13\x54\x0e\xe8\x86\xc1\x56\xcd\xb5\x55\x5f\x08\xca\x54\x0a\xde\xb7\xf2\x5b\xe9\x81\x3f\x2f\xc3\xbb\x98\x17\x2e\x9c\xc0\xbc\xbd\x24\x0a\xd7\x5c\xec\x7b\x07\x7d\xa0\xf8\x05\x5a\x76\x8f\x3f\xfd\x07\x63\xe5\x0d\xe1\xba\xda\x57\xe0\xdd\xf4\xa9\x06\x70\xa3\x08\xae\x50\x1d\x27\xd3\x1a\xd5\x68\x2a\xa5\x82\xe7\x90\xa3\x22\x09\x51\x24\x34\x22\x4c\xf6\x0c\x84\xf8\x39\x7c\x18\x62\xd1\x29\xe4\xf7\x52\x6a\x01\x4f\x9c\x67\x01\xd8\xa4\x2a\x17\xc0\xb7\xda\x61\x79\x78\x85\xca\xef\x15\xdf\x45\xbf\xf8\x02\xc3\x40\x53\xf8\x86\x6f\x2d\x77\x17\xca\x7f\xa3\xe0\x26\xcf\x5c\xcf\xd8\x6c\xad\xc5\xb8\x14\x0b\x48\x49\x26\xb1\x73\x4e\x26\xa7\x19\x0d\xf0\x5f\xe0\xbf\xa7\xf8\x3b\xe7\xd6\xff\xad\x80\x32\xec\x1b\x1f\x2c\x40\x89\x1d\x5a\xc2\x26\x18\xb2\xf6\x63\xe7\x76\x13\x0d\x39\x11\x0d\xca\x14\x1f\x8b\x86\x3c\x27\x1a\x0b\x38\xaa\xf0\x11\x2a\xeb\x5d\x6b\x44\x1e\xde\xbd\x12\x99\x05\x94\x81\x63\xfc\x44\x75\x8f\x16\xb7\x16\x21\x0b\x12\x63\xaf\xc2\x15\xe6\x45\xa6\x37\x06\x4f\xcf\x01\x0f\x72\xb2\xc5\xbb\x4c\x4f\x08\x7f\xac\xb0\x03\xf3\x12\x9f\xa7\x45\x48\x57\x46\x23\xc1\xf4\x2b\x16\x4f\x68\xd6\x4e\x35\xfd\xf3\x35\xd6\xa1\x8d\x09\xa6\x94\x75\x7a\x1d\xe1\xf3\x82\x69\xa3\x29\x4b\xf0\x05\x42\xf8\xe3\x44\x73\x9a\xeb\xc8\xba\x84\x7f\x32\xb2\x9b\xe3\xa1\x0f\x6b\xf2\x5e\x43\x38\xe5\x41\x0d\x62\x5e\x1e\x77\x06\xfb\x38\x66\xc5\x69\x23\xdc\xb3\x94\x4d\xe3\x9e\xa7\xcc\x54\xfa\x3c\x65\x63\xad\xb9\xa9\x06\xad\xb0\x4e\x64\xa8\x2a\xfd\xa0\xd9\xaa\xea\xef\xa4\x80\x0d\xcf\x12\x09\x44\xcf\xbd\xfe\xa2\x50\xb7\x12\x22\x4e\x31\xaf\x20\x27\xc5\x67\xa9\x04\x65\xeb\x07\xa9\xc4\x2e\x56\x87\xaa\x1b\x62\x51\x04\xff\xc0\x2f\x3b\x2a\x30\x71\x64\x8e\xf8\x5c\x1f\x36\x66\xb4\x1c\xc3\xe9\x41\xa8\x70\x67\xe1\x12\x5a\x85\xce\x5c\x1c\x74\x0e\x8b\xa2\x9e\xda\x24\x3b\x1f\x45\xcb\xf1\x8e\x28\xae\xda\x1d\xfe\x6c\x18\x1d\xcb\x7b\xe0\x78\x35\x21\x9a\x7d\xb3\x20\x42\x62\x62\x45\x1a\x1e\xb3\x81\x4e\x71\xd5\x74\xce\x4a\x63\xec\x83\xcf\x0f\x7a\xa7\x99\x7d\xc5\x74\x38\x4e\xf9\xde\xb1\xed\xc7\xbf\x49\x72\x7c\x4f\xe4\x69\x58\x7a\x44\x9f\x6b\xc1\x9b\x6d\x78\xbf\xd4\xea\x56\x41\xa3\xfe\x23\xa6\x64\x97\xa9\xff\xc7\xd2\x23\xbc\xef\x14\x3e\x37\x9b\x85\xc4\xdb\x89\xe4\x34\x83\xdf\x50\xc0\x07\xb3\x79\x4b\xd3\xb2\xcd\xc8\xff\x30\x91\xd1\xdd\x06\x70\x4a\xb4\xcf\x0b\xd5\x64\x79\x00\xfe\x94\xb0\x05\xa0\xbe\xed\x05\xed\x06\x20\xb5\x43\x97\x2b\xf8\xc3\x04\xc3\xa0\x8e\x96\xa0\xf5\x2c\x5c\x9b\xcd\xd6\x22\xcd\x8a\x47\xb6\xe8\x3b\x4d\xd8\x7c\x0a\x48\x49\x8c\x87\xaa\x5e\x1f\xf4\xad\xf1\x51\xaf\x28\xcb\x95\xcd\x04\x83\xfa\x30\x16\x72\x7f\x43\xe4\xad\xc0\x94\xbe\xd4\x50\xbc\x6b\x7c\xf6\x02\x37\x04\x34\xd5\xc2\xea\xed\x72\x7a\x2e\x7c\x2e\xc3\x1f\x71\xff\xf0\x9d\xb3\x55\x36\x7f\x76\xff\x61\x34\x5b\x74\x97\xe2\x6b\x7c\xd6\x3e\xfc\x27\x93\xbb\xa2\xe0\x42\x61\x62\xee\xc7\xbe\xdd\x80\xa0\xdd\x82\x26\x12\xaa\x76\x87\xd5\x0a\x2b\x28\x43\xb3\x54\xba\x1e\xb3\x56\x72\xd1\x6f\x2a\xbd\x6a\x1e\xad\x0a\x3d\x01\x4b\x70\xdc\xda\xbe\xe5\xdb\x2e\xd3\xdd\x7d\xc5\x26\xe5\xf7\x84\x25\x19\x82\x38\xee\x78\x6f\xee\x76\x7a\x41\xd8\xe2\xde\x10\x4d\x14\x4e\xe7\x0b\x13\x9e\x55\xe3\x93\x9a\xb9\x37\x2c\x2e\xaa\xea\xc1\x0d\xe8\xdb\x82\xd4\x20\xac\x23\x34\x2e\x7e\x2c\x6c\xda\xf9\xc7\x7a\x74\x29\x84\x26\x89\xb4\x7d\xe6\x5b\x81\xdd\xef\xdd\x0e\x30\x94\x77\x7c\xf7\xb2\xce\xe6\xc7\xad\xfc\xcd\x33\xfe\xeb\x3a\xbb\xe7\x03\x6b\x7f\xd3\x50\x5b\x17\xb4\xf7\x99\xaf\xe2\xa4\xf5\xc8\xac\xf8\x35\x73\xe2\x37\x73\xd3\x39\x43\xe9\x6c\x77\x8e\xb4\x8f\x5f\xeb\x61\x07\xdb\x49\x5c\x13\x35\x36\xa2\xb4\xd5\x38\x21\x69\xb2\x0b\x0e\xfb\x8f\xad\xe0\x5a\xc9\x42\x57\xb2\x6d\x86\x53\x17\x2b\xe7\x66\xf6\x7b\x5f\xae\x1a\x28\x6f\xb8\x60\x4d\x9a\xf3\x1e\xb7\xac\x73\x2f\x59\xce\xce\x51\x3f\x8e\x7d\x1d\x8d\xa2\x86\xfc\x7e\x43\x25\x34\x38\xeb\x2d\x25\x16\xa8\x3d\x40\xc0\x7e\x8a\x87\xa7\xbd\xb6\x48\x67\x82\xf3\x51\xc2\x97\xf0\xe1\x70\x98\x17\xac\xaa\x02\x47\xa9\x7f\x38\x68\x9d\xb7\x44\x90\x5c\x86\x77\x66\x1d\xb0\x9f\x8a\xea\xc9\xa2\x53\xc1\x3d\xe8\xf2\x31\x56\x2f\xda\x3e\xab\x35\xfc\x0b\x89\xb7\x6b\xc1\x77\x2c\xf1\x83\xe1\xe7\x1b\x19\x76\x1a\x7f\xa2\x6a\x73\x59\xf3\xf8\xb1\x7a\x59\x40\x0f\xc1\x25\xc9\x32\x14\x4d\xd5\x8c\xb9\xc9\xe1\x3f\xe1\xb1\x53\x36\x0f\x10\xb4\x16\xd8\x77\x03\x44\x6f\xf2\x49\x82\x29\x0a\xa3\xdc\x0f\xfa\x95\x6b\xdb\x97\xda\x34\x39\x61\xc5\xdf\x12\xb5\xa9\x8d\x1e\x96\xad\x6d\x12\x84\x25\xe0\xe3\x17\xcb\xec\x79\x81\xfd\xc5\xc0\xb3\x1f\xeb\xfb\xcb\x56\xc7\x6e\x59\x56\xe0\x2d\x7e\xf6\x7e\xf6\xbc\x31\x05\x83\xa6\xa6\xff\x50\x08\x58\x81\x0c\x53\x2e\x72\xa2\xea\x89\xed\xd5\xa6\xeb\x3c\x36\x5f\x99\x34\x4d\xab\xa0\xaa\xc0\x69\x72\x4e\xf4\xcd\xbe\x53\xa8\xd3\x0b\xb3\xfe\xe3\x85\x5a\x58\xbd\x27\x57\x67\x33\x7a\x02\xb7\xe5\x6b\xa6\x6f\x56\xba\x55\x8d\x6e\x23\x4e\xef\x1d\xcd\xc9\x7e\x75\x5e\x92\x1c\x75\x71\x8e\xe4\xe5\xbd\xa0\xf9\xdf\x88\x54\x36\x41\x3f\xb1\x44\x3e\x9b\x34\xca\x73\x52\x55\xda\x80\xe0\xa8\x57\xfe\x2f\x00\x00\xff\xff\x28\x63\x39\xf0\x86\x1b\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2a, 0x94, 0xec, 0x5b, 0xcd, 0xfb, 0xf1, 0xa4, 0x85, 0x24, 0x44, 0x47, 0xb6, 0x91, 0x17, 0x5a, 0x35, 0x6f, 0x9d, 0xbb, 0x89, 0x36, 0x6c, 0x3c, 0x53, 0x5f, 0xd4, 0x11, 0xbc, 0xb1, 0x79, 0xa8}}
	return a, nil
}

var _definitionsInfosHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x3d\x6f\xdb\x30\x10\xdd\xf5\x2b\x1e\xb4\x64\x89\x33\x35\xdd\x3a\xd5\x1d\x3a\xb4\x5d\x0c\x74\xac\x68\xf1\x6c\x5f\x25\x1d\x55\xde\xb1\x8e\x5a\xf4\xbf\x17\x94\x6c\xc4\x4e\x62\x05\xb1\x16\x01\xc7\x7b\x1f\xbc\x77\x60\xc1\xb2\x09\x28\xc3\xfa\x27\xd5\x56\xa2\xec\xc8\x5c\x89\xb2\x0e\x62\x24\xb6\xe8\xfc\x7d\x89\xbf\x05\x60\x43\x4f\x38\x7e\x1f\x50\xaa\x45\x96\x6d\x59\x00\x9e\xb5\x6f\xdd\xf0\x43\x5c\x47\xf9\xe4\xe3\x04\xfd\xb2\xbc\x2f\x8b\x7f\xaf\xd0\x67\xd6\x13\xfe\x13\xde\x4b\x48\x32\xb7\x7d\xab\xa3\x4f\x2b\x37\xc3\xc8\xfe\x9c\xef\x8c\x8a\x1e\xfa\x10\x2d\x17\x2d\x26\x2a\x80\x3a\x74\x1d\x89\xe5\xae\xcf\x4b\xb0\xc2\x76\x84\x24\xfc\x2b\x11\x1a\x1a\xc0\x02\xb5\x10\xdd\x96\xee\x2e\x4b\x66\x63\x57\x8a\x7e\xcd\x77\x62\x05\xb1\xed\x28\x8e\xea\x6e\xad\xa1\x4d\x46\xe8\x9d\xed\x10\xa6\x62\xa4\xd6\x19\xff\x3e\x14\x2d\xec\x5d\xf4\x7a\xb4\x76\xa3\xf8\x1e\x62\xb3\xe4\x08\x4f\x3d\x89\x57\x04\x41\x52\x8a\x37\x0a\x96\x3e\xd9\x8c\x79\xe5\x3f\x4f\x32\x63\xb1\xf7\xef\x66\x00\x93\xe8\xa2\x6e\x9d\xea\xdb\xd2\x36\x17\xb7\x64\x33\xa3\x3a\x99\xcc\x6a\xec\x3d\x46\xa2\x43\xd7\xb2\x34\x98\x18\xb0\x19\xc7\xc2\x8a\x49\xe1\x16\x41\xda\x01\xf4\xc0\x6a\xd8\xef\x48\x0e\xf5\x49\x84\x15\x19\x3b\x33\x83\x27\x7b\x3b\xb9\xfa\x36\x36\xad\xf2\xd1\x2b\x21\xe6\x1e\xd4\x21\xb5\x1e\x6b\x42\x10\x42\xd8\xa0\xda\x70\x4b\xd5\x2d\x2a\xcf\x31\xff\xb2\x85\x2a\xc7\x59\x25\x69\x24\xec\xa5\x9a\x31\x94\x7a\xef\x8c\xfc\xc2\xd9\xf9\x80\x8d\x3b\xba\x5b\x71\x47\x8f\xd0\x43\x1c\x8f\xd8\x36\xd4\xce\x38\xc8\x7c\x34\xcf\x60\xcf\x96\xf8\xa5\x1d\x3e\xdc\xfe\x22\xc9\x3e\xc4\x66\xe1\x39\x5e\x4f\xa4\xe6\x8c\xd5\xb8\x1e\x9f\x95\x24\x36\xbb\x9b\x2f\xe3\x66\x56\xfa\x7f\x00\x00\x00\xff\xff\x3d\x6a\xc1\x5c\x20\x05\x00\x00")

func definitionsInfosHclBytes() ([]byte, error) {
	return bindataRead(
		_definitionsInfosHcl,
		"definitions/infos.hcl",
	)
}

func definitionsInfosHcl() (*asset, error) {
	bytes, err := definitionsInfosHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/infos.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7c, 0xd2, 0xa0, 0xf3, 0xb7, 0xfb, 0x85, 0xed, 0xaa, 0x5e, 0x3c, 0xd, 0x12, 0x89, 0x8c, 0x26, 0x3d, 0x59, 0x9c, 0x54, 0x89, 0x36, 0x8a, 0xaa, 0x3a, 0x73, 0x73, 0xcd, 0xda, 0xcb, 0xd6, 0xe1}}
	return a, nil
}

var _definitionsOperationsHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xcd\xae\xdb\x46\x0f\xdd\xfb\x29\x08\x6d\x02\x7c\x30\xbc\xfa\xda\xdd\x5d\x05\x28\xd0\x45\xd0\x22\x77\xd1\x45\x11\x18\x73\x25\xca\x66\x21\xcd\x08\x1c\xca\x8e\x53\xdc\x77\x2f\x38\xfa\xff\xb5\x14\xdc\x2c\x82\x44\x73\x38\xe4\x39\x43\x9e\x19\x1f\xc8\x0a\x72\x6a\x62\x84\x28\x76\x05\x21\x47\xf0\xef\x01\x20\x41\x1f\x33\x15\x42\xce\xc2\x0b\x44\xe4\x41\xae\x08\x1d\x38\x75\x0c\x9f\x5d\xf1\x38\x45\x87\x03\x80\x2b\x42\xf4\xa3\x8a\x9d\x44\xdf\x29\xcb\x40\xd7\xc1\x58\xf8\xe3\xed\x1f\x8c\x05\x1c\x43\x5e\x66\x42\x45\x86\xe0\xaa\x4f\x64\x43\x12\x8f\x7c\xa3\x18\x4f\x51\xd8\xaa\x30\x6c\x72\x0f\xe1\xcf\x0b\xfc\x1d\x79\x8e\xa3\x23\x44\x89\x97\xe8\xdb\x01\xe0\xfd\xf0\xde\xa7\x90\x10\x9f\x33\xf2\xb2\x4c\xa3\xf4\x98\x84\xea\x13\x62\x8c\xc5\xf1\x03\xde\x8c\x7e\xf3\xe2\xd8\x5c\xda\xf4\x20\x0e\x74\xa7\xba\x38\x0f\xa5\x4d\x90\xc1\x68\x5c\x47\x5a\x11\xe7\x84\x78\x8d\x38\xa3\x94\x6c\xab\xcd\x0c\xf8\x02\x63\x4a\x29\xae\xf7\x99\xa3\xa8\xfb\x7d\x0b\x2b\x8c\xbe\xcc\xc4\xb7\x2b\x8e\x96\x48\x7b\xbc\xe4\x68\xc5\x7f\x34\xfb\x66\xdf\x11\x7d\x00\xcc\xdf\x30\x81\xde\xb9\x54\x40\xd4\xd2\x47\xe2\xb4\xc5\xad\xa9\x34\xcc\x76\x23\xf3\x53\x02\xf9\x59\x81\xc8\x26\xf8\xfd\xdc\x55\xb8\xb9\xc3\x43\x60\xa3\x50\x15\xbe\x95\x3c\x59\x92\xf3\x20\xf1\x1a\x7b\x45\xeb\x70\x2c\x25\x9c\x6a\x50\x18\xb9\x2e\x89\x80\x97\x5a\x85\xaa\x94\x3b\x93\xe0\xf6\x5a\x02\x1c\x8c\x66\xd4\x99\x14\xb7\xaf\x30\xcd\x7e\x84\x88\xf5\xaf\x10\xa5\xff\xf0\xf4\x03\xe7\x4e\x26\x77\xb7\x3d\xe7\xf1\xc5\xdd\xb0\x1b\x3e\x0d\x5e\x23\xa2\xeb\x5a\xfb\xc7\xd9\x4b\xc1\x98\xd2\xf7\xad\x33\x56\xa1\x77\xda\x4b\x15\x34\x72\x98\xea\xe3\x87\x9a\x4c\xbd\xe5\x1e\x9f\xa9\xd9\xef\xb5\x9a\x4d\x32\x4c\x7c\xa6\xd5\x61\xbb\xd5\x8c\xea\xdb\xec\x36\x3f\xa3\xd0\xbc\xd1\x30\x9a\xf8\xba\xa7\xa1\xbf\x6a\x40\x77\xd8\x21\x7e\xad\xee\x82\xdd\x8d\x12\x9d\xce\xbb\x79\x1c\xe1\x7e\xa5\xf8\x0a\xb1\xb1\x10\x22\x43\x82\xaa\xa1\xf6\xbb\x46\xc9\xd9\x1c\xa5\x91\x6b\x86\x15\x6b\x32\x78\x01\xe1\x12\x9b\xc2\xcd\x9b\x63\xd9\x62\x2e\x01\xa8\x1d\xfa\xd4\x43\xfa\x0e\x16\xbb\xbc\xc8\x50\x70\x4b\x86\x06\xdb\x25\x01\x63\x13\xc8\x91\x2f\xa8\x02\xe5\xb5\xa7\xc1\x6f\x94\x2d\xba\x40\x9b\x7f\xa4\x45\x68\xda\xf9\xf3\xd5\x53\xc8\x0d\x59\x31\x64\xeb\xa7\x8d\x1a\xe8\xa8\xe1\x7d\xef\xc1\xc4\x68\x64\xd5\xc0\x2a\x04\x18\xb0\x78\x6f\x36\xd2\x4b\xc9\x8b\xb1\x8b\x0e\x66\x4d\x8e\x4b\x4d\x2b\x8e\x71\x20\x6c\x82\x2a\xd5\x5a\x0d\x15\x42\xc5\xdc\x9b\xbf\xc9\x71\xc1\xd5\xf3\xba\xa0\xf6\xc3\xcd\x64\x94\x4c\x73\x84\x21\x59\x77\xec\x5d\x7c\x75\xee\x9f\xfa\x82\xc9\xb2\x69\x25\x8d\x33\xc9\x95\xfc\xa8\xa2\x69\xda\x59\x73\xf0\x62\x84\xbc\x50\x4c\xc6\x6e\x77\x88\xd7\x26\xca\x64\x5d\xeb\xf8\xee\xe3\xfa\x28\x94\x56\x9a\x62\x3f\x79\x68\xc3\xfc\x11\x7c\x19\x5f\xc1\x78\x78\xa5\x1f\x78\x84\xcf\x8a\x5c\xa4\x53\x47\xcd\x93\xaa\x74\xda\x4e\x68\x34\x10\x1d\xa9\xed\xbd\xd8\xfe\x88\x48\xd9\xe5\x4f\xda\xa3\x75\xbc\xa6\x05\x72\x14\x93\x18\x31\x1b\x6e\xd3\xb8\x64\x56\xff\x68\x48\x7e\xf2\xd0\x44\x2f\x68\xa5\xcb\x83\x6c\x8c\x26\x59\xcf\x64\x92\x20\x52\x4a\x99\x1e\x51\x6f\xef\x59\x26\x47\x88\xee\x75\xb7\x17\x86\xd8\xf7\xaf\x45\x7d\x63\x1d\x21\x72\x69\xea\x51\x16\x46\xc2\x0e\xaa\xd3\xa3\x5d\xab\x4e\xd7\xc3\x4b\x50\xae\x7a\x53\xeb\xa8\x92\x4d\x1d\xb8\xb4\x7b\x57\xed\xbf\x69\xdc\xf4\x75\xfa\xfc\x3d\xaa\xc2\x34\xce\x9d\x2e\x3b\x77\x23\x12\x6f\x13\xe9\xd8\x76\xf0\x39\xce\x8c\xf7\xfa\x21\x76\x56\xd0\xca\x59\x1e\x05\xf6\xff\x9f\x27\xbf\x3c\x11\xf5\xfd\x70\x48\x09\xb3\x24\xfc\x24\xab\x28\xe9\x26\xca\xc4\x0b\x93\xbd\x44\x87\xf7\x16\xd1\x18\xd1\x22\x02\x79\xb4\x07\x32\x3b\xee\x01\xaa\xd7\xf5\x00\x42\x56\x7a\x80\xd0\x8d\x83\xf5\xff\xbd\x56\x6c\xbf\xe8\x4a\x07\xb4\x93\x5d\x7e\xfd\x7f\x7f\x59\x2d\x76\xbd\x58\x37\xca\x53\x0d\x68\x1f\x40\xb3\x88\xdf\x05\xd9\xc8\x80\x56\x38\xb2\x21\xf8\x74\x3a\xfd\x69\x68\x08\x92\xeb\x93\x92\xfa\x8f\xe6\x45\xd0\x48\x62\x72\xa7\xaf\x68\x12\xec\xa7\xd2\xc7\xc0\x00\xf4\x5a\x3f\x42\x7a\x90\x31\xb9\x1a\x32\xc3\x2e\x34\xe0\xaa\xda\xfa\x13\x64\xbd\xe8\xce\x91\x67\x0f\xb7\xbd\x32\x06\x21\x93\x12\x6b\x53\x9b\xab\x31\xdc\x9b\x43\xce\x8d\xcf\x77\x28\x7d\x30\xae\xd7\x79\x9f\x88\xfb\x97\xce\x72\xd8\xe4\xbf\x00\x00\x00\xff\xff\x27\xca\xed\xc8\x79\x12\x00\x00")

func definitionsOperationsHclBytes() ([]byte, error) {
	return bindataRead(
		_definitionsOperationsHcl,
		"definitions/operations.hcl",
	)
}

func definitionsOperationsHcl() (*asset, error) {
	bytes, err := definitionsOperationsHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/operations.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x31, 0x99, 0x9e, 0x2a, 0xbe, 0xa6, 0xef, 0x35, 0x99, 0xba, 0x4a, 0xfa, 0x13, 0x2e, 0xe, 0x0, 0x7c, 0xf6, 0xac, 0xd, 0x6e, 0xf, 0x15, 0xde, 0xf9, 0xcb, 0xda, 0xa1, 0x43, 0xd, 0x70, 0x8a}}
	return a, nil
}

var _definitionsPairsHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\xcf\x6e\x1b\x39\x0c\xc6\xef\x7e\x0a\xc2\xa7\x64\x11\x38\x97\xdd\xbd\xe5\xb2\x0b\x14\xc8\xa1\x68\x80\xb6\xa7\xb6\x18\xc8\x12\x27\x26\x2c\x8b\x2a\xc5\xb1\x33\x2d\xfa\xee\x85\x34\x7f\x3c\x71\x26\xae\x11\x1f\x0c\x8f\xf9\xe9\xe3\x6f\x48\x4a\x5a\x44\x43\x02\x4b\xcb\x41\x31\x68\xb5\x73\xff\x2c\xe1\xe7\x02\x40\xdb\x88\x70\x07\xcb\xa4\x42\xe1\x71\xb9\xf8\x75\x22\xcc\xf1\x0b\x94\x4f\x3a\x11\xf5\x9f\xbb\x31\xb6\xfa\xbf\xd7\x2c\x00\x1c\x26\x2b\x14\x95\x38\x4c\x14\x40\x01\x8c\xf7\x20\xf8\xbd\xc1\xd4\x0b\x6b\xd3\x78\x3d\xb5\xfa\xcf\xd8\xed\xa3\x70\x13\xdc\xd5\xf5\x73\x08\x0a\x8d\xc9\xb6\x95\xf2\x16\xc3\x2c\xcf\xc0\xfe\x02\x23\x45\xb4\x54\xb7\xa0\x1b\x84\xa9\x17\x14\x2f\xa8\x59\xc0\x53\xd2\xca\x91\xc0\xf0\x3b\x0a\xd6\xf4\xb4\x9a\x40\x08\x3a\x0c\x4a\xc6\xcf\x26\xff\xeb\x18\x5f\x3d\x08\xef\xc9\xa1\x9c\x41\xd9\xf0\x01\x94\x21\x76\x4a\x38\x2e\x2e\x34\x09\x65\x4f\x16\x33\x4c\x52\x16\xf3\x88\xd9\x2a\x1a\x49\x28\xc7\xf2\x4f\x12\xe6\xc8\x11\x15\x83\x8b\x4c\x61\xbe\x6b\x43\xf0\x0d\x94\xc3\xd2\xcb\x19\x8f\xc9\x4e\x08\x9f\x22\x09\xce\xf2\x65\xee\xd7\x89\x0e\x1b\x0c\xa5\x8f\x8d\xe4\x79\xd2\x46\x02\x3a\x58\xb7\x20\x68\xec\x06\x0e\xe4\x3d\xf4\xe6\x2f\x69\xca\xe3\x7d\xf6\x1f\x38\x36\xaa\xb1\xb2\x9e\xf2\x66\xe0\x92\x2c\xcd\x77\x37\x0b\x3b\xdd\xea\x43\xaf\x9b\x81\xc4\x38\xce\x59\xef\x56\x4a\x95\x9f\xb3\x01\x74\x0e\xc7\xf4\x14\x14\xc5\x62\x54\x96\xe7\xdb\xf0\x7e\x12\x18\xd5\x9e\x6d\x19\xdb\xb7\x0f\xff\xe0\xf0\x6a\x03\x87\x54\xc1\xec\xe6\xbb\x73\x51\x9a\xde\x0e\x8a\xcb\xe8\xc9\x75\x9d\x70\x7e\x26\x29\xe8\xbf\x7f\x9f\x31\xed\x96\xf6\xb5\xa4\x34\x1c\x24\x37\x63\xa6\xd2\xf7\x84\xb8\xcd\xe3\x5a\x24\xfd\x92\x35\xd6\x2c\x98\xa7\xc3\x9d\x19\x88\x9c\x7c\xc0\xcc\xdf\x55\x64\x4f\xb6\x7d\xde\x93\x07\x43\xf2\xd0\xfd\x3f\x8a\xb3\x6f\x65\x8d\xf7\x6b\x63\xb7\x55\xdd\x04\x3b\xfb\x7e\x39\x70\xf5\xe5\xdb\xba\x55\xbc\x3e\x3b\xdc\x46\x41\xd9\x31\xe0\x1e\xa5\x05\xa5\x1d\xc2\xa1\xa3\x07\x67\xd4\x40\x2d\xbc\x83\xc4\x8d\xd8\x49\x61\x13\xfd\x78\x75\x2b\x9d\x2d\x6b\x5e\xf8\xa7\xa2\x72\xf0\x6d\x07\xe0\x69\x47\x8a\x0e\xfa\xcb\xa3\x00\x5d\x58\xd3\xde\xb1\xb2\xde\xa4\x74\xfe\xc2\x39\xb0\x6c\xf3\x41\xfc\xf6\xe9\xcb\x0e\x90\x8f\xf2\xf9\x21\xbf\xe9\x8b\xcb\x11\xa5\xdb\x0c\xe5\x3d\xd7\xb9\xcc\xde\x28\xed\x71\x9c\x21\x47\xb2\x82\x01\x08\xde\x7f\xfe\xf8\x09\x92\x1a\x51\x38\x90\x6e\xe0\xb6\x24\xe8\xcc\x86\x92\xf5\xe9\xd2\x64\xd9\xe0\x3e\xdc\x78\xca\x70\x0b\x54\x43\x60\x85\x84\xba\x82\xaf\x01\xde\xb1\x40\x9d\x4e\x5d\xa0\xb0\x05\xc7\x87\x04\xd1\x1b\xad\x59\x76\x37\xe5\x15\xd7\xb8\x31\x7b\x62\x01\x4a\xd0\x04\x87\x35\x05\x74\xe5\xae\xfa\x1d\x00\x00\xff\xff\x06\xe8\x87\x59\x0a\x08\x00\x00")

func definitionsPairsHclBytes() ([]byte, error) {
	return bindataRead(
		_definitionsPairsHcl,
		"definitions/pairs.hcl",
	)
}

func definitionsPairsHcl() (*asset, error) {
	bytes, err := definitionsPairsHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/pairs.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0x89, 0x86, 0x32, 0x69, 0xa4, 0xee, 0x44, 0x46, 0xc4, 0x79, 0x3f, 0xcc, 0x58, 0xf1, 0x24, 0xce, 0x0, 0x7c, 0xc9, 0xdc, 0xb5, 0xba, 0xa2, 0x8a, 0xb, 0x64, 0x5a, 0xf0, 0x2d, 0xd7, 0x3d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
	"definitions/infos.hcl":               definitionsInfosHcl,
	"definitions/operations.hcl":          definitionsOperationsHcl,
	"definitions/pairs.hcl":               definitionsPairsHcl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": &bintree{nil, map[string]*bintree{
		"definitions": &bintree{nil, map[string]*bintree{
			"tmpl": &bintree{nil, map[string]*bintree{
				"function.tmpl":  &bintree{cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl":      &bintree{cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl":    &bintree{cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": &bintree{cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl":      &bintree{cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl":   &bintree{cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
	"definitions": &bintree{nil, map[string]*bintree{
		"infos.hcl":      &bintree{definitionsInfosHcl, map[string]*bintree{}},
		"operations.hcl": &bintree{definitionsOperationsHcl, map[string]*bintree{}},
		"pairs.hcl":      &bintree{definitionsPairsHcl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
