// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/function.tmpl (332B)
// tmpl/info.tmpl (1.699kB)
// tmpl/object.tmpl (1.814kB)
// tmpl/operation.tmpl (1.02kB)
// tmpl/pair.tmpl (482B)
// tmpl/service.tmpl (8.909kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcf\x4a\xc4\x30\x10\xc6\xef\x7d\x8a\x8f\x25\x87\xee\xb2\xe6\x01\x04\x4f\x45\x41\x10\x59\xd4\xbb\x0c\xd9\x74\x0d\x36\x93\x92\x4c\xeb\x42\xcc\xbb\x4b\x5a\x75\xf1\xe0\x29\x21\xbf\xc9\xf7\x67\x72\xbe\x42\x24\x3e\x59\xa8\xd7\x3d\xd4\x8c\xeb\x1b\x28\x7d\x37\xb1\x49\x28\xa5\xa9\xd8\xf5\xe0\x20\x50\xb3\xbe\xf7\xe3\x60\xbd\x65\xb1\xc7\x1f\xa8\x7a\x7e\x5f\xfe\xcc\xfa\x91\xbc\xc5\x27\x24\x74\xe4\xed\x50\x07\xfa\x89\x0d\xda\x84\x5d\xce\x50\x17\x7e\xa0\x64\xa8\x0e\x6c\x91\x73\x15\x28\xa5\x35\x72\x86\x09\x2c\xf6\x2c\xba\x5b\xcf\x7d\xa5\xb3\x3e\x50\x24\x9f\xf4\x4b\x74\xfe\x81\x92\xe8\x67\x89\x8e\x4f\xb7\x7c\x4c\x1f\x4e\xde\xba\xe0\x3d\x95\x82\x30\x0a\x76\x23\xb9\xf8\x8f\x55\x7d\xae\x51\xff\xfa\xb7\x8b\xc3\x93\x4d\xd3\x20\xe9\x5b\x79\x89\xd5\x00\xc0\x48\xec\x4c\xbb\xa9\xe5\xdd\xa5\xf9\x66\xdb\xac\xd5\x2d\xff\x6e\x61\xbd\x7e\x05\x00\x00\xff\xff\x3b\x1f\xad\x5f\x4c\x01\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0x53, 0x97, 0x24, 0x27, 0xb1, 0x48, 0xc, 0x9a, 0xff, 0xbf, 0xcc, 0x50, 0x35, 0x3e, 0xf2, 0xfd, 0x26, 0xfd, 0x33, 0xa9, 0x5, 0x3f, 0xa2, 0x4c, 0x9b, 0x7, 0xfa, 0x1a, 0x11, 0xb7, 0xe0}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xf5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x93\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\x64\x27\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x93\xa6\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x63\xb1\xc6\x52\x6f\x62\x08\xe5\xc8\x28\x5e\xa6\x99\xcc\xdf\xe1\xf4\x0a\x97\x57\x37\x38\x3b\x3d\xbf\x99\xb1\x8a\x67\x2b\xbe\x24\xb8\x75\x45\x96\x31\x21\x2b\x6d\x1c\x26\x0c\x00\x46\x85\x74\x23\x96\x30\xd6\xb6\x07\x30\x5c\x2d\x09\xe3\xd5\x14\x63\xa1\x0a\x6d\xf1\x76\x8e\xd9\x79\x58\x5d\xf0\x0a\xde\xb3\xb6\xc5\xd8\x92\x69\x44\x46\x97\x5c\x52\xd8\x1f\xaf\x70\x07\xa7\x4f\xb8\xa4\x32\x1c\x61\x69\x8a\xf7\x82\xca\x1c\x42\xe5\x74\x0b\xa1\xd0\xb6\xdb\x49\xde\x63\x21\x1c\xcb\xb4\xb2\x01\x62\x47\xb7\x89\x35\x3b\x75\xef\x23\xe2\x6e\xfa\x79\xa8\x1b\x48\x9a\x59\x84\x08\xf2\x9f\xb8\xcd\x78\xd0\xc7\x1c\x47\xc7\xc7\x61\x77\xd5\x01\x1f\x80\x54\x1e\x96\x09\x63\xc1\x00\xec\xf6\x30\x4c\xb7\xce\xd4\x99\x43\xdb\x2b\x6f\xd8\xbe\x3d\xc5\x16\x30\x6e\xd6\x55\x57\xcb\xfb\xad\x2f\xf7\x67\x36\x0c\x31\x4e\xd3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\x17\xdf\x29\x73\x68\x78\x59\xd3\x14\x87\x90\xc4\x95\x85\xd2\x0e\x96\xdc\x14\x47\xfd\x07\x4b\x2e\x96\x8a\x75\x84\x72\x6f\x5e\xc7\x50\x42\xf2\xea\x8b\x75\x46\xa8\xe5\xd7\x38\x10\x05\xcf\xa8\xf5\xac\x57\x7e\xde\xeb\xb0\x2b\x8a\x40\x7f\x76\x1b\x27\xc4\x7b\x56\xd4\x2a\xc3\x44\xe2\xd5\xb3\xae\x25\xf8\x40\xae\x6b\xfc\x54\xd8\xaa\xe4\xeb\xde\x8d\x49\x32\xf4\xa3\xf7\xd5\x90\xab\x8d\x82\x9c\x3d\xb0\x2f\x90\xfe\xa9\xe6\xf5\x13\x9a\xcd\x50\x33\xf9\x4d\xa1\x9e\xe9\x11\x18\xcc\xd1\x0c\x78\x59\x3f\x50\xa5\x8d\xac\xff\xc0\x9d\xc9\x00\x75\x8a\x85\xd6\x65\xd2\x13\x89\x02\x72\x16\x6e\xf8\xe5\x9e\x4f\xe0\xc5\x1c\x87\x7d\x8d\xe7\xdd\x9e\xc2\x99\x9a\xe2\x41\xbf\xdd\xe8\x16\xd4\x1d\x7e\x90\xd1\x9f\xc3\x3c\xc6\x84\x82\x97\x96\xf6\xb9\xa5\x8b\xda\xba\xfd\xa6\xe3\xaf\xfb\x9e\x0f\xfb\xae\xb8\x12\xd9\xa4\x90\x6e\x76\x5d\x19\xa1\x5c\x31\x19\x3d\xc6\xfa\x91\x16\x7c\x71\xff\x72\x7f\xdd\xbd\xd8\x3c\xbb\x51\x92\x3c\xb4\xe8\xbf\x99\xdd\xce\xca\xbb\xf9\x7e\x5e\x3e\x3a\xf6\xdd\x3f\x6c\xe7\x97\x76\xbf\xfc\x19\x00\x00\xff\xff\x1a\xaf\xa4\x3e\xa3\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbe, 0xfc, 0x4d, 0xd5, 0xaa, 0x43, 0xd, 0x38, 0x2a, 0xe9, 0x1b, 0x28, 0x33, 0xa1, 0xf, 0x25, 0xb3, 0x72, 0xf8, 0xb5, 0xf, 0xf, 0x28, 0x3d, 0xdd, 0x4d, 0x3d, 0x95, 0x9e, 0xd1, 0x56, 0x3e}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\xc1\x6e\xdb\x3a\x10\x3c\x9b\x5f\x31\xcf\x08\x1e\xa4\x07\x3f\x29\x69\x8b\x1e\xda\xf8\xd4\xa4\x45\x0e\x49\x0a\x24\xe8\xa5\xe8\x81\x96\x56\x0e\x1b\x89\x14\xc8\x95\x6b\x57\xd1\xbf\x17\xa4\x64\xd7\x4e\xdc\xc2\x41\x2f\x3d\x99\x4b\xee\x0e\x77\x38\xa3\x75\x9a\xe2\x9d\xc9\x09\x73\xd2\x64\x25\x53\x8e\xd9\x0a\x73\xb3\x89\xa1\x34\x93\xd5\xb2\x4c\xb3\x2a\x7f\x8b\xb3\x6b\x5c\x5d\xdf\xe2\xfc\xec\xe2\x36\x11\xb5\xcc\xee\xe5\x9c\xc0\xab\x9a\x9c\x10\xaa\xaa\x8d\x65\x44\x02\x00\xc6\x45\xc5\xe3\x7e\xc5\xaa\xa2\x61\xe9\x56\x3a\x1b\x8b\x58\x88\x34\xc5\x7b\x45\x65\x0e\xa5\x73\x5a\x42\x69\x98\xd9\x57\xca\x18\x33\xc5\x22\x33\xda\x79\x9c\xb6\xfd\x1f\x56\xea\x39\xe1\xe8\x7e\x82\xa3\x05\xde\x4c\x91\x5c\x87\xbc\x4b\x62\x89\xae\x0b\xa8\x7d\xe5\x85\x07\x6a\x5b\x1c\x2d\x92\x2b\x59\x11\x1e\xc0\xe6\xa3\x74\x99\x2c\xd1\x75\x68\x94\xe6\xd7\xaf\x30\xc5\xc9\xe9\xa9\x4f\xba\xf7\xc5\x1e\x9f\x74\xee\x97\xb1\x10\x9e\x05\x7a\x74\x38\xb6\x4d\xc6\x68\x0f\x6d\xc1\xa7\xa9\xc2\xdf\x7d\x46\x2e\xb3\xaa\x66\x65\xf4\xfa\x10\x69\x8a\xbe\xb1\x3d\x87\x5b\x3d\xf4\xa1\xcf\xbb\x5d\xd5\x14\x48\x74\xdd\xd6\xce\xa3\x96\xc5\x28\x4d\x91\x95\x8a\x34\x43\x39\xf0\x1d\x6d\x22\x8d\x6f\x77\x2a\xbb\x5b\xb3\x51\x0e\xb2\x54\x0b\x4a\xc4\x68\xc8\xb8\x61\x63\xe5\x9c\x6c\xc0\xa8\xe0\xd8\x58\x72\xe1\xc7\xeb\x69\xa9\x0c\x4e\xa8\x88\x65\x2e\x59\x26\xa1\x35\x1f\xa1\x92\xf5\x67\xc7\x56\xe9\xf9\x97\x60\x8c\x42\x66\xd4\x76\x42\x0c\x34\x67\x8a\xd1\x38\xca\x21\x1d\xa4\x8f\x2a\x59\xa3\x30\x76\xad\xee\x42\x96\x0d\x4d\x70\x8c\x8a\xa4\x76\xd0\x86\xe1\x88\x27\x38\x19\x36\x1c\x71\x80\x0a\x38\x41\x32\x31\xca\x8d\xa6\x10\xbc\x7c\x21\x46\x95\x3f\xf5\x2e\x4a\x2e\x1b\xa6\xa5\xe8\x84\x38\x44\xa3\x9f\xfa\x9c\x2f\x83\x49\xbb\x4e\x14\x8d\xce\x10\x19\xfc\xd7\xa7\xc6\xf8\x40\x3c\xc8\xa4\x5c\x5d\xca\xd5\xa0\x40\x14\xef\x6a\x80\x36\xb4\x68\x89\x1b\xab\x61\x92\x27\x92\xf9\xa6\x9e\x80\xdf\xfc\x02\x7c\xb1\x0b\x1e\xaf\x2b\x86\x5b\xf6\xc0\x63\x8a\xc5\x4e\x07\x62\xb0\x45\xe9\xc2\xed\xcf\x21\x16\xed\x5c\x3e\xc1\xcc\x98\x32\xde\x5c\xed\x58\x72\x14\xf7\xe2\xaa\x02\x26\xf1\xb2\xfc\x7b\xd0\xf7\xf6\xcf\x14\xc7\x03\xce\xef\x1f\x6b\x02\xb6\x0d\x85\xc4\xc1\x46\x43\xee\x56\x67\x0f\xf8\x4e\xd6\x7c\xf2\xde\x09\x15\x85\x2c\x1d\xed\x7d\xe5\xcb\xc6\xf1\xf3\x64\xfc\x23\x96\xd3\x5d\x96\xb5\xd4\x2a\x8b\x8a\x8a\x93\x9b\xda\x2a\xcd\x45\x34\x1e\x7c\xbf\x85\xd0\x75\xfe\x7b\x1c\x9c\x3f\x8e\xe3\x81\xfa\xdf\x61\xa9\x9e\xfc\xc3\xf4\x10\xf6\x7b\x3d\xd8\x8f\xa6\xed\x29\xf5\xa4\xed\xac\x34\x9a\xa2\xe5\xd6\x4e\xbb\x99\x84\x87\x4c\xfb\xbd\xed\x2f\xf7\x3d\xda\xa3\xf9\x3a\x94\x87\x39\x16\x2a\xfc\x4a\x6c\xf1\x0e\x9b\xfe\x0f\xa8\xfb\x11\x00\x00\xff\xff\x3a\x17\x13\x47\x16\x07\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3, 0x1d, 0xe1, 0x85, 0x23, 0xe1, 0xbf, 0xf2, 0x9b, 0x5d, 0x28, 0x13, 0xe5, 0xe, 0x9e, 0x3d, 0x9f, 0xa2, 0xf6, 0x5e, 0x71, 0x3d, 0x6c, 0xa4, 0xb6, 0xc1, 0x26, 0x1f, 0x67, 0xa4, 0x7b, 0xf2}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xcd\x6a\xe3\x30\x10\xbe\xeb\x29\x06\xe3\x83\x0d\x59\xfb\xbe\xb0\x87\x65\x97\x42\x2f\xad\x69\x0f\x3d\x16\x55\x95\xdd\xa1\xb6\xa5\x4a\x4a\x48\x50\xf5\xee\x65\x64\x25\x38\xc6\x25\xa5\xf4\x66\xcf\xcf\xf7\xa3\xf9\x34\x17\xaf\xbc\x93\xe0\x0e\x5a\x5a\xc6\x70\xd0\xca\x38\x28\x18\x00\x40\x26\xd4\xe8\xe4\xde\x65\xd3\x1f\xaa\x8c\x95\x8c\x79\xff\x0b\x0c\x1f\x3b\x09\xf9\xe3\x06\x72\x84\xdf\x7f\xa0\xba\x1e\x9d\x34\x2d\x17\xd2\x42\x08\xcc\x7b\xc8\xb1\xfa\x2f\xad\x30\xa8\x1d\xaa\x91\x8a\xc4\x00\xa9\x83\x56\xf7\xfc\x70\xc3\x07\x09\x21\x00\x1e\x97\xc1\x47\x26\x62\xc0\x16\x94\x81\x42\xbe\xd1\x7c\x1c\xcc\xac\x34\x3b\x14\xd2\x64\xe5\xa2\xee\x94\xe1\x1d\xd5\x43\x88\xfb\xf7\xce\xe0\xd8\x15\x25\xd8\xf8\x71\xc2\x94\xe3\x33\x09\x49\xff\x73\x13\x4a\x93\x8b\x1c\xab\x5b\x1d\x0d\xd0\x44\x5d\x47\xb5\x4a\x4f\x34\xef\xe0\x54\xc3\xad\xe0\x3d\x49\x4e\x9d\x85\xc5\x04\xbc\xbe\x53\xa4\xce\x95\x32\x03\x77\x0d\x37\x7c\x20\xae\x12\xce\x1b\x77\xd2\x6e\x7b\x67\x1f\xd0\xbd\x34\xd3\x6d\xce\x5c\x66\xb4\x72\x51\x1f\x6d\xff\x9b\x8e\xf7\x1d\xa9\xb3\xf5\x42\xb8\x3d\xa4\x1c\x54\xa9\xb6\xf9\x61\x27\xde\x1f\x4f\x13\xd8\xfc\x4e\x31\x31\x0d\x47\xd3\xa8\x1e\xc5\x81\xce\xb9\x15\x2e\x85\xe4\x6f\xdf\xc3\x93\x52\xfd\x17\xf3\x88\x2d\x8c\x72\x25\x4b\xd4\xae\x6b\xd0\x1c\x8d\x85\x56\x99\x79\x18\xfd\x69\xfe\xec\x75\x96\x8c\x6b\xe1\xf9\x3c\x39\xab\xa2\x77\x11\x41\xe9\xaa\x89\x3a\x2e\x81\x50\x63\xb7\xc0\x3d\xc1\xa6\xd7\xbb\xf8\x19\xd8\x47\x00\x00\x00\xff\xff\xf0\x4f\x23\x75\xfc\x03\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xac, 0x77, 0x38, 0x72, 0x67, 0x12, 0xac, 0x40, 0x5c, 0xb6, 0x92, 0x9, 0x6e, 0xd8, 0xf4, 0xde, 0x4d, 0x9e, 0x30, 0x85, 0x95, 0xa4, 0xa1, 0x26, 0x9b, 0x9c, 0xa9, 0xe4, 0xd9, 0x43, 0xc0, 0x37}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xc1\x6a\xf3\x30\x10\x84\xef\x7a\x8a\xc1\xf8\x90\x40\x62\xc1\x7f\xcc\x4f\x4f\x4d\x0f\xa5\x90\xe4\x10\xda\x63\x51\xe4\xad\x22\x62\x4b\x42\x5e\xbb\x35\xae\xdf\xbd\xc8\x4e\x03\xa5\x97\xea\xa4\xfd\x66\x67\x98\x95\x12\xf7\xbe\x24\x18\x72\x14\x15\x53\x89\x53\x0f\xe3\x6f\x33\xac\x63\x8a\x4e\x55\x52\xd7\xe5\x7f\x6c\xf7\xd8\xed\x8f\x78\xd8\x3e\x1e\x0b\x11\x94\xbe\x28\x43\x08\xca\xc6\x46\x08\x5b\x07\x1f\x19\x0b\x01\x00\x99\xf6\x8e\xe9\x83\x33\x31\x8f\xc6\xf2\xb9\x3d\x15\xda\xd7\x52\xf9\x66\x5d\x52\x27\x8d\x5f\x37\xec\xa3\x32\x24\xbb\x7f\x32\x5c\x8c\x3c\x33\x07\x5d\x59\x72\x9c\x4d\xae\xe2\x0f\x3e\xee\x03\x35\x99\x58\x0a\x31\x0c\x6b\x44\xe5\x0c\x21\x7f\x5d\x21\xef\xb0\xb9\x43\x71\x48\xdd\x30\x8e\x93\x9a\x07\xa7\x6a\x4a\x3c\xef\x8a\x5d\xfa\x7e\x82\xfd\x41\x35\x5a\x55\x69\x47\x4a\xbc\x58\x3e\x0f\xc3\xf7\xe6\x38\xe2\xdd\x56\x15\x54\x08\x55\x8f\xc4\xaf\xbe\x71\x44\xa7\xaa\x96\xc0\x1e\xfb\xc0\xd6\xbb\x46\xcc\xf2\x96\x1a\x1d\xed\x84\x52\xe4\x5b\xeb\xf4\xaf\xd0\x45\x77\xcd\x3a\xf6\x21\xcd\x4b\xa4\x9a\x18\xa6\xa3\x23\x71\x1b\xdd\x44\x66\x90\xde\x13\xf5\x1b\x64\x3f\x0a\x64\xab\x9b\xfa\x9c\xaa\x6c\xd0\xcd\x64\x14\xf3\xb5\xe4\xca\xd4\xe0\x2b\x00\x00\xff\xff\x50\x88\x80\xcd\xe2\x01\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x73, 0x89, 0xf6, 0xc, 0x82, 0x8, 0xa1, 0x92, 0x58, 0x90, 0x90, 0x68, 0xb9, 0x22, 0x18, 0xee, 0x5e, 0xb3, 0xec, 0x29, 0x1c, 0xeb, 0xe4, 0x82, 0xaa, 0x9e, 0xe5, 0x44, 0x4f, 0x66, 0xf3, 0xda}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x6f\xdb\xb8\x1d\x7f\xef\x4f\xf1\xaf\xe0\x0e\x52\xa1\x48\xdb\x5e\x66\xf0\x8b\x2d\xed\xb2\xa2\x43\x12\x2c\xd9\x15\xb8\xeb\x21\x60\x24\xca\xe6\x45\x22\x55\x92\x56\xe2\x73\xf4\xdd\x0f\x7c\x90\x44\xc9\x92\x63\x17\xc5\xf5\x0e\x4d\x5e\x04\x32\xf9\x7f\x7e\xe2\x4f\x54\x1c\xc3\x19\x4b\x31\x2c\x31\xc5\x1c\x49\x9c\xc2\xdd\x06\x96\xac\xfd\x0d\x15\x41\x40\xa8\xc4\x9c\xa2\x3c\x4e\x8a\x34\x16\x98\x57\x24\xc1\xff\x80\xb7\x97\x70\x71\x79\x03\xef\xde\xbe\xbf\x89\x66\x25\x4a\xee\xd1\x12\xc3\x76\x0b\xd1\x05\x2a\x30\xd4\xf5\x6c\x46\x8a\x92\x71\x09\xfe\x0c\x00\xc0\x4b\x18\x95\xf8\x51\x7a\xe6\x17\x61\xde\xcc\x3c\x2d\x89\x5c\xad\xef\xa2\x84\x15\x31\x62\xe2\x24\xc5\x55\xbc\x64\x27\x42\x32\x8e\x96\x38\xae\xfe\x1e\x97\xf7\xcb\x18\xd3\xb4\x64\x84\x36\xdc\x07\xf1\x24\x1c\xa7\x98\x4a\x82\xf2\x63\xb8\x56\x52\x96\x49\x4e\xf0\xe1\xba\x6c\x44\x84\xa1\x8f\x0e\xe0\x90\x9b\x52\x91\x07\xb3\x59\x85\x38\xdc\x42\x67\x69\x74\xc5\x59\x45\x52\xcc\xed\x4e\xe3\xf7\x70\xfd\xda\x08\x6b\x7e\x36\x26\x44\xd7\xe6\xe1\x1d\xe7\xac\xd9\xeb\x1c\x8a\x2e\x4b\x49\x18\x15\xb3\x59\x1c\xc3\xcd\xa6\xc4\x40\x04\xc8\x15\x06\x65\x0f\x64\x8c\xf7\xd2\x97\x30\x2a\xa4\x21\x5b\x80\xe7\xec\x78\x9a\xdf\x6a\x02\x54\x21\x92\xa3\xbb\x1c\x43\x89\x08\x17\x91\xe5\xf3\x67\xdb\xed\x09\x70\x44\x97\x18\xe6\xb7\x21\xcc\x2b\x38\x5d\x40\x74\xa5\x68\x94\x74\x15\x2a\x45\x41\x32\xa0\x4c\xc2\xbc\x8a\xce\x73\x76\x87\xf2\x6e\x4f\xad\xbd\xc5\x22\xe1\x44\x5b\xdd\xdf\xf8\xf7\x3a\xcf\xad\x39\xd6\xba\x79\x63\xde\xad\xa1\x68\x8d\x6d\x34\x61\x9a\x2a\x19\xce\x63\x30\x7b\xc6\xc8\x29\x03\xd5\xfa\xbc\xa4\x4a\xc3\xe9\xa2\x55\xf6\x04\x92\x5d\x21\x91\x18\x9a\x38\x86\x8f\x44\xae\x94\x31\x86\xb2\xae\xe1\x81\xe4\x39\xa0\xb2\xcc\x37\xd0\x33\x12\x2a\x94\xaf\x31\x48\x06\x4d\x86\x46\xdd\xcf\xd6\x34\xd9\x11\xea\x57\x56\x96\xce\x54\x5d\x07\xa0\xcc\x87\xad\xf6\x5b\xfd\x71\x2c\xd7\x9c\xea\xd5\x6e\xf1\x03\xde\x9c\xee\x86\x32\x6c\xf7\x7f\x50\x06\x9d\x42\x65\x56\xea\x59\x2f\x6e\xce\xe3\x44\x04\xdf\xd3\x8c\x1d\x9c\xe6\x67\x02\xe9\x88\x50\x21\x21\xa2\xcc\xd1\xa6\x29\xd2\xc6\xde\x4e\xce\x62\x82\xca\x31\xba\x61\xb0\x5d\x73\x61\xd5\x97\x9c\x50\x99\x81\xf7\x5a\xbc\x16\x1e\xf8\xf3\x2a\xba\x4e\x58\xe9\x9a\x13\xe8\xd5\x33\x24\xf1\x92\xf1\x4d\x6f\xa3\x6f\x28\xfe\x0c\x2d\xbb\xc7\xee\x7e\xc1\x89\xf4\x86\xe6\xba\xda\x17\xe0\x5d\xf6\xa9\x06\xe6\xc6\x31\x9c\x63\xb9\x5b\x4c\x4b\x2c\x47\x4b\x29\xe3\xac\x80\x02\x4b\x94\x22\x89\x22\x2d\x42\x57\xcf\x40\x88\x5f\xc0\x9b\xa1\x2d\xaa\x84\xfc\x5e\x49\x85\x70\xc7\x58\x1e\x80\x2d\xaa\x2a\x04\x76\xaf\x02\x56\x44\xe7\x58\xfa\xbd\xe6\x3b\xe9\x37\x5f\xa0\x19\x48\x06\xaf\xd8\xbd\xe5\xee\x52\xf9\x23\xe6\x4c\xd7\x99\x1b\x19\x5b\xad\x46\x8c\x4b\x11\x42\x86\x72\x81\xbb\xe0\xe4\x62\x9a\x51\x1b\xfe\x04\xbf\xee\xe3\xef\x82\x6b\xfe\x5b\x01\x55\xd4\x77\x3e\x08\x41\xf2\x35\xb6\x84\x4d\x32\x84\x89\x63\x17\x76\x9d\x0d\x31\x91\x0d\x42\x25\x1b\xcb\x86\x38\x24\x1b\x21\xec\x74\xf8\x08\x95\x8d\xae\x75\xa2\x88\xae\x9f\xc9\x4c\x08\x55\xe0\x38\x3f\xd1\xdd\xa3\xcd\xad\x44\x88\x12\x25\xb8\xd7\xe1\x12\x17\x65\xae\x10\x83\xa7\xce\x81\x5b\x8a\x1f\x3c\x28\xd0\x3d\xbe\xce\xd5\x29\xe1\x8f\x35\x77\xa0\x17\xf1\xc3\xb4\x18\xe1\xca\x68\x24\xe8\x99\x45\x93\x09\xed\x2a\xb0\x7a\x86\x3e\xc7\x3a\xf4\x33\xc5\x19\xa1\x9d\x5e\x47\xf8\xbc\xa4\xca\x71\x42\x53\xfc\x08\x11\xfc\x75\x62\x40\xcd\x55\x76\x5d\xc2\xbf\x69\xd9\xcd\xf6\x30\x8e\x86\xbc\x37\x14\x86\xee\xf7\x5c\x28\x29\xcc\xab\xdd\xe9\x60\x1f\xc7\xbc\x30\x49\xe8\xce\xab\xbe\x13\xcd\x7a\x46\x77\x6d\xb6\x1b\xba\xcb\xe7\x19\x1d\x1b\xcb\xea\x80\x53\x4a\x4c\x01\x43\x5d\xab\x07\xc5\x52\xd7\x0d\xac\x28\x11\x17\x38\x05\x21\xf9\x3a\x91\x33\x0d\x32\x06\x1c\x8a\xa1\xae\x2d\x85\x2d\x61\x1d\x7f\xf8\xe9\x67\x75\x60\xb5\xfd\xf6\x3f\xfc\x79\x4d\x38\x4e\xcd\xee\x58\x4c\xd5\x46\x63\x6e\x4b\x6d\xc3\xf5\x1f\x24\xb4\x52\x44\xf8\x88\x2b\x00\x7a\xbe\x75\xe7\xd1\x24\x59\xb7\x6d\x5b\x71\x62\x54\x9b\x53\x1c\xe5\x87\x59\xdb\x52\x7f\x6d\x6b\x0f\xb6\xf7\xbc\x45\xff\x07\x19\xdc\x91\xff\xde\xf1\x6d\xca\x8e\x0b\x7c\x35\x51\x7b\x7a\x10\x6b\x0a\x03\x84\x84\xee\x1e\x3d\x81\xdf\x4c\xd4\xab\x01\x56\xfb\xa4\xfa\xac\x94\x4d\x4d\x06\xe0\x4f\x09\x0a\x01\x2b\xe0\x1d\xb4\xc3\x58\xac\x73\xa9\xa2\xf6\x97\x09\x86\x0e\x90\xe9\xc0\x9f\x82\xd2\x13\xba\x67\x8d\x42\xe5\xb7\xea\x08\x38\x5d\xd8\x74\x68\x53\x3a\x46\xf1\x40\x64\xb2\x82\x2a\xfa\x80\x37\xce\xf2\x78\xcf\x1c\xd9\x37\xea\x2f\x41\x02\x77\x79\x71\xc0\xe2\x69\x4b\xd2\xf9\x1a\x3d\x53\x09\x8b\xee\x2c\x1d\x30\xee\xe7\xaa\x22\x7d\x8c\x9b\xa3\xd9\x2d\x90\xa0\xe7\x96\x53\xd5\xd3\x9d\x78\x64\x37\xfe\xf9\x63\x30\xd6\xdd\xc7\x76\xf8\x11\x51\xd0\x90\xa7\x81\x88\x09\xa3\x15\xe6\xd2\xa9\xf8\x69\x1f\xfd\x69\x0f\x83\x9e\x06\x92\x41\x0b\x27\xbf\x4a\xfc\x0f\xcf\x81\xb2\xaf\xc7\x5a\x1b\x20\xba\x6b\xcc\xc1\xd6\x74\xb0\xb4\x95\xb9\x2f\xa1\xb5\x3b\x1d\x8e\xe8\x65\x05\xc2\x0f\x33\x69\xe7\xd5\x91\x92\x3c\xec\xae\x18\x2e\xf0\x83\x1a\x83\x8d\x7c\x7d\xd5\xe0\x1b\x84\xd1\xab\x8b\x93\xa6\x32\x77\xa6\xb8\x8b\x54\x8d\x49\xa1\xd2\x31\xdb\x8f\xc9\xfe\xd8\x48\xa6\xe5\x78\xc1\x32\x2f\x58\xe6\x9b\x63\x19\x5f\x98\x77\x44\xbd\x19\xbc\x20\x9b\x17\x64\xf3\x82\x6c\xbe\x32\xb2\x11\xd1\x77\x8c\x6d\xb6\x5b\x92\x01\x35\x97\x12\x9e\xfd\x12\xd0\xbb\xe0\x74\xdc\x11\x91\xd2\x79\xc5\x72\x92\x6c\xa2\x7f\xe6\x39\x3c\x3d\xf5\xd7\x9c\x81\x37\xbd\x75\x18\x60\xe9\x3b\x3d\x0d\x5e\xfe\x4f\xc5\xba\x2c\x19\x97\x0d\x7e\xa9\x82\x1d\x19\xbb\xce\x6c\xb7\x2a\x1e\x23\x5e\x7e\x39\xd4\xb3\x62\xf5\xfd\xcd\xb8\xf2\x91\xca\x4f\x71\x86\xd6\xb9\xec\x17\xe7\x41\x29\x39\x32\x1d\x63\x65\xf8\xe5\x41\xad\x67\x07\x05\x33\x61\x54\x12\x3a\x28\xc5\x61\x8c\xbe\x4b\x14\xec\x5c\x6d\x7e\xeb\xdb\xc9\xc6\x94\x23\x6e\x28\x27\xdd\xd9\xef\x8d\xbb\x37\x06\xf0\xc1\x42\xad\x67\x30\x3e\x98\x13\xc3\x2d\x6e\xfd\x38\xf6\x89\x31\x8e\x1b\xf2\x9b\x15\x11\xd0\xd8\x69\xe0\x58\xc2\xb1\x8a\x00\x02\xfb\x3d\x1b\xee\x36\x4d\x43\x3a\x37\xfb\x06\x80\xcd\x4b\x5a\xd7\x81\xa3\xd4\xd7\x57\x9e\xd1\x15\xe2\xa8\x10\xd1\xb5\xe4\x84\x2e\xed\xf7\x16\x53\xad\xaa\x0c\xdc\x8d\xae\x0a\x13\xf9\x68\x5f\xa8\x95\xd6\xe8\x5f\x28\xb9\x5f\x72\xb6\xa6\xa9\x1f\x0c\x2b\x55\x38\x3d\xfc\x91\xc8\xd5\x99\xe1\xf1\x13\xf9\x18\x42\xcf\x82\x33\x94\xe7\x98\x77\x25\xba\x1b\x26\x87\x7f\x4f\xc4\xf6\xf9\x3c\xb0\xa0\xf5\xc0\xae\x0d\x2c\x3a\x2a\x26\x29\xce\x30\xd7\xca\xfd\x60\x3b\x98\x17\xba\x13\xe5\xaa\xa9\x09\x2b\xfe\x0a\xc9\x95\x71\x7a\x38\x1a\xed\x77\x29\x44\x53\xf0\xf1\x67\xcb\xec\x79\x81\xfd\xe5\x0c\xd5\x60\xec\xa0\x33\xa3\x44\xae\x60\x01\x5e\xf8\xc9\xfb\xe4\xed\xcc\xde\x91\x41\xae\xfe\x30\xe7\xa0\xd0\x44\xc6\x78\x81\xa4\x99\x23\x9e\x71\x5d\xd5\xb1\xfe\x54\xa3\x68\x5a\x05\x75\x0d\x5d\xc6\x6b\x27\xfb\x15\xe2\x0a\x42\x4f\xbf\x1a\x34\x84\xac\x94\x61\xab\x77\xef\xcb\x81\x86\x55\x9d\x06\x92\x69\xb6\x57\x0b\x35\xa8\x06\xa7\x83\xa9\x3d\x67\x40\x8f\x56\x65\xbf\x3f\xcf\x50\x81\x35\x3a\xda\xad\xcc\x1b\x4e\x8a\xff\x22\x21\x6d\x89\xbe\xa3\xa9\x7a\x1d\x58\x9d\xb1\xa2\x40\x75\xad\x5c\x68\x6a\xb6\x8b\xeb\x6f\x01\x00\x00\xff\xff\xe2\x22\x7c\x5a\xcd\x22\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2a, 0x33, 0xd7, 0xab, 0x92, 0x24, 0x5, 0xbb, 0xce, 0x6b, 0x4c, 0x18, 0x82, 0xd9, 0x28, 0x65, 0xe2, 0x9e, 0xef, 0x24, 0x29, 0x5a, 0xf1, 0x77, 0xd5, 0x2a, 0x7, 0xcb, 0x67, 0xec, 0x97, 0x52}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl":  {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl":      {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl":    {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl":      {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl":   {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
