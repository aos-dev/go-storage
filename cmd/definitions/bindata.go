// Code generated by go-bindata. DO NOT EDIT.
// sources:
// cmd/definitions/tmpl/function.tmpl (567B)
// cmd/definitions/tmpl/info.tmpl (1.702kB)
// cmd/definitions/tmpl/object.tmpl (1.907kB)
// cmd/definitions/tmpl/operation.tmpl (2.051kB)
// cmd/definitions/tmpl/pair.tmpl (502B)
// cmd/definitions/tmpl/service.tmpl (10.739kB)

// +build tools

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\x8f\x25\x87\xae\xec\xe6\x07\x08\x9e\x8a\x82\xb0\xc8\xa2\xde\x25\x64\xa7\x6b\xb0\x99\x94\x66\x5a\x17\x62\xfe\xbb\xa4\x55\x17\x11\x0f\xde\x3c\x25\xcc\xcc\x7b\xf3\x3e\x26\xa5\x2d\x06\xc3\x47\x82\x7a\xda\x40\x4d\xb8\xbc\x82\xd2\x37\x23\xdb\x88\x9c\xab\xd2\x76\x2d\x38\x08\xd4\xa4\x6f\x7d\xdf\x91\x27\x16\x3a\x7c\x36\x55\xcb\x2f\xb3\x66\xd2\x77\xc6\x13\xde\x20\xa1\x31\x9e\xba\x65\xa0\x88\xd5\xa4\x77\xc1\x9a\xb9\xd2\x8e\x6c\x51\x47\x5c\xa4\x04\x75\x56\xec\x4d\x5c\x06\xd6\x48\xa9\x58\xe6\x5c\xa7\xa4\x26\xbd\x37\x83\xf1\x51\x3f\x0e\xce\xef\x4c\x14\xfd\x20\x83\xe3\xe3\x35\x1f\xe2\xab\x93\xe7\x26\x78\x6f\x72\x46\xe8\x05\xbd\x71\xc3\x2f\xa6\xa5\x5c\x62\x7e\xdf\xb4\x2c\xb8\xa7\x38\x76\x12\x3f\x8c\xe7\x00\x15\x00\xf4\x86\x9d\xad\x57\x05\xdc\x9d\xa9\x57\xeb\x6a\xa6\xa2\x2e\xd2\x1f\x71\xac\x9c\x60\x03\x0b\x9d\x44\x37\xcb\xbb\xc1\x3f\x66\xdc\x82\xf8\xeb\xca\x3f\xbe\xef\x01\x00\x00\xff\xff\x41\xc8\xae\xbf\x37\x02\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0xfc, 0xb, 0xf4, 0xfb, 0xf, 0x94, 0xca, 0x64, 0x7a, 0xb8, 0x48, 0xf9, 0x69, 0xf1, 0x88, 0x46, 0x59, 0xd3, 0xbc, 0x0, 0x4e, 0xe7, 0x8, 0x1e, 0xdf, 0x27, 0x59, 0x81, 0x75, 0x52, 0xa2}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xe5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x92\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\xe4\x24\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x13\xc7\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x23\x5d\x63\xa9\x37\x31\x32\x99\xc7\x39\x15\x42\x09\x27\xb4\xb2\xef\x70\x7a\x85\xcb\xab\x1b\x9c\x9d\x9e\xdf\x2c\x58\xc5\xb3\x15\x5f\x12\xdc\xba\x22\xcb\x98\x90\x95\x36\x0e\x33\x06\x00\x93\x42\xba\x09\x8b\x18\x6b\xdb\x03\x18\xae\x96\x84\xe9\x6a\x8e\xa9\x50\x85\xb6\x78\x9b\x60\x71\x1e\x56\x17\xbc\x82\xf7\xac\x6d\x31\xb5\x64\x1a\x91\xd1\x25\x97\x14\xf6\xa7\x2b\xdc\xc1\xe9\x13\x2e\xa9\x0c\x47\x58\x1c\xe3\xbd\xa0\x32\x87\x50\x39\xdd\x42\x28\xb4\xed\x76\x92\xf7\x48\x85\x63\x99\x56\x36\x40\xec\xe8\x36\x5d\xcd\x5e\xdd\xfb\x0e\x71\x37\xfd\x3c\xd4\x0d\x24\xcd\xa2\x83\x08\xf2\x9f\xb8\xcd\x78\xd0\x47\x82\xa3\xe3\xe3\xb0\xbb\xea\x81\x0f\x40\x2a\x0f\xcb\x88\xb1\x60\x00\x76\x7b\x18\xa7\x5b\x67\xea\xcc\xa1\x1d\x94\x37\x6c\xdf\x9e\x62\x0b\x18\x37\xeb\xaa\xaf\xe5\xfd\xd6\x97\xfb\x33\x1b\x86\x2e\x8e\xe3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\xd3\xef\x94\x39\x34\xbc\xac\x69\x8e\x43\x48\xe2\xca\x42\x69\x07\x4b\x6e\x8e\xa3\xe1\x83\x25\xd7\x95\xea\xea\x08\xe5\xde\xbc\xee\x42\x09\xc9\xab\x2f\xd6\x19\xa1\x96\x5f\x85\x72\x64\x0a\x9e\x51\xeb\xd9\xa0\xfc\xbc\xd7\x61\x57\x14\x81\xfe\xec\xb6\x9b\x10\xef\x59\x51\xab\x0c\x33\x89\x57\xcf\xba\x16\xe1\x03\xb9\xbe\xf1\x53\x61\xab\x92\xaf\x07\x37\x66\xd1\xd8\x8f\xc1\x57\x43\xae\x36\x0a\x72\xf1\xc0\xbe\x40\xfa\xa7\x9a\xd7\x4f\x68\x36\x63\xcd\xe8\x37\x85\x06\xa6\x47\x60\x90\xa0\x19\xf1\xb2\x61\xa0\x4a\xdb\xb1\xfe\x03\x77\x66\x23\xd4\x39\x52\xad\xcb\x68\x20\x12\x05\xe4\x22\xdc\xf0\xcb\x3d\x9f\xc0\x8b\x04\x87\x43\x8d\xe7\xdd\x9e\xc3\x99\x9a\xba\x83\x7e\xbb\xd1\x2d\xa8\x3b\xfc\x20\xa3\x3f\x87\x79\xec\x12\x0a\x5e\x5a\xda\xe7\x96\x2e\x6a\xeb\xf6\x9b\x8e\xbf\xee\x3b\x19\xf7\x5d\x71\x25\xb2\x59\x21\xdd\xe2\xba\x32\x42\xb9\x62\x36\x79\x8c\xf5\x23\xa5\x3c\xbd\x7f\xb9\xbf\xee\x5e\x6c\x9e\xdd\x24\x8a\x1e\x5a\xf4\xdf\xcc\x6e\x6f\xe5\x5d\xb2\x9f\x97\x8f\x8e\x7d\xff\x0f\xdb\xf9\xa5\xdd\x2f\x7f\x06\x00\x00\xff\xff\x26\xf5\xd0\xb3\xa6\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x9d, 0xdc, 0x29, 0x17, 0xc8, 0x8a, 0x14, 0x25, 0x13, 0xa5, 0x85, 0x13, 0x6, 0xf, 0xb3, 0x4a, 0x21, 0xd1, 0x20, 0x4e, 0x6f, 0x92, 0x60, 0xe2, 0x6e, 0x29, 0x96, 0x4a, 0xee, 0x99, 0x66}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6f\xdb\x36\x10\x7e\x36\x7f\xc5\x37\x23\xd8\xa4\xc1\x91\x92\x6d\xd8\x43\x16\x3f\x0c\x71\xb6\x06\x68\xec\x02\x76\xfb\x4e\x53\x27\x9b\x8d\x44\x0a\x24\xe5\xda\x75\xf4\xdf\x0b\x4a\xb2\x23\x27\x4e\xe1\xa0\x2f\x7d\x23\x79\x77\xdf\xdd\xf7\xdd\x91\x8c\x63\xdc\xe8\x84\xb0\x20\x45\x86\x3b\x4a\x30\xdf\x60\xa1\xf7\x7b\x88\x3c\x89\x13\x4a\xa5\x92\x4e\x6a\x65\xff\xc1\x68\x82\xf1\x64\x86\xdb\xd1\xdd\x2c\x62\x05\x17\x0f\x7c\x41\x70\x9b\x82\x2c\x63\x32\x2f\xb4\x71\x08\x18\x00\xf4\xd3\xdc\xf5\x9b\x95\x93\x39\xb5\x4b\xbb\x51\xa2\xcf\x42\xc6\xe2\x18\xff\x49\xca\x12\x48\x95\xd0\x1a\x52\x41\xcf\x3f\x93\x70\x98\x4b\xc7\x84\x56\xd6\xe3\x6c\xb7\xe7\x30\x5c\x2d\x08\x67\x0f\x03\x9c\xad\x70\x35\x44\x34\xa9\xfd\xee\xc9\x71\x54\x55\x8d\xda\x44\xde\x79\xa0\xed\x16\x67\xab\x68\xcc\x73\xc2\x23\x9c\xfe\xc0\xad\xe0\x19\xaa\x0a\xa5\x54\xee\xef\xbf\x30\xc4\xe5\xf5\xb5\x77\x7a\xf0\xc1\x1e\x9f\x54\xe2\x97\x4d\x49\x0d\x36\xa4\x85\x5b\x12\x6c\xce\xb3\x8c\xac\x43\xa9\xa4\xf3\x25\x2e\xf4\xb9\x75\xda\xf0\x05\x45\x2c\x8e\x7d\xc0\x78\x32\xbb\x9d\x5e\xf9\x15\x70\xde\x86\xff\x66\x91\x7a\x6a\x16\xd3\x77\x93\x8f\xef\x47\x50\xda\x61\x4e\x10\x4b\x4f\x25\x81\x2e\x9d\x95\x09\xc1\x92\x59\x49\x41\x36\x3a\x0c\xc7\xcd\xbf\x63\x2f\xb1\x8f\xd0\x85\xa4\xe4\x99\x59\x5a\x08\xad\x44\x69\x0c\x29\x07\xcb\x53\x8a\x98\x6f\xc0\xce\x6e\x9d\x29\x85\xc3\xf6\x54\xf5\xbc\x9b\x4c\xbd\x6c\x23\xb2\xc2\xc8\xc2\x77\xfa\xc9\xf8\xaa\x61\x2f\xdd\x93\xdf\x6c\x53\x50\xad\x7d\x55\x75\x4e\x9e\x29\xcd\x7a\x71\x0c\x91\x49\x5f\x7d\x2b\xf4\x6e\xa7\xf0\x65\x29\xc5\xb2\xc3\x94\x67\x72\x45\x11\xeb\xb5\x1e\xd3\x46\x7d\xc3\xea\xa4\x71\xec\xa7\x05\xa5\xa5\x04\xdc\x82\xfb\x5d\xce\x0b\xa4\xda\xec\xa6\x69\xc5\xb3\x92\x06\xb8\x40\x4e\x5c\xd9\xba\x13\x96\xdc\x00\x97\xed\x81\x25\x57\x43\xd5\x38\xf5\x88\xb0\x5e\xa2\x15\xd5\x9b\x3f\xff\x60\xbd\xdc\x5b\xfd\xd4\x46\xf7\xa5\xa3\x35\xab\x18\x3b\x45\xd8\x27\x51\x6f\xd7\xf5\xa5\xa8\x2a\x96\x96\x4a\x20\xd0\xf8\xbd\x71\x0d\xf1\x3f\xb9\x56\x5f\x69\x8b\x8c\x6f\x5a\xe9\x82\xf0\x50\x3c\x6c\xeb\x12\x0d\xb9\xd2\x28\xe8\xe8\x85\xd6\xbe\xa8\x17\xe0\xd3\x57\xc0\x57\x87\xe0\xe1\x2e\xa2\xcd\x72\x04\x1e\x43\xac\x0e\x2a\x60\x6d\x3f\x33\x5b\x67\x7f\x0b\xb1\xe0\x20\xf9\x00\x73\xad\xb3\x70\x9f\xda\x3a\xee\x82\xb0\x69\xae\x4c\xa1\x23\xdf\x96\x5f\x4f\xba\xdf\xbf\x0c\x71\xd1\xe2\x7c\x5f\xac\x01\x9c\x29\xa9\x76\xac\x58\x97\x56\xa7\xb2\x47\x7c\x25\xa3\x3f\xf9\xd9\xa9\x23\x52\x9e\x59\x3a\xaa\xf2\x7d\x69\xdd\xdb\xda\xf8\x43\x2c\x87\x87\x2c\x0b\xae\xa4\x08\xd2\xdc\x45\xd3\xc2\x48\xe5\xd2\xa0\xdf\xce\x7d\x07\xa1\xaa\xfc\x45\x6a\x27\xbf\x1f\x86\x2d\xf5\x9f\x63\xa4\x1a\xf2\x8f\xc3\x53\xd8\x1f\x9d\xc1\xe6\x4d\xe9\x3e\x2f\x2f\xca\x16\x99\x56\x14\xac\x3b\x27\xdb\xfd\x13\x76\xca\xef\x72\xb4\xfc\xf5\x31\xd1\x9e\x3d\x8c\x1d\x86\x75\x80\xff\xda\xaa\x6f\x01\x00\x00\xff\xff\x94\x03\xb8\x29\x73\x07\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0x64, 0x33, 0x31, 0x2b, 0x9e, 0xa5, 0x1c, 0x46, 0x19, 0x57, 0xa8, 0x78, 0xb3, 0xc9, 0x92, 0xd7, 0x11, 0xee, 0xde, 0xf1, 0xa5, 0xf2, 0x26, 0x22, 0x58, 0x32, 0x8d, 0xfb, 0xb5, 0x58, 0xdc}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6f\xd4\x30\x0c\x7e\xcf\xaf\xb0\xaa\x7b\x68\xa5\xd1\xbe\x23\xed\x01\xc1\x90\x26\xa1\xad\x02\x21\x1e\x51\xae\xf5\xdd\x22\xda\x24\x38\xbe\xdb\xa6\x92\xff\x8e\x92\x76\x77\xbd\xd2\x51\x0e\x10\xe2\x2d\x89\xed\xcf\xf6\x97\x7c\xb1\x95\xd5\x17\xb9\x45\xe0\x47\x8b\x4e\x08\xd5\x5a\x43\x0c\xa9\x00\x00\x48\x2a\xa3\x19\x1f\x38\xe9\x77\xca\x24\x22\x13\xa2\xeb\x5e\x00\x49\xbd\x45\x58\x7d\xbe\x80\x95\x82\x97\x97\x90\x5f\x6b\x46\xda\xc8\x0a\x1d\x78\x2f\xba\x0e\x56\x2a\x7f\x83\xae\x22\x65\x59\x19\x1d\x0e\x43\x06\x18\x2c\xca\xd9\x46\x3e\xde\xc8\x16\xc1\x7b\x50\x4f\xc1\xd0\xc5\x4c\x21\x83\xda\x80\x21\x48\xf1\x6b\xf0\x8f\x8e\x89\x43\xda\xab\x0a\x29\xc9\x26\xe7\x6c\x48\x6e\xc3\xb9\xf7\x31\xfe\x03\x93\xd2\xdb\x34\x03\x17\x17\x07\x4c\xd4\x75\x28\x64\xd8\x8f\x9b\x30\x36\x74\xb1\x52\xf9\xad\x8d\x0d\x04\x8f\xa2\x88\xd5\x1a\xdb\xa7\xf9\x06\x6c\x4a\xe9\x2a\xd9\x84\x92\x07\xcb\xa4\xc5\x01\x78\x3e\x26\x1d\x2c\x6f\x0d\xb5\x92\x4b\x49\xb2\x0d\xb9\x32\x38\x35\xbc\x47\xb7\x6b\xd8\x7d\x52\x7c\x57\xf6\x77\x73\xd2\x65\x12\x42\xc6\x2c\x69\xc3\x31\xfa\x9d\xe9\xd3\x2c\xd6\x1e\x90\x5f\xf7\x17\xfb\x3b\x6d\x8c\xc2\xd3\x8a\x1f\x60\x78\x23\xf9\x70\x76\xf1\xd7\xbb\x7c\xba\xb6\xd3\x5d\xdc\xb6\x3b\xc7\x57\xed\x1a\xeb\x8f\x5a\xb5\xb6\xc1\x16\x35\x63\x3d\xf7\xc6\xd2\x4c\x78\x21\x8a\x02\x16\x3d\x23\x28\xac\x11\x30\x00\xd7\x58\x03\x1b\xb8\x93\x7b\x84\x8d\xa1\x7b\x49\x35\x54\xa6\xb5\x92\xd5\xba\x41\x38\x60\xc9\xc0\x9d\xcb\xfb\x47\xbe\x9c\xc3\x31\xed\x2a\x86\xce\x0b\xb1\xd9\xe9\x0a\x52\xb7\x1c\x94\x9d\xd5\xee\xb9\xd8\x13\xcd\x0c\x4a\x24\xe4\x1d\x69\x48\x16\x01\x92\x40\xef\xcf\x35\x75\x46\x31\xff\x44\x44\xa7\x9f\xcd\xac\x8c\x90\x08\x2e\xe1\x06\xef\x6f\x2d\x52\xbc\xe2\x1b\xc3\xd7\xc7\xea\xaf\x88\x0c\xa5\xc9\xb8\x5a\xef\x93\x6c\xfa\xe1\x1c\x99\x14\x5e\x3c\x97\xef\x0c\x7a\xfe\x03\x6d\x0e\xe4\xfd\x09\x41\x23\x46\x9e\x88\x1a\xaf\x8e\xdf\x75\xd4\x54\x29\x15\x95\xa6\x51\xd5\xe3\x41\x3c\x11\xe5\x55\xd3\xc0\xda\x98\xe6\x17\xc7\x52\x60\x1e\x67\x46\x4a\x30\x17\x05\x58\xa9\xc8\x05\xa1\x8f\x67\x52\x77\xf0\x3f\x21\x7b\x9a\x71\x6e\x86\x3c\x3f\x40\x66\x8b\xde\x47\x04\x63\xf3\x32\xd6\xb1\x04\x12\x0c\xfb\x09\xee\x01\xf6\x47\x22\xe7\x97\x5e\x7c\x0f\x00\x00\xff\xff\xb4\x30\x5a\x77\x03\x08\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0x7e, 0x5d, 0x16, 0x44, 0x6e, 0xcf, 0xa, 0x57, 0xf1, 0xe8, 0x1c, 0xfb, 0x8, 0x6e, 0x26, 0x89, 0xc2, 0x13, 0x34, 0xfd, 0xea, 0x2a, 0xe1, 0x4c, 0x12, 0xa1, 0x32, 0x35, 0xc4, 0x9d, 0x75}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x6b\xe3\x30\x10\x85\xef\xfa\x15\x0f\xe3\x43\x02\x89\x75\xd9\x53\x96\x3d\x6d\xf6\xb0\x14\x92\x1c\x42\x7b\x2c\x8a\x3c\x51\x44\x6c\x49\xc8\x63\xb7\xc6\xf5\x7f\x2f\xb2\x93\x40\xe9\xa5\x3a\xcd\x7c\x33\xef\xf1\x46\x52\xe2\xaf\x2f\x09\x86\x1c\x45\xc5\x54\xe2\xd4\xc3\xf8\x47\x0f\x5d\x97\xb2\xa4\xb3\x75\x96\xad\x77\xcd\x6f\x6c\xf7\xd8\xed\x8f\xf8\xb7\xfd\x7f\x2c\x44\x50\xfa\xaa\x0c\x21\x28\x1b\x1b\x21\x6c\x1d\x7c\x64\x2c\x04\x00\x64\xda\x3b\xa6\x77\xce\xc4\xdc\x1a\xcb\x97\xf6\x54\x68\x5f\xcb\x13\xf5\xde\x95\x0d\xfb\xa8\x0c\x49\xe3\xd7\xf7\xb2\xfb\x25\xc3\xd5\xc8\x0b\x73\xd0\x95\x25\xc7\xd9\xa4\x2d\x7e\xac\xe6\x3e\x50\x93\x09\xb1\x14\x62\x18\xd6\x88\xca\x19\x42\xfe\xba\x42\xde\x61\xf3\x07\xc5\x21\x05\xc5\x38\x4e\xd3\x3c\x38\x55\x53\xe2\x79\x57\xec\x52\xf9\x01\xf6\x07\xd5\x68\x55\xa5\x1d\x29\xf1\x62\xf9\x32\x0c\xf7\xcd\x71\xc4\x9b\xad\x2a\xa8\x10\xaa\x1e\x89\xdf\x74\xe3\x88\x4e\x55\x2d\x81\x3d\xf6\x61\xfa\xa9\x42\x48\x29\xe6\x95\x2d\x35\x3a\xda\x09\x27\xdb\x73\xeb\xf4\x37\xe3\x45\x77\xf3\x3b\xf6\x21\xf5\x4b\xa4\xa8\x18\xa6\xfb\x23\x71\x1b\xdd\x44\x66\x90\xde\x13\xf5\x1b\x64\x5f\x42\x64\xab\xc7\xf4\x39\xc5\xd9\xa0\x9b\xc9\x28\xe6\x8b\xc9\x95\x29\xc1\x67\x00\x00\x00\xff\xff\x81\x9d\x53\x8d\xf6\x01\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1b, 0x1a, 0xbf, 0xf0, 0xe9, 0x47, 0x35, 0xe6, 0xa7, 0xc, 0xe6, 0xba, 0xc0, 0x5e, 0x39, 0xda, 0x2d, 0xb9, 0xd0, 0xee, 0xbc, 0x1, 0xc0, 0xd1, 0x5e, 0xa2, 0xbf, 0x4d, 0xcd, 0x4, 0xe9, 0xc0}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x8f\xdb\xb8\x15\x7e\xf7\xaf\x38\x6b\x0c\x02\x29\x70\xa4\x16\xe8\x93\x8b\x79\xd8\xe6\xd6\xc1\xa6\xc9\x20\x93\x76\x1f\x76\x17\x03\x5a\x3a\xb2\xd9\xa1\x48\x2d\x49\x79\x32\x70\xf4\xdf\x0b\x5e\x74\x97\x7c\x09\xd2\x76\x5b\xac\x5f\xc6\x16\xcf\xf5\xe3\xb9\x91\x9a\x38\x86\x97\x22\x45\xd8\x22\x47\x49\x34\xa6\xb0\x79\x82\xad\x68\x7e\xc3\x9e\x12\x48\xf2\x34\x4e\x31\xa3\x9c\x6a\x2a\xb8\xfa\x33\xbc\xfa\x00\xef\x3f\x7c\x82\xd7\xaf\x6e\x3e\x45\x8b\x82\x24\x0f\x64\x8b\x70\x38\x40\xf4\x9e\xe4\x08\x55\xb5\x58\xd0\xbc\x10\x52\x43\xb0\x00\x00\x58\x26\x82\x6b\xfc\xac\x97\xee\x17\x15\xcb\x85\xfb\xb6\xa5\x7a\x57\x6e\xa2\x44\xe4\xf1\x06\x9f\x04\x4f\x95\x16\x92\x6c\x31\xde\x8a\x17\xf5\xd7\xfd\x9f\xe2\xe2\x61\x1b\x23\x4f\x0b\x41\x79\x2d\xe3\x02\xce\x44\x62\x8a\x5c\x53\xc2\x2e\xe7\xdd\x69\x5d\x24\x8c\xe2\xa5\x7a\x15\xca\x3d\x4d\x50\x39\xae\xe8\x6c\x3e\xfd\x54\x18\xa6\x70\xb1\xd8\x13\x09\xf7\xd0\xda\x1e\xdd\x4a\xb1\xa7\x29\x4a\xbf\x52\xe3\x11\xfd\x83\xb0\x12\xfd\xc3\x3b\x27\xa9\xa6\xa9\xad\x88\xee\xdc\x97\xd7\x52\x8a\x7a\xad\xf5\x2c\xfa\x50\xd8\x6d\x5d\x2c\xe2\x18\x3e\x3d\x15\x08\x54\x81\xde\x21\x18\x63\x20\x13\xb2\xb7\xb3\x89\xe0\x4a\x3b\xb2\x6b\x58\x76\x56\x96\x96\xdf\x6b\x02\xb2\x27\x94\x91\x0d\x43\x28\x08\x95\x2a\xf2\x7c\xc1\xe2\x70\x78\x01\x92\xf0\x2d\xc2\xd5\xfd\x0a\xae\xf6\xb0\xbe\x86\xe8\xd6\xd0\x18\xe9\x06\x2d\x43\x41\x33\xe0\x42\xc3\xd5\x3e\x7a\xcb\xc4\x86\xb0\x76\xcd\x3c\x7b\x85\x2a\x91\xd4\x5a\xdd\x5f\x78\x53\x32\xe6\xcd\xf1\xd6\x5d\xd5\xe6\xdd\x3b\x8a\xc6\xd8\x5a\x13\xf2\xd4\xc8\xe8\x7c\x0d\xad\x23\x1f\x36\xff\xc4\x44\xff\x0d\x35\x49\x89\x26\x60\xf6\x08\x55\x8d\x28\xe4\xf5\x73\x03\x8f\xb0\xa4\xd1\xc2\xe2\x35\xe2\x93\x65\xa2\xe1\x30\xed\xf7\x0d\xcf\xc4\x99\x7e\xbf\x80\xab\x82\x1b\xe3\xd7\xd7\x8d\x1f\x5f\x40\x8b\x5b\xa2\x92\x3e\x1d\xcd\x2c\x46\x54\x15\x8c\x3c\xd5\xdb\x06\xfe\xd3\x11\x74\x3d\x43\xd6\x81\xe2\x24\xe4\x4e\x52\x55\x79\x2a\x1b\x16\x63\x31\x9d\xaf\x95\x05\xf7\x2d\xea\x01\x4e\x8f\x94\x31\xd8\xa2\x1e\xe2\x97\x49\x91\xfb\x67\xd1\x22\x8e\x0d\xf3\x0b\xf8\xb4\xa3\x0a\xb2\x92\x27\xd6\x1c\xb5\x13\x25\x4b\x2d\x6e\x1b\x84\x84\x30\xe6\xaa\x58\xbd\x57\x34\x2f\x18\xe6\xc8\x35\xca\xa8\xe6\x47\x90\xa8\x4b\xc9\x29\xdf\x0e\x35\x52\x05\x12\x49\x0a\x82\xb3\x27\x20\x3c\x1d\xc8\xcf\x45\x4a\x33\x8a\x69\xb4\x30\x06\x8c\x3d\x09\x04\x3c\x77\x4f\xc2\xa1\xe4\x83\xc5\x45\xe4\x2b\x10\x0f\x66\x1b\x45\xf4\x16\xb5\x4f\x98\x86\x3d\xb4\x44\x34\x33\x34\x87\x66\xdb\x9c\xb5\x20\xf2\x28\xe8\x0b\x75\xe4\x0e\x71\x4f\xd4\x27\x38\xd4\x98\xab\x69\xcc\xd5\x18\x73\xca\xb5\x38\x0f\x73\x8b\x51\x0b\xba\xe0\x09\xae\xa0\x60\x48\x14\x42\x4e\x1e\x10\x54\x29\x11\x08\x63\x60\x05\xef\x88\x82\x0d\x22\x87\x47\x49\xb5\x46\x0e\x1b\xcc\x84\x44\x63\x83\x87\x73\x64\x64\x0b\xe7\x0a\x9a\x48\x68\x9c\xaf\x21\x8d\xee\xc6\x40\x8a\x3c\x34\x9e\x1f\xaf\x37\x73\x39\x77\x4e\xbe\xc5\x31\xfc\x48\xf5\xae\x97\x06\x16\x52\x52\x14\xec\x09\x7a\xf5\x06\xf6\xa6\x4a\x83\xc1\xd5\x15\x5b\x0b\xec\x64\x6a\x59\x1c\x86\x82\x83\x7d\x3f\xc3\x42\x30\x2e\x8c\x03\xc4\x3c\x6d\x1f\xfe\x80\x4f\xeb\x71\x65\x5c\x35\xeb\xb6\x75\xac\x61\xbf\xf2\x41\xd4\xcb\xd4\xce\xd7\x69\x10\x8d\x38\x55\x90\x04\x7b\x15\x4c\x63\x5e\x30\x33\x38\x2c\xa9\xc9\xb8\xcc\xac\x2f\x6d\x30\xdc\x31\x93\x8d\x35\x26\x57\xfb\xe8\xa6\x21\x98\x16\x90\x21\xd1\xa5\x9c\x65\x7f\x53\xf2\x64\x86\xd3\xf4\x9c\x7b\x8e\x8f\x5d\xce\x60\x6a\x1b\x43\xfb\x10\x1f\xe7\xc5\x7c\x85\xf6\x3a\x4b\x4e\xb2\x0e\x21\xb6\x33\xd6\x00\xb9\x36\x18\x0d\xe8\x94\xa7\xf8\x19\x22\xf8\x43\xf3\xdc\xd2\xaa\xee\xda\x1f\xcd\x9a\x69\xf2\x41\x63\xdb\x70\xef\x6a\x2e\x6f\xfe\x7d\x37\x58\x7b\x41\x0e\xd7\xf0\xcc\xc5\x61\xff\xf9\x61\x54\xe3\xc3\x59\x6f\xda\x6d\xec\x37\xb3\xbe\x3f\xd3\xbd\xec\x2a\xe3\x63\xdf\x5c\xa3\xf5\x66\x55\xd5\x1b\x2f\xbf\xed\xb5\x86\xfb\x9d\x10\x0a\x3f\x14\x66\x88\xa5\x82\x7f\xcf\x18\x6c\x84\x60\xf3\x88\x18\x45\x5e\x71\x9f\x75\x16\x9a\x9e\xbc\xda\x71\x9b\x56\x54\xea\x92\xb0\xb3\x94\x67\x7c\xa8\xbd\x6e\xe1\x19\x8f\xee\x68\x5e\x32\x3b\x94\xfb\xb5\xa1\x64\x63\x5b\xc6\xcf\x35\xee\x88\xad\xa6\x6e\x7c\x95\x99\x0c\xb9\x35\xc1\xcb\xe9\xdb\x69\xab\xd1\x9c\x89\x23\x75\x03\x2b\x27\x76\xa8\xd6\x02\x17\xa8\xb9\x68\xfb\x06\x3f\xe7\x33\xb4\x2d\x30\xa7\xf2\x33\xe3\xe3\xf8\xf5\x0b\x0f\xb5\x5b\x13\xcd\xc5\x74\x97\xc2\xfb\x65\xa3\xdc\x39\xf8\x60\x2c\xf7\xe3\x79\x41\xa4\xc2\xd4\x47\xbd\xcb\x89\x01\x87\x61\xa8\xaa\x7e\x5e\xd8\x9a\x06\x3f\xfd\x62\x40\x73\x21\x10\xc7\xf0\x11\x7f\x2d\xa9\xc4\xd4\xad\x4e\x6d\x81\x59\xa8\xcd\x6d\xa8\x3d\x62\x7f\x25\xca\x2a\x25\x54\x4e\x01\x0d\x5d\xa8\x8f\x91\xb5\xcb\x33\x73\xa4\xb7\xd6\xb5\x50\xc2\xce\xb3\xb6\xa1\xfe\xd6\xd6\x9e\xb6\xb7\xde\x46\xa9\xf0\x76\x66\x2f\xed\xc0\x60\x29\x5c\x47\x57\xb6\x59\xd8\x09\xec\xf9\xcc\xfe\xbb\x09\xe1\x98\xd4\x40\x14\xba\xde\xe3\x10\x82\x19\x39\x2b\x40\x73\x1e\xac\x87\x28\x89\xaa\x64\xda\xa0\x36\x43\xdf\xce\x15\x16\xf7\x35\x18\x2d\xf5\xe8\x60\xff\x98\xc3\xd0\xfd\x0a\x6c\xba\xba\xdd\xb0\x86\xb4\x8c\xea\x91\xea\x64\x07\xfb\xe8\x07\x7c\xea\x3c\x9e\x8e\xc0\x0b\xa3\xd0\x7c\x12\x33\x78\x36\xbb\xd2\x99\x79\xd6\x0d\x89\x9f\xae\x9d\xb7\xd1\x89\x60\x38\xf4\xd8\xac\x06\xc1\x35\xe5\x25\xf6\x16\xaa\xde\xaf\xf3\x44\x5f\x83\x96\x03\x31\x9e\xf1\x38\xd7\xde\x1d\xf8\xa3\x60\x18\x7c\x61\x0f\xb4\x4e\xc6\xcc\x67\xcd\x85\x99\xf3\x3b\xc2\x47\x10\xae\xba\x89\x70\x41\xd8\xd2\x0c\xbe\xbb\x14\x2a\x3f\xec\xcf\xe5\x69\xb5\x6a\x6f\x7e\x4c\x09\xa8\x55\xda\xeb\x9f\x83\x39\x15\xa8\xf5\x4f\xbf\x28\x2d\x29\xdf\x1e\xfc\x34\xd6\xdb\xcd\x17\x55\x05\x55\xe3\x11\x4c\x8c\x0d\xde\x02\x67\xf8\x0a\x38\x65\x27\x9a\xe5\xd7\x4d\x7f\xf6\xd4\x38\x6a\x9f\x3e\xa0\x5f\x61\x46\x4a\xa6\x1b\x04\xdc\xa1\x8e\x2a\xa3\xd7\x2c\xf8\x56\x67\x8a\x92\x2a\x30\xa1\x19\x4d\x80\xd8\xc1\xdc\x4a\xb0\x0d\x73\x5a\x46\xaf\x61\x4e\xce\x22\xd6\xb0\xde\xb5\xca\xcc\x94\xe1\x1b\xed\x44\xd0\x4c\x87\xca\x9c\xf8\xe1\xb1\xa4\x77\xb4\x28\x38\x5c\xed\x8f\x5e\xbb\x8c\xf6\xe3\xb7\x3d\xb8\x34\x1c\x27\x46\x97\xdf\x66\xdb\x3f\x61\xd9\x60\x88\xfd\x3f\x99\x47\x02\x05\xcf\x9b\xc5\xf0\x7f\x72\x3a\x89\x63\xa0\xea\xef\x5c\x95\x45\x21\xa4\xc6\xd4\x02\x20\x31\x11\x32\x55\xf0\xb8\x43\xbd\x43\x09\x49\x29\x25\x72\x57\x5c\x4c\x40\x97\x2d\x7d\xd4\x48\x1a\x8b\x59\x5f\x43\x46\x98\xc2\xc5\xa9\x59\xe8\xdf\xd3\x8f\xff\xeb\x1d\x13\xa6\x3a\xfb\x44\x1b\x3d\x3f\x6f\x2e\xf0\x3e\x8e\xe1\x26\x83\x52\xa1\x04\xe4\x64\xc3\xd0\xd5\xa1\xbd\x17\x68\x95\xf8\x5b\x8a\x15\x3c\x22\x24\xc4\x34\x57\x35\x41\x65\x13\x81\xea\x68\x38\xec\xa8\xa8\xbe\xe5\x88\x06\x27\xea\x2f\x5f\x66\x16\xdb\xd0\x3d\x93\xec\xb2\x31\xea\xab\x77\xfc\x5b\xef\xfa\xe4\xce\xc3\x68\xa6\x1b\xa7\xcc\xc0\xb6\x89\x60\xf1\x8d\x7e\x7d\x99\xa0\xaa\xcd\x41\x33\x7c\x8d\xe9\x0f\xc7\xa3\xb6\xc3\x3f\x13\x58\x4c\x08\x65\xaa\x8b\xbf\xa5\xe9\xc5\x96\x2d\xb0\x74\xcb\x85\x74\x15\xb6\xa3\xdc\xce\x67\xd1\x62\x3a\xac\xc6\xf7\x59\xfd\x90\x19\x5f\x5a\xf9\x8a\x7e\xd2\x9b\x76\xd3\x2f\x9a\x2a\x87\x86\x1f\xcc\xc3\xf5\xbe\x37\xdc\x5c\x34\x26\x76\xae\x4d\xbf\xe9\xa8\x78\xf6\x84\xe5\x5e\x9c\xbd\x13\x49\xbf\xc8\xf4\x87\x2f\x66\x96\xef\x6b\x5b\x67\xc7\xb0\x26\x62\x99\x1a\xbd\x7f\x1b\xdf\x14\x9f\x16\x33\x79\x3f\x75\x0a\xc9\xe3\x40\xf6\xaf\x59\xe7\xb0\x3b\x39\xef\xf9\x3c\xe8\x46\x9c\xbb\x8b\x9b\x78\x65\x18\xc7\x35\x79\xff\x75\x92\x4d\x8a\x44\xa2\x01\x85\x80\xff\x6f\x01\xd8\x3c\xd5\x19\xee\x92\xa2\x33\x67\x5c\x15\xbc\xaa\xc2\x8e\xd2\xc0\xde\x76\x45\xb7\x44\x92\x5c\x45\x77\xf6\x6c\x63\x28\xfc\xf3\x8f\x36\x02\xbb\x0b\x6d\x5a\x24\xfa\xb3\xf1\xcf\x6b\x8d\xfe\x42\x92\x87\xad\x14\x25\x4f\x83\x70\x98\x1b\x2a\x6a\x35\xfe\x48\xf5\xee\xa5\xe3\x09\x12\xfd\x79\x05\x3d\x0b\x5e\x12\xc6\x50\xd6\xb5\x70\x0a\xa6\x0e\xff\x11\xc4\x8e\xf9\x3c\xb0\xa0\xf1\xc0\x3f\x1b\x58\x74\x11\x26\x29\x66\x28\xad\xf2\x20\xec\x17\x10\x7f\x5c\xd4\xbb\x3a\x26\xbc\xf8\x5b\xa2\x77\xce\xe9\x6e\xb8\x77\x52\x8b\xf0\x14\x02\xfc\xd5\x33\x2f\x97\xa1\xff\xc5\x61\xe9\x5f\xdd\x2d\xc3\x21\x2b\x34\x43\xad\xde\xc1\x35\x2c\x57\x3f\x2f\x7f\x5e\x2e\xa7\x14\x0c\x3a\x83\xf9\xa0\x34\xa5\x5f\x45\x99\x90\x39\xd1\xb6\x46\x05\x4b\xe7\xba\x89\xe3\xaa\x5a\xda\x19\xb3\x55\x50\x55\xd0\xee\x78\x15\x84\x8b\x61\x75\xe0\xe8\xe6\x30\xf7\x12\x52\xa4\x08\xcb\xe5\x84\x2d\x57\xb9\x59\xaa\x87\xb6\x96\x78\x5c\xb9\xea\x8f\xe9\x43\x22\x32\x44\xd1\x8d\xed\xd7\x56\x42\x55\x05\xe1\x44\x67\xf7\x7e\xd5\xb5\xb8\x55\x70\xc3\xf7\x84\x51\x5f\x8d\x5f\x7f\x2e\x30\xd1\x98\xae\xc1\x2c\x75\x64\xae\xe0\xfb\xc4\x0c\x17\x6b\x70\x1a\xc7\x88\xbb\x60\x9f\xe9\xd5\xc3\x9b\x00\x38\xf1\xca\x02\x9a\x36\x59\x0f\x52\xa3\xbe\x68\xc6\x68\x2e\xb4\x6f\xa1\x69\xdb\x26\x49\xa2\x81\xd1\x07\x04\x6d\xaa\x45\xcb\xe7\xe9\xdb\x17\xfb\x69\xaf\x6b\x7e\x37\x9e\xa4\x7a\x8d\xf3\xd9\xb3\xa3\x24\xb3\xbd\xd3\x01\xff\x1e\x1f\x1b\xd2\xf7\x42\xdf\xb4\x46\x34\x21\xd6\xd6\xca\xaa\x5a\x86\x8b\x23\xd8\x1e\xc7\xd5\x1d\x78\xaf\x81\x14\x05\xf2\xd4\x9e\x94\xd4\x0a\x54\xe4\xab\xa2\xbd\xac\xe8\x54\xa4\x28\x8a\x5a\x65\x7b\x22\xcd\xf9\x66\xae\x9d\xb7\x4a\x44\xa1\x57\x4d\xae\x1c\x3d\xb7\x59\xfd\x61\x17\x69\xc3\xf6\xdd\xb5\xe9\xeb\x03\xa8\x46\x6e\x4e\x56\xd2\x7e\x4f\x79\x49\x72\x34\x99\x31\x51\x4d\x3f\x49\x9a\xbf\x23\x4a\xfb\xb2\xfa\x9a\xa7\xe6\xf4\xb4\x7b\x29\xf2\x9c\x54\x95\x71\xa1\xae\xb3\x73\x2d\x71\xd8\xb6\x7f\x6f\x8c\xa7\x9b\xc0\x7f\x24\xfc\x4c\x6d\x70\xd3\xb0\x3d\xef\xc3\xe3\x8e\x32\x84\x1d\xe1\x29\xa3\x7c\x0b\x76\xdf\x8c\x83\xfe\xbf\x26\x7a\x51\x7b\x7f\x76\xcc\x5e\x12\x7e\xdf\x20\xf2\xec\x86\x50\x4e\x75\x53\xc0\xcf\xfc\x0f\x0a\xf3\x69\x2a\xfb\x47\xdc\x52\xa5\x51\xce\x5d\x2e\xca\xc0\x1c\xb8\x56\xa6\x22\xcd\x92\x84\xe3\x3b\xa0\x7f\x05\x00\x00\xff\xff\x9f\xe4\xfb\xb3\xf3\x29\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7e, 0xa0, 0x9e, 0x95, 0xf6, 0xbf, 0xae, 0x34, 0xcf, 0xf4, 0x47, 0x71, 0xf9, 0xd1, 0xc6, 0xdb, 0x1e, 0xac, 0x46, 0xeb, 0xd7, 0xa8, 0x11, 0x51, 0x55, 0xc6, 0x6c, 0x17, 0x62, 0x3c, 0xec, 0x11}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl": {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl": {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl": {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl": {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl": {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
