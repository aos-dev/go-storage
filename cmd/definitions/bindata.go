// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/function.tmpl (332B)
// tmpl/info.tmpl (1.699kB)
// tmpl/object.tmpl (1.814kB)
// tmpl/operation.tmpl (1.02kB)
// tmpl/pair.tmpl (482B)
// tmpl/service.tmpl (8.807kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcf\x4a\xc4\x30\x10\xc6\xef\x7d\x8a\x8f\x25\x87\xee\xb2\xe6\x01\x04\x4f\x45\x41\x10\x59\xd4\xbb\x0c\xd9\x74\x0d\x36\x93\x92\x4c\xeb\x42\xcc\xbb\x4b\x5a\x75\xf1\xe0\x29\x21\xbf\xc9\xf7\x67\x72\xbe\x42\x24\x3e\x59\xa8\xd7\x3d\xd4\x8c\xeb\x1b\x28\x7d\x37\xb1\x49\x28\xa5\xa9\xd8\xf5\xe0\x20\x50\xb3\xbe\xf7\xe3\x60\xbd\x65\xb1\xc7\x1f\xa8\x7a\x7e\x5f\xfe\xcc\xfa\x91\xbc\xc5\x27\x24\x74\xe4\xed\x50\x07\xfa\x89\x0d\xda\x84\x5d\xce\x50\x17\x7e\xa0\x64\xa8\x0e\x6c\x91\x73\x15\x28\xa5\x35\x72\x86\x09\x2c\xf6\x2c\xba\x5b\xcf\x7d\xa5\xb3\x3e\x50\x24\x9f\xf4\x4b\x74\xfe\x81\x92\xe8\x67\x89\x8e\x4f\xb7\x7c\x4c\x1f\x4e\xde\xba\xe0\x3d\x95\x82\x30\x0a\x76\x23\xb9\xf8\x8f\x55\x7d\xae\x51\xff\xfa\xb7\x8b\xc3\x93\x4d\xd3\x20\xe9\x5b\x79\x89\xd5\x00\xc0\x48\xec\x4c\xbb\xa9\xe5\xdd\xa5\xf9\x66\xdb\xac\xd5\x2d\xff\x6e\x61\xbd\x7e\x05\x00\x00\xff\xff\x3b\x1f\xad\x5f\x4c\x01\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0x53, 0x97, 0x24, 0x27, 0xb1, 0x48, 0xc, 0x9a, 0xff, 0xbf, 0xcc, 0x50, 0x35, 0x3e, 0xf2, 0xfd, 0x26, 0xfd, 0x33, 0xa9, 0x5, 0x3f, 0xa2, 0x4c, 0x9b, 0x7, 0xfa, 0x1a, 0x11, 0xb7, 0xe0}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x5f\x6f\xd3\x30\x14\xc5\xdf\xfd\x29\x0e\x55\x85\x1a\xd4\x35\x9b\x84\x78\x80\xf5\x69\x1b\x68\x42\xdb\x90\x36\xf1\x82\x10\x72\x93\x9b\xca\x34\xb6\x23\xdb\x89\x56\x32\x7f\x77\x64\x27\x74\x4d\xf7\x07\x8a\x78\xe1\xcd\x37\xf6\xbd\xe7\x77\x8f\xaf\x93\xa6\x38\xd1\x39\x61\x49\x8a\x0c\x77\x94\x63\xb1\xc6\x52\x6f\x62\x08\xe5\xc8\x28\x5e\xa6\x99\xcc\xdf\xe1\xf4\x0a\x97\x57\x37\x38\x3b\x3d\xbf\x99\xb1\x8a\x67\x2b\xbe\x24\xb8\x75\x45\x96\x31\x21\x2b\x6d\x1c\x26\x0c\x00\x46\x85\x74\x23\x96\x30\xd6\xb6\x07\x30\x5c\x2d\x09\xe3\xd5\x14\x63\xa1\x0a\x6d\xf1\x76\x8e\xd9\x79\x58\x5d\xf0\x0a\xde\xb3\xb6\xc5\xd8\x92\x69\x44\x46\x97\x5c\x52\xd8\x1f\xaf\x70\x07\xa7\x4f\xb8\xa4\x32\x1c\x61\x69\x8a\xf7\x82\xca\x1c\x42\xe5\x74\x0b\xa1\xd0\xb6\xdb\x49\xde\x63\x21\x1c\xcb\xb4\xb2\x01\x62\x47\xb7\x89\x35\x3b\x75\xef\x23\xe2\x6e\xfa\x79\xa8\x1b\x48\x9a\x59\x84\x08\xf2\x9f\xb8\xcd\x78\xd0\xc7\x1c\x47\xc7\xc7\x61\x77\xd5\x01\x1f\x80\x54\x1e\x96\x09\x63\xc1\x00\xec\xf6\x30\x4c\xb7\xce\xd4\x99\x43\xdb\x2b\x6f\xd8\xbe\x3d\xc5\x16\x30\x6e\xd6\x55\x57\xcb\xfb\xad\x2f\xf7\x67\x36\x0c\x31\x4e\xd3\x60\x00\x6a\x4b\x39\xb8\x05\x0f\x91\xe4\x15\x0a\x6d\xa0\x17\xdf\x29\x73\x68\x78\x59\xd3\x14\x87\x90\xc4\x95\x85\xd2\x0e\x96\xdc\x14\x47\xfd\x07\x4b\x2e\x96\x8a\x75\x84\x72\x6f\x5e\xc7\x50\x42\xf2\xea\x8b\x75\x46\xa8\xe5\xd7\x38\x10\x05\xcf\xa8\xf5\xac\x57\x7e\xde\xeb\xb0\x2b\x8a\x40\x7f\x76\x1b\x27\xc4\x7b\x56\xd4\x2a\xc3\x44\xe2\xd5\xb3\xae\x25\xf8\x40\xae\x6b\xfc\x54\xd8\xaa\xe4\xeb\xde\x8d\x49\x32\xf4\xa3\xf7\xd5\x90\xab\x8d\x82\x9c\x3d\xb0\x2f\x90\xfe\xa9\xe6\xf5\x13\x9a\xcd\x50\x33\xf9\x4d\xa1\x9e\xe9\x11\x18\xcc\xd1\x0c\x78\x59\x3f\x50\xa5\x8d\xac\xff\xc0\x9d\xc9\x00\x75\x8a\x85\xd6\x65\xd2\x13\x89\x02\x72\x16\x6e\xf8\xe5\x9e\x4f\xe0\xc5\x1c\x87\x7d\x8d\xe7\xdd\x9e\xc2\x99\x9a\xe2\x41\xbf\xdd\xe8\x16\xd4\x1d\x7e\x90\xd1\x9f\xc3\x3c\xc6\x84\x82\x97\x96\xf6\xb9\xa5\x8b\xda\xba\xfd\xa6\xe3\xaf\xfb\x9e\x0f\xfb\xae\xb8\x12\xd9\xa4\x90\x6e\x76\x5d\x19\xa1\x5c\x31\x19\x3d\xc6\xfa\x91\x16\x7c\x71\xff\x72\x7f\xdd\xbd\xd8\x3c\xbb\x51\x92\x3c\xb4\xe8\xbf\x99\xdd\xce\xca\xbb\xf9\x7e\x5e\x3e\x3a\xf6\xdd\x3f\x6c\xe7\x97\x76\xbf\xfc\x19\x00\x00\xff\xff\x1a\xaf\xa4\x3e\xa3\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbe, 0xfc, 0x4d, 0xd5, 0xaa, 0x43, 0xd, 0x38, 0x2a, 0xe9, 0x1b, 0x28, 0x33, 0xa1, 0xf, 0x25, 0xb3, 0x72, 0xf8, 0xb5, 0xf, 0xf, 0x28, 0x3d, 0xdd, 0x4d, 0x3d, 0x95, 0x9e, 0xd1, 0x56, 0x3e}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\xc1\x6e\xdb\x3a\x10\x3c\x9b\x5f\x31\xcf\x08\x1e\xa4\x07\x3f\x29\x69\x8b\x1e\xda\xf8\xd4\xa4\x45\x0e\x49\x0a\x24\xe8\xa5\xe8\x81\x96\x56\x0e\x1b\x89\x14\xc8\x95\x6b\x57\xd1\xbf\x17\xa4\x64\xd7\x4e\xdc\xc2\x41\x2f\x3d\x99\x4b\xee\x0e\x77\x38\xa3\x75\x9a\xe2\x9d\xc9\x09\x73\xd2\x64\x25\x53\x8e\xd9\x0a\x73\xb3\x89\xa1\x34\x93\xd5\xb2\x4c\xb3\x2a\x7f\x8b\xb3\x6b\x5c\x5d\xdf\xe2\xfc\xec\xe2\x36\x11\xb5\xcc\xee\xe5\x9c\xc0\xab\x9a\x9c\x10\xaa\xaa\x8d\x65\x44\x02\x00\xc6\x45\xc5\xe3\x7e\xc5\xaa\xa2\x61\xe9\x56\x3a\x1b\x8b\x58\x88\x34\xc5\x7b\x45\x65\x0e\xa5\x73\x5a\x42\x69\x98\xd9\x57\xca\x18\x33\xc5\x22\x33\xda\x79\x9c\xb6\xfd\x1f\x56\xea\x39\xe1\xe8\x7e\x82\xa3\x05\xde\x4c\x91\x5c\x87\xbc\x4b\x62\x89\xae\x0b\xa8\x7d\xe5\x85\x07\x6a\x5b\x1c\x2d\x92\x2b\x59\x11\x1e\xc0\xe6\xa3\x74\x99\x2c\xd1\x75\x68\x94\xe6\xd7\xaf\x30\xc5\xc9\xe9\xa9\x4f\xba\xf7\xc5\x1e\x9f\x74\xee\x97\xb1\x10\x9e\x05\x7a\x74\x38\xb6\x4d\xc6\x68\x0f\x6d\xc1\xa7\xa9\xc2\xdf\x7d\x46\x2e\xb3\xaa\x66\x65\xf4\xfa\x10\x69\x8a\xbe\xb1\x3d\x87\x5b\x3d\xf4\xa1\xcf\xbb\x5d\xd5\x14\x48\x74\xdd\xd6\xce\xa3\x96\xc5\x28\x4d\x91\x95\x8a\x34\x43\x39\xf0\x1d\x6d\x22\x8d\x6f\x77\x2a\xbb\x5b\xb3\x51\x0e\xb2\x54\x0b\x4a\xc4\x68\xc8\xb8\x61\x63\xe5\x9c\x6c\xc0\xa8\xe0\xd8\x58\x72\xe1\xc7\xeb\x69\xa9\x0c\x4e\xa8\x88\x65\x2e\x59\x26\xa1\x35\x1f\xa1\x92\xf5\x67\xc7\x56\xe9\xf9\x97\x60\x8c\x42\x66\xd4\x76\x42\x0c\x34\x67\x8a\xd1\x38\xca\x21\x1d\xa4\x8f\x2a\x59\xa3\x30\x76\xad\xee\x42\x96\x0d\x4d\x70\x8c\x8a\xa4\x76\xd0\x86\xe1\x88\x27\x38\x19\x36\x1c\x71\x80\x0a\x38\x41\x32\x31\xca\x8d\xa6\x10\xbc\x7c\x21\x46\x95\x3f\xf5\x2e\x4a\x2e\x1b\xa6\xa5\xe8\x84\x38\x44\xa3\x9f\xfa\x9c\x2f\x83\x49\xbb\x4e\x14\x8d\xce\x10\x19\xfc\xd7\xa7\xc6\xf8\x40\x3c\xc8\xa4\x5c\x5d\xca\xd5\xa0\x40\x14\xef\x6a\x80\x36\xb4\x68\x89\x1b\xab\x61\x92\x27\x92\xf9\xa6\x9e\x80\xdf\xfc\x02\x7c\xb1\x0b\x1e\xaf\x2b\x86\x5b\xf6\xc0\x63\x8a\xc5\x4e\x07\x62\xb0\x45\xe9\xc2\xed\xcf\x21\x16\xed\x5c\x3e\xc1\xcc\x98\x32\xde\x5c\xed\x58\x72\x14\xf7\xe2\xaa\x02\x26\xf1\xb2\xfc\x7b\xd0\xf7\xf6\xcf\x14\xc7\x03\xce\xef\x1f\x6b\x02\xb6\x0d\x85\xc4\xc1\x46\x43\xee\x56\x67\x0f\xf8\x4e\xd6\x7c\xf2\xde\x09\x15\x85\x2c\x1d\xed\x7d\xe5\xcb\xc6\xf1\xf3\x64\xfc\x23\x96\xd3\x5d\x96\xb5\xd4\x2a\x8b\x8a\x8a\x93\x9b\xda\x2a\xcd\x45\x34\x1e\x7c\xbf\x85\xd0\x75\xfe\x7b\x1c\x9c\x3f\x8e\xe3\x81\xfa\xdf\x61\xa9\x9e\xfc\xc3\xf4\x10\xf6\x7b\x3d\xd8\x8f\xa6\xed\x29\xf5\xa4\xed\xac\x34\x9a\xa2\xe5\xd6\x4e\xbb\x99\x84\x87\x4c\xfb\xbd\xed\x2f\xf7\x3d\xda\xa3\xf9\x3a\x94\x87\x39\x16\x2a\xfc\x4a\x6c\xf1\x0e\x9b\xfe\x0f\xa8\xfb\x11\x00\x00\xff\xff\x3a\x17\x13\x47\x16\x07\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3, 0x1d, 0xe1, 0x85, 0x23, 0xe1, 0xbf, 0xf2, 0x9b, 0x5d, 0x28, 0x13, 0xe5, 0xe, 0x9e, 0x3d, 0x9f, 0xa2, 0xf6, 0x5e, 0x71, 0x3d, 0x6c, 0xa4, 0xb6, 0xc1, 0x26, 0x1f, 0x67, 0xa4, 0x7b, 0xf2}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xcd\x6a\xe3\x30\x10\xbe\xeb\x29\x06\xe3\x83\x0d\x59\xfb\xbe\xb0\x87\x65\x97\x42\x2f\xad\x69\x0f\x3d\x16\x55\x95\xdd\xa1\xb6\xa5\x4a\x4a\x48\x50\xf5\xee\x65\x64\x25\x38\xc6\x25\xa5\xf4\x66\xcf\xcf\xf7\xa3\xf9\x34\x17\xaf\xbc\x93\xe0\x0e\x5a\x5a\xc6\x70\xd0\xca\x38\x28\x18\x00\x40\x26\xd4\xe8\xe4\xde\x65\xd3\x1f\xaa\x8c\x95\x8c\x79\xff\x0b\x0c\x1f\x3b\x09\xf9\xe3\x06\x72\x84\xdf\x7f\xa0\xba\x1e\x9d\x34\x2d\x17\xd2\x42\x08\xcc\x7b\xc8\xb1\xfa\x2f\xad\x30\xa8\x1d\xaa\x91\x8a\xc4\x00\xa9\x83\x56\xf7\xfc\x70\xc3\x07\x09\x21\x00\x1e\x97\xc1\x47\x26\x62\xc0\x16\x94\x81\x42\xbe\xd1\x7c\x1c\xcc\xac\x34\x3b\x14\xd2\x64\xe5\xa2\xee\x94\xe1\x1d\xd5\x43\x88\xfb\xf7\xce\xe0\xd8\x15\x25\xd8\xf8\x71\xc2\x94\xe3\x33\x09\x49\xff\x73\x13\x4a\x93\x8b\x1c\xab\x5b\x1d\x0d\xd0\x44\x5d\x47\xb5\x4a\x4f\x34\xef\xe0\x54\xc3\xad\xe0\x3d\x49\x4e\x9d\x85\xc5\x04\xbc\xbe\x53\xa4\xce\x95\x32\x03\x77\x0d\x37\x7c\x20\xae\x12\xce\x1b\x77\xd2\x6e\x7b\x67\x1f\xd0\xbd\x34\xd3\x6d\xce\x5c\x66\xb4\x72\x51\x1f\x6d\xff\x9b\x8e\xf7\x1d\xa9\xb3\xf5\x42\xb8\x3d\xa4\x1c\x54\xa9\xb6\xf9\x61\x27\xde\x1f\x4f\x13\xd8\xfc\x4e\x31\x31\x0d\x47\xd3\xa8\x1e\xc5\x81\xce\xb9\x15\x2e\x85\xe4\x6f\xdf\xc3\x93\x52\xfd\x17\xf3\x88\x2d\x8c\x72\x25\x4b\xd4\xae\x6b\xd0\x1c\x8d\x85\x56\x99\x79\x18\xfd\x69\xfe\xec\x75\x96\x8c\x6b\xe1\xf9\x3c\x39\xab\xa2\x77\x11\x41\xe9\xaa\x89\x3a\x2e\x81\x50\x63\xb7\xc0\x3d\xc1\xa6\xd7\xbb\xf8\x19\xd8\x47\x00\x00\x00\xff\xff\xf0\x4f\x23\x75\xfc\x03\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xac, 0x77, 0x38, 0x72, 0x67, 0x12, 0xac, 0x40, 0x5c, 0xb6, 0x92, 0x9, 0x6e, 0xd8, 0xf4, 0xde, 0x4d, 0x9e, 0x30, 0x85, 0x95, 0xa4, 0xa1, 0x26, 0x9b, 0x9c, 0xa9, 0xe4, 0xd9, 0x43, 0xc0, 0x37}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xc1\x6a\xf3\x30\x10\x84\xef\x7a\x8a\xc1\xf8\x90\x40\x62\xc1\x7f\xcc\x4f\x4f\x4d\x0f\xa5\x90\xe4\x10\xda\x63\x51\xe4\xad\x22\x62\x4b\x42\x5e\xbb\x35\xae\xdf\xbd\xc8\x4e\x03\xa5\x97\xea\xa4\xfd\x66\x67\x98\x95\x12\xf7\xbe\x24\x18\x72\x14\x15\x53\x89\x53\x0f\xe3\x6f\x33\xac\x63\x8a\x4e\x55\x52\xd7\xe5\x7f\x6c\xf7\xd8\xed\x8f\x78\xd8\x3e\x1e\x0b\x11\x94\xbe\x28\x43\x08\xca\xc6\x46\x08\x5b\x07\x1f\x19\x0b\x01\x00\x99\xf6\x8e\xe9\x83\x33\x31\x8f\xc6\xf2\xb9\x3d\x15\xda\xd7\x52\xf9\x66\x5d\x52\x27\x8d\x5f\x37\xec\xa3\x32\x24\xbb\x7f\x32\x5c\x8c\x3c\x33\x07\x5d\x59\x72\x9c\x4d\xae\xe2\x0f\x3e\xee\x03\x35\x99\x58\x0a\x31\x0c\x6b\x44\xe5\x0c\x21\x7f\x5d\x21\xef\xb0\xb9\x43\x71\x48\xdd\x30\x8e\x93\x9a\x07\xa7\x6a\x4a\x3c\xef\x8a\x5d\xfa\x7e\x82\xfd\x41\x35\x5a\x55\x69\x47\x4a\xbc\x58\x3e\x0f\xc3\xf7\xe6\x38\xe2\xdd\x56\x15\x54\x08\x55\x8f\xc4\xaf\xbe\x71\x44\xa7\xaa\x96\xc0\x1e\xfb\xc0\xd6\xbb\x46\xcc\xf2\x96\x1a\x1d\xed\x84\x52\xe4\x5b\xeb\xf4\xaf\xd0\x45\x77\xcd\x3a\xf6\x21\xcd\x4b\xa4\x9a\x18\xa6\xa3\x23\x71\x1b\xdd\x44\x66\x90\xde\x13\xf5\x1b\x64\x3f\x0a\x64\xab\x9b\xfa\x9c\xaa\x6c\xd0\xcd\x64\x14\xf3\xb5\xe4\xca\xd4\xe0\x2b\x00\x00\xff\xff\x50\x88\x80\xcd\xe2\x01\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x73, 0x89, 0xf6, 0xc, 0x82, 0x8, 0xa1, 0x92, 0x58, 0x90, 0x90, 0x68, 0xb9, 0x22, 0x18, 0xee, 0x5e, 0xb3, 0xec, 0x29, 0x1c, 0xeb, 0xe4, 0x82, 0xaa, 0x9e, 0xe5, 0x44, 0x4f, 0x66, 0xf3, 0xda}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5d\x6f\xdb\xbc\x15\xbe\xf7\xaf\x38\xaf\xe0\x77\x90\x5e\x38\xd2\xb6\xcb\x0c\xbe\xd8\xd2\x2e\x2b\x3a\x24\xc1\x92\xad\x17\xeb\x10\x30\x12\x65\x73\x91\x48\x95\xa4\x95\x78\x8e\xfe\xfb\xc0\x2f\x89\x92\x25\xc7\xee\x8a\x75\x43\x93\x2b\x85\x3c\xdf\x7c\xce\xe1\x23\x39\x49\xe0\x82\x65\x18\x56\x98\x62\x8e\x24\xce\xe0\x61\x0b\x2b\xd6\xfe\x0f\x35\x41\x40\xa8\xc4\x9c\xa2\x22\x49\xcb\x2c\x11\x98\xd7\x24\xc5\xbf\x83\x77\xd7\x70\x75\x7d\x07\xef\xdf\x7d\xb8\x8b\x67\x15\x4a\x1f\xd1\x0a\xc3\x6e\x07\xf1\x15\x2a\x31\x34\xcd\x6c\x46\xca\x8a\x71\x09\xe1\x0c\x00\x20\x48\x19\x95\xf8\x59\x06\xe6\x3f\xc2\x82\x99\x79\x5a\x11\xb9\xde\x3c\xc4\x29\x2b\x13\xc4\xc4\x59\x86\xeb\x64\xc5\xce\x84\x64\x1c\xad\x70\x52\xff\x36\xa9\x1e\x57\x09\xa6\x59\xc5\x08\x75\xda\x47\xe9\xa4\x1c\x67\x98\x4a\x82\x8a\x53\xb4\xd6\x52\x56\x69\x41\xf0\xf1\xbe\x6c\x45\x84\x91\x8f\x8f\xd0\x90\xdb\x4a\x89\x47\xb3\x59\x8d\x38\xdc\x43\x17\x69\x7c\xc3\x59\x4d\x32\xcc\xed\x8e\xcb\x3b\xfe\x1b\x2a\x36\xd8\x2e\xde\x1a\x4b\x4e\xc6\xf9\x8f\x6f\xcd\xc3\x7b\xce\x99\xdb\xeb\xb2\x89\xaf\x2b\x49\x18\x15\xb3\x59\x92\xc0\xdd\xb6\xc2\x40\x04\xc8\x35\x06\x15\x0c\xe4\x8c\xf7\xce\x2e\x65\x54\x48\x23\xb6\x84\xc0\xdb\x09\xb4\xbe\xf5\x04\xa8\x46\xa4\x40\x0f\x05\x86\x0a\x11\x2e\x62\xab\x17\xce\x76\xbb\x33\xe0\x88\xae\x30\xcc\xef\x17\x30\xaf\xe1\x7c\x09\xf1\x8d\x92\x51\xd6\x55\x9d\x94\x04\xc9\x81\x32\x09\xf3\x3a\xbe\x2c\xd8\x03\x2a\xba\x3d\xb5\xf6\x0e\x8b\x94\x13\x1d\x75\x7f\xe3\x8f\x9b\xa2\xb0\xe1\xd8\xe8\xe6\x2e\xbc\x7b\x23\xd1\x06\xeb\x3c\x61\x9a\x29\x1b\xde\x63\x34\x7b\x25\xc8\xa9\x00\xd5\xfa\xbc\xa2\xca\xc3\xf9\xb2\x75\xf6\x02\x92\xdd\x20\x91\x1a\x99\x24\x81\x4f\x44\xae\x55\x30\x46\xb2\x69\xe0\x89\x14\x05\xa0\xaa\x2a\xb6\xd0\x0b\x12\x6a\x75\xb4\x20\x19\xb8\x13\x1a\x4d\x3f\xdf\xd0\x74\xcf\x68\x58\x5b\x5b\xfa\xa4\x9a\x26\x02\x15\x3e\xec\x74\xde\xea\x8f\x63\xb9\xe1\x54\xaf\x76\x8b\x1f\xf1\xf6\x7c\xbf\x94\x8b\x76\x5f\x63\xed\x1c\x6a\xb3\xd2\xcc\x7a\x75\xf3\x1e\x27\x2a\xf8\x81\xe6\xec\xe8\x63\x7e\xa5\x90\x9e\x09\x55\x12\x22\xaa\x02\x6d\x1d\x48\x5d\xbc\x9d\x9d\xe5\x84\x94\x17\xb4\x53\xb0\x5d\x73\x65\xdd\x57\x9c\x50\x99\x43\xf0\xb3\xf8\x59\x04\x10\xce\xeb\xf8\x36\x65\x95\x1f\x4e\xa4\x57\x2f\x90\xc4\x2b\xc6\xb7\xbd\x8d\x7e\xa0\xf8\x0b\xb4\xea\x01\x7b\xf8\x27\x4e\x65\x30\x0c\xd7\xf7\xbe\x84\xe0\xba\x2f\x35\x08\x37\x49\xe0\x12\xcb\x7d\x30\xad\xb0\x1c\x85\x52\xce\x59\x09\x25\x96\x28\x43\x12\xc5\xda\x84\x46\xcf\xc0\x48\x58\xc2\x2f\xc3\x58\x14\x84\xc2\x1e\xa4\x16\xf0\xc0\x58\x11\x81\x05\x55\xbd\x00\xf6\xa8\x0a\x56\xc6\x97\x58\x86\xbd\xe6\x3b\xeb\x37\x5f\xa4\x15\x48\x0e\x3f\xb1\xc7\x7d\x48\x7a\x4e\x5e\xe0\x5f\x98\x33\x8d\x3a\xed\x30\x47\x85\xc0\x16\x7b\x9e\x46\x1d\xf7\x23\x8b\x16\x20\xf9\xc6\x09\xba\x4a\x09\x93\x64\x57\x13\x5d\x2a\x31\x51\x2a\x42\x25\x1b\x2b\x95\x38\xa6\x54\x0b\xd8\x6b\xbf\x11\x29\x9b\xba\x4d\xa2\x8c\x6f\x5f\x29\xdb\x02\xea\xc8\x4b\x7e\xa2\xf5\x46\x3b\x4f\x99\x10\x15\x4a\x71\xaf\xfd\x24\x2e\xab\x42\xdd\xe5\x81\x1a\xd2\xf7\x14\x3f\x05\x50\xa2\x47\x7c\x5b\xa8\x11\x1e\x8e\x75\x5e\xa4\x17\xf1\xd3\xb4\x19\xe1\xdb\x70\x16\xf4\x40\xa1\xe9\x84\x77\x55\x58\x3d\xe0\x5e\x53\x1d\xe6\x99\xe1\x9c\xd0\xce\xaf\x67\x7c\x5e\x51\x95\x38\xa1\x19\x7e\x86\x18\x7e\x3d\x31\x3d\xe6\xea\x74\x7d\xc1\xdf\x68\xdb\x6e\x7b\x58\x47\x23\xde\xeb\xd8\x61\xfa\xbd\x14\x2a\x0a\xf3\x7a\xbf\x75\xed\xe3\x58\x16\xe6\x10\xba\xcb\xa4\x9f\x84\x5b\xcf\xe9\x7e\xcc\x76\x43\xb7\xe0\x3c\xa7\x63\x33\x53\xdd\x3e\xca\x89\x01\x30\x34\x8d\x7a\x50\x2a\x4d\xe3\xee\xfc\x0a\x71\x81\x33\x10\x92\x6f\x52\x39\xd3\x0c\x60\xa0\xa1\x14\x9a\xc6\x4a\x58\x08\xeb\xfa\xc3\xdf\xff\xa1\x6e\x93\xb6\xdf\xfe\x82\xbf\x6c\x08\xc7\x99\xd9\x1d\xab\xa9\xda\x70\xe1\xb6\xd2\xb6\x5c\x7f\x42\x42\x3b\x45\x84\x8f\xa4\x02\xa0\x87\x4f\x77\x59\x4c\x8a\x75\xdb\xb6\x15\x27\xe6\xa8\xb9\x62\x51\x71\x5c\xb4\xad\xf4\xb7\x8e\xf6\xe8\x78\x2f\x5b\x5e\x7e\x54\xc0\x9d\xf8\x7f\xbb\xbe\x0e\x76\x5c\xe0\x9b\x09\xec\xe9\x41\xac\x25\x0c\x4b\x11\xba\x7b\xf4\x04\xfe\x65\x02\xaf\x86\xf5\x1c\xb2\x1a\xb2\x4a\x3a\x4c\x46\x10\x4e\x19\x5a\x00\x56\xac\x38\x6a\x87\xb1\xd8\x14\x52\x55\xed\x57\x13\x0a\xdd\x7d\xa5\x0b\x7f\x0e\xca\xcf\xc2\xbf\x6b\x14\x65\xbe\x57\x57\xc0\xf9\xd2\x1e\x87\x0e\xa5\x53\x14\x4f\x44\xa6\x6b\xa8\xe3\x8f\x78\xeb\x2d\x8f\xf7\xcc\x89\x7d\xa3\xfe\x52\x24\x70\x77\x2e\x1e\x93\x3b\x6f\x45\xba\x5c\xe3\x57\x90\xb0\xec\xee\xd2\x81\xe2\x61\xad\xda\xbc\x99\x98\xab\xd9\x07\x48\xd4\x4b\xcb\x43\xf5\x74\x27\x9e\xd8\x8d\xff\xff\x35\x18\xeb\xee\x53\x3b\xfc\x84\x2a\x68\xca\xe3\xf8\x5b\xca\x68\x8d\xb9\xf4\x10\x3f\x9d\x63\x38\x9d\x61\xd4\xf3\x40\x72\xe8\x71\xbd\xff\xb8\xfe\xc7\x9f\x81\x7e\x3f\xf6\xd5\x1a\xc0\x85\x2a\xcb\x9e\xbd\xa3\xa3\xe9\x78\x68\x6b\xf3\xd0\x81\x36\xfe\x74\x38\xa1\x97\x15\x43\x3e\x2e\xa4\x3d\x12\x4d\x49\xb1\xe8\xde\xff\xaf\xf0\x93\x1a\x83\xce\xbe\xfe\x0e\x10\x1a\x86\xd1\xc3\xc5\x99\x43\xe6\xde\x14\xf7\x99\xaa\x09\x69\xa1\x7c\xcc\x0e\x73\xb2\xff\x6d\x26\xd3\x6a\xbc\x71\x99\x37\x2e\xf3\xdd\xb9\x4c\x28\xcc\x3b\xa2\xde\x8c\xde\x98\xcd\x1b\xb3\x79\x63\x36\xdf\x98\xd9\x88\xf8\x07\xe6\x36\xbb\x1d\xc9\x81\x9a\x8f\x12\x81\xfd\x4c\xdf\xfb\xfa\xe8\xa5\x23\x62\xe5\xf3\x86\x15\x24\xdd\xc6\xbf\x2f\x0a\x78\x79\xe9\xaf\x79\x03\x6f\x7a\xeb\x38\xc2\xd2\x4f\x7a\x9a\xbc\xfc\x95\x8a\x4d\x55\x31\x2e\x1d\x7f\xa9\xa3\x3d\x1b\xfb\xc9\xec\x76\xaa\x1e\x23\x59\x7e\x3d\xd5\xb3\x66\xf5\xf7\x9b\x71\xe7\x23\xc8\xcf\x70\x8e\x36\x85\xec\x83\xf3\xa8\x23\x39\xf1\x38\xc6\x60\xf8\xf5\x45\x6d\x66\x47\x15\x33\x65\x54\x12\x3a\x80\xe2\xb0\x46\x3f\x24\x0b\xf6\x3e\x6d\x7e\xef\xaf\x93\x2e\x94\x13\xbe\x50\x4e\xa6\x73\x38\x1b\x7f\x6f\x8c\xe0\x83\xa5\x5a\xaf\x70\x7c\x30\x37\x86\x0f\x6e\xfd\x38\xf6\xfb\x5f\x92\x38\xf1\xbb\x35\x11\xe0\xe2\x34\x74\x2c\xe5\x58\x55\x00\x81\xfd\xa5\x19\x1e\xb6\xae\x21\xbd\x2f\xfb\x86\x80\xcd\x2b\xda\x34\x91\xe7\x34\xd4\x9f\x3c\xe3\x1b\xc4\x51\x29\xe2\x5b\xc9\x09\x5d\xd9\x1f\x43\x0c\x5a\x15\x0c\xfc\x8d\x0e\x85\xa9\x7c\xb6\x2f\xd4\xca\x6b\xfc\x07\x94\x3e\xae\x38\xdb\xd0\x2c\x8c\x86\x48\x15\x5e\x0f\x7f\x22\x72\x7d\x61\x74\xc2\x54\x3e\x2f\xa0\x17\xc1\x05\x2a\x0a\xcc\x3b\x88\xee\x97\xc9\xd3\x3f\x50\xb1\x43\x39\x0f\x22\x68\x33\xb0\x6b\x83\x88\x4e\xaa\x49\x86\x73\xcc\xb5\xf3\x30\xda\x0d\xe6\x85\xee\x44\xb9\x76\x98\xb0\xe6\x6f\x90\x5c\x9b\xa4\x87\xa3\xd1\xfe\xac\x86\x68\x06\x21\xfe\x62\x95\x83\x20\xb2\xff\x79\x43\x35\x1a\xbb\xe8\xcc\x28\x91\x6b\x58\x42\xb0\xf8\x1c\x7c\x0e\xf6\x66\xef\xc8\x20\x57\x7f\x98\x73\x50\x6c\x22\x67\xbc\x44\xd2\xcc\x91\xc0\xa4\xae\x70\xac\x7f\xaa\x51\x32\xad\x83\xa6\x81\xee\xc4\x1b\xef\xf4\x6b\xc4\x15\x85\x9e\x7e\x35\x70\x82\xac\x92\x8b\xd6\xef\xc1\x97\x03\x4d\xab\x3a\x0f\x24\xd7\x6a\x3f\x2d\xd5\xa0\x1a\xdc\x0e\x06\x7b\xde\x80\x1e\x45\x65\xbf\x3f\x2f\x50\x89\x35\x3b\xda\x47\xe6\x1d\x27\xe5\x9f\x91\x90\x16\xa2\xef\x69\xa6\x5e\x07\xd6\x17\xac\x2c\x51\xd3\xa8\x14\x1c\x66\xbb\xba\xfe\x3b\x00\x00\xff\xff\x53\x7a\xf9\x02\x67\x22\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x92, 0xc2, 0xde, 0xaf, 0x4e, 0x1b, 0x4f, 0x2, 0x46, 0xb4, 0x42, 0x7, 0xb6, 0xfc, 0xb2, 0x30, 0xf3, 0x73, 0x1d, 0xfb, 0x3b, 0x38, 0x4d, 0xe8, 0xed, 0xb3, 0xea, 0xe5, 0xfe, 0xba, 0xc6, 0xf9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl":  {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl":      {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl":    {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl":      {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl":   {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
