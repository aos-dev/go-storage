// Code generated by go-bindata. DO NOT EDIT.
// sources:
// definitions/features.toml (1.617kB)
// definitions/fields.toml (703B)
// definitions/info_object_meta.toml (980B)
// definitions/info_storage_meta.toml (1.193kB)
// definitions/operations.toml (8.821kB)
// definitions/pairs.toml (1.489kB)
// cmd/definitions/tmpl/function.tmpl (580B)
// cmd/definitions/tmpl/info.tmpl (1.762kB)
// cmd/definitions/tmpl/object.tmpl (2.485kB)
// cmd/definitions/tmpl/operation.tmpl (1.748kB)
// cmd/definitions/tmpl/pair.tmpl (537B)
// cmd/definitions/tmpl/service.tmpl (11.404kB)

// +build tools

package bindata

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _definitionsFeaturesToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x6b\xdb\x4e\x10\xc5\xef\x02\x7d\x87\x47\x2e\xff\x7f\xc1\x09\xed\xa5\xb4\x85\x9e\x4b\x6f\x85\xf6\x16\x4a\x18\x6b\xc7\xd5\x34\xab\x1d\x31\x3b\x92\xc9\xb7\x2f\x2b\x59\xb1\x31\x91\x29\x38\x87\xde\x6c\xed\xcc\x9b\x37\xef\xb7\xd2\x7d\x54\xcd\xfc\xd0\x93\xd8\xcf\xba\x0a\x9c\x1b\x93\xde\x45\x13\x3e\xe3\xe6\xe6\xa6\xae\x8e\xe7\xd8\x31\xf9\x60\x0c\xc9\x08\x9c\xe5\x57\xe2\x80\x9d\x1a\x86\xcc\x96\xb1\x6f\x15\x41\xd3\x7f\x8e\x3d\x25\x47\x76\x93\xc6\x31\x35\x36\x2d\x37\x8f\xf9\xae\xae\xea\xea\xeb\x0e\xde\x4a\x3e\xd5\xe2\x44\xdb\xc8\x61\x03\x6f\x19\x99\x6d\x94\x86\xb1\x97\x18\x91\xd4\x61\xec\x83\x25\x50\x02\x9b\xa9\x4d\x03\xcb\xf3\x3c\xf4\xbd\xda\x3c\x60\x96\xfe\x71\xaa\xbb\xa7\x0c\x49\x6e\x1a\x86\x86\x03\x24\xe1\xcb\xf7\x6f\xb7\xef\xde\x7e\xbc\xab\xab\x69\xaf\xba\xba\x1f\xc5\x7c\xa0\xf8\x10\xd6\x76\x3f\x29\x58\x5d\x9e\x9e\x2d\x7b\x4b\x8e\xa0\x9c\x4b\x06\x2d\x8d\x8c\x44\x2e\x23\xa3\xb4\x2f\x76\xb7\xc3\x9c\x4f\x86\x2b\x7a\xd3\x51\x02\x23\x4b\x37\x44\x72\x0e\xd0\x9e\x8d\x8a\x85\x79\xa5\x5b\xbc\x90\x57\x90\x3c\x05\x86\xff\x4b\x60\x81\x77\x34\x44\xc7\x96\x5b\x1a\x45\xed\xcd\x0b\x39\x4e\x67\x8c\x28\x8f\x0c\x39\xf3\x48\xe9\xe9\xd4\xe0\xdd\xca\xd0\x75\x48\xcb\x66\xc7\x25\x8a\xdc\x62\xa7\x24\xdf\x18\x93\x73\x49\x71\x73\xf8\xbd\x41\x94\xec\x1b\x04\x8e\x5c\xfe\x51\x0a\xc8\x0a\x4d\xd7\x81\xd4\xed\x6f\x6e\xfc\xa1\x63\xa7\x40\x4e\x97\xa1\x9e\x15\x5f\x03\x78\x96\xc2\xb3\xd4\x3f\x0d\x7b\xc5\xec\x6b\x80\x3f\x97\x3e\xbd\x04\xa5\x7d\x86\x9e\x9d\xfc\xd5\x90\x47\x49\x8f\x97\x39\x97\x8a\x6b\xe0\x2e\x6b\x96\xf2\xa2\xb5\xce\x6a\x3d\x2a\x1b\x12\x1a\xed\x7a\x72\xd9\x46\x46\xa7\x81\x3f\x1d\x5e\x85\x49\x13\xa3\xd0\x32\xaf\x63\x6f\x35\xe4\xcd\x74\x7b\x28\x46\xdd\xc3\x98\xc2\x5c\xb7\x33\xed\xa0\x31\xdc\x66\x7f\x8a\x87\xde\x39\xf5\x35\x7e\xe5\x5b\x79\xd9\x98\xa4\x65\x34\x65\xa8\xb7\x6c\x4b\xcd\xdf\xa2\xf9\xf0\xfe\x48\xe6\x4f\x00\x00\x00\xff\xff\x93\xa3\x27\xc3\x51\x06\x00\x00")

func definitionsFeaturesTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsFeaturesToml,
		"definitions/features.toml",
	)
}

func definitionsFeaturesToml() (*asset, error) {
	bytes, err := definitionsFeaturesTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/features.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5f, 0x6f, 0xdb, 0x18, 0x99, 0x8, 0x38, 0xa, 0xb1, 0xa2, 0x8f, 0x2, 0x18, 0x53, 0x23, 0x34, 0x7b, 0x96, 0x1c, 0xdf, 0x8, 0xf5, 0xaa, 0x9c, 0xc1, 0x62, 0x4, 0x4, 0x8d, 0x89, 0xf2, 0x23}}
	return a, nil
}

var _definitionsFieldsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xbd\x4e\xc3\x40\x10\x84\x7b\x4b\x7e\x87\x28\x65\x0a\x57\x88\x8e\x86\x8e\x02\x11\x41\x41\x61\xa5\x58\xdb\x1b\xb3\x90\xf8\xac\xb9\x41\xfc\x3c\x3d\x85\xed\xb0\x07\xbe\xd6\xdf\xee\xcc\xec\xf8\xea\xc6\x0e\x65\xc1\xaf\x51\x37\x37\x9b\xed\xee\xf6\x14\xda\xb7\x3b\x2a\x84\x01\xdb\xb2\x28\x8b\xba\xb1\xce\x4d\x44\xc2\x86\xfe\x42\xa2\x43\xf5\xc1\xc3\x2e\x32\xb3\xa6\x80\x23\x0a\x2c\x4e\x36\x74\xfa\xe9\x90\x0d\x9c\xc0\x59\x29\x3e\xe5\x13\x03\xa4\xd7\x7b\xa5\x4c\x03\x43\xba\x75\x7d\x35\x7f\x96\xb3\x66\x42\x04\xaf\xf7\xd0\xbc\x6a\x3b\x7b\x85\xe3\x31\x2a\xd7\xf5\x82\xfd\xdf\x4a\xcb\x1a\xc5\xe0\x3b\xa9\xaa\x6a\x2f\x76\x81\xf0\xc2\xbb\xbd\x80\xbf\x24\xad\x32\x81\x7c\xc9\x5c\x31\xda\x5f\xbd\x34\x8e\x2f\xda\x42\xf5\xa8\xd2\xe9\x8c\xa2\x7d\xeb\xfa\x95\x11\x6d\xc6\x2e\xd2\x56\x7e\x03\x52\xcf\xc8\x00\xaf\xbc\x4c\x4d\xf4\x1d\xa7\x8c\xf8\x47\x9a\xf5\x19\xc6\x65\x89\x82\x5e\x57\x9f\xd3\x4f\x00\x00\x00\xff\xff\x57\xd9\x59\x67\xbf\x02\x00\x00")

func definitionsFieldsTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsFieldsToml,
		"definitions/fields.toml",
	)
}

func definitionsFieldsToml() (*asset, error) {
	bytes, err := definitionsFieldsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/fields.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x77, 0x16, 0x26, 0x7, 0x25, 0x87, 0x65, 0x62, 0x4, 0x66, 0x65, 0x98, 0x3a, 0xb, 0x61, 0x89, 0x47, 0x92, 0xac, 0xcd, 0x20, 0x2a, 0xf, 0x39, 0xce, 0x28, 0x68, 0x77, 0xa, 0x8, 0xf5, 0xa6}}
	return a, nil
}

var _definitionsInfo_object_metaToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x8e\xd3\x40\x0c\xbd\x57\xea\x3f\x58\xbd\xec\x29\x7b\x02\x6e\x7b\x40\xda\x0b\x12\xd5\x22\xb1\x88\x43\xb5\x87\x69\xc7\x49\x4c\x33\xe3\xc1\x76\x80\x0a\xf1\xef\x68\x26\x09\x34\x6d\x2a\xed\x6d\xc6\x7e\x7e\xcf\x7e\xf6\xce\xa5\x84\xd1\x57\x5c\xd7\x8a\xf6\xb2\x5e\xd9\x29\x21\x3c\xc0\x86\xa2\xbd\x7b\xb3\x59\xaf\x3c\xea\x41\x28\x19\x71\xcc\xe1\xf7\x05\xfe\x54\xd0\x40\x0a\xd6\x22\x0c\xb5\xc0\x75\xf9\x0d\x84\xc0\xfb\x6f\x78\xb0\xfb\xcd\x7a\xb5\x5e\xed\x0e\x1c\x0d\xa3\x55\x1d\xc6\xc6\xda\x05\x95\x33\x4c\xf0\x6f\xcf\x00\x6a\x42\xb1\x99\x23\x72\xee\x06\x04\xcd\x35\x37\x52\xe4\x97\x12\xf8\x2b\xb1\x18\x3c\x80\x49\x8f\x57\xd3\x7e\x78\x9c\x66\xec\x23\x7d\xef\x11\x8e\x78\x02\x8a\xa0\xc6\xe2\x1a\x1c\xa7\xeb\x9c\x5a\x15\xd8\x53\x4d\x78\x2e\x62\x14\xf0\xfe\x99\x02\x8e\x30\x8a\xc7\xca\x9c\x34\x33\x9f\xff\x75\x72\x21\xfd\x91\xe2\xf1\xb9\x80\xa7\x16\xf4\x14\x32\x05\x0c\x14\x50\xb3\x40\xf9\xcf\x9c\x0e\xec\xcf\xbd\x79\x2a\xb9\x2d\x7b\xbc\x9e\x35\xa3\xfb\xce\x28\x39\xb1\x6a\xd9\x9d\x8b\x9e\xb6\x13\xfc\xbf\x2f\xf9\x07\xe4\xf3\xf2\xcb\x73\xd6\x4c\x72\xb3\x65\xbf\xd2\xf4\x4f\xce\xda\x4c\x8f\x64\x2d\xca\x70\x53\x7b\xe5\xae\xb7\x2c\x67\x2d\xf0\x10\x14\xec\x9c\xd1\x8f\x31\x68\xfc\xd3\x89\xd7\x69\x35\x77\x0a\x5f\x59\x8e\x8f\x24\xe0\x31\x1f\xa4\x02\x47\xe8\x15\xe5\x4e\x81\x62\xea\xa7\x1e\xf5\xa4\x86\xa1\x0a\x68\xce\x3b\x73\xf3\xdb\x44\xa9\xdd\x01\x7f\xff\xb9\xb6\xe2\x73\x29\xdb\x8e\x55\x45\x15\x15\x06\x32\xf0\x58\x53\x44\x0f\x13\xe9\x28\x95\xd5\x97\x84\x82\x4b\xbb\xc1\x9b\x97\x5b\xce\x7f\x51\x94\x4b\xb1\x4c\xb7\x28\xf5\x37\x00\x00\xff\xff\xe1\x5c\x33\x3c\xd4\x03\x00\x00")

func definitionsInfo_object_metaTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsInfo_object_metaToml,
		"definitions/info_object_meta.toml",
	)
}

func definitionsInfo_object_metaToml() (*asset, error) {
	bytes, err := definitionsInfo_object_metaTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/info_object_meta.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd7, 0x54, 0xee, 0x26, 0x7f, 0x5e, 0xca, 0x23, 0x78, 0xd9, 0xf8, 0x1e, 0x55, 0xba, 0xa7, 0x99, 0x2a, 0xe, 0xcc, 0x3c, 0xe2, 0x1c, 0x9f, 0x4a, 0x69, 0x76, 0x6f, 0xbc, 0x1d, 0x51, 0x1e, 0x8d}}
	return a, nil
}

var _definitionsInfo_storage_metaToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xcd\x6e\xab\x30\x10\x85\xf7\x48\xbc\x83\x95\x3d\x77\x75\xd5\x5d\x1e\x21\xab\x2e\xab\x2e\x26\x78\x48\x47\x8d\x7f\x34\x1e\x1a\x68\xd5\x77\xaf\x6c\x03\x6a\x44\x92\x92\xb0\xc4\xcc\xf9\xbe\x63\x79\x5e\xc0\x7b\xb4\xba\xb2\xad\xd9\x23\x57\x06\x3a\x32\xad\x79\x2d\x0b\xe9\x3d\xaa\xad\xda\x90\x95\x4d\x59\x68\x0c\x35\x93\x17\x72\x36\x1e\xee\xa0\x53\x39\xa8\x72\x30\x28\xb2\xe3\x89\xf3\xc8\x10\x27\xff\x6d\xca\xa2\x2c\x46\x43\xa0\x4f\xbc\xcc\x7f\xfa\x7f\xd3\x10\x83\x11\xef\x91\xff\x50\x88\x13\x38\x3e\x2e\x4a\xf1\x49\x77\x45\x55\x3b\xdf\xdf\xaf\x88\x83\x99\xdc\x38\x56\x91\x31\x03\x37\x28\xf5\xdb\x5a\x72\x82\xcc\xd0\x47\x57\xa7\xcf\x5f\xc0\x20\x4c\xf6\x90\x7f\x1b\xf7\x81\x6b\xc5\x91\x31\xf3\x9a\xf6\x28\xe4\x81\xe5\xfe\xf5\x4a\xf4\x18\x1d\x16\x2c\xbe\xc8\x84\xbb\x21\x7a\xec\x1a\x09\x9a\xee\xa2\xb1\x21\x8b\x5a\xed\x7b\x15\xc4\x31\x1c\x90\xaf\x38\xc8\x2e\x74\xe4\xc1\x45\x0e\x0b\x06\x2f\x3d\x12\x76\xde\xb1\xa8\xad\x12\x6e\x31\x4d\x86\x3e\x08\x9a\xca\xa0\x80\x06\x81\xf3\x1a\xc8\x0d\xd4\xf8\xf5\x3d\x2f\xf3\x9c\x62\xbb\x21\x95\xf4\x18\x54\x86\x4d\xbd\x46\xe8\x50\xea\xe4\xf8\xbd\xd2\xc4\xcb\x8a\x9d\x98\x64\xf5\x36\x25\xc8\xf9\x2b\xff\x04\x00\x00\xff\xff\x89\x57\xe9\xb0\xa9\x04\x00\x00")

func definitionsInfo_storage_metaTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsInfo_storage_metaToml,
		"definitions/info_storage_meta.toml",
	)
}

func definitionsInfo_storage_metaToml() (*asset, error) {
	bytes, err := definitionsInfo_storage_metaTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/info_storage_meta.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x95, 0x7b, 0xfb, 0xde, 0xc2, 0x31, 0x32, 0xc, 0x66, 0x36, 0x3c, 0xc7, 0x1c, 0xb4, 0x38, 0xf3, 0xfa, 0x96, 0x59, 0x89, 0x26, 0x65, 0x81, 0x58, 0x5c, 0xfd, 0xed, 0x1b, 0xe8, 0x11, 0x94, 0x7}}
	return a, nil
}

var _definitionsOperationsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xcd\xae\xdb\xb6\x12\xde\x1b\xf0\x3b\x0c\xdc\x45\x36\x3e\x46\x5f\x20\x8b\xf4\x9c\x5c\xdc\x00\xf9\x29\x6e\xda\xdb\x45\x10\xc4\xb4\x34\xb2\x78\x43\x91\x2a\x49\xd9\xf5\x7d\xfa\x62\xf8\x23\x51\xb2\x24\xeb\xb8\x07\x5d\x75\x13\xf8\x48\x9c\x1f\xce\x7c\x33\xf3\x91\xca\x17\x56\xd7\x28\x73\xd4\x5f\xd7\xab\x1c\x4d\xa6\x79\x6d\xb9\x92\xf0\x1a\x36\xdc\x80\x2d\x11\xb8\xb4\xa8\x0b\x96\x21\x14\x4a\xc3\x1b\xb7\x1c\x34\x0a\x66\x31\x07\x55\xa3\x66\x24\x60\x76\x9b\xf5\x6a\xbd\x6a\xd5\xed\x54\xbd\xcb\x34\x32\x8b\xdf\xfc\xa3\xaf\xeb\x55\xcd\x34\xab\x0c\xbc\x86\x2f\x9b\x9a\xd9\x72\xf3\x75\xbd\xd2\x68\x1a\x61\xfd\x33\xb5\xb9\xf6\x61\xb3\x59\xaf\xce\x5c\x08\xf0\xba\x80\x49\xf0\xea\x40\x1d\xfe\x87\x99\xdd\x91\xd1\x1f\x7e\x80\x9f\xb0\x64\x27\xae\x34\xfd\xf9\x00\x8f\x6e\x71\x70\xf5\xf3\xbf\x3f\xfd\xfa\xfe\xe9\x4a\x01\x3b\x08\x0c\x4a\xe0\xcc\x6d\x09\xb5\x32\xdc\x99\xfd\x11\x98\xcc\xc1\xf0\xff\x23\xfc\xb8\x9b\x52\xf7\xf1\xd3\x2f\xa0\xd1\x36\x5a\x92\x4a\xd4\x5a\x69\x60\x3e\x60\x41\x29\xfe\xc1\x0d\xf9\x07\xf0\x00\x9f\x51\x9f\x78\x86\xad\x2f\x25\x66\xdf\x9d\x95\x1c\x05\x5a\x4c\xc5\x78\xe1\x25\xcd\x6e\xbd\x72\xdb\x1f\x04\xf5\xac\x79\x1a\xd3\x41\xbc\x5c\xac\x42\x84\x32\x25\x2d\x4a\x0b\x56\x5d\x87\x6d\xd3\xcb\x86\xda\x6c\x61\xa3\xe9\x1f\xda\xf5\x30\x2f\x92\x1e\x78\xb9\x6f\x95\xca\x91\xec\x78\x6d\x23\x29\x57\x55\xc5\xed\xbc\x7b\x7e\x8d\xdb\x7e\xc1\x25\x37\x65\xe2\x5e\xad\x55\x86\xc6\x5c\xf9\x37\xef\xc1\x41\xa8\xec\xfb\x62\x08\xff\x44\xab\xa7\x11\x1c\x94\x25\x00\x76\x4f\x5e\x08\xbf\x20\xf1\x0c\x4e\xe1\x24\x82\x23\xe0\xbc\x9f\x7f\x09\x6f\xb6\x64\x16\x4a\x66\x40\x32\xcb\x4f\x08\xa6\xa9\x6b\xa5\xad\x0b\xc3\x5e\x9d\x50\x3b\x34\xed\x21\x57\x68\xe4\x2b\x0b\x1f\xdf\xbe\x7d\x22\xbc\x78\x80\x0e\x95\x1b\x50\x1a\xa4\x1a\x35\x12\x35\x94\xec\x84\xb7\xac\xdd\x59\x05\x49\x62\x7c\x11\xc4\xbc\x8c\x81\xcc\xad\xe8\x95\x80\x8f\xfa\x3c\xf2\xb7\xb0\x39\xf0\x7c\x49\x01\x38\x65\xd7\x80\x51\xd5\x81\xcb\x79\xcf\xc2\x1a\xef\x8e\x21\x6c\xba\xfa\x9c\x2e\xcc\x03\xcf\xcd\x62\x0f\x04\x37\x76\xd6\x3c\x2d\x88\xb6\x0f\x28\x94\x3c\x52\x74\x6c\xc9\xcd\x94\x0b\x83\x68\x1c\xf8\xbc\x33\x99\xaa\xf9\xe2\x5a\x7c\x54\xf5\x65\x97\xca\xf9\x28\xd6\x97\x7e\xb9\x19\x9d\x51\x24\x72\x63\x67\x6b\x4c\xd5\x17\x0a\xe5\x27\x8f\x21\xa5\xa1\x6a\x84\xe5\x75\xd7\xe8\xb9\x74\x3e\x18\x8f\xdc\x89\xe1\x41\x5a\x94\x14\x17\xaf\x4f\x49\x74\x18\x75\x4f\xe8\x8f\xb6\x6c\xd3\x1a\x78\xfa\xf4\xf1\xd5\x2f\x6d\xf9\x44\xe0\x7b\x87\x40\x2a\xf9\x80\x55\x6d\x2f\x90\x73\x8d\x99\x55\xfa\x42\xce\xb9\xb7\x05\x17\x68\x40\x63\xd6\x68\xc3\x4f\x28\x2e\x41\xf1\xaf\x06\x75\xab\x8f\x57\xb5\xc0\x8a\x80\x3c\xa3\x91\xb9\x96\x5f\x5f\x52\x65\x70\xb8\xd0\x86\x2b\x83\xa2\x08\x8a\x1f\xbd\x06\xb2\xeb\xcb\xa2\xd3\x10\xea\x32\xb4\x99\xfd\x5b\xad\x7d\x24\x3f\xa8\x1c\xdf\xc9\x13\x13\x3c\xdf\xef\xda\x10\xcd\x37\xa6\xdc\xd8\x7e\xef\x78\xf1\xce\x74\x65\xe1\x6f\xe8\x4e\x89\xcd\xb4\x43\x3d\xc0\x1b\x30\x4d\x46\x93\xab\x68\x02\x0e\x55\xed\xc7\x0a\x98\x52\x35\x22\x87\x03\x75\x23\xca\xa3\xc5\x2d\x9c\x4b\x9e\x95\x50\x21\x93\x66\xa0\xf7\x95\x69\x9b\x16\xd9\xae\xd0\xb2\x9c\x59\x96\x68\x71\x00\x66\x15\x52\x94\x8d\xce\x3a\x3c\xc6\x3e\x49\x09\x5d\x5a\x7f\x4f\x31\xf9\xbb\x44\x36\x19\x7d\x39\x1f\xd1\x74\x3d\xd0\x72\xae\xc7\xbb\xc7\xe4\x9c\x5c\xaf\xbe\x14\x68\xb3\x72\xb1\xa7\xff\xa2\xd5\xc1\xcb\x20\x49\x7e\xba\x9f\x23\xb3\x79\x0b\x9b\x46\x8b\xb9\x6e\xe1\x24\xa1\xd0\xaa\x02\x06\x47\x7e\x42\x09\x8d\x16\x84\x31\x52\x30\xde\x1b\x9c\x13\xcf\x1c\xc9\x23\x00\xf1\xa6\x5b\xe6\xb1\x08\x22\xf7\xc0\x43\xe3\xef\x0d\xd7\x5c\x1e\xfd\x36\xe9\x55\xa3\x45\x02\x95\x8a\x70\xbf\x30\x01\x1f\xd4\x09\x77\x89\x18\x45\x9f\x7e\xdc\xd3\xa9\x49\xae\x1b\x7a\x8b\xda\x32\x99\xf7\x4d\xb8\xf2\xbf\xee\x6f\xcb\xde\xfa\x58\x13\x9d\x6f\xbe\xd3\x72\x23\x7d\xf6\x83\x5f\xfc\x97\xfa\xac\xd3\xf1\x4f\x9f\x9d\x2a\x23\x0f\x84\xb6\x8a\x82\xc2\xbf\xaf\xd1\x7a\x76\xc1\xb4\x5d\x5e\x43\x51\x62\xfa\xf8\x91\x28\x4d\xfa\x70\xfb\xf4\x25\x8f\x21\xad\xd2\xb9\x53\x74\xe7\xf2\xf3\xdb\xde\x48\xa0\x3a\xf6\x9e\x6e\x69\x21\x83\xef\x1c\xbe\xc5\xe2\xb9\xcc\xf1\x8f\x6b\x1e\xbf\x85\x0d\x89\x8f\x10\x58\xf7\x78\x34\x01\x01\x4b\x37\xfd\x8d\x0b\x53\x3f\xa1\xa9\x85\x62\x79\xe0\x66\xd2\x58\xdd\x64\xb6\xa3\xa8\x63\xdb\x20\xb1\x31\xba\x3f\xe9\xa0\x63\xfc\xb7\x9c\x73\xac\xdf\xa9\x1e\x92\xfe\xe9\x98\x0e\xa2\x57\x8f\xf1\xfe\xce\xab\x9a\x1d\x17\x97\xc1\xcf\xec\x88\x23\x15\x10\xaa\x35\x36\x0c\xcd\x64\xae\x2a\x8f\x83\x5d\x62\x24\x29\x0b\xfa\xfb\x25\x2b\x82\xf4\x2d\xb8\x59\x72\xfe\xdf\x5f\x0e\xed\x2e\x7c\x21\x84\x4d\x2c\xaa\x01\x53\x63\xc6\x0b\x9e\x81\x2a\x0a\x83\xb7\xeb\xc0\x2f\x5b\x72\xa0\x25\x2f\xbc\x7b\x1a\xd9\x33\x78\xd9\x7f\x68\xf5\xae\x27\x49\x5b\x73\x3f\x27\x76\x55\x6b\x75\xe2\x39\xc5\xfc\xcc\x2e\xb1\x47\x67\x4c\x82\x13\x4a\x42\xb7\x80\x4c\x06\x92\xb7\x5e\x7d\x09\xec\x61\xc4\x6f\x52\x5d\x31\x2e\x2d\xe3\x32\xa9\x4d\x63\x95\xa6\x44\x06\xc1\xd8\x80\xa3\x9e\x0e\x66\x4b\x18\x70\x50\xa6\x81\x4b\x63\x99\xcc\x70\xe0\xbb\x64\xd5\xd5\xc5\x1a\xc9\xe0\xc0\x7b\xb2\xea\x07\xe1\x84\xd5\x30\x25\xd9\x62\x8b\x03\xe5\x47\x9c\xea\x11\x47\xb4\xc0\xc0\xd1\x8f\x6b\xe5\x2e\xd7\x91\xa0\xdd\xbf\x35\xea\x43\x73\x2d\x8a\x09\x71\x6d\xdb\x40\x23\x73\xd4\xbe\x5f\x25\x3e\xf4\x0d\xf2\x68\x2e\x88\x2f\xc4\xef\x00\x05\x11\x04\x41\x49\x2f\x1d\x23\x50\xac\x19\xd7\xa1\xf6\xba\x72\x9a\x6b\x37\x31\x7d\x2d\xf7\x75\xcc\x7c\x96\xf9\x3e\x79\x11\xc7\x74\xf3\xf8\xfb\x7e\xf6\xab\xd1\xf3\x58\x21\xe6\xd9\xae\x5f\xf7\x8d\x32\xd2\x67\xb7\xad\x47\xdc\x00\xcf\xb1\xaa\x15\x75\xa7\x68\xbb\xa3\x67\x71\xab\xe2\xcc\x2e\x26\xf6\x48\xc9\x85\x6f\x92\x61\x7d\x50\x15\x9a\xa9\xc4\x13\xea\x96\x18\xfb\x21\xf9\x51\xd9\xb7\xd4\x41\xf7\x3d\x81\xfe\xde\xc6\xef\x2b\x3b\xa2\x1a\x3b\x6f\x9a\xd6\xc8\xf8\x26\xe0\x18\x9c\xc8\x1a\xad\x29\x1a\x2d\x28\xa3\xd8\x10\x80\xf4\x9c\x12\x2f\x54\xc6\x04\xbc\x06\xab\x1b\xbc\xb2\x19\xe0\x3f\x0b\x24\x3f\xcf\x03\x8c\x7a\x63\x8c\xcf\x01\x2b\xf8\xeb\xab\xa8\x9b\x13\xd3\x67\xd9\xc1\x37\x89\x08\x8f\x1c\x0b\xd6\x08\x0b\xfb\xf7\xdc\xb8\x13\x89\x3f\x8a\x0c\x56\x77\x30\x69\xd7\x3d\x71\xbd\x77\x5f\x52\x54\x63\x5d\x2a\x7c\x52\x1c\xed\xff\x2f\xd7\xb6\x61\x82\x96\xf4\xb4\xf5\xb3\xb8\xff\x6c\x99\xdd\xd3\x3c\x10\x54\xa5\x5e\xf5\x7e\x22\x7d\x1a\xd9\xd4\x07\x06\x7a\xe5\x3c\xa0\xc3\xd7\x2b\x03\x31\x5d\x23\x77\x04\xe7\x7e\xec\x07\x63\x93\x88\xa4\xfa\x96\x31\x21\x0e\x2c\xfb\x3e\x3a\x45\x07\x5e\xb5\x03\x63\x09\x25\x99\x6c\x1e\x7d\x0c\x2d\x62\x2e\xc9\x97\x2c\x8a\x3f\x93\x17\x60\x35\x87\xcc\x97\xf9\x24\x93\x49\x59\x8c\x41\x99\x3b\xc1\x37\x3f\xbf\x8b\x82\xc3\x75\x2c\xcb\xb0\xb6\xd0\x9d\x57\x81\x36\x41\x84\x27\x38\x40\x5b\x98\xc8\x98\xb1\xec\x26\xf8\x07\x81\x58\xcc\xe2\x48\x37\x30\x87\x76\x42\x12\x8d\x32\x2e\x0b\x05\xaa\x48\xee\xd6\xc7\xcb\x80\x24\x6f\xee\xae\xe4\xf2\xea\x68\xfd\xe8\x64\xdc\x51\x37\xe7\x45\x81\xae\x4f\xb4\x85\x11\x28\x2d\xc1\xbf\x7b\xdb\x0f\xd2\xe4\x97\x41\x5e\x84\x72\xe6\xf2\x98\x7a\x43\x74\x9d\xd9\xac\x1c\x8f\xaf\x23\x8b\xe3\x57\x61\xbd\x6f\x7b\x5d\xb4\x6f\x81\x7b\x2a\xda\x9e\x96\xba\xe3\xb2\xff\x7c\xe1\x2a\x6d\x3c\xbe\xbf\xb9\xb5\xff\x7c\xc5\x1a\xdc\x5d\xf8\x10\x3e\xef\xf2\xe2\xae\x8b\x0b\x3f\x08\x30\xa7\x86\xea\x8d\x6a\xfc\xbd\x41\x93\x8e\x45\xc1\xe5\xf2\xcf\xa7\xb4\x38\x15\x4b\x8e\x63\xf4\x60\x1c\x80\x96\xe9\xe3\xf5\x39\x64\xaa\xa4\x7f\xeb\xb5\x37\xd2\xda\x2b\xe1\x01\xc2\xf6\x64\x64\xef\x82\xb1\xf7\x76\xf6\xa1\x36\x0f\xe1\x94\x49\x69\x24\xa4\x1d\x8c\x12\x8d\xc5\x38\x14\x1f\xe0\x5d\xd1\x89\xf8\x4c\x6d\x43\xc3\x7b\x4f\x46\xcf\x53\x7e\x80\xf2\x37\x96\x5e\xb6\x55\xe5\x1d\x21\x10\x11\xc0\xbc\xc6\xad\x5b\x38\x54\x5a\x30\x2e\xb6\xce\x65\xa9\x7a\x8a\xdd\x5b\x42\x81\x13\x70\xfd\xf8\x5c\xa2\xc6\x80\xa0\x74\x69\xb2\x47\xaa\x28\x9f\xe2\x30\x43\x09\xab\x71\x7a\x3e\xa4\xd6\x1f\x07\xe3\xfb\xe4\x27\xb3\x4b\x1d\x14\xc8\x6c\xa3\x11\xce\x25\xca\xc8\x49\xdb\x91\xd2\x2f\x87\x84\x3b\x9a\x08\x5e\x94\xee\x3f\x55\x38\x9a\x1e\x55\x75\xd4\xf1\x84\xed\x19\xf8\xcf\x00\x00\x00\xff\xff\x54\xaa\x36\xde\x75\x22\x00\x00")

func definitionsOperationsTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsOperationsToml,
		"definitions/operations.toml",
	)
}

func definitionsOperationsToml() (*asset, error) {
	bytes, err := definitionsOperationsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/operations.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6b, 0x82, 0x14, 0x9b, 0x30, 0x6c, 0x35, 0x25, 0x82, 0x50, 0xd4, 0x23, 0x64, 0xb, 0x86, 0xec, 0x7c, 0x9b, 0xff, 0x1d, 0x8a, 0xe9, 0xd5, 0x87, 0x78, 0xdf, 0xa2, 0xa8, 0x4, 0x3, 0x25, 0xab}}
	return a, nil
}

var _definitionsPairsToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xc1\x6e\xd4\x30\x10\xbd\x47\xca\x3f\x8c\xf6\x04\x52\xb5\xbd\x00\x37\x6e\x08\x09\x89\x8a\x03\x70\xaa\xaa\x95\x13\x8f\x9b\x61\x1d\x4f\x18\x4f\x36\x84\xaf\x47\xb6\xb3\xdd\xa8\x74\x97\x96\x5b\x64\xbf\x79\xef\xcd\x9b\x71\x6e\x5b\x0e\x8a\x41\x77\xbd\x7d\x7b\x57\x57\x3a\x0f\x08\xef\x61\x13\x55\x28\xdc\x6f\xea\xaa\xae\x1e\x10\xe9\xee\x02\x84\xc2\x68\x94\x38\xec\x94\xf7\x18\x9e\x02\x5a\x8c\xad\xd0\x90\x40\xf9\x7c\xc0\x96\xdc\x0c\xda\x21\xac\x09\x20\x13\x80\x63\x01\x4f\x51\x17\x05\x41\x8b\x41\xc9\xf8\x17\x30\x77\x3c\x81\x32\x0c\xc2\x07\xb2\x08\x27\x8e\x4c\x1e\x51\x0e\xd4\x22\xa4\x4f\x65\x31\xf7\x58\xa4\x30\xd8\x81\x29\xe8\xff\x0b\x1d\x19\x2e\xcb\xfc\x1a\x48\xd6\x81\x2a\xf5\xb8\xfd\x30\x4a\x0e\xe1\xbc\xd6\xd4\x61\xc8\x99\x8d\xe2\x41\x50\x47\x09\x68\xa1\x99\x41\xd0\xb4\x1d\x4c\xe4\x3d\x14\xee\xa2\x43\x41\x51\x5a\x1c\x94\x65\x25\xf6\xe9\x74\x5a\x60\x29\xea\x5d\xcf\x76\xed\xe8\x33\x45\xbd\x61\xbb\x10\x79\x6e\xb3\xb5\x17\x8e\xf6\x58\x76\x31\x8c\x60\xfa\x27\x77\xeb\x02\xef\x52\x0f\xa9\xb4\x90\x70\xf3\x03\xdb\xbf\x9a\xf8\x92\x4f\x97\x36\x1e\xf1\x9d\xee\xa0\xa3\xb0\xac\x1a\x3b\x17\x71\x3d\x7d\x0a\xfa\xee\xcd\x79\x33\x05\x9f\xdb\xd3\x8e\x22\x08\xfe\x1c\x31\xea\xd5\x83\xc3\x3c\x92\x88\xb8\x4f\x3b\x92\x21\x4b\x49\x83\x8e\x05\xd3\xe0\x6c\x91\xee\x47\xaf\x34\x18\xd1\x1d\xd9\x33\x4f\x8d\x78\xd7\x1a\xef\x1b\xd3\xee\x57\x08\x37\x86\xf6\xd5\xed\x5d\x33\x2b\xbe\xbe\xb4\x3a\x46\x41\xd9\x32\xe0\x01\x65\x86\xb4\x71\x30\x15\x03\x60\x8d\x1a\x70\xc2\x3d\x44\x1e\xa5\x5d\x32\x8d\xf4\x1b\x9f\x1f\x45\x42\xff\x2b\x08\x0e\x7e\x2e\x8a\x9e\x7a\x52\xb4\xb0\xfc\x60\xb2\x83\xa2\x3a\xb1\xec\x77\x96\xe4\x19\x2b\xb1\xd9\xd4\xd5\x7a\x2d\x52\x29\x58\x92\x33\xeb\x76\xb5\xb4\xce\x03\x96\x87\x56\x4c\x35\x29\x04\x6f\x94\x0e\xf8\x30\x24\x4b\xb2\xad\xab\xa3\x15\xb8\xf9\xfe\xf5\x1b\x44\x35\xa2\x30\x91\x76\x70\x9d\x15\x0a\xdb\xb1\xc1\x45\x2f\xae\xeb\x8e\xfc\x16\x9d\x19\x7d\xca\x1f\xae\x81\x1c\x04\x56\x88\xa8\xdb\xba\xfa\xc8\x02\x2e\x3e\x26\x81\xec\x2d\x58\x9e\x22\x0c\xde\xa8\x63\xe9\xaf\x72\x8b\x0d\x76\xe6\x40\x2c\x40\x11\xc6\x60\xd1\x51\x40\xbb\xad\xab\x9c\xc5\x9f\x00\x00\x00\xff\xff\xc5\x44\x9b\x80\xd1\x05\x00\x00")

func definitionsPairsTomlBytes() ([]byte, error) {
	return bindataRead(
		_definitionsPairsToml,
		"definitions/pairs.toml",
	)
}

func definitionsPairsToml() (*asset, error) {
	bytes, err := definitionsPairsTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "definitions/pairs.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8, 0x42, 0x1c, 0x7c, 0xe, 0xb0, 0xf2, 0x85, 0xe3, 0xb3, 0x68, 0x7f, 0xe8, 0xd1, 0x17, 0x21, 0x7e, 0x1c, 0x1f, 0x34, 0x26, 0x4c, 0xaa, 0xf9, 0x28, 0xad, 0x8a, 0x21, 0x70, 0x87, 0x7b, 0x2c}}
	return a, nil
}

var _cmdDefinitionsTmplFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x4b\x03\x31\x10\x85\xef\x85\xfe\x87\x47\xc9\x61\x2b\x6d\x7e\x80\xe0\x69\x51\x10\x8a\x14\xf5\x2e\x21\x9d\xad\xc1\xcd\x64\xd9\xcc\xae\x85\x98\xff\x2e\xe9\x16\x17\x11\x0f\xde\x3c\x25\xcc\xcc\x7b\xf3\x3e\x26\xa5\x2d\x7a\xc3\x47\x82\x7a\xd9\x40\x8d\xb8\xbe\x81\xd2\x77\x03\xdb\x88\x9c\x97\x8b\xd2\x77\x0d\x38\x08\xd4\xa8\xef\x7d\xd7\x92\x27\x16\x3a\x7c\x75\x55\xc3\x6f\x67\xd5\xa8\x1f\x8c\x27\x7c\x40\x42\x6d\x3c\xb5\x97\x89\x22\x57\xa3\xde\x05\x6b\xa6\x52\x33\xb0\x45\x15\x71\x95\x12\xd4\xac\xd9\x9b\x38\x4d\xac\x91\x52\x31\xcd\xb9\x4a\x49\x8d\x7a\x6f\x7a\xe3\xa3\x7e\xee\x9d\xdf\x99\x28\xfa\x49\x7a\xc7\xc7\x5b\x3e\xc4\x77\x27\xaf\x75\xf0\xde\xe4\x8c\xd0\x09\x3a\xe3\xfa\x5f\x4c\x4b\xb9\x04\xfd\xbe\x69\x5a\xf0\x48\x71\x68\x25\x5e\x8c\xcf\x01\x96\x0b\x00\xe8\x0c\x3b\x5b\xad\x0a\xbc\x9b\xc9\x57\xeb\xe5\x62\x22\xa3\x36\xd2\x5f\x91\xac\x9c\x60\x03\x0b\x9d\x44\xd7\xd3\xbb\xc1\xff\xe6\xdc\x82\x78\xbe\xf7\xcf\xff\x67\x00\x00\x00\xff\xff\xbd\xbf\x8d\x4f\x44\x02\x00\x00")

func cmdDefinitionsTmplFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplFunctionTmpl,
		"cmd/definitions/tmpl/function.tmpl",
	)
}

func cmdDefinitionsTmplFunctionTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd0, 0x20, 0xb3, 0x8f, 0x25, 0x53, 0xc9, 0x9c, 0x42, 0x17, 0x97, 0x60, 0x14, 0xbc, 0x79, 0xdb, 0x33, 0x71, 0xd7, 0xe, 0x80, 0xb5, 0x2d, 0x13, 0xa8, 0xb1, 0x44, 0x7a, 0x5d, 0xda, 0xcb, 0x97}}
	return a, nil
}

var _cmdDefinitionsTmplInfoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x4d\x6b\xdb\x4e\x10\xc6\xef\x02\x7d\x87\xe7\x6f\xcc\x1f\xab\x38\x56\x02\xa5\x87\x36\x3a\x25\x69\x09\x25\x49\x21\xa1\x97\x52\xca\x4a\x1a\x99\xad\xb5\xbb\x62\x77\x25\xe2\x2a\xfa\xee\x65\xf5\xe2\x58\x6e\x9c\xd4\xed\xa9\xb7\x7d\x19\x3d\xf3\x9b\x67\x67\x14\x86\x38\x53\x29\x61\x49\x92\x34\xb3\x94\x22\x5e\x63\xa9\x36\x7b\x24\x22\x0d\x53\xca\xb8\xe4\x96\x2b\x69\xde\xe1\xfc\x06\xd7\x37\x77\xb8\x38\xbf\xbc\x5b\xf8\x5e\xc1\x92\x15\x5b\x12\xec\xba\x20\xe3\x7b\xbe\xc7\x45\xa1\xb4\xc5\xcc\xf7\x00\x60\x92\x09\x3b\xf1\xbd\xc0\xdd\xd4\xf5\x11\x34\x93\x4b\xc2\x74\x35\xc7\x94\xcb\x4c\x19\xbc\x8d\xb0\xb8\x74\xab\x2b\x56\xa0\x69\x5c\x14\xa6\x86\x74\xc5\x13\xba\x66\x82\x5c\xc0\x74\x85\x07\x58\x75\xc6\x04\xe5\x6d\x8c\xef\x85\x21\xde\x73\xca\x53\x70\x99\xd2\x3d\xb8\x44\x5d\x6f\x7f\xd6\x34\x88\xb9\xf5\xbd\x44\x49\xd3\xc2\xec\x24\xaf\x5a\xdd\x0e\xc1\x29\x3a\xd6\x5d\x85\x4b\x27\xed\x70\xaa\x45\x4b\xe2\x18\x3e\x31\x93\x30\x07\x81\x08\x27\xa7\xa7\xee\x76\xd5\x63\x1f\x81\x64\xda\xae\xdb\x6a\x9d\x21\xd8\x2d\x66\x2c\x61\xac\x2e\x13\x8b\x7a\x48\xbf\x21\xfc\xb6\x97\xd0\xc1\xdc\xad\x8b\x4e\xad\x69\xb6\x4e\xb6\x82\x1e\x49\xba\x93\x30\x74\x66\xa0\x34\x94\x82\x19\x30\xb7\x13\xac\x40\xa6\x34\x54\xfc\x9d\x12\x8b\x8a\xe5\x25\xcd\x71\x0c\x41\x4c\x1a\x48\x65\x61\xc8\xce\x71\xd2\x1f\x18\xb2\x9d\x56\x2b\xc4\xa5\x7d\xf3\xba\xdb\x0b\x08\x56\x7c\x31\x56\x73\xb9\xfc\xca\xa5\x25\x9d\xb1\x84\xea\xc6\xf7\x36\xe9\x5f\xb0\xde\x5d\xf3\xcc\x95\x71\x71\xdf\xb6\x8e\x3b\xcc\x4a\x99\x60\x26\xf0\xea\x59\x07\x03\x7c\x20\xdb\x59\x70\xce\x4d\x91\xb3\x75\xef\xcb\x2c\x18\x3b\x33\x78\xac\xc9\x96\x5a\x42\x2c\x7e\x71\xb2\xe7\xfd\xdd\xbc\xb7\x7b\xf2\x56\xe3\xbc\xc1\x0b\x42\x03\xd7\x13\x40\x88\x50\x8d\xa1\x5b\xc4\xf6\x75\x73\x43\xfd\xf3\xfe\xbd\x4f\xb3\x11\xf0\x1c\xb1\x52\x79\x30\x70\xf1\x0c\x62\xe1\x9e\xfc\xff\x03\xa7\xe3\xbf\x08\xc7\x83\xc8\xf3\xc6\xcf\x61\x75\x49\x5d\x64\x33\x2a\x78\x0b\xec\x01\x3f\x48\xab\xcf\xae\x49\xdb\x4f\x32\x96\x1b\x3a\xf0\xc9\xae\x4a\x63\x0f\x6c\x97\x3f\x2e\x3f\xda\x29\xbf\x60\x92\x27\xb3\x4c\xd8\xc5\x6d\xa1\xb9\xb4\xd9\x6c\xf2\x14\xed\x47\x8a\x59\xfc\x38\xd6\x43\x27\xf0\xcd\x40\x4e\x82\xe0\x29\xa7\xfe\xad\x7e\xee\x2c\x7d\x88\x0e\xf3\x74\xdf\x2c\xf4\x7f\xba\xdd\x3f\xdf\xe3\xfa\x67\x00\x00\x00\xff\xff\xe0\x43\xd5\x19\xe2\x06\x00\x00")

func cmdDefinitionsTmplInfoTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplInfoTmpl,
		"cmd/definitions/tmpl/info.tmpl",
	)
}

func cmdDefinitionsTmplInfoTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplInfoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0xb6, 0xea, 0x83, 0xa7, 0x96, 0xc5, 0x75, 0x6b, 0x6e, 0xd2, 0xd2, 0x31, 0xd0, 0x93, 0x4a, 0x22, 0x7a, 0x98, 0x6b, 0x10, 0x8d, 0x5e, 0x37, 0xbf, 0x29, 0x78, 0x5d, 0xb4, 0xcf, 0x95, 0xf9}}
	return a, nil
}

var _cmdDefinitionsTmplObjectTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4d\x6f\x23\x45\x10\x3d\x67\xa4\xf9\x0f\x8f\x68\x05\x36\x72\xdc\xbb\x80\x38\x84\xf5\x01\x6d\x02\x44\x22\xc9\x4a\x09\x9c\xd3\xee\xa9\xb1\x9b\xf4\x74\x0f\xdd\x35\x5e\x7b\x9d\xf9\xef\xa8\xe7\x63\x6d\x27\xf6\xca\x80\xe0\xe4\xfe\xa8\x7a\x55\xf5\xea\x55\x7b\x84\xc0\x3b\x97\x11\x66\x64\xc9\x4b\xa6\x0c\xd3\x15\x66\xee\xd3\x1e\xaa\xc8\x44\x46\xb9\xb6\x9a\xb5\xb3\xe1\x07\x5c\xdc\xe2\xe6\xf6\x1e\x97\x17\x57\xf7\xe3\x34\x29\xa5\x7a\x94\x33\x02\xaf\x4a\x0a\x69\x92\x26\xba\x28\x9d\x67\x0c\xd2\x04\x00\x4e\xf3\x82\x4f\xbb\x25\xeb\x82\xfa\x75\x58\x59\x75\x9a\x26\xc3\xe8\x21\x04\x7e\xd2\x64\x32\x68\x9b\xd1\x12\xda\xc2\x4d\xff\x20\xc5\x98\x6a\x4e\x13\xe5\x6c\x68\xe0\xd6\xeb\x33\x78\x69\x67\x84\x57\x8f\x23\xbc\x5a\xe0\x7c\x82\xf1\x6d\x63\x79\x4d\x2c\x51\xd7\x2d\x76\xeb\x7c\x15\xb1\xd6\x6b\xbc\x5a\x8c\x6f\x64\x41\x78\x02\xbb\xf7\x32\x28\x69\x50\xd7\xa8\xb4\xe5\xef\xbf\xc3\x04\x6f\xde\xbe\x8d\x46\x8f\x8d\x77\x8c\x40\x36\x6b\xd6\x7d\x66\x6d\x00\xe8\x00\x9e\x13\x42\x21\x8d\xa1\xc0\xa8\xac\xe6\x98\xe9\xcc\x9d\x05\x76\x5e\xce\x68\x1c\xcd\x1b\x97\x9b\xdb\xfb\xcb\xbb\xf3\x66\x09\x9c\x75\x08\x5f\x05\xe4\xb1\xc8\x80\xbb\x5f\x6e\x7f\xfb\xf5\x02\xd6\x31\xa6\x04\x35\x8f\x25\x65\x70\x15\x07\x9d\x11\x02\xf9\x85\x56\x14\xc6\xcf\xfc\xf1\xee\xc7\x9b\x48\x7b\x74\x71\xa5\xa6\xec\xf9\xbd\x0e\x50\xce\xaa\xca\x7b\xb2\x8c\x20\x73\xda\x82\xb0\x66\x85\x87\xab\x8b\x87\x11\x1e\xde\x4b\x9e\xc7\xdf\x6b\x97\xd1\x03\xa4\x27\x78\xfa\xb3\xd2\x9e\x32\x64\x95\xd7\x76\x06\xa3\x03\xc3\x95\xb1\xfd\xb1\xe3\x23\x38\x9e\x93\xef\xd2\xef\x30\x01\xe5\x2a\x93\xc5\x74\x72\x62\x35\xa7\x0c\x0b\x2d\x61\xe4\xc7\x15\x02\x4b\x86\x71\x33\xad\xce\x31\x67\x2e\xc3\xb9\x10\x53\x5a\x39\x9b\xf5\x54\x69\x27\x32\xa7\x82\xd8\xb0\x27\xb4\x65\xf2\x56\x1a\xd1\xb6\xef\x2c\x22\x9d\x45\xa4\x34\x89\xd2\xea\xab\x0c\xec\x2b\xc5\x58\x1f\x2f\x87\x68\xa7\xf3\xa8\x83\x0b\x0a\xca\xeb\x32\x16\xb5\x75\x7b\xf8\x66\x23\x86\x8d\xe5\xfd\xaa\xa4\x46\x4f\x75\xbd\x75\xf2\x42\x3d\x69\x72\x22\x04\x94\xd1\xb1\x17\x9d\x76\xfa\x9d\xc5\x87\xb9\x56\xf3\xad\xbe\x49\xa3\x17\xb1\x5b\x27\x9d\xc9\x5d\xcb\x89\x8f\x38\x31\xb4\x10\x71\x14\x50\x05\xca\x20\x03\x64\xdc\x15\xb2\x44\xee\x7c\x3f\x2a\x0b\x69\x2a\x1a\xe1\x35\x0a\x92\x36\x34\xe2\x0a\xc4\x23\xbc\xe9\x0e\x02\x71\x8b\xd5\x00\x35\xea\x4f\x93\x93\xcc\x59\x6a\x76\xdf\x7e\x93\x26\x27\x45\xbc\x8f\x83\x39\xbe\xae\x98\x96\x69\xd2\x14\x72\x1c\xd3\xeb\x75\x47\xf2\xe5\xb2\x19\xff\x78\x96\x57\x56\x61\xe0\xf0\x75\x6b\x3b\xc4\xcf\xc4\x1d\xdf\x3a\x94\x46\xae\x3a\x22\x07\xc3\x5d\x2a\x63\x77\x63\x2a\x9e\xb8\xf2\x16\x6e\xfc\x82\xfa\x2e\xb5\x17\x01\xee\x0e\x04\x58\xec\x06\x18\xf6\x1e\x7d\xa4\x3d\x21\x30\xc1\x62\x37\x8d\x26\x68\xd3\x64\x13\xa8\xeb\xb2\x10\x87\x8a\xc2\x07\x6d\x0c\x66\xc4\xd8\x7b\x9b\x7b\x57\x74\x0a\xe8\x1e\x8e\xfd\x4a\xfc\x1b\x1c\x0e\x76\x6a\x1c\x61\xea\x9c\x19\x6e\x2a\x8c\xb3\x34\x18\xf6\x92\xd2\x39\xdc\x38\x6a\xe1\xcb\xa3\xde\xcb\x2f\x26\x78\xdd\x43\x7d\xbe\x35\x23\xb0\xaf\xa8\xb5\xac\xfb\x68\x9d\xf9\x56\x82\x4f\xf8\x48\xde\xfd\x1e\x55\xdb\x38\xe5\xd2\x04\xea\xda\x2a\x04\xae\xab\xc0\xff\x33\xb1\x9f\x09\x79\x48\xa0\xff\x92\xd4\xc9\x33\x52\x4b\x69\xb5\x1a\xe4\x05\x8f\xef\x4a\xaf\x2d\xe7\x83\xd3\x6e\xba\xb7\x20\xea\x3a\xbe\x18\xdd\x7c\x9f\x0e\x87\x9f\x98\x3e\x6a\x62\x84\x38\x34\x23\x2d\xad\xe1\x10\xad\xda\xb2\xfb\x47\xb4\xfe\x27\x23\xd9\xb2\xfc\x34\x39\x86\xe6\x43\x43\xdc\xbd\xd4\xbb\xaf\xf6\x8b\xf4\x95\x71\x96\x06\xcb\xad\x93\xf5\xe6\xef\xe1\xa8\xaf\x91\xbd\x75\x2c\xf7\xb6\xe8\xf9\xdf\xce\x76\xb1\x8d\x4f\xf3\x41\x54\xa7\xc9\x5f\x01\x00\x00\xff\xff\x87\x6d\xe5\xa1\xb5\x09\x00\x00")

func cmdDefinitionsTmplObjectTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplObjectTmpl,
		"cmd/definitions/tmpl/object.tmpl",
	)
}

func cmdDefinitionsTmplObjectTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplObjectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/object.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc6, 0x91, 0x7b, 0x9, 0xcb, 0x8f, 0x73, 0xe5, 0xf2, 0x8e, 0xdd, 0xe4, 0x28, 0x3f, 0x39, 0x6d, 0x73, 0x1d, 0xc2, 0xb3, 0xaa, 0xa2, 0xe4, 0x41, 0x66, 0x44, 0x31, 0x0, 0x6d, 0xa9, 0xbb, 0x4b}}
	return a, nil
}

var _cmdDefinitionsTmplOperationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4d\x8b\xdb\x30\x10\xbd\x1b\xfc\x1f\x06\x91\x83\x0d\x5b\xe7\x5e\xd8\x53\xbb\x85\x85\xb2\x1b\x5a\x4a\x8f\x45\x91\x27\x59\x51\x5b\x52\x47\xe3\xfd\x20\xf5\x7f\x2f\x92\x95\x0f\xbb\x29\x26\x6d\x29\xbd\xd9\xa3\x99\xf7\xe6\xbd\xd1\xc8\x49\xf5\x55\x6e\x11\xf8\xc5\xa1\xcf\xb3\x3c\xd3\xad\xb3\xc4\x50\xe4\x19\x00\x80\x50\xd6\x30\x3e\xb3\x48\xbf\xda\x8a\x3c\x2b\x43\xde\x6e\xf7\x0a\x48\x9a\x2d\xc2\xe2\xcb\x15\x2c\x34\xbc\xbe\x86\xea\xd6\x30\xd2\x46\x2a\xf4\xd0\xf7\x21\x07\x16\xba\x7a\x8b\x5e\x91\x76\xac\xad\x89\xd1\x40\x05\xe9\x48\x7b\xd7\xc8\x97\x3b\xd9\x22\xf4\x3d\xe8\x7d\x39\xec\x06\xbe\x40\xa2\x37\x60\x09\x0a\xfc\x16\x0a\x62\xa6\xf0\x48\x8f\x5a\x21\x89\x72\x12\x67\x4b\x72\x1b\xe2\x81\x27\x00\x7c\x64\xd2\x66\x5b\x94\xe0\xe3\xc7\x11\x15\x4d\x1d\x9b\xd9\x47\x4e\xb5\x58\x17\xc4\x2c\x74\x75\xef\x06\x1d\x21\x65\xb9\x8c\x3d\x5b\x37\x70\x7d\x07\xb6\x2b\xe9\x95\x6c\x42\xe3\xe9\x64\xaa\x34\x41\x9f\x2f\x2a\xd2\xc9\x3b\x4b\xad\xe4\x95\x24\xd9\x06\xb6\x12\xc6\x07\x1f\xd0\x77\x0d\xfb\xcf\x9a\x1f\x56\xc3\xac\x46\x5a\x45\x28\x19\x99\x65\x2c\xc7\xf2\xf7\x76\xe0\x99\x6f\x3f\x60\xbf\x19\xe6\xfc\x5b\x4a\x4e\xea\x0b\xc5\xcf\x90\xee\x4c\x95\x62\x57\x7f\x5f\xe8\x61\x7c\x93\xdf\x21\xd0\x76\x9e\x6f\xda\x35\xd6\x9f\x8c\x6e\x5d\x83\x2d\x1a\xc6\xfa\xdc\x8d\x2b\xca\x3c\x8b\x65\xcb\x25\xcc\x26\x47\x5c\x58\x23\x60\xc0\xae\xb1\x06\xb6\xf0\x20\x1f\x11\x36\x96\x9e\x24\xd5\xa0\x6c\xeb\x24\xeb\x75\x83\x70\xc0\x92\xc1\x43\x5f\xa5\x6b\x3f\x4f\xe2\x99\x3a\xc5\xb0\x8b\x6d\x6d\x3a\xa3\xa0\xf0\xf3\x65\xe5\x45\xa2\x2f\x47\x9f\xec\xd1\x7e\x3f\x09\xb9\x23\x03\x62\x16\x41\x24\x9f\x67\x16\xed\x82\x8e\xfe\xc9\x62\x4d\xde\xa1\xf3\xab\x85\x44\x70\x0d\x77\xf8\x74\xef\x90\xe2\xb8\xef\x2c\xdf\x1e\xfb\xbf\x21\xb2\x54\x88\xd3\x7e\xfb\x5e\x94\x3f\xbf\x45\x47\x47\xa3\x5b\xbf\x24\xbd\xc0\xa5\xff\x60\x67\xf7\x1e\xfe\x91\x4d\x23\x5b\x0e\x86\x8d\x3e\x8f\x3e\xfe\x08\x00\x00\xff\xff\xd7\x6e\xab\xe8\xd4\x06\x00\x00")

func cmdDefinitionsTmplOperationTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplOperationTmpl,
		"cmd/definitions/tmpl/operation.tmpl",
	)
}

func cmdDefinitionsTmplOperationTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplOperationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0xc9, 0xcd, 0xdd, 0x8a, 0xb9, 0x1f, 0x37, 0x80, 0x71, 0xca, 0x8f, 0xe8, 0x56, 0xf2, 0xc3, 0xd4, 0xae, 0xc4, 0x17, 0x45, 0xcc, 0x86, 0xec, 0xf8, 0xb6, 0xec, 0x60, 0x2c, 0x1f, 0x84, 0x99}}
	return a, nil
}

var _cmdDefinitionsTmplPairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x50\x3d\xab\xdb\x30\x14\xdd\x0d\xfe\x0f\x07\xe3\x21\x81\xc4\x5a\x3a\xa5\x74\x6a\x3a\x94\x42\x92\x21\xb4\x63\x51\xe4\x1b\x45\xc4\x96\x84\x7c\xed\xd6\xb8\xfe\xef\x45\x8a\xf3\x1e\x8f\xb7\x3c\x0f\x46\xe7\xe3\x1e\x1d\x5d\x21\xf0\xd5\xd5\x04\x4d\x96\x82\x64\xaa\x71\x19\xa1\xdd\x0b\x86\x6a\x6b\x51\xd3\xd5\x58\xc3\xc6\xd9\xee\x33\xf6\x47\x1c\x8e\x67\x7c\xdb\x7f\x3f\x57\x79\xe6\xa5\xba\x4b\x4d\xf0\xd2\x84\x2e\xcf\xf2\xcc\xb4\xde\x05\xc6\x2a\xcf\x00\xa0\x50\xce\x32\xfd\xe5\x62\x81\x6c\x5a\x2a\xa2\x2d\x21\x6d\xf8\xd6\x5f\x2a\xe5\x5a\x71\xa1\xd1\xd9\xba\x63\x17\xa4\x26\xa1\xdd\xf6\x79\x1c\x3e\x09\x7f\xd7\xe2\xc6\xec\x55\x63\xc8\x3e\xa3\xaa\x0f\x8f\xf3\xe8\xa9\x4b\x97\xae\xe3\x6f\x9a\xb6\x08\xd2\x6a\x42\xf9\x7b\x83\x72\xc0\xee\x0b\xaa\x53\xac\x8f\x79\x7e\xc8\xa5\xb7\xb2\xa5\x28\x94\x43\x75\x88\xc7\x7f\x60\x77\x92\x9d\x92\x4d\x32\x09\x81\x5f\x86\x6f\xd3\xf4\xb4\xce\x33\xfe\x98\xa6\x81\xf4\xbe\x19\x11\xf9\x65\x70\x9e\x31\xc8\xa6\x27\xb0\xc3\xd1\xa7\x15\x56\x71\x3e\x5e\x14\x4d\x7b\xea\x54\x30\x49\x48\xc9\xd7\xde\xaa\x77\xd9\xab\x61\x89\x3c\x8f\x3e\xe2\x35\x62\x5f\x4c\x8f\x4d\x04\xe2\x3e\xd8\x44\x2d\x4c\xfc\x7e\xd0\xb8\x43\xf1\xa6\x49\xb1\x79\x95\x7f\xc6\x52\x3b\x0c\x0b\x35\xe7\xd9\xf2\x76\xb2\x75\x2a\xf2\x3f\x00\x00\xff\xff\x18\x07\x5a\xb5\x19\x02\x00\x00")

func cmdDefinitionsTmplPairTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplPairTmpl,
		"cmd/definitions/tmpl/pair.tmpl",
	)
}

func cmdDefinitionsTmplPairTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplPairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xaa, 0x1e, 0xeb, 0xe, 0xa3, 0xa6, 0x3d, 0xce, 0x75, 0x4e, 0x3a, 0x23, 0x18, 0x86, 0x63, 0x49, 0xba, 0xba, 0x96, 0x5a, 0xf2, 0x55, 0x2f, 0x67, 0x35, 0xc, 0x79, 0x2e, 0xde, 0x1c, 0xdf, 0x8d}}
	return a, nil
}

var _cmdDefinitionsTmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x8f\xdb\xb8\x15\x7e\x1f\x60\xfe\xc3\x59\x61\x50\xd8\x81\x23\xef\x16\x7d\xe9\x14\x7e\x68\x67\xd2\x74\xb0\x9b\x64\x90\xc9\x76\x1f\xb2\x8b\x01\x2d\x1d\xd9\xac\x25\x52\x21\x69\x4f\x0c\x57\xff\xbd\xe0\x45\x77\x4a\xb6\x27\xdd\xdd\x16\xc8\xbc\x8c\x24\x1e\x1e\x1e\x9e\xcb\xc7\x8f\xa4\xe7\x73\xb8\xe1\x31\xc2\x0a\x19\x0a\xa2\x30\x86\xe5\x1e\x56\xbc\x7a\x87\x1d\x25\x10\x65\xf1\x3c\xc6\x84\x32\xaa\x28\x67\xf2\x2f\x70\xfb\x0e\xde\xbe\xfb\x00\xaf\x6e\xef\x3e\x84\x97\x17\x39\x89\x36\x64\x85\x70\x38\x40\xf8\x96\x64\x08\x45\x71\x79\x71\x79\x41\xb3\x9c\x0b\x05\x93\xcb\x0b\x00\x80\x20\xe2\x4c\xe1\x67\x15\xb8\x57\xca\xcb\x27\x45\x33\x0c\x74\x07\xf3\xb6\xa2\x6a\xbd\x5d\x86\x11\xcf\xe6\x4b\xdc\x73\x16\x4b\xc5\x05\x59\xe1\x7c\xc5\x5f\x96\x8f\xbb\x3f\xcd\xf3\xcd\x6a\xbe\x56\x2a\x8f\x52\x8a\xac\x52\x7a\x62\x67\x89\x62\x47\x23\x94\xae\x5b\x78\x72\x47\xb5\xcf\x4d\xaf\xa9\x36\x77\x47\x04\x3c\xc2\x83\x6d\x15\xe5\x7b\xa9\x3b\x7c\xb0\x0f\xaf\x84\xe0\x55\x63\x6d\x71\xf8\x2e\x37\xbe\x2c\x5b\xb4\x13\xc2\xdb\xad\x20\xfa\xab\xd6\x3e\x9f\xc3\x87\x7d\x8e\x40\x25\xa8\x35\x82\x1e\x19\x12\x2e\xda\x4e\x8e\x38\x93\xca\xca\x2d\x20\x68\x34\x05\x4e\xc5\xbb\xe5\xbf\x30\x52\x0f\x7b\xa9\x30\x7b\x83\x8a\xc4\x44\x11\xd0\x13\x42\x09\xd2\x7c\x85\xac\xfc\xac\xb5\x73\x23\x1f\x5e\x5e\x98\xf1\x06\x7a\x8b\x6d\xa4\xe0\x70\x79\x71\x38\xbc\x04\x41\xd8\x0a\xe1\xea\x71\x06\x57\x3b\xb8\x5e\x40\x78\xc7\x12\x2e\x8d\x71\xda\xb5\x5a\x84\x26\x80\x9f\xe0\x6a\x17\x3e\x44\x3c\x47\x08\xec\x18\x41\x57\x86\x71\xa5\x85\x5e\xa7\x7c\x49\xd2\x56\xe3\x55\xce\xf4\xac\xae\x17\xba\xdd\x4c\xf0\xdf\xa0\xf8\x3d\x91\x51\x47\x90\x26\x5a\xe2\x96\xca\x3c\x25\xfb\xca\x49\xe0\xfe\x1a\xaa\x16\x43\x72\x5a\x06\x59\xdc\x78\x37\x92\x28\x23\x41\x4d\xc0\x5a\x2d\x56\x59\x51\x38\x31\x13\x87\x61\x4d\xf5\x7b\xf3\xb9\x70\x91\x7a\x8d\xca\xeb\xee\x27\x9a\xa6\xb0\x42\xe5\x0f\x46\x22\x78\xe6\x5a\x42\xad\xc6\xa8\x7a\x09\x1f\xd6\x54\x42\xb2\x65\x91\x31\x59\xae\xf9\x36\x8d\x8d\x83\x97\x08\x11\x49\x53\x5b\xe6\x2e\x55\x81\x66\x79\x8a\x19\x32\x85\x22\xac\x14\x20\x08\x54\x5b\xc1\x28\x5b\x95\x43\x5b\xf1\x6a\x6c\x2a\x41\x20\x89\x81\xb3\x74\x0f\x84\xc5\x9d\x71\x32\x1e\xd3\x84\x62\x1c\x5e\x5e\x68\x4b\x86\x26\x38\xe1\xf0\xc2\x7e\x9f\xfa\xa7\x78\xb0\xfe\x93\xd9\x0c\xf8\x46\x27\x01\x0f\x5f\x63\x57\xc9\xd4\x0a\xd1\x44\xcb\x1c\xea\x98\xdb\x39\x80\xcc\xc2\x89\x4f\xb9\xeb\xe6\x42\xe4\x84\x7d\x82\x87\x46\xa4\xe4\x58\xa4\xe4\x50\xa4\x28\x53\xfc\xd4\x48\x19\x8f\xd6\xa1\xe2\x2c\xc2\x19\xe4\x29\x12\x89\x90\x91\x0d\x82\xdc\x0a\x04\x92\xa6\x60\x54\xaf\x89\x84\x25\x22\x83\x27\x41\x95\x42\x06\x4b\x4c\xb8\x40\x6d\x4b\xe9\xfc\x01\x9b\x6b\xe7\xcf\x40\x66\x5e\xc3\xa7\xa5\x3b\x79\xf8\xd0\x73\xbb\xcc\xa6\xb5\x5f\x1c\x12\x9e\x0e\x36\x0e\x58\xcd\xc7\x12\x72\x86\x94\x7c\x21\xe6\xb8\xa1\x82\x1e\x20\x0c\x02\x8f\x07\x35\xc6\x01\xa8\xa3\x75\x04\x88\xce\x01\xa4\xa6\x6c\x13\x4e\xea\xef\x43\x00\xd5\x94\x18\x03\xaa\x67\x82\x95\x3f\x50\x15\x5a\xf9\x70\xca\x75\x79\x63\xc3\xdd\x28\x81\x26\xd6\xf8\xf5\x9e\x8f\x35\x5e\x3d\x13\x09\x2f\x1a\x56\x4c\x07\x46\xeb\x41\x8e\x7c\x1e\xe4\x78\xb5\x7b\x31\xc7\x2b\xd9\x01\x9d\x11\x8f\xcb\xbe\xc7\x0d\xde\x0c\x7a\xfc\xb7\x02\x9d\x53\xa2\x60\xa0\xc7\xef\xaa\x2a\x12\xa3\xd8\xe3\xc5\x84\x7b\x42\x85\xac\x12\xd8\x5b\xe6\x27\x95\x76\x5d\xce\x37\x9c\x25\x29\x8d\x94\xf9\x3c\x9f\xc3\x2d\xe6\x02\x23\xcd\x99\xaf\xe1\x47\x89\x90\xeb\x11\xc3\x9f\xa8\x5a\xb7\x4a\x8e\x32\xa9\x90\xc4\xce\xff\xcd\x6a\x9a\xcf\xa1\x27\x6d\xc2\x49\xf2\x3c\xdd\xbb\x5a\x75\x68\x00\x3b\x92\x6e\x11\xf4\x1a\x62\x89\x63\xa5\xcf\x57\xff\xc6\xfd\x5d\xdd\x93\x5d\xbb\xfc\xa7\xa0\x7d\xe4\x49\x5d\xfd\xb9\xf1\xf5\x7b\xdc\x5f\x1b\x72\x59\x5b\x13\xcc\xea\xe6\x7f\x6a\xc3\xae\x61\x37\xab\xf2\xba\x03\x1a\xcd\x67\x4b\x77\xb5\xa7\xde\x90\x1c\x16\x90\x91\xfc\xa3\x54\x82\xb2\xd5\x2f\xf6\x5f\x69\xce\x91\x98\x9e\x85\xcc\x1d\xdb\xab\xc9\x38\x3f\x94\x93\xe9\x01\x9d\xd7\x06\xad\x45\xe6\x24\xc2\xb6\x21\x0a\xb3\x3c\xd5\xfb\xa5\x80\x6a\x1e\x95\x68\x81\xc0\xd4\xcd\x43\xaa\x39\x56\x39\xfe\xd5\x2e\xbc\xab\x04\x06\x34\x24\x48\xd4\x56\x0c\xf6\xff\xfb\x96\x45\xd2\x3c\x38\xb9\x01\x35\xda\xcb\x8f\x0c\x9f\x9a\x6a\x26\x3e\x3f\x4d\xcd\x47\x7c\x1a\xd1\xd3\xb1\xa5\x36\x63\x60\x06\x0e\x5b\xc6\xa7\xd0\x4f\x0e\xfd\x66\x36\x9a\x1d\x3f\x36\xaa\x55\x07\x81\xb2\x18\x3f\x43\x08\xdf\xd6\x0d\x46\x5a\x36\x1b\xbf\x33\x8d\x3a\xdd\x26\xc3\x29\x55\xf6\x2b\xa7\xf1\xd8\xac\xba\x56\x2a\xc1\x02\xfe\x60\xab\xa9\xfd\xfd\xe0\x59\x32\xa7\x63\xf3\xaa\xa3\x3b\x38\x2b\x0f\x04\x5d\x25\xcc\x33\x3b\xdb\xd2\x6a\xf8\xa3\x1b\xd2\xb0\x29\x67\x70\x51\x54\xa9\x52\x33\xa9\x41\x97\x24\xf2\xc4\xed\x8f\xd7\x4d\x4b\xce\x53\x6f\x3d\x0d\x7b\xa4\x4e\xd4\xe3\x71\x4e\x58\xdf\x0b\x55\xd3\xc6\xda\xcf\xbc\x48\x60\xf0\x56\x0f\x55\x39\x45\x3f\xe8\x4e\x1a\xa4\xed\x2e\x3b\x27\x42\x62\xec\x9c\xe4\x7c\xd8\xe9\xa2\x7b\x14\x45\xc7\x8f\xa6\x44\xe0\xe3\x2f\x1a\xa0\xca\x93\x8c\xf9\x1c\xde\xe3\xa7\x2d\x15\x18\xdb\x76\xaf\xcb\x75\x4b\x69\x75\x25\x5e\x3a\xf9\x1f\x44\x9a\x91\x09\x15\x3e\x57\x43\xcb\xd9\x63\x72\x75\xf3\xe8\x1e\x75\x3e\x77\xab\x0b\x49\x4f\x34\xb9\x12\xff\xef\x9b\x7c\x8a\xd1\x75\x58\x85\xc4\xfb\x81\xd8\x9a\x25\xd5\x48\xd8\x05\x4f\x1a\x34\x32\xfc\xe8\xc5\x40\x3e\xb8\x15\x74\x4c\xed\x84\xe7\xaa\x0c\xf9\x14\x26\x03\x8a\x66\x80\x42\x70\x51\x11\x19\x81\x72\x9b\x2a\xed\xbd\x81\x0e\x8d\x75\xd7\x44\xe0\x1a\xf4\x38\xf5\xda\x6a\x1f\xf4\xee\xe9\x71\x06\xa6\x5e\x6d\x64\x8c\x35\x8d\xce\xf2\x89\xaa\x68\x0d\xbb\xf0\x7b\xdc\x37\xbf\x0f\x64\xe5\xb9\x99\xa9\xff\x22\xcd\x0c\x83\x76\x14\xf5\xf2\xda\xde\x7e\xd0\xc4\x4d\x3a\x3c\x92\x1a\x87\xfe\x06\x29\xe2\x4c\x51\xb6\xc5\x76\x4b\x67\x7f\x73\x9a\xf6\x05\x28\xd1\x55\xe4\x7a\x8e\x77\xdb\x85\x86\xe0\x84\x93\x6e\x36\x4e\x87\xb7\x4f\x23\xb5\x74\x6e\x3d\x7d\x75\xf4\x31\x47\x17\x9d\xda\x38\x27\x8d\x69\x02\xdf\x9c\xed\x34\xc7\x92\x87\x0a\xb8\x98\xd5\x67\xc0\x1a\x1c\xca\x41\xcd\x41\xf0\x41\xb3\x69\x79\xfd\xd1\xb1\xdd\x83\x27\xac\x50\x34\xa6\xd4\x9d\x74\x6b\xd3\x68\x2d\x9f\x01\xa3\xe9\x09\x2b\xec\x49\x34\xca\x6c\xed\x86\x16\xd8\xdc\x2d\xb0\xf9\xc8\x02\x7b\x8b\x09\xd9\xa6\xca\x3a\x46\xfb\xc3\x72\x76\x2a\xb5\x2d\xba\xc5\xad\x95\xe6\xfc\x27\xc7\x88\x26\x34\x02\x12\xd9\x53\x6f\xb3\xde\x0e\x68\x18\x3f\x02\xb2\x86\x1f\x25\x27\xe5\x0a\xdd\x5b\x43\x3c\x89\xe3\xd1\x0b\x5e\x6e\xdc\xe2\xb8\x39\x83\xab\xdd\xb1\x63\x94\x7e\x70\xbe\x90\xfa\x1c\x89\xcc\x33\xe8\xd1\xe6\x19\xfc\xa8\xd3\xe7\x38\x45\xfa\x7d\xb8\xd0\xa9\x6c\xe8\xff\x8e\xf6\x6c\x9e\xc3\x7b\x36\x3e\xe2\x33\x91\xf0\xa2\x6e\x9e\x8e\x8e\x33\x48\x84\x36\x67\x33\xa1\xcd\x6f\x4a\x85\xbe\xf2\x9d\xe7\x2e\xc3\x7e\x5b\x7d\x8b\xf3\x57\xaa\xf3\xeb\xfb\xd8\x2d\xac\xd7\xfe\x6b\x88\x9c\xe9\x69\xb8\xfd\xff\x0f\x9c\xdb\x42\xee\xdd\x12\xcc\xe7\x90\xea\xc6\x47\x13\x22\x77\x46\xa1\xc1\x42\xf0\x78\x1b\x61\x0c\x94\xc1\xeb\x87\xfb\x97\xdf\x7d\xfb\xe7\xb0\xd7\xf3\x2e\x81\xad\x44\x01\xc8\xc8\x32\x45\x50\xe6\x78\xd9\xaa\xa8\xc8\x50\x79\xcc\x4c\x57\x8c\x0b\x34\xa7\xb1\x72\x9b\x9b\x5f\x08\x98\x21\x0d\x3a\x84\xbd\x38\xcb\xb0\x3c\x2f\x09\x6b\xe3\x9f\x1b\xd6\xa1\x4b\x94\x1e\xa3\xdb\x8c\x53\xba\x1f\x99\x33\xbd\x64\x75\xfa\xe3\xf5\x6e\x84\x94\xce\xe7\x70\xb3\xc6\x68\x03\xa2\xb5\xf9\x0a\x7f\x2f\xca\x7a\x64\x82\xff\x0b\x9c\xb5\x71\x86\xd8\x39\xf1\x1d\x3d\x2c\xab\xe4\x86\xa8\xac\xc7\xe1\x23\x54\xcf\x1e\xfd\xff\xc0\xbb\x37\x7d\x6d\x1a\x98\xea\xf6\xc7\xd2\xe2\x61\x42\x58\xb9\x26\x95\xfd\x0b\xb8\xfe\xf1\xe9\x09\x8a\x4e\xb8\xb4\xf3\xbb\xf5\x4b\x18\xe7\x69\x64\xb2\x41\x45\xec\x63\xef\x20\xd1\x5d\x48\xb5\xaf\xa3\x0c\x6d\x89\x04\x6a\x4f\x10\x70\xbf\x1a\x82\xe5\xbe\xc4\xb9\xb0\xc5\x51\xae\x72\x56\x14\xd3\xc6\x58\x13\x73\x44\x17\xde\x13\x41\x32\x19\x3e\x98\x94\xd5\x12\xee\xfb\x7b\x93\x7f\xcd\x06\x57\x26\x91\xfa\xac\x67\xe4\xc6\x0b\xff\x46\xa2\xcd\x4a\xf0\x2d\x8b\xcb\x8b\xbe\xf2\x5e\x2f\xac\xc7\xfa\x89\xaa\xf5\x8d\xed\x30\x89\xd4\xe7\x19\xb4\xc6\xbe\x21\x69\x8a\xc2\x80\x7a\xdf\x25\x8d\xae\x43\xde\x19\x9b\x65\x67\xe4\xca\x6c\xf7\xad\x63\xc9\xe9\x5e\x88\x31\x41\x61\x62\x31\x99\x76\xa8\xd2\x55\x4e\xd4\xba\x0c\xba\x53\x7c\x4f\xd4\xda\x4e\xd3\x57\x38\x84\xc5\x30\xc1\x4f\xae\x67\x10\x4c\xdd\x1b\x83\xc0\xfd\x96\x24\x98\xfa\xaf\xab\xb5\xfc\x02\x82\xd9\xcf\xc1\xcf\x41\xff\xce\xbe\x0b\xe1\x28\x04\x2c\xf4\x4a\xc1\x45\x46\x94\xc1\xac\x49\x60\x27\xaa\x93\xb3\x28\x02\x43\x3e\x6b\xd5\x45\x01\xe5\x2d\xec\x64\xda\xc4\x04\x9a\x00\x43\xcb\x4e\xcc\x4f\x21\xde\xf0\x18\x21\xe8\x00\x50\xa6\x3f\x96\x24\xa6\x16\xf3\xe0\x90\xc6\x6a\x1e\xea\xd6\xf0\xce\x40\xb5\xe9\x5a\x14\x93\x69\x13\x9c\x9d\xf9\x25\xfe\xd6\x2a\xef\xd8\x8e\xa4\xd4\x81\xf0\xab\xcf\x39\x46\xe6\xae\x51\x37\x35\x94\xcd\xe0\xaf\x91\xda\x92\xf4\x1a\xec\x50\x45\x17\xf6\x8f\x00\xb3\xdd\x98\x2d\x80\xe4\x39\xb2\xd8\xf0\x77\x39\x03\x19\xba\x72\x33\xbb\xef\x46\xce\x87\x61\xe8\x7c\xb7\x23\x42\x73\xed\xa1\x83\x90\x52\x3f\xcf\xd5\xac\x0a\xd1\xe8\x89\xaa\x19\xba\xbe\x56\xd7\x7d\xbe\x59\xe8\x95\xa2\xbf\x94\x75\x96\xd7\x4e\x6d\xd6\x98\x74\x43\x32\xd4\xf1\xf0\x94\xe7\x07\x41\xb3\x1f\x88\x54\xae\x4e\x5f\xb1\x58\x6f\x14\xd6\x37\x3c\xcb\x48\x51\x68\xb3\xa7\x47\x56\xa8\x2e\xea\x8f\x2e\x53\xad\x46\x3f\xb0\x96\xe9\x7f\x14\x5c\x1d\xa3\x38\x0e\xb0\x56\xb0\xea\x70\x36\xd0\xea\x7e\xbf\x06\xd8\x7e\x51\xde\x9d\x91\x7b\x6e\xde\x77\x96\x73\x1a\x8a\x09\x4f\x6b\x9a\x22\xac\x09\x8b\x53\xca\x56\x60\x82\xa8\x27\x59\xde\xaa\x97\xfd\x4c\xde\x3e\x9e\x9e\xb5\x3d\xb6\x65\xac\x1f\x48\xc7\xf3\x33\xd1\xe5\x7b\x3b\x1b\x4d\x6c\x28\xa3\xaa\x46\x94\x53\x2f\xad\xf5\x5f\x85\x39\xef\x71\x45\xa5\x42\x31\x74\x70\x26\x26\x7a\x83\x32\x83\xb7\xf8\x34\x28\x32\xf5\x9f\xa2\xf4\xc6\x78\x88\xd6\x98\x11\xa7\xd0\xfd\x12\xc0\x56\xda\x7f\x02\x00\x00\xff\xff\x5b\xc5\x87\xdd\x8c\x2c\x00\x00")

func cmdDefinitionsTmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_cmdDefinitionsTmplServiceTmpl,
		"cmd/definitions/tmpl/service.tmpl",
	)
}

func cmdDefinitionsTmplServiceTmpl() (*asset, error) {
	bytes, err := cmdDefinitionsTmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/definitions/tmpl/service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbc, 0xc9, 0x49, 0x4a, 0xcf, 0xad, 0x2f, 0x3a, 0x74, 0x4, 0xd1, 0x39, 0xdc, 0x8b, 0x79, 0x31, 0x50, 0xb3, 0xf8, 0x44, 0x73, 0x48, 0x98, 0xf9, 0xd1, 0x86, 0xa6, 0xa4, 0xea, 0xa6, 0xc, 0xe6}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"definitions/features.toml":           definitionsFeaturesToml,
	"definitions/fields.toml":             definitionsFieldsToml,
	"definitions/info_object_meta.toml":   definitionsInfo_object_metaToml,
	"definitions/info_storage_meta.toml":  definitionsInfo_storage_metaToml,
	"definitions/operations.toml":         definitionsOperationsToml,
	"definitions/pairs.toml":              definitionsPairsToml,
	"cmd/definitions/tmpl/function.tmpl":  cmdDefinitionsTmplFunctionTmpl,
	"cmd/definitions/tmpl/info.tmpl":      cmdDefinitionsTmplInfoTmpl,
	"cmd/definitions/tmpl/object.tmpl":    cmdDefinitionsTmplObjectTmpl,
	"cmd/definitions/tmpl/operation.tmpl": cmdDefinitionsTmplOperationTmpl,
	"cmd/definitions/tmpl/pair.tmpl":      cmdDefinitionsTmplPairTmpl,
	"cmd/definitions/tmpl/service.tmpl":   cmdDefinitionsTmplServiceTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"definitions": {nil, map[string]*bintree{
			"tmpl": {nil, map[string]*bintree{
				"function.tmpl":  {cmdDefinitionsTmplFunctionTmpl, map[string]*bintree{}},
				"info.tmpl":      {cmdDefinitionsTmplInfoTmpl, map[string]*bintree{}},
				"object.tmpl":    {cmdDefinitionsTmplObjectTmpl, map[string]*bintree{}},
				"operation.tmpl": {cmdDefinitionsTmplOperationTmpl, map[string]*bintree{}},
				"pair.tmpl":      {cmdDefinitionsTmplPairTmpl, map[string]*bintree{}},
				"service.tmpl":   {cmdDefinitionsTmplServiceTmpl, map[string]*bintree{}},
			}},
		}},
	}},
	"definitions": {nil, map[string]*bintree{
		"features.toml":          {definitionsFeaturesToml, map[string]*bintree{}},
		"fields.toml":            {definitionsFieldsToml, map[string]*bintree{}},
		"info_object_meta.toml":  {definitionsInfo_object_metaToml, map[string]*bintree{}},
		"info_storage_meta.toml": {definitionsInfo_storage_metaToml, map[string]*bintree{}},
		"operations.toml":        {definitionsOperationsToml, map[string]*bintree{}},
		"pairs.toml":             {definitionsPairsToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
