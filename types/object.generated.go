// Code generated by go generate internal/cmd; DO NOT EDIT.
package types

import (
	"fmt"
	"sync"
	"time"
)

// Field index in object bit
const (
	objectIndexContentMd5   = 1 << 0
	objectIndexContentType  = 1 << 1
	objectIndexEtag         = 1 << 2
	objectIndexID           = 1 << 3
	objectIndexName         = 1 << 4
	objectIndexSize         = 1 << 5
	objectIndexTarget       = 1 << 6
	objectIndexStorageClass = 1 << 7
	objectIndexType         = 1 << 8
	objectIndexUpdatedAt    = 1 << 9
)

type Object struct {
	contentMd5  string
	contentType string
	etag        string
	// ID is the unique key in storage.
	ID string
	// Name is either the absolute path or the relative path towards storage's WorkDir depends on user's input.
	Name string
	size int64
	// Target is the symlink target for this object, only exist when object type is link.
	target       string
	storageClass string
	// Type could be one of `file`, `dir`, `link` or `unknown`.
	Type      ObjectType
	updatedAt time.Time

	// client is the client in which Object is alive.
	client Storager
	// m stores storage related metadata.
	meta map[string]interface{}

	// bit used as a bitmap for object value, 0 means not set, 1 means set
	bit  uint64
	done uint32
	m    sync.Mutex
}

func (o *Object) GetContentMD5() (string, bool) {
	o.stat()

	if o.bit&objectIndexContentMd5 != 0 {
		return o.contentMd5, true
	}
	return "", false
}

func (o *Object) MustGetContentMD5() string {
	o.stat()

	if o.bit&objectIndexContentMd5 == 0 {
		panic(fmt.Sprintf("object content-md5 is not set"))
	}
	return o.contentMd5
}

func (o *Object) SetContentMD5(v string) *Object {
	o.contentMd5 = v
	o.bit |= objectIndexContentMd5
	return o
}

func (o *Object) GetContentType() (string, bool) {
	o.stat()

	if o.bit&objectIndexContentType != 0 {
		return o.contentType, true
	}
	return "", false
}

func (o *Object) MustGetContentType() string {
	o.stat()

	if o.bit&objectIndexContentType == 0 {
		panic(fmt.Sprintf("object content-type is not set"))
	}
	return o.contentType
}

func (o *Object) SetContentType(v string) *Object {
	o.contentType = v
	o.bit |= objectIndexContentType
	return o
}

func (o *Object) GetETag() (string, bool) {
	o.stat()

	if o.bit&objectIndexEtag != 0 {
		return o.etag, true
	}
	return "", false
}

func (o *Object) MustGetETag() string {
	o.stat()

	if o.bit&objectIndexEtag == 0 {
		panic(fmt.Sprintf("object etag is not set"))
	}
	return o.etag
}

func (o *Object) SetETag(v string) *Object {
	o.etag = v
	o.bit |= objectIndexEtag
	return o
}
func (o *Object) GetID() string {
	return o.ID
}

func (o *Object) SetID(v string) *Object {
	o.ID = v
	return o
}
func (o *Object) GetName() string {
	return o.Name
}

func (o *Object) SetName(v string) *Object {
	o.Name = v
	return o
}

func (o *Object) GetSize() (int64, bool) {
	o.stat()

	if o.bit&objectIndexSize != 0 {
		return o.size, true
	}
	return 0, false
}

func (o *Object) MustGetSize() int64 {
	o.stat()

	if o.bit&objectIndexSize == 0 {
		panic(fmt.Sprintf("object size is not set"))
	}
	return o.size
}

func (o *Object) SetSize(v int64) *Object {
	o.size = v
	o.bit |= objectIndexSize
	return o
}

func (o *Object) GetTarget() (string, bool) {
	o.stat()

	if o.bit&objectIndexTarget != 0 {
		return o.target, true
	}
	return "", false
}

func (o *Object) MustGetTarget() string {
	o.stat()

	if o.bit&objectIndexTarget == 0 {
		panic(fmt.Sprintf("object target is not set"))
	}
	return o.target
}

func (o *Object) SetTarget(v string) *Object {
	o.target = v
	o.bit |= objectIndexTarget
	return o
}

func (o *Object) GetStorageClass() (string, bool) {
	o.stat()

	if o.bit&objectIndexStorageClass != 0 {
		return o.storageClass, true
	}
	return "", false
}

func (o *Object) MustGetStorageClass() string {
	o.stat()

	if o.bit&objectIndexStorageClass == 0 {
		panic(fmt.Sprintf("object storage-class is not set"))
	}
	return o.storageClass
}

func (o *Object) SetStorageClass(v string) *Object {
	o.storageClass = v
	o.bit |= objectIndexStorageClass
	return o
}
func (o *Object) GetType() ObjectType {
	return o.Type
}

func (o *Object) SetType(v ObjectType) *Object {
	o.Type = v
	return o
}

func (o *Object) GetUpdatedAt() (time.Time, bool) {
	o.stat()

	if o.bit&objectIndexUpdatedAt != 0 {
		return o.updatedAt, true
	}
	return time.Time{}, false
}

func (o *Object) MustGetUpdatedAt() time.Time {
	o.stat()

	if o.bit&objectIndexUpdatedAt == 0 {
		panic(fmt.Sprintf("object updated-at is not set"))
	}
	return o.updatedAt
}

func (o *Object) SetUpdatedAt(v time.Time) *Object {
	o.updatedAt = v
	o.bit |= objectIndexUpdatedAt
	return o
}

func (o *Object) clone(xo *Object) {
	o.contentMd5 = xo.contentMd5
	o.contentType = xo.contentType
	o.etag = xo.etag
	o.ID = xo.ID
	o.Name = xo.Name
	o.size = xo.size
	o.target = xo.target
	o.storageClass = xo.storageClass
	o.Type = xo.Type
	o.updatedAt = xo.updatedAt

	o.meta = xo.meta

	o.bit = xo.bit
}
