// Code generated by go generate internal/cmd; DO NOT EDIT.
package types

import (
	"fmt"
)

type storageMeta struct {
	location string
	Name     string
	WorkDir  string

	bit uint64
	m   map[string]interface{}
}

func (m storageMeta) GetLocation() (string, bool) {
	if m.bit&(1<<0) == 1 {
		return m.location, true
	}
	return "", false
}

func (m storageMeta) MustGetLocation() string {
	if m.bit&(1<<0) != 1 {
		panic(fmt.Sprintf("storage-meta location is not set"))
	}
	return m.location
}

func (m storageMeta) SetLocation(v string) {
	m.location = v
	m.bit |= 1 << 0
}
func (m storageMeta) GetName() string {
	return m.Name
}

func (m storageMeta) SetName(v string) {
	m.Name = v
}
func (m storageMeta) GetWorkDir() string {
	return m.WorkDir
}

func (m storageMeta) SetWorkDir(v string) {
	m.WorkDir = v
}

type storageStatistic struct {
	count int64
	size  int64

	bit uint64
	m   map[string]interface{}
}

func (m storageStatistic) GetCount() (int64, bool) {
	if m.bit&(1<<0) == 1 {
		return m.count, true
	}
	return 0, false
}

func (m storageStatistic) MustGetCount() int64 {
	if m.bit&(1<<0) != 1 {
		panic(fmt.Sprintf("storage-statistic count is not set"))
	}
	return m.count
}

func (m storageStatistic) SetCount(v int64) {
	m.count = v
	m.bit |= 1 << 0
}

func (m storageStatistic) GetSize() (int64, bool) {
	if m.bit&(1<<1) == 1 {
		return m.size, true
	}
	return 0, false
}

func (m storageStatistic) MustGetSize() int64 {
	if m.bit&(1<<1) != 1 {
		panic(fmt.Sprintf("storage-statistic size is not set"))
	}
	return m.size
}

func (m storageStatistic) SetSize(v int64) {
	m.size = v
	m.bit |= 1 << 1
}
