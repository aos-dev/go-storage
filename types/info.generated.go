// Code generated by go generate internal/cmd; DO NOT EDIT.
package types

import (
	"fmt"
)

// Field index in storageMeta bit
const (
	storageMetaIndexLocation = 1 << 0
	storageMetaIndexName     = 1 << 1
	storageMetaIndexWorkDir  = 1 << 2
)

type StorageMeta struct {
	location string
	Name     string
	WorkDir  string

	// bit used as a bitmap for object value, 0 means not set, 1 means set
	bit uint64
	m   map[string]interface{}
}

func (m *StorageMeta) GetLocation() (string, bool) {
	if m.bit&storageMetaIndexLocation != 0 {
		return m.location, true
	}
	return "", false
}

func (m *StorageMeta) MustGetLocation() string {
	if m.bit&storageMetaIndexLocation == 0 {
		panic(fmt.Sprintf("storage-meta location is not set"))
	}
	return m.location
}

func (m *StorageMeta) SetLocation(v string) *StorageMeta {
	m.location = v
	m.bit |= storageMetaIndexLocation
	return m
}
func (m *StorageMeta) GetName() string {
	return m.Name
}

func (m *StorageMeta) SetName(v string) *StorageMeta {
	m.Name = v
	return m
}
func (m *StorageMeta) GetWorkDir() string {
	return m.WorkDir
}

func (m *StorageMeta) SetWorkDir(v string) *StorageMeta {
	m.WorkDir = v
	return m
}

// Field index in storageStatistic bit
const (
	storageStatisticIndexCount = 1 << 0
	storageStatisticIndexSize  = 1 << 1
)

type StorageStatistic struct {
	count int64
	size  int64

	// bit used as a bitmap for object value, 0 means not set, 1 means set
	bit uint64
	m   map[string]interface{}
}

func (m *StorageStatistic) GetCount() (int64, bool) {
	if m.bit&storageStatisticIndexCount != 0 {
		return m.count, true
	}
	return 0, false
}

func (m *StorageStatistic) MustGetCount() int64 {
	if m.bit&storageStatisticIndexCount == 0 {
		panic(fmt.Sprintf("storage-statistic count is not set"))
	}
	return m.count
}

func (m *StorageStatistic) SetCount(v int64) *StorageStatistic {
	m.count = v
	m.bit |= storageStatisticIndexCount
	return m
}

func (m *StorageStatistic) GetSize() (int64, bool) {
	if m.bit&storageStatisticIndexSize != 0 {
		return m.size, true
	}
	return 0, false
}

func (m *StorageStatistic) MustGetSize() int64 {
	if m.bit&storageStatisticIndexSize == 0 {
		panic(fmt.Sprintf("storage-statistic size is not set"))
	}
	return m.size
}

func (m *StorageStatistic) SetSize(v int64) *StorageStatistic {
	m.size = v
	m.bit |= storageStatisticIndexSize
	return m
}
