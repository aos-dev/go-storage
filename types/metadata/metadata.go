// Code generated by go generate internal/cmd/metadata; DO NOT EDIT.
package metadata

// All available metadata.
const (
	Checksum = "checksum"
	Class    = "class"
	Count    = "count"
	Expire   = "expire"
	Host     = "host"
	Location = "location"
	Name     = "name"
	Size     = "size"
	Type     = "type"
	WorkDir  = "work_dir"
)

// GetChecksum will get checksum value from metadata.
func (m Metadata) GetChecksum() (string, bool) {
	v, ok := m[Checksum]
	if !ok {
		return "", false
	}
	return v.(string), true
}

// SetChecksum will set checksum value into metadata.
func (m Metadata) SetChecksum(v string) {
	m[Checksum] = v
}

// GetClass will get class value from metadata.
func (m Metadata) GetClass() (string, bool) {
	v, ok := m[Class]
	if !ok {
		return "", false
	}
	return v.(string), true
}

// SetClass will set class value into metadata.
func (m Metadata) SetClass(v string) {
	m[Class] = v
}

// GetCount will get count value from metadata.
func (m Metadata) GetCount() (int64, bool) {
	v, ok := m[Count]
	if !ok {
		return 0, false
	}
	return v.(int64), true
}

// SetCount will set count value into metadata.
func (m Metadata) SetCount(v int64) {
	m[Count] = v
}

// GetExpire will get expire value from metadata.
func (m Metadata) GetExpire() (int, bool) {
	v, ok := m[Expire]
	if !ok {
		return 0, false
	}
	return v.(int), true
}

// SetExpire will set expire value into metadata.
func (m Metadata) SetExpire(v int) {
	m[Expire] = v
}

// GetHost will get host value from metadata.
func (m Metadata) GetHost() (string, bool) {
	v, ok := m[Host]
	if !ok {
		return "", false
	}
	return v.(string), true
}

// SetHost will set host value into metadata.
func (m Metadata) SetHost(v string) {
	m[Host] = v
}

// GetLocation will get location value from metadata.
func (m Metadata) GetLocation() (string, bool) {
	v, ok := m[Location]
	if !ok {
		return "", false
	}
	return v.(string), true
}

// SetLocation will set location value into metadata.
func (m Metadata) SetLocation(v string) {
	m[Location] = v
}

// GetName will get name value from metadata.
func (m Metadata) GetName() (string, bool) {
	v, ok := m[Name]
	if !ok {
		return "", false
	}
	return v.(string), true
}

// SetName will set name value into metadata.
func (m Metadata) SetName(v string) {
	m[Name] = v
}

// GetSize will get size value from metadata.
func (m Metadata) GetSize() (int64, bool) {
	v, ok := m[Size]
	if !ok {
		return 0, false
	}
	return v.(int64), true
}

// SetSize will set size value into metadata.
func (m Metadata) SetSize(v int64) {
	m[Size] = v
}

// GetType will get type value from metadata.
func (m Metadata) GetType() (string, bool) {
	v, ok := m[Type]
	if !ok {
		return "", false
	}
	return v.(string), true
}

// SetType will set type value into metadata.
func (m Metadata) SetType(v string) {
	m[Type] = v
}

// GetWorkDir will get work_dir value from metadata.
func (m Metadata) GetWorkDir() (string, bool) {
	v, ok := m[WorkDir]
	if !ok {
		return "", false
	}
	return v.(string), true
}

// SetWorkDir will set work_dir value into metadata.
func (m Metadata) SetWorkDir(v string) {
	m[WorkDir] = v
}
