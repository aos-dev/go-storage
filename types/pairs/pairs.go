// Code generated by go generate internal/cmd/pairs; DO NOT EDIT.
package pairs

import (
	"context"

	"github.com/Xuanwo/storage"
	"github.com/Xuanwo/storage/pkg/credential"
	"github.com/Xuanwo/storage/pkg/endpoint"
	"github.com/Xuanwo/storage/pkg/segment"
	"github.com/Xuanwo/storage/pkg/storageclass"
	"github.com/Xuanwo/storage/types"
)

// All available pairs.
const (
	// Checksum will specify checksum for this request, could be used as content md5 or etag
	Checksum = "checksum"
	// Context will context in all request
	Context = "context"
	// Credential will specify how to provide credential for service or storage
	Credential = "credential"
	// DirFunc will specify what todo with a dir object
	DirFunc = "dir_func"
	// Endpoint will specify how to provide endpoint for service or storage
	Endpoint = "endpoint"
	// Expire will specify when the url returned by reach will expire
	Expire = "expire"
	// FileFunc will specify what todo with a file object
	FileFunc = "file_func"
	// Index will specify the index of this segment
	Index = "index"
	// Location will specify the location for service or storage
	Location = "location"
	// Name will specify the storage name
	Name = "name"
	// ObjectFunc will specify what todo with an object
	ObjectFunc = "object_func"
	// Offset will specify offset for this request, storage will seek to this offset before read
	Offset = "offset"
	// Project will specify project name/id for this service or storage
	Project = "project"
	// ReadCallbackFunc will specify what todo every time we read data from source
	ReadCallbackFunc = "read_callback_func"
	// SegmentFunc will specify what todo with a segment
	SegmentFunc = "segment_func"
	// Size will specify size for this request, storage will only read limited content data
	Size = "size"
	// StorageClass will specify checksum for this request, could be used as storage class
	StorageClass = "storage_class"
	// StoragerFunc will specify what todo with a storager
	StoragerFunc = "storager_func"
	// WorkDir will specify the work dir for service or storage, every operation will be relative to this dir. work_dir MUST start with / for every storage services. work_dir will be default to / if not set.
	WorkDir = "work_dir"
)

// WithChecksum will apply checksum value to Options
// This pair is used to specify checksum for this request, could be used as content md5 or etag
func WithChecksum(v string) *types.Pair {
	return &types.Pair{
		Key:   Checksum,
		Value: v,
	}
}

// WithContext will apply context value to Options
// This pair is used to context in all request
func WithContext(v context.Context) *types.Pair {
	return &types.Pair{
		Key:   Context,
		Value: v,
	}
}

// WithCredential will apply credential value to Options
// This pair is used to specify how to provide credential for service or storage
func WithCredential(v *credential.Provider) *types.Pair {
	return &types.Pair{
		Key:   Credential,
		Value: v,
	}
}

// WithDirFunc will apply dir_func value to Options
// This pair is used to specify what todo with a dir object
func WithDirFunc(v types.ObjectFunc) *types.Pair {
	return &types.Pair{
		Key:   DirFunc,
		Value: v,
	}
}

// WithEndpoint will apply endpoint value to Options
// This pair is used to specify how to provide endpoint for service or storage
func WithEndpoint(v endpoint.Provider) *types.Pair {
	return &types.Pair{
		Key:   Endpoint,
		Value: v,
	}
}

// WithExpire will apply expire value to Options
// This pair is used to specify when the url returned by reach will expire
func WithExpire(v int) *types.Pair {
	return &types.Pair{
		Key:   Expire,
		Value: v,
	}
}

// WithFileFunc will apply file_func value to Options
// This pair is used to specify what todo with a file object
func WithFileFunc(v types.ObjectFunc) *types.Pair {
	return &types.Pair{
		Key:   FileFunc,
		Value: v,
	}
}

// WithIndex will apply index value to Options
// This pair is used to specify the index of this segment
func WithIndex(v int) *types.Pair {
	return &types.Pair{
		Key:   Index,
		Value: v,
	}
}

// WithLocation will apply location value to Options
// This pair is used to specify the location for service or storage
func WithLocation(v string) *types.Pair {
	return &types.Pair{
		Key:   Location,
		Value: v,
	}
}

// WithName will apply name value to Options
// This pair is used to specify the storage name
func WithName(v string) *types.Pair {
	return &types.Pair{
		Key:   Name,
		Value: v,
	}
}

// WithObjectFunc will apply object_func value to Options
// This pair is used to specify what todo with an object
func WithObjectFunc(v types.ObjectFunc) *types.Pair {
	return &types.Pair{
		Key:   ObjectFunc,
		Value: v,
	}
}

// WithOffset will apply offset value to Options
// This pair is used to specify offset for this request, storage will seek to this offset before read
func WithOffset(v int64) *types.Pair {
	return &types.Pair{
		Key:   Offset,
		Value: v,
	}
}

// WithProject will apply project value to Options
// This pair is used to specify project name/id for this service or storage
func WithProject(v string) *types.Pair {
	return &types.Pair{
		Key:   Project,
		Value: v,
	}
}

// WithReadCallbackFunc will apply read_callback_func value to Options
// This pair is used to specify what todo every time we read data from source
func WithReadCallbackFunc(v func([]byte)) *types.Pair {
	return &types.Pair{
		Key:   ReadCallbackFunc,
		Value: v,
	}
}

// WithSegmentFunc will apply segment_func value to Options
// This pair is used to specify what todo with a segment
func WithSegmentFunc(v segment.Func) *types.Pair {
	return &types.Pair{
		Key:   SegmentFunc,
		Value: v,
	}
}

// WithSize will apply size value to Options
// This pair is used to specify size for this request, storage will only read limited content data
func WithSize(v int64) *types.Pair {
	return &types.Pair{
		Key:   Size,
		Value: v,
	}
}

// WithStorageClass will apply storage_class value to Options
// This pair is used to specify checksum for this request, could be used as storage class
func WithStorageClass(v storageclass.Type) *types.Pair {
	return &types.Pair{
		Key:   StorageClass,
		Value: v,
	}
}

// WithStoragerFunc will apply storager_func value to Options
// This pair is used to specify what todo with a storager
func WithStoragerFunc(v storage.StoragerFunc) *types.Pair {
	return &types.Pair{
		Key:   StoragerFunc,
		Value: v,
	}
}

// WithWorkDir will apply work_dir value to Options
// This pair is used to specify the work dir for service or storage, every operation will be relative to this dir. work_dir MUST start with / for every storage services. work_dir will be default to / if not set.
func WithWorkDir(v string) *types.Pair {
	return &types.Pair{
		Key:   WorkDir,
		Value: v,
	}
}
