// Code generated by go generate via internal/cmd/meta; DO NOT EDIT.
package dropbox

import (
	"github.com/Xuanwo/storage"
	"github.com/Xuanwo/storage/pkg/credential"
	"github.com/Xuanwo/storage/pkg/endpoint"
	"github.com/Xuanwo/storage/pkg/segment"
	"github.com/Xuanwo/storage/types"
	"github.com/Xuanwo/storage/types/pairs"
)

var _ credential.Provider
var _ endpoint.Provider
var _ segment.Segment
var _ storage.Storager

// Type is the type for dropbox
const Type = "dropbox"

var allowedStoragePairs = map[string]map[string]struct{}{
	"init": {
		"work_dir": struct{}{},
	},
	"list": {
		"dir_func":  struct{}{},
		"file_func": struct{}{},
	},
	"new": {
		"credential": struct{}{},
	},
	"read": {
		"size": struct{}{},
	},
	"write": {
		"size": struct{}{},
	},
}

var allowedServicePairs = map[string]map[string]struct{}{}

type pairStorageInit struct {
	HasWorkDir bool
	WorkDir    string
}

func parseStoragePairInit(opts ...*types.Pair) (*pairStorageInit, error) {
	result := &pairStorageInit{}

	values := make(map[string]interface{})
	for _, v := range opts {
		if _, ok := allowedStoragePairs["init"]; !ok {
			continue
		}
		if _, ok := allowedStoragePairs["init"][v.Key]; !ok {
			continue
		}
		values[v.Key] = v.Value
	}
	var v interface{}
	var ok bool
	v, ok = values[pairs.WorkDir]
	if ok {
		result.HasWorkDir = true
		result.WorkDir = v.(string)
	}
	return result, nil
}

type pairStorageList struct {
	HasDirFunc  bool
	DirFunc     types.ObjectFunc
	HasFileFunc bool
	FileFunc    types.ObjectFunc
}

func parseStoragePairList(opts ...*types.Pair) (*pairStorageList, error) {
	result := &pairStorageList{}

	values := make(map[string]interface{})
	for _, v := range opts {
		if _, ok := allowedStoragePairs["list"]; !ok {
			continue
		}
		if _, ok := allowedStoragePairs["list"][v.Key]; !ok {
			continue
		}
		values[v.Key] = v.Value
	}
	var v interface{}
	var ok bool
	v, ok = values[pairs.DirFunc]
	if ok {
		result.HasDirFunc = true
		result.DirFunc = v.(types.ObjectFunc)
	}
	v, ok = values[pairs.FileFunc]
	if ok {
		result.HasFileFunc = true
		result.FileFunc = v.(types.ObjectFunc)
	}
	return result, nil
}

type pairStorageNew struct {
	HasCredential bool
	Credential    *credential.Provider
}

func parseStoragePairNew(opts ...*types.Pair) (*pairStorageNew, error) {
	result := &pairStorageNew{}

	values := make(map[string]interface{})
	for _, v := range opts {
		if _, ok := allowedStoragePairs["new"]; !ok {
			continue
		}
		if _, ok := allowedStoragePairs["new"][v.Key]; !ok {
			continue
		}
		values[v.Key] = v.Value
	}
	var v interface{}
	var ok bool
	v, ok = values[pairs.Credential]
	if !ok {
		return nil, types.NewErrPairRequired(pairs.Credential)
	}
	if ok {
		result.HasCredential = true
		result.Credential = v.(*credential.Provider)
	}
	return result, nil
}

type pairStorageRead struct {
	HasSize bool
	Size    int64
}

func parseStoragePairRead(opts ...*types.Pair) (*pairStorageRead, error) {
	result := &pairStorageRead{}

	values := make(map[string]interface{})
	for _, v := range opts {
		if _, ok := allowedStoragePairs["read"]; !ok {
			continue
		}
		if _, ok := allowedStoragePairs["read"][v.Key]; !ok {
			continue
		}
		values[v.Key] = v.Value
	}
	var v interface{}
	var ok bool
	v, ok = values[pairs.Size]
	if ok {
		result.HasSize = true
		result.Size = v.(int64)
	}
	return result, nil
}

type pairStorageWrite struct {
	HasSize bool
	Size    int64
}

func parseStoragePairWrite(opts ...*types.Pair) (*pairStorageWrite, error) {
	result := &pairStorageWrite{}

	values := make(map[string]interface{})
	for _, v := range opts {
		if _, ok := allowedStoragePairs["write"]; !ok {
			continue
		}
		if _, ok := allowedStoragePairs["write"][v.Key]; !ok {
			continue
		}
		values[v.Key] = v.Value
	}
	var v interface{}
	var ok bool
	v, ok = values[pairs.Size]
	if ok {
		result.HasSize = true
		result.Size = v.(int64)
	}
	return result, nil
}
