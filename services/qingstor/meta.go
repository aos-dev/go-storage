// Code generated by go generate via internal/cmd/meta; DO NOT EDIT.
package qingstor

import (
	"github.com/Xuanwo/storage/types"
)

// ServicerType is the servicer type for qingstor
const ServicerType = types.ServicerType("qingstor")

// StoragerType is the storager type for qingstor
const StoragerType = types.StoragerType("qingstor")

var allowedStoragePairs = map[string]map[string]struct{}{
	"init": {
		"work_dir": struct{}{},
	},
	"init_segment": {
		"part_size": struct{}{},
	},
	"list_dir": {
		"recursive": struct{}{},
	},
	"reach": {
		"expire": struct{}{},
	},
	"write": {
		"checksum":      struct{}{},
		"size":          struct{}{},
		"storage_class": struct{}{},
	},
}

var allowedServicePairs = map[string]map[string]struct{}{
	"create": {
		"location": struct{}{},
	},
	"delete": {
		"location": struct{}{},
	},
	"get": {
		"location": struct{}{},
	},
	"init": {
		"access_key": struct{}{},
		"host":       struct{}{},
		"port":       struct{}{},
		"protocol":   struct{}{},
		"secret_key": struct{}{},
	},
	"list": {
		"location": struct{}{},
	},
}

type pairStorageInit struct {
	HasWorkDir bool
	WorkDir    string
}

func parseStoragePairInit(opts ...*types.Pair) (*pairStorageInit, error) {
	result := &pairStorageInit{}

	values := make(map[string]interface{})
	for _, v := range opts {
		if _, ok := allowedStoragePairs["init"]; !ok {
			continue
		}
		if _, ok := allowedStoragePairs["init"][v.Key]; !ok {
			continue
		}
		values[v.Key] = v.Value
	}
	var v interface{}
	var ok bool
	v, ok = values[types.WorkDir]
	if ok {
		result.HasWorkDir = true
		result.WorkDir = v.(string)
	}
	return result, nil
}

type pairStorageInitSegment struct {
	HasPartSize bool
	PartSize    int64
}

func parseStoragePairInitSegment(opts ...*types.Pair) (*pairStorageInitSegment, error) {
	result := &pairStorageInitSegment{}

	values := make(map[string]interface{})
	for _, v := range opts {
		if _, ok := allowedStoragePairs["init_segment"]; !ok {
			continue
		}
		if _, ok := allowedStoragePairs["init_segment"][v.Key]; !ok {
			continue
		}
		values[v.Key] = v.Value
	}
	var v interface{}
	var ok bool
	v, ok = values[types.PartSize]
	if !ok {
		return nil, types.NewErrPairRequired(types.PartSize)
	}
	if ok {
		result.HasPartSize = true
		result.PartSize = v.(int64)
	}
	return result, nil
}

type pairStorageListDir struct {
	HasRecursive bool
	Recursive    bool
}

func parseStoragePairListDir(opts ...*types.Pair) (*pairStorageListDir, error) {
	result := &pairStorageListDir{}

	values := make(map[string]interface{})
	for _, v := range opts {
		if _, ok := allowedStoragePairs["list_dir"]; !ok {
			continue
		}
		if _, ok := allowedStoragePairs["list_dir"][v.Key]; !ok {
			continue
		}
		values[v.Key] = v.Value
	}
	var v interface{}
	var ok bool
	v, ok = values[types.Recursive]
	if ok {
		result.HasRecursive = true
		result.Recursive = v.(bool)
	}
	return result, nil
}

type pairStorageReach struct {
	HasExpire bool
	Expire    int
}

func parseStoragePairReach(opts ...*types.Pair) (*pairStorageReach, error) {
	result := &pairStorageReach{}

	values := make(map[string]interface{})
	for _, v := range opts {
		if _, ok := allowedStoragePairs["reach"]; !ok {
			continue
		}
		if _, ok := allowedStoragePairs["reach"][v.Key]; !ok {
			continue
		}
		values[v.Key] = v.Value
	}
	var v interface{}
	var ok bool
	v, ok = values[types.Expire]
	if !ok {
		return nil, types.NewErrPairRequired(types.Expire)
	}
	if ok {
		result.HasExpire = true
		result.Expire = v.(int)
	}
	return result, nil
}

type pairStorageWrite struct {
	HasChecksum     bool
	Checksum        string
	HasSize         bool
	Size            int64
	HasStorageClass bool
	StorageClass    string
}

func parseStoragePairWrite(opts ...*types.Pair) (*pairStorageWrite, error) {
	result := &pairStorageWrite{}

	values := make(map[string]interface{})
	for _, v := range opts {
		if _, ok := allowedStoragePairs["write"]; !ok {
			continue
		}
		if _, ok := allowedStoragePairs["write"][v.Key]; !ok {
			continue
		}
		values[v.Key] = v.Value
	}
	var v interface{}
	var ok bool
	v, ok = values[types.Checksum]
	if ok {
		result.HasChecksum = true
		result.Checksum = v.(string)
	}
	v, ok = values[types.Size]
	if !ok {
		return nil, types.NewErrPairRequired(types.Size)
	}
	if ok {
		result.HasSize = true
		result.Size = v.(int64)
	}
	v, ok = values[types.StorageClass]
	if ok {
		result.HasStorageClass = true
		result.StorageClass = v.(string)
	}
	return result, nil
}

type pairServiceCreate struct {
	HasLocation bool
	Location    string
}

func parseServicePairCreate(opts ...*types.Pair) (*pairServiceCreate, error) {
	result := &pairServiceCreate{}

	values := make(map[string]interface{})
	for _, v := range opts {
		if _, ok := allowedServicePairs["create"]; !ok {
			continue
		}
		if _, ok := allowedServicePairs["create"][v.Key]; !ok {
			continue
		}
		values[v.Key] = v.Value
	}
	var v interface{}
	var ok bool
	v, ok = values[types.Location]
	if !ok {
		return nil, types.NewErrPairRequired(types.Location)
	}
	if ok {
		result.HasLocation = true
		result.Location = v.(string)
	}
	return result, nil
}

type pairServiceDelete struct {
	HasLocation bool
	Location    string
}

func parseServicePairDelete(opts ...*types.Pair) (*pairServiceDelete, error) {
	result := &pairServiceDelete{}

	values := make(map[string]interface{})
	for _, v := range opts {
		if _, ok := allowedServicePairs["delete"]; !ok {
			continue
		}
		if _, ok := allowedServicePairs["delete"][v.Key]; !ok {
			continue
		}
		values[v.Key] = v.Value
	}
	var v interface{}
	var ok bool
	v, ok = values[types.Location]
	if ok {
		result.HasLocation = true
		result.Location = v.(string)
	}
	return result, nil
}

type pairServiceGet struct {
	HasLocation bool
	Location    string
}

func parseServicePairGet(opts ...*types.Pair) (*pairServiceGet, error) {
	result := &pairServiceGet{}

	values := make(map[string]interface{})
	for _, v := range opts {
		if _, ok := allowedServicePairs["get"]; !ok {
			continue
		}
		if _, ok := allowedServicePairs["get"][v.Key]; !ok {
			continue
		}
		values[v.Key] = v.Value
	}
	var v interface{}
	var ok bool
	v, ok = values[types.Location]
	if ok {
		result.HasLocation = true
		result.Location = v.(string)
	}
	return result, nil
}

type pairServiceInit struct {
	HasAccessKey bool
	AccessKey    string
	HasHost      bool
	Host         string
	HasPort      bool
	Port         int
	HasProtocol  bool
	Protocol     string
	HasSecretKey bool
	SecretKey    string
}

func parseServicePairInit(opts ...*types.Pair) (*pairServiceInit, error) {
	result := &pairServiceInit{}

	values := make(map[string]interface{})
	for _, v := range opts {
		if _, ok := allowedServicePairs["init"]; !ok {
			continue
		}
		if _, ok := allowedServicePairs["init"][v.Key]; !ok {
			continue
		}
		values[v.Key] = v.Value
	}
	var v interface{}
	var ok bool
	v, ok = values[types.AccessKey]
	if !ok {
		return nil, types.NewErrPairRequired(types.AccessKey)
	}
	if ok {
		result.HasAccessKey = true
		result.AccessKey = v.(string)
	}
	v, ok = values[types.Host]
	if ok {
		result.HasHost = true
		result.Host = v.(string)
	}
	v, ok = values[types.Port]
	if ok {
		result.HasPort = true
		result.Port = v.(int)
	}
	v, ok = values[types.Protocol]
	if ok {
		result.HasProtocol = true
		result.Protocol = v.(string)
	}
	v, ok = values[types.SecretKey]
	if !ok {
		return nil, types.NewErrPairRequired(types.SecretKey)
	}
	if ok {
		result.HasSecretKey = true
		result.SecretKey = v.(string)
	}
	return result, nil
}

type pairServiceList struct {
	HasLocation bool
	Location    string
}

func parseServicePairList(opts ...*types.Pair) (*pairServiceList, error) {
	result := &pairServiceList{}

	values := make(map[string]interface{})
	for _, v := range opts {
		if _, ok := allowedServicePairs["list"]; !ok {
			continue
		}
		if _, ok := allowedServicePairs["list"][v.Key]; !ok {
			continue
		}
		values[v.Key] = v.Value
	}
	var v interface{}
	var ok bool
	v, ok = values[types.Location]
	if ok {
		result.HasLocation = true
		result.Location = v.(string)
	}
	return result, nil
}
