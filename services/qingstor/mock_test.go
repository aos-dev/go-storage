// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qingstor/qingstor-sdk-go/v4/interface (interfaces: Service,Bucket)

// Package qingstor is a generated GoMock package.
package qingstor

import (
	gomock "github.com/golang/mock/gomock"
	service "github.com/qingstor/qingstor-sdk-go/v4/service"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Bucket mocks base method
func (m *MockService) Bucket(arg0, arg1 string) (*service.Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bucket", arg0, arg1)
	ret0, _ := ret[0].(*service.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bucket indicates an expected call of Bucket
func (mr *MockServiceMockRecorder) Bucket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bucket", reflect.TypeOf((*MockService)(nil).Bucket), arg0, arg1)
}

// ListBuckets mocks base method
func (m *MockService) ListBuckets(arg0 *service.ListBucketsInput) (*service.ListBucketsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuckets", arg0)
	ret0, _ := ret[0].(*service.ListBucketsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuckets indicates an expected call of ListBuckets
func (mr *MockServiceMockRecorder) ListBuckets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuckets", reflect.TypeOf((*MockService)(nil).ListBuckets), arg0)
}

// MockBucket is a mock of Bucket interface
type MockBucket struct {
	ctrl     *gomock.Controller
	recorder *MockBucketMockRecorder
}

// MockBucketMockRecorder is the mock recorder for MockBucket
type MockBucketMockRecorder struct {
	mock *MockBucket
}

// NewMockBucket creates a new mock instance
func NewMockBucket(ctrl *gomock.Controller) *MockBucket {
	mock := &MockBucket{ctrl: ctrl}
	mock.recorder = &MockBucketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBucket) EXPECT() *MockBucketMockRecorder {
	return m.recorder
}

// AbortMultipartUpload mocks base method
func (m *MockBucket) AbortMultipartUpload(arg0 string, arg1 *service.AbortMultipartUploadInput) (*service.AbortMultipartUploadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortMultipartUpload", arg0, arg1)
	ret0, _ := ret[0].(*service.AbortMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AbortMultipartUpload indicates an expected call of AbortMultipartUpload
func (mr *MockBucketMockRecorder) AbortMultipartUpload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortMultipartUpload", reflect.TypeOf((*MockBucket)(nil).AbortMultipartUpload), arg0, arg1)
}

// CompleteMultipartUpload mocks base method
func (m *MockBucket) CompleteMultipartUpload(arg0 string, arg1 *service.CompleteMultipartUploadInput) (*service.CompleteMultipartUploadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteMultipartUpload", arg0, arg1)
	ret0, _ := ret[0].(*service.CompleteMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteMultipartUpload indicates an expected call of CompleteMultipartUpload
func (mr *MockBucketMockRecorder) CompleteMultipartUpload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteMultipartUpload", reflect.TypeOf((*MockBucket)(nil).CompleteMultipartUpload), arg0, arg1)
}

// Delete mocks base method
func (m *MockBucket) Delete() (*service.DeleteBucketOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(*service.DeleteBucketOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockBucketMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBucket)(nil).Delete))
}

// DeleteCORS mocks base method
func (m *MockBucket) DeleteCORS() (*service.DeleteBucketCORSOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCORS")
	ret0, _ := ret[0].(*service.DeleteBucketCORSOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCORS indicates an expected call of DeleteCORS
func (mr *MockBucketMockRecorder) DeleteCORS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCORS", reflect.TypeOf((*MockBucket)(nil).DeleteCORS))
}

// DeleteExternalMirror mocks base method
func (m *MockBucket) DeleteExternalMirror() (*service.DeleteBucketExternalMirrorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExternalMirror")
	ret0, _ := ret[0].(*service.DeleteBucketExternalMirrorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExternalMirror indicates an expected call of DeleteExternalMirror
func (mr *MockBucketMockRecorder) DeleteExternalMirror() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExternalMirror", reflect.TypeOf((*MockBucket)(nil).DeleteExternalMirror))
}

// DeleteLifecycle mocks base method
func (m *MockBucket) DeleteLifecycle() (*service.DeleteBucketLifecycleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLifecycle")
	ret0, _ := ret[0].(*service.DeleteBucketLifecycleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLifecycle indicates an expected call of DeleteLifecycle
func (mr *MockBucketMockRecorder) DeleteLifecycle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLifecycle", reflect.TypeOf((*MockBucket)(nil).DeleteLifecycle))
}

// DeleteMultipleObjects mocks base method
func (m *MockBucket) DeleteMultipleObjects(arg0 *service.DeleteMultipleObjectsInput) (*service.DeleteMultipleObjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMultipleObjects", arg0)
	ret0, _ := ret[0].(*service.DeleteMultipleObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMultipleObjects indicates an expected call of DeleteMultipleObjects
func (mr *MockBucketMockRecorder) DeleteMultipleObjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultipleObjects", reflect.TypeOf((*MockBucket)(nil).DeleteMultipleObjects), arg0)
}

// DeleteNotification mocks base method
func (m *MockBucket) DeleteNotification() (*service.DeleteBucketNotificationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotification")
	ret0, _ := ret[0].(*service.DeleteBucketNotificationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNotification indicates an expected call of DeleteNotification
func (mr *MockBucketMockRecorder) DeleteNotification() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotification", reflect.TypeOf((*MockBucket)(nil).DeleteNotification))
}

// DeleteObject mocks base method
func (m *MockBucket) DeleteObject(arg0 string) (*service.DeleteObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", arg0)
	ret0, _ := ret[0].(*service.DeleteObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObject indicates an expected call of DeleteObject
func (mr *MockBucketMockRecorder) DeleteObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockBucket)(nil).DeleteObject), arg0)
}

// DeletePolicy mocks base method
func (m *MockBucket) DeletePolicy() (*service.DeleteBucketPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy")
	ret0, _ := ret[0].(*service.DeleteBucketPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicy indicates an expected call of DeletePolicy
func (mr *MockBucketMockRecorder) DeletePolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockBucket)(nil).DeletePolicy))
}

// GetACL mocks base method
func (m *MockBucket) GetACL() (*service.GetBucketACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetACL")
	ret0, _ := ret[0].(*service.GetBucketACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetACL indicates an expected call of GetACL
func (mr *MockBucketMockRecorder) GetACL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetACL", reflect.TypeOf((*MockBucket)(nil).GetACL))
}

// GetCORS mocks base method
func (m *MockBucket) GetCORS() (*service.GetBucketCORSOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCORS")
	ret0, _ := ret[0].(*service.GetBucketCORSOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCORS indicates an expected call of GetCORS
func (mr *MockBucketMockRecorder) GetCORS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCORS", reflect.TypeOf((*MockBucket)(nil).GetCORS))
}

// GetExternalMirror mocks base method
func (m *MockBucket) GetExternalMirror() (*service.GetBucketExternalMirrorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalMirror")
	ret0, _ := ret[0].(*service.GetBucketExternalMirrorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalMirror indicates an expected call of GetExternalMirror
func (mr *MockBucketMockRecorder) GetExternalMirror() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalMirror", reflect.TypeOf((*MockBucket)(nil).GetExternalMirror))
}

// GetLifecycle mocks base method
func (m *MockBucket) GetLifecycle() (*service.GetBucketLifecycleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLifecycle")
	ret0, _ := ret[0].(*service.GetBucketLifecycleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLifecycle indicates an expected call of GetLifecycle
func (mr *MockBucketMockRecorder) GetLifecycle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLifecycle", reflect.TypeOf((*MockBucket)(nil).GetLifecycle))
}

// GetNotification mocks base method
func (m *MockBucket) GetNotification() (*service.GetBucketNotificationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotification")
	ret0, _ := ret[0].(*service.GetBucketNotificationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotification indicates an expected call of GetNotification
func (mr *MockBucketMockRecorder) GetNotification() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotification", reflect.TypeOf((*MockBucket)(nil).GetNotification))
}

// GetObject mocks base method
func (m *MockBucket) GetObject(arg0 string, arg1 *service.GetObjectInput) (*service.GetObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", arg0, arg1)
	ret0, _ := ret[0].(*service.GetObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject
func (mr *MockBucketMockRecorder) GetObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockBucket)(nil).GetObject), arg0, arg1)
}

// GetPolicy mocks base method
func (m *MockBucket) GetPolicy() (*service.GetBucketPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy")
	ret0, _ := ret[0].(*service.GetBucketPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy
func (mr *MockBucketMockRecorder) GetPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockBucket)(nil).GetPolicy))
}

// GetStatistics mocks base method
func (m *MockBucket) GetStatistics() (*service.GetBucketStatisticsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatistics")
	ret0, _ := ret[0].(*service.GetBucketStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatistics indicates an expected call of GetStatistics
func (mr *MockBucketMockRecorder) GetStatistics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistics", reflect.TypeOf((*MockBucket)(nil).GetStatistics))
}

// Head mocks base method
func (m *MockBucket) Head() (*service.HeadBucketOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head")
	ret0, _ := ret[0].(*service.HeadBucketOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head
func (mr *MockBucketMockRecorder) Head() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockBucket)(nil).Head))
}

// HeadObject mocks base method
func (m *MockBucket) HeadObject(arg0 string, arg1 *service.HeadObjectInput) (*service.HeadObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadObject", arg0, arg1)
	ret0, _ := ret[0].(*service.HeadObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadObject indicates an expected call of HeadObject
func (mr *MockBucketMockRecorder) HeadObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadObject", reflect.TypeOf((*MockBucket)(nil).HeadObject), arg0, arg1)
}

// ImageProcess mocks base method
func (m *MockBucket) ImageProcess(arg0 string, arg1 *service.ImageProcessInput) (*service.ImageProcessOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageProcess", arg0, arg1)
	ret0, _ := ret[0].(*service.ImageProcessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageProcess indicates an expected call of ImageProcess
func (mr *MockBucketMockRecorder) ImageProcess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageProcess", reflect.TypeOf((*MockBucket)(nil).ImageProcess), arg0, arg1)
}

// InitiateMultipartUpload mocks base method
func (m *MockBucket) InitiateMultipartUpload(arg0 string, arg1 *service.InitiateMultipartUploadInput) (*service.InitiateMultipartUploadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateMultipartUpload", arg0, arg1)
	ret0, _ := ret[0].(*service.InitiateMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateMultipartUpload indicates an expected call of InitiateMultipartUpload
func (mr *MockBucketMockRecorder) InitiateMultipartUpload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateMultipartUpload", reflect.TypeOf((*MockBucket)(nil).InitiateMultipartUpload), arg0, arg1)
}

// ListMultipart mocks base method
func (m *MockBucket) ListMultipart(arg0 string, arg1 *service.ListMultipartInput) (*service.ListMultipartOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMultipart", arg0, arg1)
	ret0, _ := ret[0].(*service.ListMultipartOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMultipart indicates an expected call of ListMultipart
func (mr *MockBucketMockRecorder) ListMultipart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMultipart", reflect.TypeOf((*MockBucket)(nil).ListMultipart), arg0, arg1)
}

// ListMultipartUploads mocks base method
func (m *MockBucket) ListMultipartUploads(arg0 *service.ListMultipartUploadsInput) (*service.ListMultipartUploadsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMultipartUploads", arg0)
	ret0, _ := ret[0].(*service.ListMultipartUploadsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMultipartUploads indicates an expected call of ListMultipartUploads
func (mr *MockBucketMockRecorder) ListMultipartUploads(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMultipartUploads", reflect.TypeOf((*MockBucket)(nil).ListMultipartUploads), arg0)
}

// ListObjects mocks base method
func (m *MockBucket) ListObjects(arg0 *service.ListObjectsInput) (*service.ListObjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjects", arg0)
	ret0, _ := ret[0].(*service.ListObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjects indicates an expected call of ListObjects
func (mr *MockBucketMockRecorder) ListObjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjects", reflect.TypeOf((*MockBucket)(nil).ListObjects), arg0)
}

// OptionsObject mocks base method
func (m *MockBucket) OptionsObject(arg0 string, arg1 *service.OptionsObjectInput) (*service.OptionsObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptionsObject", arg0, arg1)
	ret0, _ := ret[0].(*service.OptionsObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OptionsObject indicates an expected call of OptionsObject
func (mr *MockBucketMockRecorder) OptionsObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptionsObject", reflect.TypeOf((*MockBucket)(nil).OptionsObject), arg0, arg1)
}

// Put mocks base method
func (m *MockBucket) Put() (*service.PutBucketOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put")
	ret0, _ := ret[0].(*service.PutBucketOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put
func (mr *MockBucketMockRecorder) Put() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockBucket)(nil).Put))
}

// PutACL mocks base method
func (m *MockBucket) PutACL(arg0 *service.PutBucketACLInput) (*service.PutBucketACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutACL", arg0)
	ret0, _ := ret[0].(*service.PutBucketACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutACL indicates an expected call of PutACL
func (mr *MockBucketMockRecorder) PutACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutACL", reflect.TypeOf((*MockBucket)(nil).PutACL), arg0)
}

// PutCORS mocks base method
func (m *MockBucket) PutCORS(arg0 *service.PutBucketCORSInput) (*service.PutBucketCORSOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCORS", arg0)
	ret0, _ := ret[0].(*service.PutBucketCORSOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutCORS indicates an expected call of PutCORS
func (mr *MockBucketMockRecorder) PutCORS(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCORS", reflect.TypeOf((*MockBucket)(nil).PutCORS), arg0)
}

// PutExternalMirror mocks base method
func (m *MockBucket) PutExternalMirror(arg0 *service.PutBucketExternalMirrorInput) (*service.PutBucketExternalMirrorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutExternalMirror", arg0)
	ret0, _ := ret[0].(*service.PutBucketExternalMirrorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutExternalMirror indicates an expected call of PutExternalMirror
func (mr *MockBucketMockRecorder) PutExternalMirror(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutExternalMirror", reflect.TypeOf((*MockBucket)(nil).PutExternalMirror), arg0)
}

// PutLifecycle mocks base method
func (m *MockBucket) PutLifecycle(arg0 *service.PutBucketLifecycleInput) (*service.PutBucketLifecycleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLifecycle", arg0)
	ret0, _ := ret[0].(*service.PutBucketLifecycleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLifecycle indicates an expected call of PutLifecycle
func (mr *MockBucketMockRecorder) PutLifecycle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLifecycle", reflect.TypeOf((*MockBucket)(nil).PutLifecycle), arg0)
}

// PutNotification mocks base method
func (m *MockBucket) PutNotification(arg0 *service.PutBucketNotificationInput) (*service.PutBucketNotificationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutNotification", arg0)
	ret0, _ := ret[0].(*service.PutBucketNotificationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutNotification indicates an expected call of PutNotification
func (mr *MockBucketMockRecorder) PutNotification(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutNotification", reflect.TypeOf((*MockBucket)(nil).PutNotification), arg0)
}

// PutObject mocks base method
func (m *MockBucket) PutObject(arg0 string, arg1 *service.PutObjectInput) (*service.PutObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", arg0, arg1)
	ret0, _ := ret[0].(*service.PutObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject
func (mr *MockBucketMockRecorder) PutObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockBucket)(nil).PutObject), arg0, arg1)
}

// PutPolicy mocks base method
func (m *MockBucket) PutPolicy(arg0 *service.PutBucketPolicyInput) (*service.PutBucketPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPolicy", arg0)
	ret0, _ := ret[0].(*service.PutBucketPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPolicy indicates an expected call of PutPolicy
func (mr *MockBucketMockRecorder) PutPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPolicy", reflect.TypeOf((*MockBucket)(nil).PutPolicy), arg0)
}

// UploadMultipart mocks base method
func (m *MockBucket) UploadMultipart(arg0 string, arg1 *service.UploadMultipartInput) (*service.UploadMultipartOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadMultipart", arg0, arg1)
	ret0, _ := ret[0].(*service.UploadMultipartOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadMultipart indicates an expected call of UploadMultipart
func (mr *MockBucketMockRecorder) UploadMultipart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadMultipart", reflect.TypeOf((*MockBucket)(nil).UploadMultipart), arg0, arg1)
}
