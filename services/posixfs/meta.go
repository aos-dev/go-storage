// Code generated by go generate via internal/cmd/meta_gen; DO NOT EDIT.
package posixfs

import (
	"github.com/Xuanwo/storage"
	"github.com/Xuanwo/storage/types"
)

// CapabilitySegment = true
// CapabilityReach = false
const capability = types.Capability(1)

// Capability implements Storager.Capability().
func (c *Client) Capability() types.Capability {
	return capability
}

var allowedStoragePairs = map[string]map[string]struct{}{
	storage.ActionDelete: {
		"recursive": struct{}{},
	},
	storage.ActionListDir: {
		"recursive": struct{}{},
	},
	storage.ActionWrite: {
		"size": struct{}{},
	},
}

var allowedServicePairs = map[string]map[string]struct{}{}

// IsPairAvailable implements Storager.IsPairAvailable().
func (c *Client) IsPairAvailable(action, pair string) bool {
	if _, ok := allowedStoragePairs[action]; !ok {
		return false
	}
	if _, ok := allowedStoragePairs[action][pair]; !ok {
		return false
	}
	return true
}

type pairStorageDelete struct {
	HasRecursive bool
	Recursive    bool
}

func parseStoragePairDelete(opts ...*types.Pair) (*pairStorageDelete, error) {
	result := &pairStorageDelete{}

	values := make(map[string]interface{})
	for _, v := range opts {
		if _, ok := allowedStoragePairs[storage.ActionDelete]; !ok {
			continue
		}
		if _, ok := allowedStoragePairs[storage.ActionDelete][v.Key]; !ok {
			continue
		}
		values[v.Key] = v.Value
	}
	var v interface{}
	var ok bool
	v, ok = values[types.Recursive]
	if ok {
		result.HasRecursive = true
		result.Recursive = v.(bool)
	}
	return result, nil
}

type pairStorageListDir struct {
	HasRecursive bool
	Recursive    bool
}

func parseStoragePairListDir(opts ...*types.Pair) (*pairStorageListDir, error) {
	result := &pairStorageListDir{}

	values := make(map[string]interface{})
	for _, v := range opts {
		if _, ok := allowedStoragePairs[storage.ActionListDir]; !ok {
			continue
		}
		if _, ok := allowedStoragePairs[storage.ActionListDir][v.Key]; !ok {
			continue
		}
		values[v.Key] = v.Value
	}
	var v interface{}
	var ok bool
	v, ok = values[types.Recursive]
	if ok {
		result.HasRecursive = true
		result.Recursive = v.(bool)
	}
	return result, nil
}

type pairStorageWrite struct {
	HasSize bool
	Size    int64
}

func parseStoragePairWrite(opts ...*types.Pair) (*pairStorageWrite, error) {
	result := &pairStorageWrite{}

	values := make(map[string]interface{})
	for _, v := range opts {
		if _, ok := allowedStoragePairs[storage.ActionWrite]; !ok {
			continue
		}
		if _, ok := allowedStoragePairs[storage.ActionWrite][v.Key]; !ok {
			continue
		}
		values[v.Key] = v.Value
	}
	var v interface{}
	var ok bool
	v, ok = values[types.Size]
	if ok {
		result.HasSize = true
		result.Size = v.(int64)
	}
	return result, nil
}
