{{ $Data := . }}

{{- range $name, $data := .Data }}
{{ $pn := $name | toPascal }}
{{- range $k, $_ := $data.Funcs }}
type pair{{ $pn }}{{ $k }} struct {
    // Pre-defined pairs
    Context context.Context

    // Meta-defined pairs
    {{- range $key, $_ := index $data.Pairs ($k | toSnake) }}
    Has{{ $key | toPascal }} bool
    {{ $key | toPascal }}    {{ index $Data.TypeMap $key }}
    {{- end }}
}

func parse{{ $pn }}Pair{{ $k }}(opts ...*types.Pair) (*pair{{ $pn }}{{ $k }}, error) {
    result := &pair{{ $pn }}{{ $k }}{}

    values := make(map[string]interface{})
    for _, v := range opts {
        values[v.Key] = v.Value
    }

    var v interface{}
    var ok bool

    // Parse pre-defined pairs
    v, ok = values[ps.Context]
    if ok {
        result.Context = v.(context.Context)
    } else {
        result.Context = context.Background()
    }

    // Parse meta-defined pairs
    {{- range $key, $required := index $data.Pairs ($k | toSnake) }}
    {{- $pkey := $key | toPascal }}
    v, ok = values[ps.{{ $pkey }}]
    {{- if $required }}
    if !ok {
        return nil, types.NewErrPairRequired(ps.{{ $pkey }})
    }
    {{- end }}
    if ok {
        result.Has{{ $pkey }} = true
        result.{{ $pkey }} = v.({{ index $Data.TypeMap $key }})
    }
    {{- end }}
    return result, nil
}
{{- end }}
{{- end }}
