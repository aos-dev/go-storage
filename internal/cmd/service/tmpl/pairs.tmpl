{{ $Data := . }}

{{- range $name, $data := .Data }}
{{- $pn := $name | toPascal }}
{{- range $k, $v := $data }}
{{- $pk := $k | toPascal }}
type pair{{ $pn }}{{ $pk }} struct {
    // Pre-defined pairs
    {{- if $v.Funcs }}
    Context context.Context
    {{- end }}

    // Meta-defined pairs
    {{- range $key, $required := $v.Pairs }}
    {{- if not $required }}
    Has{{ $key | toPascal }} bool
    {{- end }}
    {{ $key | toPascal }}    {{ index $Data.TypeMap $key }}
    {{- end }}
}

func parse{{ $pn }}Pair{{ $pk }}(opts ...*types.Pair) (*pair{{ $pn }}{{ $pk }}, error) {
    result := &pair{{ $pn }}{{ $pk }}{}

    values := make(map[string]interface{})
    for _, v := range opts {
        values[v.Key] = v.Value
    }

    var v interface{}
    var ok bool

    // Parse pre-defined pairs
    {{- if $v.Funcs }}
    v, ok = values[ps.Context]
    if ok {
        result.Context = v.(context.Context)
    } else {
        result.Context = context.Background()
    }
    {{- end }}

    // Parse meta-defined pairs
    {{- range $key, $required := $v.Pairs }}
    {{- $pkey := $key | toPascal }}
    v, ok = values[ps.{{ $pkey }}]
    {{- if $required }}
    if !ok {
        return nil, types.NewErrPairRequired(ps.{{ $pkey }})
    }
    {{- end }}
    if ok {
        {{- if not $required }}
        result.Has{{ $pkey }} = true
        {{- end }}
        result.{{ $pkey }} = v.({{ index $Data.TypeMap $key }})
    }
    {{- end }}
    return result, nil
}
{{- end }}
{{- end }}
