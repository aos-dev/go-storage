// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/context.tmpl (541B)
// tmpl/header.tmpl (569B)
// tmpl/meta.tmpl (63B)
// tmpl/pairs.tmpl (1.366kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contextTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x51\x41\x6b\xf3\x30\x0c\xbd\xe7\x57\x88\x92\x43\x02\xf9\x9c\xfb\x07\x3d\x75\xf4\x38\xc6\x7a\xd8\xae\x9a\xa3\xa4\x66\x8d\x6c\x6c\x25\x0b\x84\xfc\xf7\x61\xa7\x19\xa1\x83\xdd\xa4\xa7\xe7\xe7\xf7\xa4\x79\xfe\x07\x1e\xb9\x23\xc8\x19\x7b\xaa\x20\x6f\x50\x10\xfe\x1f\x41\x3d\xc5\x62\x59\xb2\x1d\xe5\xb3\x82\x7c\x8c\xc3\xc4\x52\xe7\x81\x75\xd8\x28\xa6\x85\x7c\x54\xaf\xa4\xc9\x8c\xe4\x23\x5a\xd7\x30\xcf\x11\x7c\x41\x4f\x2c\xb0\x2c\x6f\x46\xae\x27\xcb\x42\x93\x00\x36\x4d\x00\x7d\x6f\xc2\xe0\x9c\xf5\x02\xad\xf5\x8f\x6f\x54\xd6\x0e\xac\xa1\x58\xe1\x9d\x7e\xf9\x87\x7a\xf1\x33\xc2\x3e\x24\x6e\x01\x9b\x80\x0c\x9e\x57\x6c\xce\x00\x00\x82\x43\xae\x40\xcb\x14\x83\x59\x47\x2c\x1e\xb5\xe1\x4e\x5d\x04\xbd\x5c\x1c\xf2\xd9\xdb\x7e\x13\xd6\x32\x55\x70\xe8\x8c\x5c\x87\x0f\xa5\x6d\x5f\xbf\x0f\xc8\x5f\xb6\x0e\x62\x3d\x76\x54\x07\xf2\xa3\xd1\x14\xea\xf8\x9d\x7a\xc6\x9e\x62\x86\xd8\xf0\xae\xde\xb9\x3e\x94\xc9\x45\x43\x2d\xf9\xe4\x45\x9d\x0d\x9b\x70\x2d\xca\x2c\x0d\x1c\x1a\x1f\xe0\x08\xe8\x1c\x71\x53\xa4\xb6\x02\x17\xd4\x3e\xae\x96\xa9\x5c\x75\x7c\xca\x07\xe1\xf1\x9b\xfb\x46\x4e\x78\xbb\xad\xdb\xcb\xd6\xb3\x11\x37\xdb\x05\x7f\x95\xdf\x01\x00\x00\xff\xff\x5f\xa6\x30\x0f\x1d\x02\x00\x00")

func contextTmplBytes() ([]byte, error) {
	return bindataRead(
		_contextTmpl,
		"context.tmpl",
	)
}

func contextTmpl() (*asset, error) {
	bytes, err := contextTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "context.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3f, 0xd6, 0xc2, 0xb4, 0x72, 0x2f, 0x67, 0xc1, 0xa4, 0x92, 0xd0, 0x72, 0xc5, 0xb9, 0x3b, 0xc5, 0xac, 0x9f, 0xe1, 0x9a, 0xfc, 0x56, 0x4b, 0x24, 0x4e, 0x45, 0x4d, 0x25, 0x84, 0x65, 0xfe, 0xe0}}
	return a, nil
}

var _headerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xbd\x4e\x03\x31\x0c\xc7\xf7\x3c\x85\x75\x13\x0c\x24\x0f\xc0\x48\x19\x58\x5a\xa4\x76\x60\x43\x6e\x62\x85\xa8\x4d\x1c\x39\xee\x41\x55\xf5\xdd\x19\xd2\x02\x42\x95\xee\x26\xff\x3f\x7e\xca\x87\x9d\x83\x27\x0e\x04\x91\x0a\x09\x2a\x05\xd8\x1e\x21\xf2\x8f\x87\x31\x21\xa4\xa2\x24\x05\xf7\xce\xe7\xe0\x1a\xc9\x98\x3c\x3d\xc2\x62\x05\xcb\xd5\x06\x9e\x17\x2f\x1b\x6b\x2a\xfa\x1d\x46\x82\xd3\x09\xec\x12\x33\xc1\xf9\x6c\x4c\xca\x95\x45\xe1\xce\x00\x00\x0c\x9e\x8b\xd2\x97\x0e\xdd\x25\x1e\x4c\x57\x31\xe9\xc7\x61\x6b\x3d\x67\xc7\x95\x8a\x0a\xfa\x54\xe2\x5f\xfd\x10\x6f\xc1\x6f\x07\x2c\x9f\xec\x9a\xb2\x60\xa4\x61\xa2\x77\x75\x17\x5d\xa3\x98\xa9\xe8\x2c\x96\x4a\xa8\x9c\x66\xc2\x5e\x28\x50\xd1\x84\xfb\x49\x5c\x8f\x95\x5a\xa7\x6a\x9b\x04\x5d\xc5\x24\x6d\xde\xa1\x2e\x93\x62\x40\xc5\xc1\xdc\x1b\x33\xa2\xc0\x3b\xfc\x3e\xcc\xbe\x0a\x8f\x29\x90\x5c\x9a\xeb\xff\xfe\xe7\x97\x1d\xd9\x75\x9f\xd7\xb4\x5f\x64\xd7\x7d\x8a\xf9\x0e\x00\x00\xff\xff\x57\x6f\xa9\xc8\x39\x02\x00\x00")

func headerTmplBytes() ([]byte, error) {
	return bindataRead(
		_headerTmpl,
		"header.tmpl",
	)
}

func headerTmpl() (*asset, error) {
	bytes, err := headerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x21, 0xb1, 0x6, 0x7d, 0x3a, 0xf1, 0xa2, 0x7f, 0x1e, 0x1d, 0xc7, 0x38, 0x24, 0x3c, 0xed, 0xad, 0x9a, 0xf3, 0x47, 0x15, 0x2c, 0xf1, 0x30, 0x60, 0xbe, 0xde, 0x20, 0x9a, 0x32, 0x17, 0x80}}
	return a, nil
}

var _metaTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x57\x08\xa9\x2c\x48\x55\xc8\x2c\x56\x28\xc9\x48\x55\x28\x01\xb1\xd3\xf2\x8b\x14\xaa\xab\x15\xf4\xfc\x12\x73\x53\x15\x6a\x6b\xb9\x92\xf3\xf3\x8a\x4b\x20\xca\x6c\x15\x94\x90\x64\x94\xb8\x00\x01\x00\x00\xff\xff\xfc\x49\xcc\x09\x3f\x00\x00\x00")

func metaTmplBytes() ([]byte, error) {
	return bindataRead(
		_metaTmpl,
		"meta.tmpl",
	)
}

func metaTmpl() (*asset, error) {
	bytes, err := metaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x70, 0x58, 0x9b, 0x31, 0x99, 0x67, 0xe2, 0x68, 0xbb, 0xf9, 0x82, 0x93, 0xde, 0x50, 0xb3, 0xeb, 0x16, 0xaf, 0xb0, 0xb9, 0x15, 0x44, 0x49, 0xe6, 0xc9, 0xb4, 0xf8, 0xd5, 0xc1, 0x4d, 0xb5, 0x23}}
	return a, nil
}

var _pairsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xd1\x8a\xdb\x30\x10\x7c\xf7\x57\x4c\x21\x14\xe7\xf0\xf9\xde\x0b\x79\xe9\xb5\xa5\x50\xae\x1c\xa5\xf4\xe5\x08\x87\x6a\xaf\x83\xb0\x23\xbb\x92\xec\x5e\xf0\xe9\xdf\xcb\x4a\xb2\x63\xd2\x24\xb4\x4f\xb1\xb5\xb3\x3b\xb3\x93\x91\xc7\x11\xab\x0f\xc2\x0a\xbc\xdb\x20\x87\x73\x49\x32\x8e\xb7\xd0\x42\xed\x08\x2b\x25\xf6\x94\x61\x55\x4e\x75\x0f\x74\x2e\xe1\xa6\x82\x8b\x7c\xea\x51\x78\x45\x21\xf6\xd4\xdc\x0b\x43\x01\x31\x0f\xa9\x33\xac\x9e\x3d\x90\xe7\xe4\x9f\x7a\x55\x18\x86\xd8\x43\x47\xe8\x84\xd4\xc7\x69\xce\xf1\x73\x0d\xe7\x60\xac\xee\x0b\x8b\x31\x01\x80\xbb\x3b\x3c\x6a\xba\x2d\xa9\x92\x8a\x4a\xdf\x64\x7c\xe1\xbe\x55\x96\x5e\x2c\x8a\xf0\x9b\xc7\xf7\x64\xea\x7a\x20\x2b\xce\xb4\x2d\xd5\xd1\x61\xd2\x27\x55\x49\x2f\x51\xe5\x23\x63\x91\xae\x6a\xbc\xc2\x28\x51\x13\x2f\xb6\x66\xd9\xdc\xff\x59\x18\x2f\x94\x0e\xcb\xbd\x9d\xc3\xcf\xb6\x6d\x22\xc3\xb9\x72\x28\x44\x1e\x36\x33\xff\x7e\xe8\xe8\x41\x74\x01\x1c\xa7\xb3\x3a\x52\x25\xbf\xba\x24\xa9\x7a\x55\xa0\x13\xda\xd0\xd2\xa7\xc7\xe8\x1b\x7b\x95\xb6\x9d\x35\xc8\xf3\xfc\x86\x2d\x35\x5e\xfb\x1a\xe9\xcd\x25\x6f\x33\x90\xd6\xad\x5e\x47\x73\x35\x99\xbe\xb1\x6c\xc0\xdb\x4b\x1d\xa3\x0b\x8e\x0e\xa2\xe9\xc9\x30\x74\x2f\x6a\x4a\xf7\xa2\x7b\x32\x56\x4b\xb5\xdb\x4a\x65\x49\x57\xa2\xa0\xd1\xad\x3d\xb4\x6a\x35\x9e\x33\x0c\x0c\x0e\x56\x7b\x95\x81\xf2\x38\xeb\x69\xc8\xbf\xd0\x61\x8b\x0d\x86\xfc\x07\x9f\xf8\xfa\x4c\xa7\x31\x60\x31\x7a\x3e\x6d\xeb\x60\xf5\x9c\x0e\xf6\x07\xdd\xd9\x8c\x0c\x19\xc3\x37\x13\x61\x67\xa6\x94\x6c\x7d\x59\x56\x5c\x3e\xea\x0a\x76\x4c\x18\x2f\x2c\x3d\x89\x57\xd8\xd0\x81\x1a\x43\xd7\x3a\xa7\xb6\xf7\xa2\xa8\x77\xba\xed\x55\x99\xae\x97\xfb\xcd\xc2\xf7\xff\x18\x53\x4d\xbf\x7a\xa9\xa9\xfc\xbf\xb4\xfe\x6d\xc0\xd9\x74\x6e\x67\x4e\x59\x2d\xa8\xe2\x10\x59\xe1\xcd\x89\x4f\xb6\xd7\x0a\x4a\x36\x19\x42\xee\xbe\xd2\xef\x8f\x5a\xb3\x96\x6f\xb1\x39\xbd\xc4\x35\xd9\x70\x12\xf7\x2b\xff\xc7\xc5\x2b\xb7\x81\xd5\x31\x36\x0b\xf8\x25\xec\x90\xa7\xd7\x6f\xe0\x15\x65\x71\xe3\xc0\x90\xf1\xe6\x49\xf8\xd0\x45\xcc\xe2\xf1\x4f\x00\x00\x00\xff\xff\x80\x12\x09\xa5\x56\x05\x00\x00")

func pairsTmplBytes() ([]byte, error) {
	return bindataRead(
		_pairsTmpl,
		"pairs.tmpl",
	)
}

func pairsTmpl() (*asset, error) {
	bytes, err := pairsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pairs.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7b, 0xd6, 0x28, 0x97, 0xf9, 0xab, 0xcc, 0xcd, 0xfd, 0x83, 0xcf, 0x68, 0x31, 0x71, 0x3a, 0x89, 0x8d, 0xb7, 0xd4, 0x9, 0x93, 0x8a, 0x7d, 0xb8, 0x64, 0xb4, 0xc2, 0xc6, 0x85, 0xc1, 0x45, 0x9d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"context.tmpl": contextTmpl,
	"header.tmpl":  headerTmpl,
	"meta.tmpl":    metaTmpl,
	"pairs.tmpl":   pairsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"context.tmpl": &bintree{contextTmpl, map[string]*bintree{}},
	"header.tmpl":  &bintree{headerTmpl, map[string]*bintree{}},
	"meta.tmpl":    &bintree{metaTmpl, map[string]*bintree{}},
	"pairs.tmpl":   &bintree{pairsTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
