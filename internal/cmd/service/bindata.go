// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/context.tmpl (594B)
// tmpl/header.tmpl (642B)
// tmpl/meta.tmpl (63B)
// tmpl/pairs.tmpl (1.397kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contextTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x51\xcd\x6a\xe3\x30\x10\xbe\xfb\x29\x86\xe0\x83\x0d\x5e\xf9\xbe\x90\x53\x96\xb0\xa7\x52\x9a\x43\x7b\x9d\xca\x63\x47\x34\x1e\x09\x69\xec\x1a\x82\xdf\xbd\x48\x8e\x5b\x97\x40\x6e\xf3\xfd\xcc\xcf\x27\x5d\xaf\x7f\xc0\x23\x77\x04\x39\x63\x4f\x15\xe4\x0d\x0a\xc2\xdf\x3d\xa8\x7f\xb1\x98\xe7\x6c\x63\xf9\xa8\x20\x1f\xa3\xb8\xb8\x92\x08\x79\xcb\x89\x1a\xd5\x71\x60\x1d\xd6\x16\xd3\x26\xe5\x17\x52\xff\x31\x1c\x2c\x0b\x4d\x12\x85\xba\x86\xa5\x5f\x3d\xa3\x27\x8e\xdc\xab\x91\xf3\xea\xc0\xa6\x09\xa0\x6f\x20\x0c\xce\x59\x2f\xd0\x5a\x7f\xd7\xa4\xb2\x76\x60\x0d\xc5\x8d\x7f\x21\x4d\x66\x24\x0f\xf3\x5c\x3e\x5a\x50\xfc\x68\xd8\x87\xe4\x2e\xe0\x7b\x86\x0c\x9e\x17\xf2\x9a\x01\x00\x04\x87\x5c\x81\x96\x29\x86\xb5\x8e\x58\x3c\x6a\xc3\x9d\x3a\x09\x7a\x39\x39\xe4\xa3\xb7\xfd\x3a\x5a\xcb\x54\xc1\xae\x33\x72\x1e\xde\x95\xb6\x7d\xfd\x36\x20\x7f\xda\x3a\x88\xf5\xd8\x51\x1d\xc8\x8f\x46\x53\xa8\xe3\x3e\xf5\x84\x3d\xc5\x1c\x11\xf0\xa6\xde\x1e\xbe\x2b\xd3\x19\x0d\xb5\xe4\xd3\x31\xea\x68\xd8\x84\x73\x51\x66\x49\x70\x68\x7c\x80\x3d\xa0\x73\xc4\x4d\x91\x60\x05\x2e\xa8\x6d\x62\x2d\x53\xb9\xcc\xf1\x29\x20\x84\xbb\x3d\xeb\xab\x1c\xf0\x72\x59\xde\x30\x5b\xbe\x90\xb8\x59\x7f\xf3\x51\xf9\x15\x00\x00\xff\xff\x5b\x12\x0d\xa2\x52\x02\x00\x00")

func contextTmplBytes() ([]byte, error) {
	return bindataRead(
		_contextTmpl,
		"context.tmpl",
	)
}

func contextTmpl() (*asset, error) {
	bytes, err := contextTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "context.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3e, 0xff, 0xae, 0xbb, 0x1e, 0xec, 0xa, 0x55, 0x23, 0xfd, 0x59, 0x78, 0x59, 0xcc, 0xbf, 0xf8, 0x3e, 0x85, 0x3a, 0xd9, 0xc3, 0x32, 0x76, 0x1d, 0x57, 0xd2, 0xbc, 0x22, 0xb, 0xa5, 0xf3, 0x7a}}
	return a, nil
}

var _headerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xbb\x6e\xf3\x30\x0c\x85\x77\x3d\x05\xe1\xe9\xff\x87\x4a\x0f\xd0\xb1\xe9\xd0\x25\x29\x10\x0f\xdd\x0a\x46\x22\x54\x21\xd6\x05\x14\xe3\xd6\x08\xf2\xee\x05\x2a\xa7\x37\x14\xb0\x27\x1e\x1e\x7e\xba\xf0\x18\x03\x77\xd9\x11\x78\x4a\xc4\x28\xe4\xe0\x30\x81\xcf\x9f\x3d\x8c\x01\x21\x24\x21\x4e\x38\x18\x1b\x9d\xa9\xc4\x63\xb0\x74\x0b\x9b\x1d\x6c\x77\x3d\xdc\x6f\x1e\x7a\xad\x0a\xda\x23\x7a\x82\xf3\x19\xf4\x16\x23\xc1\xe5\xa2\x54\x88\x25\xb3\xc0\x3f\x05\x00\xd0\xd9\x9c\x84\xde\xa4\x6b\x5d\xc8\x9d\x6a\xca\x07\x79\x39\x1d\xb4\xcd\xd1\xe4\x42\x49\x18\x6d\x48\xfe\xbb\xbe\xf1\x7f\xc1\x4f\x27\x4c\xaf\xd9\x54\xc9\x8c\x9e\xba\x85\xb9\x29\x47\x6f\x2a\xf9\x48\x49\x56\xb1\x94\x5c\xc9\x61\x25\x6c\x99\x1c\x25\x09\x38\xac\xfb\x47\xd3\x76\xc0\x5a\x17\x0f\xc8\x54\x68\xa6\x4a\x5d\x04\x4d\xc1\xc0\x2b\x2f\x35\x91\x04\x1d\x0a\x76\xea\xbf\x52\x23\x32\x3c\xc3\xd7\x26\xfa\x91\xf3\x18\x1c\xf1\x3c\xb9\x06\xf2\xdb\x9f\x43\xd5\xfb\x56\xaf\x6e\x7b\x48\xef\x5b\xe5\x9f\xf6\xc7\xe6\xba\x9f\x0a\xa9\xf7\x00\x00\x00\xff\xff\x53\xe8\xbb\x29\x82\x02\x00\x00")

func headerTmplBytes() ([]byte, error) {
	return bindataRead(
		_headerTmpl,
		"header.tmpl",
	)
}

func headerTmpl() (*asset, error) {
	bytes, err := headerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9f, 0xdc, 0x74, 0x26, 0xca, 0x7e, 0x88, 0x55, 0x8c, 0x41, 0x43, 0x4d, 0xb4, 0x47, 0x7f, 0xdd, 0xfe, 0x43, 0xff, 0xa0, 0x20, 0x9b, 0xef, 0xa, 0x49, 0x24, 0x27, 0x32, 0xb2, 0xb6, 0x1b, 0x26}}
	return a, nil
}

var _metaTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x57\x08\xa9\x2c\x48\x55\xc8\x2c\x56\x28\xc9\x48\x55\x28\x01\xb1\xd3\xf2\x8b\x14\xaa\xab\x15\xf4\xfc\x12\x73\x53\x15\x6a\x6b\xb9\x92\xf3\xf3\x8a\x4b\x20\xca\x6c\x15\x94\x90\x64\x94\xb8\x00\x01\x00\x00\xff\xff\xfc\x49\xcc\x09\x3f\x00\x00\x00")

func metaTmplBytes() ([]byte, error) {
	return bindataRead(
		_metaTmpl,
		"meta.tmpl",
	)
}

func metaTmpl() (*asset, error) {
	bytes, err := metaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x70, 0x58, 0x9b, 0x31, 0x99, 0x67, 0xe2, 0x68, 0xbb, 0xf9, 0x82, 0x93, 0xde, 0x50, 0xb3, 0xeb, 0x16, 0xaf, 0xb0, 0xb9, 0x15, 0x44, 0x49, 0xe6, 0xc9, 0xb4, 0xf8, 0xd5, 0xc1, 0x4d, 0xb5, 0x23}}
	return a, nil
}

var _pairsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xdd\x8a\xdb\x3c\x14\xbc\xf7\x53\xcc\x07\xe6\xc3\x59\xbc\xda\xfb\x42\x6e\xfa\x47\xa1\x6c\x09\xa5\xf4\x66\x09\x8b\x6a\x1f\x07\x63\x47\x56\x25\xd9\x5d\xe3\xea\xdd\x8b\x7e\xec\x8d\x43\x12\xda\xab\x38\x3a\x73\xe6\xcc\x19\x8f\x3c\x4d\x48\xdf\x73\xc3\xf1\x66\x0b\x06\x6b\x93\x64\x9a\xee\xa1\xb8\x38\x10\x52\xc1\x8f\x94\x23\x2d\xe7\xba\x07\x5a\xeb\x21\xa9\x14\xee\xcc\x63\xf0\x1b\xa6\xdb\x71\x5d\xf0\x76\x2e\x47\x86\x26\x47\x3a\x78\x5c\xb9\xea\x6d\xfc\x59\x73\xd6\x68\x46\x49\x90\xbc\x56\x4e\x95\x14\xb0\xd6\x3f\x34\xb0\x16\xda\xa8\xbe\x30\x98\x12\x00\x78\x78\xc0\x4e\xd1\x7d\x49\x55\x2d\xa8\xf4\x2d\xda\x17\x1c\x7b\x5d\x21\x1d\xd8\xc7\x5e\x14\xda\x91\xba\xe3\x77\x9d\x30\xf4\x62\x50\x84\x5f\x16\xff\x2f\x2d\x24\x4a\xbf\x7b\xe4\x7e\x24\xc3\xaf\x90\xcf\x7b\xd1\x98\x23\x7d\xf6\x5b\x0c\x6c\xe7\x20\xf3\xac\x4f\x5c\x3b\xd5\x0d\x8d\xeb\xed\xf0\xa3\xeb\xda\xc8\x73\xa9\x1c\x0a\xb5\x28\xe9\x25\xbc\x12\xf6\x6d\x94\xf4\xc8\x65\x00\x47\xf6\x13\xb5\x36\x49\xaa\x5e\x14\x90\x5c\x69\x5a\x1c\xdb\xcd\xf6\x39\xd7\xb2\x4e\x1a\x0d\xc6\xd8\x9d\xb3\x56\x7b\xa1\x1b\x64\x77\x97\x3d\xce\x41\x4a\x75\x6a\x13\x4d\x56\xa4\xfb\xd6\xb8\x15\xff\xbf\x8c\x9f\xa2\x63\x03\x6f\x7b\xd2\x0e\x78\xe4\x0d\x65\x47\x2e\x9f\xb4\x51\xb5\x38\xec\x6b\x61\x48\x55\xbc\xa0\xc9\x6e\x3c\xb4\xea\x14\x9e\x73\xf8\x48\x04\x2b\xbd\xc2\x30\xf0\x95\xeb\x69\x60\x9f\x69\xdc\x63\x8b\x81\x7d\x77\x27\xbe\xbe\x8c\x53\x18\x70\x42\xbd\x9c\x76\x4d\x30\x79\xc9\x88\x73\x06\xf2\x5f\x92\x32\xe4\x8e\x65\x3b\xeb\x90\x7a\xce\xca\xde\x97\xeb\xca\x95\x5f\xe5\x06\x8f\x66\x8c\xd7\x9b\x9d\x85\x2c\x2c\x6e\x41\xad\xa6\x5b\x9d\x73\xdb\x5b\x5e\x34\x07\xd5\xf5\xa2\xcc\x62\xeb\xb5\x98\x86\xf5\x8e\x7f\x19\x56\x45\x3f\xfb\x5a\x51\x79\x29\xb3\xf1\x52\xd2\x18\xae\xe5\x79\x36\xaf\x38\x13\x82\xe0\xb3\xb9\x5f\x79\xba\x8c\x8a\xad\x75\x85\xff\xce\x6c\x33\xbd\x12\x10\x75\x9b\x23\x24\xf3\x0b\xfd\xfa\xa0\x94\x13\xf5\x35\x36\x67\xeb\x09\x57\xbc\xb8\xf1\x52\xe2\x45\x8c\xfd\xd8\xc2\xa8\x18\xa4\x13\xd0\x1a\x31\xb0\xec\xf6\x1d\xbc\xa1\x22\xee\x14\x78\x73\xb7\x5b\x12\xbe\x76\x11\x73\xf2\xf8\x27\x00\x00\xff\xff\xe6\x9e\xab\xd0\x75\x05\x00\x00")

func pairsTmplBytes() ([]byte, error) {
	return bindataRead(
		_pairsTmpl,
		"pairs.tmpl",
	)
}

func pairsTmpl() (*asset, error) {
	bytes, err := pairsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pairs.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x18, 0xd0, 0x3, 0xc1, 0xad, 0xc9, 0x87, 0x3f, 0xa2, 0xb0, 0x11, 0xb7, 0x8, 0xff, 0x97, 0xd8, 0x5e, 0x7d, 0xbe, 0xfe, 0x66, 0xf9, 0x40, 0x8d, 0xe3, 0x94, 0xa2, 0x3b, 0xb, 0x3d, 0xd9, 0xcd}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"context.tmpl": contextTmpl,
	"header.tmpl":  headerTmpl,
	"meta.tmpl":    metaTmpl,
	"pairs.tmpl":   pairsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"context.tmpl": &bintree{contextTmpl, map[string]*bintree{}},
	"header.tmpl":  &bintree{headerTmpl, map[string]*bintree{}},
	"meta.tmpl":    &bintree{metaTmpl, map[string]*bintree{}},
	"pairs.tmpl":   &bintree{pairsTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
