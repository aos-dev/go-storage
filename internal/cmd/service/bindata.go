// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/context.tmpl (594B)
// tmpl/header.tmpl (711B)
// tmpl/meta.tmpl (63B)
// tmpl/pairs.tmpl (1.871kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contextTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x51\xcd\x6a\xe3\x30\x10\xbe\xfb\x29\x86\xe0\x83\x0d\x5e\xf9\xbe\x90\x53\x96\xb0\xa7\x52\x9a\x43\x7b\x9d\xca\x63\x47\x34\x1e\x09\x69\xec\x1a\x82\xdf\xbd\x48\x8e\x5b\x97\x40\x6e\xf3\xfd\xcc\xcf\x27\x5d\xaf\x7f\xc0\x23\x77\x04\x39\x63\x4f\x15\xe4\x0d\x0a\xc2\xdf\x3d\xa8\x7f\xb1\x98\xe7\x6c\x63\xf9\xa8\x20\x1f\xa3\xb8\xb8\x92\x08\x79\xcb\x89\x1a\xd5\x71\x60\x1d\xd6\x16\xd3\x26\xe5\x17\x52\xff\x31\x1c\x2c\x0b\x4d\x12\x85\xba\x86\xa5\x5f\x3d\xa3\x27\x8e\xdc\xab\x91\xf3\xea\xc0\xa6\x09\xa0\x6f\x20\x0c\xce\x59\x2f\xd0\x5a\x7f\xd7\xa4\xb2\x76\x60\x0d\xc5\x8d\x7f\x21\x4d\x66\x24\x0f\xf3\x5c\x3e\x5a\x50\xfc\x68\xd8\x87\xe4\x2e\xe0\x7b\x86\x0c\x9e\x17\xf2\x9a\x01\x00\x04\x87\x5c\x81\x96\x29\x86\xb5\x8e\x58\x3c\x6a\xc3\x9d\x3a\x09\x7a\x39\x39\xe4\xa3\xb7\xfd\x3a\x5a\xcb\x54\xc1\xae\x33\x72\x1e\xde\x95\xb6\x7d\xfd\x36\x20\x7f\xda\x3a\x88\xf5\xd8\x51\x1d\xc8\x8f\x46\x53\xa8\xe3\x3e\xf5\x84\x3d\xc5\x1c\x11\xf0\xa6\xde\x1e\xbe\x2b\xd3\x19\x0d\xb5\xe4\xd3\x31\xea\x68\xd8\x84\x73\x51\x66\x49\x70\x68\x7c\x80\x3d\xa0\x73\xc4\x4d\x91\x60\x05\x2e\xa8\x6d\x62\x2d\x53\xb9\xcc\xf1\x29\x20\x84\xbb\x3d\xeb\xab\x1c\xf0\x72\x59\xde\x30\x5b\xbe\x90\xb8\x59\x7f\xf3\x51\xf9\x15\x00\x00\xff\xff\x5b\x12\x0d\xa2\x52\x02\x00\x00")

func contextTmplBytes() ([]byte, error) {
	return bindataRead(
		_contextTmpl,
		"context.tmpl",
	)
}

func contextTmpl() (*asset, error) {
	bytes, err := contextTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "context.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3e, 0xff, 0xae, 0xbb, 0x1e, 0xec, 0xa, 0x55, 0x23, 0xfd, 0x59, 0x78, 0x59, 0xcc, 0xbf, 0xf8, 0x3e, 0x85, 0x3a, 0xd9, 0xc3, 0x32, 0x76, 0x1d, 0x57, 0xd2, 0xbc, 0x22, 0xb, 0xa5, 0xf3, 0x7a}}
	return a, nil
}

var _headerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xcd\x6e\x2a\x31\x0c\x85\xf7\x79\x0a\x6b\x56\xf7\x2e\x9a\x3c\x40\x97\x85\x45\x37\x50\x09\x16\xdd\x55\x26\xb1\xd2\x08\x26\x8e\x1c\x33\x2d\x42\xbc\x7b\xa5\x86\xa1\x3f\xaa\x34\xb3\xf2\xf1\xf1\x17\x27\x39\xce\xc1\x03\x07\x82\x48\x99\x04\x95\x02\xec\x4e\x10\xf9\xd6\xc3\x90\x10\x52\x56\x92\x8c\x07\xe7\xfb\xe0\x2a\xc9\x90\x3c\xdd\xc3\x62\x0d\xab\xf5\x16\x96\x8b\xc7\xad\x35\x05\xfd\x1e\x23\xc1\xf9\x0c\x76\x85\x3d\xc1\xe5\x62\x4c\xea\x0b\x8b\xc2\x3f\x03\x00\xd0\x79\xce\x4a\xef\xda\xb5\x2e\x71\x67\x9a\x8a\x49\x5f\x8f\x3b\xeb\xb9\x77\x5c\x28\xab\xa0\x4f\x39\x7e\xd7\x77\xf1\x2f\xf8\xf9\x88\xf9\x8d\x5d\x55\x16\x8c\xd4\x4d\xcc\x5d\xd9\x47\x57\x29\xf6\x94\x75\x16\x4b\x39\x14\x4e\x33\x61\x2f\x14\x28\x6b\xc2\xc3\xbc\x77\x34\xed\x0f\x58\xeb\xe4\x81\x6b\xe0\xd3\xa0\x9e\xca\x48\x95\x3a\x09\xba\x82\x49\x66\x2e\x75\x3d\x29\x06\x54\xec\xcc\x7f\x63\x06\x14\x78\x81\xaf\x2f\xdb\x27\xe1\x21\x05\x92\xeb\x64\x4c\xee\xb7\x7f\x4d\xdf\x6e\x5a\x1d\xdd\x76\x91\xdd\xb4\x2a\x3f\xed\xcf\x88\xec\xf6\x54\xe8\xb6\xa4\xa5\x61\x37\x4d\x2c\x45\x58\xcc\x47\x00\x00\x00\xff\xff\x22\xba\x87\x02\xc7\x02\x00\x00")

func headerTmplBytes() ([]byte, error) {
	return bindataRead(
		_headerTmpl,
		"header.tmpl",
	)
}

func headerTmpl() (*asset, error) {
	bytes, err := headerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0x4b, 0xc, 0xb8, 0x76, 0x1b, 0x35, 0x8c, 0x66, 0xc6, 0x14, 0x3, 0xa3, 0x76, 0x39, 0x28, 0x76, 0x32, 0xe2, 0x80, 0xe9, 0xf8, 0xe3, 0xd2, 0x39, 0xf8, 0xf7, 0xd8, 0xba, 0xa6, 0xee, 0x82}}
	return a, nil
}

var _metaTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x57\x08\xa9\x2c\x48\x55\xc8\x2c\x56\x28\xc9\x48\x55\x28\x01\xb1\xd3\xf2\x8b\x14\xaa\xab\x15\xf4\xfc\x12\x73\x53\x15\x6a\x6b\xb9\x92\xf3\xf3\x8a\x4b\x20\xca\x6c\x15\x94\x90\x64\x94\xb8\x00\x01\x00\x00\xff\xff\xfc\x49\xcc\x09\x3f\x00\x00\x00")

func metaTmplBytes() ([]byte, error) {
	return bindataRead(
		_metaTmpl,
		"meta.tmpl",
	)
}

func metaTmpl() (*asset, error) {
	bytes, err := metaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x70, 0x58, 0x9b, 0x31, 0x99, 0x67, 0xe2, 0x68, 0xbb, 0xf9, 0x82, 0x93, 0xde, 0x50, 0xb3, 0xeb, 0x16, 0xaf, 0xb0, 0xb9, 0x15, 0x44, 0x49, 0xe6, 0xc9, 0xb4, 0xf8, 0xd5, 0xc1, 0x4d, 0xb5, 0x23}}
	return a, nil
}

var _pairsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x6b\xdc\x30\x10\xbd\xfb\x57\x4c\x17\x53\xbc\xc1\x71\xee\x29\x7b\xe9\x17\x85\x92\x10\x4a\xdb\x4b\x58\x82\x6a\x8f\x17\x61\xaf\xa4\x48\xb2\x93\xc5\xd5\x7f\x2f\xfa\xb0\xd7\x36\xf6\xd2\x42\xf7\xb2\x96\xf4\xde\x68\x66\xde\x3c\x75\x1d\xc4\x1f\x89\x26\x70\xbb\x83\x0c\x8c\x89\xa2\xae\xbb\x06\x49\xd8\x01\x21\x66\xe4\x88\x29\xc4\x45\x7f\xee\x80\xc6\x38\x48\x2c\x98\xdd\x73\x18\xf8\x0d\x9a\x3f\x10\x95\x93\xba\x3f\x0e\x11\xaa\x14\xe2\xd6\xe1\x8a\x09\xb7\x72\x7b\xd5\x8c\xd8\x12\x09\x82\x50\x69\x93\x12\x0c\x8c\x71\x1f\x15\x18\x73\x47\x04\xec\xe0\x48\xc4\xa3\xd2\x92\xb2\xc3\x5e\x69\xd9\xe4\xba\x33\x5d\x04\x00\x30\xbe\x11\x4f\x29\xc4\x4f\x2e\x7e\x9b\x3d\x10\x2a\x95\x0d\x0d\xe1\xb7\xb1\x21\x2b\x3c\x81\x31\x9b\x5b\x18\xa2\x98\x74\x88\x83\xac\xb0\x04\x13\x45\xfa\x24\x70\x25\x9f\xc0\x04\x7f\xfd\xcd\x0d\x3c\x48\xbc\x2e\xb0\xa4\x0c\x0b\x47\x51\x43\x3c\x5a\xda\x44\x3e\x37\x2c\x1f\x12\xf9\xc0\x99\xc6\x57\x0d\xb9\xff\xcf\xc2\x7a\x9e\x42\x1f\xfb\x0e\x35\x59\x09\x3e\x29\x5a\xe2\x73\x43\x25\x16\x4b\xb5\x87\x4c\x18\xd7\x23\x5c\x38\xfb\x42\x54\xdf\x95\x89\x1e\xf0\x8b\xf3\x7a\x9e\x94\x5f\x2e\xa1\xfd\x41\x42\x59\x81\xaf\x7e\xa8\xb2\xef\x27\x81\x56\x3a\x8b\xde\xba\xd5\x38\x9f\x73\xa7\xbb\xce\x26\x87\xcf\xae\xbb\x9b\x7b\x7c\xd9\xc0\xb5\x31\x51\xd9\xb0\x1c\x04\x91\x0a\x07\x05\x6c\x51\x6e\x86\xb0\x56\x78\x06\x25\x0a\xae\x06\x0c\x6c\x3d\xe9\x8c\x65\x85\x83\x0e\xf2\x25\x5c\x68\x05\x59\x96\x5d\x59\x8d\x95\x6b\xd5\x16\x92\xab\x65\xb1\x53\x40\x29\xb9\xdc\x06\xb5\x25\xaa\xa6\xd6\xb6\xc9\x6f\x97\xf1\x5d\x90\xae\x25\x75\x83\xca\x02\x8f\xa4\xc2\x64\x34\xbd\x94\x69\x94\x25\xc9\xb1\x33\x5b\x07\x2d\xb9\x84\xa7\x14\x9c\x55\xbc\xa6\x2e\xc3\x6e\x98\x5b\x5a\xda\x73\xee\x7c\xb3\x6a\x91\xc7\x36\xfb\x8a\xa7\xfd\x3b\x78\xc3\xab\x11\xd7\x27\xad\x1b\xc9\x80\xd1\x3a\x05\x85\xb2\xa5\x39\xaa\xec\x1e\x5f\x6c\xe5\x3f\x98\x6a\x84\xe0\x52\x63\xf1\xc9\x16\x9a\xb4\xdb\x81\x7b\x76\x8e\xaf\x26\x5c\x01\x3b\x68\xb3\x9f\x76\x27\xf2\xa8\x50\xb0\x84\x16\x46\xc5\x0d\xbb\xbc\xf2\xc3\x34\xd8\xc5\xea\x03\xe2\x5f\x4c\xd3\xba\xf2\x77\x7d\x1e\x42\xf5\xb6\xd9\x47\xa1\x41\x93\xa2\xbd\x4a\x3d\xc6\xe5\x9b\xcc\xfc\xe6\xab\x34\x7e\x94\x2e\x30\x7b\xda\x7b\x92\x57\x07\xc9\x1b\x56\x24\x81\xba\xe6\x58\x5f\xde\xf1\x3f\xf9\x36\x16\xd6\x6c\xee\xc1\x9c\x9b\x6e\xa5\x33\x7e\x28\xdc\x2b\xb7\x9f\xf4\x74\x6e\x7d\x5a\xce\x66\xe5\xd2\x9c\x7c\x0b\x64\x3f\x24\xd3\x6b\x56\x1a\xb2\xa4\xcc\xa5\xa7\x68\xd4\xff\xf0\x2a\x85\xf8\xb0\x03\x2d\xc3\xb4\x2d\xdc\x31\xe2\x4d\x49\x6d\x96\xfc\xd5\xa3\x74\x49\xd0\xd0\x13\x1f\x3f\xb5\xbd\x89\x4c\x34\x02\x8d\x3e\xff\x04\x00\x00\xff\xff\xb2\x20\x4a\xfb\x4f\x07\x00\x00")

func pairsTmplBytes() ([]byte, error) {
	return bindataRead(
		_pairsTmpl,
		"pairs.tmpl",
	)
}

func pairsTmpl() (*asset, error) {
	bytes, err := pairsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pairs.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x39, 0x96, 0x1d, 0x7e, 0x41, 0x58, 0xe2, 0x85, 0x9e, 0x66, 0xc, 0x1c, 0xe7, 0x25, 0xdb, 0x36, 0x3d, 0xff, 0x96, 0xa7, 0x98, 0xb2, 0xaf, 0x4f, 0xe, 0x90, 0x90, 0x53, 0x9f, 0xa0, 0x14, 0x1b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"context.tmpl": contextTmpl,
	"header.tmpl":  headerTmpl,
	"meta.tmpl":    metaTmpl,
	"pairs.tmpl":   pairsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"context.tmpl": &bintree{contextTmpl, map[string]*bintree{}},
	"header.tmpl":  &bintree{headerTmpl, map[string]*bintree{}},
	"meta.tmpl":    &bintree{metaTmpl, map[string]*bintree{}},
	"pairs.tmpl":   &bintree{pairsTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
