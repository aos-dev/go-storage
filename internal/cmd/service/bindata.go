// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/context.tmpl (594B)
// tmpl/header.tmpl (711B)
// tmpl/meta.tmpl (63B)
// tmpl/pairs.tmpl (2.827kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contextTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x51\xcd\x6a\xe3\x30\x10\xbe\xfb\x29\x86\xe0\x83\x0d\x5e\xf9\xbe\x90\x53\x96\xb0\xa7\x52\x9a\x43\x7b\x9d\xca\x63\x47\x34\x1e\x09\x69\xec\x1a\x82\xdf\xbd\x48\x8e\x5b\x97\x40\x6e\xf3\xfd\xcc\xcf\x27\x5d\xaf\x7f\xc0\x23\x77\x04\x39\x63\x4f\x15\xe4\x0d\x0a\xc2\xdf\x3d\xa8\x7f\xb1\x98\xe7\x6c\x63\xf9\xa8\x20\x1f\xa3\xb8\xb8\x92\x08\x79\xcb\x89\x1a\xd5\x71\x60\x1d\xd6\x16\xd3\x26\xe5\x17\x52\xff\x31\x1c\x2c\x0b\x4d\x12\x85\xba\x86\xa5\x5f\x3d\xa3\x27\x8e\xdc\xab\x91\xf3\xea\xc0\xa6\x09\xa0\x6f\x20\x0c\xce\x59\x2f\xd0\x5a\x7f\xd7\xa4\xb2\x76\x60\x0d\xc5\x8d\x7f\x21\x4d\x66\x24\x0f\xf3\x5c\x3e\x5a\x50\xfc\x68\xd8\x87\xe4\x2e\xe0\x7b\x86\x0c\x9e\x17\xf2\x9a\x01\x00\x04\x87\x5c\x81\x96\x29\x86\xb5\x8e\x58\x3c\x6a\xc3\x9d\x3a\x09\x7a\x39\x39\xe4\xa3\xb7\xfd\x3a\x5a\xcb\x54\xc1\xae\x33\x72\x1e\xde\x95\xb6\x7d\xfd\x36\x20\x7f\xda\x3a\x88\xf5\xd8\x51\x1d\xc8\x8f\x46\x53\xa8\xe3\x3e\xf5\x84\x3d\xc5\x1c\x11\xf0\xa6\xde\x1e\xbe\x2b\xd3\x19\x0d\xb5\xe4\xd3\x31\xea\x68\xd8\x84\x73\x51\x66\x49\x70\x68\x7c\x80\x3d\xa0\x73\xc4\x4d\x91\x60\x05\x2e\xa8\x6d\x62\x2d\x53\xb9\xcc\xf1\x29\x20\x84\xbb\x3d\xeb\xab\x1c\xf0\x72\x59\xde\x30\x5b\xbe\x90\xb8\x59\x7f\xf3\x51\xf9\x15\x00\x00\xff\xff\x5b\x12\x0d\xa2\x52\x02\x00\x00")

func contextTmplBytes() ([]byte, error) {
	return bindataRead(
		_contextTmpl,
		"context.tmpl",
	)
}

func contextTmpl() (*asset, error) {
	bytes, err := contextTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "context.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3e, 0xff, 0xae, 0xbb, 0x1e, 0xec, 0xa, 0x55, 0x23, 0xfd, 0x59, 0x78, 0x59, 0xcc, 0xbf, 0xf8, 0x3e, 0x85, 0x3a, 0xd9, 0xc3, 0x32, 0x76, 0x1d, 0x57, 0xd2, 0xbc, 0x22, 0xb, 0xa5, 0xf3, 0x7a}}
	return a, nil
}

var _headerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xcd\x6e\x2a\x31\x0c\x85\xf7\x79\x0a\x6b\x56\xf7\x2e\x9a\x3c\x40\x97\x85\x45\x37\x50\x09\x16\xdd\x55\x26\xb1\xd2\x08\x26\x8e\x1c\x33\x2d\x42\xbc\x7b\xa5\x86\xa1\x3f\xaa\x34\xb3\xf2\xf1\xf1\x17\x27\x39\xce\xc1\x03\x07\x82\x48\x99\x04\x95\x02\xec\x4e\x10\xf9\xd6\xc3\x90\x10\x52\x56\x92\x8c\x07\xe7\xfb\xe0\x2a\xc9\x90\x3c\xdd\xc3\x62\x0d\xab\xf5\x16\x96\x8b\xc7\xad\x35\x05\xfd\x1e\x23\xc1\xf9\x0c\x76\x85\x3d\xc1\xe5\x62\x4c\xea\x0b\x8b\xc2\x3f\x03\x00\xd0\x79\xce\x4a\xef\xda\xb5\x2e\x71\x67\x9a\x8a\x49\x5f\x8f\x3b\xeb\xb9\x77\x5c\x28\xab\xa0\x4f\x39\x7e\xd7\x77\xf1\x2f\xf8\xf9\x88\xf9\x8d\x5d\x55\x16\x8c\xd4\x4d\xcc\x5d\xd9\x47\x57\x29\xf6\x94\x75\x16\x4b\x39\x14\x4e\x33\x61\x2f\x14\x28\x6b\xc2\xc3\xbc\x77\x34\xed\x0f\x58\xeb\xe4\x81\x6b\xe0\xd3\xa0\x9e\xca\x48\x95\x3a\x09\xba\x82\x49\x66\x2e\x75\x3d\x29\x06\x54\xec\xcc\x7f\x63\x06\x14\x78\x81\xaf\x2f\xdb\x27\xe1\x21\x05\x92\xeb\x64\x4c\xee\xb7\x7f\x4d\xdf\x6e\x5a\x1d\xdd\x76\x91\xdd\xb4\x2a\x3f\xed\xcf\x88\xec\xf6\x54\xe8\xb6\xa4\xa5\x61\x37\x4d\x2c\x45\x58\xcc\x47\x00\x00\x00\xff\xff\x22\xba\x87\x02\xc7\x02\x00\x00")

func headerTmplBytes() ([]byte, error) {
	return bindataRead(
		_headerTmpl,
		"header.tmpl",
	)
}

func headerTmpl() (*asset, error) {
	bytes, err := headerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0x4b, 0xc, 0xb8, 0x76, 0x1b, 0x35, 0x8c, 0x66, 0xc6, 0x14, 0x3, 0xa3, 0x76, 0x39, 0x28, 0x76, 0x32, 0xe2, 0x80, 0xe9, 0xf8, 0xe3, 0xd2, 0x39, 0xf8, 0xf7, 0xd8, 0xba, 0xa6, 0xee, 0x82}}
	return a, nil
}

var _metaTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x57\x08\xa9\x2c\x48\x55\xc8\x2c\x56\x28\xc9\x48\x55\x28\x01\xb1\xd3\xf2\x8b\x14\xaa\xab\x15\xf4\xfc\x12\x73\x53\x15\x6a\x6b\xb9\x92\xf3\xf3\x8a\x4b\x20\xca\x6c\x15\x94\x90\x64\x94\xb8\x00\x01\x00\x00\xff\xff\xfc\x49\xcc\x09\x3f\x00\x00\x00")

func metaTmplBytes() ([]byte, error) {
	return bindataRead(
		_metaTmpl,
		"meta.tmpl",
	)
}

func metaTmpl() (*asset, error) {
	bytes, err := metaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x70, 0x58, 0x9b, 0x31, 0x99, 0x67, 0xe2, 0x68, 0xbb, 0xf9, 0x82, 0x93, 0xde, 0x50, 0xb3, 0xeb, 0x16, 0xaf, 0xb0, 0xb9, 0x15, 0x44, 0x49, 0xe6, 0xc9, 0xb4, 0xf8, 0xd5, 0xc1, 0x4d, 0xb5, 0x23}}
	return a, nil
}

var _pairsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x56\xdf\x6b\xdb\x30\x10\x7e\xcf\x5f\x71\x0d\x26\xa4\xc5\x75\xde\x03\x79\x59\x7f\x30\x28\xa5\x61\x8c\xbd\x94\x50\x54\xfb\x5c\x34\x3b\xb2\x27\xc9\xa6\xc1\xf3\xff\x3e\x74\x92\x7f\xce\x09\xdd\x56\xfa\xb2\xbe\xd4\xba\xfb\xee\x74\xdf\xa7\x4f\x22\x55\x05\xde\x35\xd3\x0c\xd6\x1b\x08\xa0\xae\x67\xb3\xaa\xba\x04\xc9\xc4\x0b\x82\x27\xd8\x1e\x7d\xf0\xa2\x26\x4f\xc0\xba\x26\x88\x97\x0b\x13\x23\x0c\xfc\x04\x9d\x6d\x99\x0a\x59\xda\xa4\x5d\x87\xc4\x07\xaf\x24\x5c\x34\xa8\x4d\x28\x96\x8c\x0a\xf5\x21\x47\xc8\x19\x97\x66\xaa\x5c\x40\x5d\xd3\x47\x02\x75\x0d\x4a\xcb\x22\xd4\x50\xcd\x00\x00\x56\x2b\xd8\x4a\xbc\x8c\x30\xe6\x02\x23\x2a\x51\x94\x30\xdd\x79\x0c\x5e\x19\xdc\x16\x22\x54\xa6\xa9\x09\x5f\x65\x42\xe3\xab\x86\xd0\xfe\x0f\xdc\xba\x2d\x41\x11\x11\x77\xd7\xfb\x1e\x35\x3b\xd2\xbc\xe1\x85\x07\x1f\x3c\x89\x3f\x0a\x2e\x31\x22\x32\x65\xb0\x35\xc8\x66\x4b\x37\x89\xc8\x74\x0f\xe7\x72\x9f\x99\x32\xc4\x12\x3c\x0c\x05\x80\xe7\x2c\x4b\xc7\x43\xd9\xe5\x14\xda\x26\xb8\x88\xf0\xd5\x1e\x62\xf0\xf5\x90\xe3\x3d\xcb\x2d\xb8\x37\x88\x6b\x55\xcf\x66\x71\x21\x42\xc8\x99\x54\xd8\x6a\xbc\x6d\x04\x37\x3a\x2f\xb3\x5c\x2b\x08\x82\xe0\xc2\x1c\x86\x22\x4e\xe7\xb0\xbc\x98\x3e\x15\x1f\x50\xca\x4c\x9e\xbb\x63\x91\xa8\x8a\x54\x1b\x35\x16\xd3\xf8\xca\x69\x5c\xb2\xb4\x40\x65\x80\x7b\x96\xe0\x72\xcf\xf2\x47\xa5\x25\x17\x2f\x3b\x2e\x34\xca\x98\x85\x58\xd5\xe7\x04\x8d\x33\x09\x4f\x3e\x90\x89\xac\xf8\x34\xa1\xdd\xb0\xeb\xf5\x58\x06\x77\x78\xd8\xc1\x06\xca\xe0\x9b\x89\x50\xbe\xdd\x4e\x42\x09\xbd\xd6\x6d\x34\x4b\xac\xe6\xad\xab\x8c\x32\x90\xff\x89\xb7\x4a\xdf\x74\xd9\x34\x73\xe4\xaa\x71\xd7\x8e\xd2\x3c\x36\xe9\x6e\x5c\xab\x51\x83\xa1\x79\x97\x23\x5b\x5a\xe2\x35\x60\xaa\xf0\x54\x65\x53\xf6\x89\x85\xc9\x8b\xcc\x0a\x11\x2d\x5d\xe9\x31\x63\x5b\x7a\xfb\x77\xb2\xb7\x97\x1b\x9b\xd1\x45\x1e\x7b\xf3\x88\x32\xd6\x08\xe4\xcd\xdd\x40\xd3\xf1\x0d\xe1\x31\x9c\x8d\x64\xd3\x85\x14\x20\x78\xea\xc3\x42\xa1\x2c\x79\xe8\xdc\x79\x63\x1c\xd8\x01\xcd\xdf\x43\xbe\x86\x39\x99\x7c\xee\x0f\x12\x37\x52\xae\xa1\xad\xbe\x91\xd2\x34\xf8\xe2\xf6\x1e\x42\x89\xed\x1a\x1e\x77\xbd\x8b\x30\xdc\x85\xe6\xbf\xc3\xc3\x7a\x48\xcc\x07\xf2\xdf\xda\xcc\x5a\x0f\x7b\xf6\x96\xf5\xf4\x41\x4d\x39\xe6\xd4\x4b\xd2\xf3\x85\x7b\x54\xdc\x14\xb0\x01\x2d\xdd\x2d\x98\xd8\xa3\x57\x37\x2c\x2a\x83\xe5\xe9\x37\xe5\x94\xc3\xdc\xa4\x5c\x74\x76\x99\x67\xcf\xdf\x31\xd4\x4f\xe6\xdd\x99\x37\xbb\xaf\x56\x46\x23\x1e\x31\x8d\x74\xbf\x1f\x08\x63\x6e\x55\x23\x40\xc7\xa9\xcb\xc1\x62\xd1\x8b\xdf\xf2\x14\x29\xfa\x21\x1e\xb9\xca\x44\x9c\xf2\x50\xff\x8b\x47\x3a\x26\xad\x45\x1c\x9d\x2e\x33\x32\x4c\xbf\xbc\x21\x3c\x2e\x6e\xe2\x6f\xf3\xda\x9b\xb4\xbd\xe6\xf2\xbf\x92\xd6\xf1\x1d\xd7\xba\xf0\x9b\x85\x3d\x3b\xa6\xec\xd9\x84\x6d\x87\xe1\x0f\x55\xfc\x3d\x1e\xbc\x09\xc5\x7f\x7f\xef\xe0\x94\x7d\x4f\xc3\xc7\x47\xf2\xb7\x8f\xa9\x93\xd1\x2a\xed\x9b\x36\x33\xfb\x1b\xd4\x61\x7a\x9f\xbf\x02\x00\x00\xff\xff\x21\xed\xf3\x95\x0b\x0b\x00\x00")

func pairsTmplBytes() ([]byte, error) {
	return bindataRead(
		_pairsTmpl,
		"pairs.tmpl",
	)
}

func pairsTmpl() (*asset, error) {
	bytes, err := pairsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pairs.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x12, 0xae, 0x63, 0xd2, 0x32, 0x1a, 0x2d, 0x4c, 0x34, 0xb2, 0x3a, 0x82, 0x91, 0x8e, 0xe5, 0x42, 0xf7, 0x2, 0xeb, 0xc9, 0x86, 0xb9, 0xed, 0x1d, 0x4f, 0xb9, 0x0, 0x43, 0x7b, 0x1d, 0x69, 0x30}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"context.tmpl": contextTmpl,
	"header.tmpl":  headerTmpl,
	"meta.tmpl":    metaTmpl,
	"pairs.tmpl":   pairsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"context.tmpl": &bintree{contextTmpl, map[string]*bintree{}},
	"header.tmpl":  &bintree{headerTmpl, map[string]*bintree{}},
	"meta.tmpl":    &bintree{metaTmpl, map[string]*bintree{}},
	"pairs.tmpl":   &bintree{pairsTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
