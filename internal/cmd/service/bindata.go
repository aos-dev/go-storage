// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/context.tmpl (542B)
// tmpl/header.tmpl (642B)
// tmpl/meta.tmpl (63B)
// tmpl/pairs.tmpl (1.342kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contextTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x51\x41\x6b\xf3\x30\x0c\xbd\xe7\x57\x88\x92\x43\x02\xf9\x9c\xfb\x07\x3d\x75\xf4\x38\xc6\x7a\xd8\xae\x9a\xa3\xa4\x66\x8d\x6c\x6c\x25\x0b\x84\xfc\xf7\x61\xa7\x19\xa1\x83\xdd\xa4\xa7\xe7\xe7\xf7\xa4\x79\xfe\x07\x1e\xb9\x23\xc8\x19\x7b\xaa\x20\x6f\x50\x10\xfe\x1f\x41\x3d\xc5\x62\x59\xb2\x1d\xe5\xb3\x82\x7c\x8c\xc3\xc4\x52\xe7\x81\x75\xd8\x28\xa6\x85\x7c\x54\xaf\xa4\xc9\x8c\xe4\x23\x5a\xd7\x30\xcf\x11\x7c\x41\x4f\x2c\xb0\x2c\x6f\x46\xae\x27\xcb\x42\x93\x00\x36\x4d\x00\x7d\x6f\xc2\xe0\x9c\xf5\x02\xad\xf5\x8f\x6f\x54\xd6\x0e\xac\xa1\x58\xe1\x9d\x7e\xf9\x87\x7a\xf1\x33\xc2\x3e\x24\x6e\x01\x9b\x80\x0c\x9e\x57\x6c\xce\x00\x00\x82\x43\xae\x40\xcb\x14\x83\x59\x47\x2c\x1e\xb5\xe1\x4e\x5d\x04\xbd\x5c\x1c\xf2\xd9\xdb\x7e\x13\xd6\x32\x55\x70\xe8\x8c\x5c\x87\x0f\xa5\x6d\x5f\xbf\x0f\xc8\x5f\xb6\x0e\x62\x3d\x76\x54\x07\xf2\xa3\xd1\x14\xea\xf8\x9d\x7a\xc6\x9e\x62\x86\xd8\xf0\xae\xde\xb9\x3e\x94\xc9\x45\x43\x2d\xf9\xe4\x45\x9d\x0d\x9b\x70\x2d\xca\x2c\x0d\x1c\x1a\x1f\xe0\x08\xe8\x1c\x71\x53\xa4\xb6\x02\x17\xd4\x3e\xae\x96\xa9\x5c\x75\x7c\xca\x07\xe1\xf1\x9b\xfb\x46\x4e\x78\xbb\xad\xdb\xcb\xd6\xb3\x11\x37\xdb\x05\x7f\x97\xdf\x01\x00\x00\xff\xff\x50\x7a\x0c\xc9\x1e\x02\x00\x00")

func contextTmplBytes() ([]byte, error) {
	return bindataRead(
		_contextTmpl,
		"context.tmpl",
	)
}

func contextTmpl() (*asset, error) {
	bytes, err := contextTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "context.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xee, 0x6d, 0xef, 0xd0, 0x11, 0xa, 0xc5, 0x26, 0x92, 0x7e, 0xee, 0xad, 0xe2, 0x7b, 0x90, 0xcb, 0x71, 0x4a, 0xb2, 0x3f, 0xe4, 0xca, 0xb6, 0xab, 0xec, 0x7e, 0xf9, 0x79, 0x1c, 0xf6, 0x80, 0x9d}}
	return a, nil
}

var _headerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xbb\x6e\xf3\x30\x0c\x85\x77\x3d\x05\xe1\xe9\xff\x87\x4a\x0f\xd0\xb1\xe9\xd0\x25\x29\x10\x0f\xdd\x0a\x46\x22\x54\x21\xd6\x05\x14\xe3\xd6\x08\xf2\xee\x05\x2a\xa7\x37\x14\xb0\x27\x1e\x1e\x7e\xba\xf0\x18\x03\x77\xd9\x11\x78\x4a\xc4\x28\xe4\xe0\x30\x81\xcf\x9f\x3d\x8c\x01\x21\x24\x21\x4e\x38\x18\x1b\x9d\xa9\xc4\x63\xb0\x74\x0b\x9b\x1d\x6c\x77\x3d\xdc\x6f\x1e\x7a\xad\x0a\xda\x23\x7a\x82\xf3\x19\xf4\x16\x23\xc1\xe5\xa2\x54\x88\x25\xb3\xc0\x3f\x05\x00\xd0\xd9\x9c\x84\xde\xa4\x6b\x5d\xc8\x9d\x6a\xca\x07\x79\x39\x1d\xb4\xcd\xd1\xe4\x42\x49\x18\x6d\x48\xfe\xbb\xbe\xf1\x7f\xc1\x4f\x27\x4c\xaf\xd9\x54\xc9\x8c\x9e\xba\x85\xb9\x29\x47\x6f\x2a\xf9\x48\x49\x56\xb1\x94\x5c\xc9\x61\x25\x6c\x99\x1c\x25\x09\x38\xac\xfb\x47\xd3\x76\xc0\x5a\x17\x0f\xc8\x54\x68\xa6\x4a\x5d\x04\x4d\xc1\xc0\x2b\x2f\x35\x91\x04\x1d\x0a\x76\xea\xbf\x52\x23\x32\x3c\xc3\xd7\x26\xfa\x91\xf3\x18\x1c\xf1\x3c\xb9\x06\xf2\xdb\x9f\x43\xd5\xfb\x56\xaf\x6e\x7b\x48\xef\x5b\xe5\x9f\xf6\xc7\xe6\xba\x9f\x0a\xa9\xf7\x00\x00\x00\xff\xff\x53\xe8\xbb\x29\x82\x02\x00\x00")

func headerTmplBytes() ([]byte, error) {
	return bindataRead(
		_headerTmpl,
		"header.tmpl",
	)
}

func headerTmpl() (*asset, error) {
	bytes, err := headerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9f, 0xdc, 0x74, 0x26, 0xca, 0x7e, 0x88, 0x55, 0x8c, 0x41, 0x43, 0x4d, 0xb4, 0x47, 0x7f, 0xdd, 0xfe, 0x43, 0xff, 0xa0, 0x20, 0x9b, 0xef, 0xa, 0x49, 0x24, 0x27, 0x32, 0xb2, 0xb6, 0x1b, 0x26}}
	return a, nil
}

var _metaTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x57\x08\xa9\x2c\x48\x55\xc8\x2c\x56\x28\xc9\x48\x55\x28\x01\xb1\xd3\xf2\x8b\x14\xaa\xab\x15\xf4\xfc\x12\x73\x53\x15\x6a\x6b\xb9\x92\xf3\xf3\x8a\x4b\x20\xca\x6c\x15\x94\x90\x64\x94\xb8\x00\x01\x00\x00\xff\xff\xfc\x49\xcc\x09\x3f\x00\x00\x00")

func metaTmplBytes() ([]byte, error) {
	return bindataRead(
		_metaTmpl,
		"meta.tmpl",
	)
}

func metaTmpl() (*asset, error) {
	bytes, err := metaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x70, 0x58, 0x9b, 0x31, 0x99, 0x67, 0xe2, 0x68, 0xbb, 0xf9, 0x82, 0x93, 0xde, 0x50, 0xb3, 0xeb, 0x16, 0xaf, 0xb0, 0xb9, 0x15, 0x44, 0x49, 0xe6, 0xc9, 0xb4, 0xf8, 0xd5, 0xc1, 0x4d, 0xb5, 0x23}}
	return a, nil
}

var _pairsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x8b\xdb\x30\x10\xbd\xfb\x57\x4c\xc1\x14\x67\xf1\x7a\xef\x85\x5c\xfa\x45\xa1\x6c\x09\x6d\xe9\x65\x09\x8b\x6a\x8f\x83\xb0\x23\xab\x23\xd9\xdd\xe0\xea\xbf\x97\x91\x64\xaf\x93\xba\xa1\x3d\xc5\xd6\xbc\x79\xf3\xe6\xe5\xc9\xe3\x08\xe9\x5b\x61\x05\xbc\xda\x42\x01\xce\x25\xc9\x38\xde\x02\x09\x75\x40\x48\x95\x38\x62\x0e\x69\x35\xd5\x3d\xd0\xb9\x84\x9b\xb4\xe2\x23\x0f\x81\x5f\x60\xbb\x9d\x30\xa5\x68\x43\x75\x26\x68\x72\x48\x1f\x3d\x8e\x39\x8a\xf7\xbd\x2a\x0d\x43\xec\x49\x23\x68\x21\x29\x32\x39\xc7\x0f\x0d\x38\x07\xc6\x52\x5f\x5a\x18\x13\x00\x80\xbb\x3b\xd8\x11\xde\x56\x58\x4b\x85\x95\xef\x30\xbe\xf0\xa6\x53\x16\x9f\x2c\x94\xe1\xb7\x88\xef\xc9\xd4\x75\x8f\x56\xac\xb4\x2d\xa5\xe1\x69\x12\x27\x55\x85\x4f\x51\xe2\x8e\xb1\x90\xa5\x8d\x5f\xea\x8b\x12\x0d\x6e\x58\x31\x77\x7f\x10\xc6\xcb\xc4\xd3\xf9\xc6\xf0\xbd\xeb\xda\xc8\xbf\x56\x0e\x85\x38\x85\x3d\x2c\xbe\x9e\x34\xde\x0b\x1d\xc0\x91\x9d\xb5\xa1\xaa\xf8\xd5\x25\x49\xdd\xab\x12\xb4\x20\x83\xb3\x45\xbb\xe8\x17\xdb\x94\x75\xda\x1a\x28\x8a\xe2\x86\xad\x34\x5e\xf6\x06\xb2\x9b\x55\x4f\x73\x40\xa2\x8e\x36\xd1\x54\x42\xd3\xb7\x96\x17\x7f\xb9\x0a\x1f\x5d\xb0\x71\x10\x6d\x8f\x86\x71\x47\xd1\x60\x76\x14\xfa\xc1\x58\x92\xea\xb0\x97\xca\x22\xd5\xa2\xc4\xd1\x6d\x3c\xb4\xee\x08\x1e\x73\x18\x18\x1c\xfc\xf5\xfa\xc2\xbc\x67\xae\x87\xa1\xf8\x88\xa7\x3d\x6c\x61\x28\xbe\xf1\x89\xaf\xcf\xe3\x08\x06\x58\x50\xcf\xa7\x5d\x13\x1c\x9e\x23\xc1\xb6\x80\x5e\x0d\xc6\x90\x33\x7c\x3b\x0d\xd4\x66\x8a\xc6\xde\x97\x65\xcd\xe5\x67\x5d\xc1\x8b\x09\xe3\x85\x65\x17\x99\x0a\x1b\x3a\xc0\xd6\xe0\xb5\xce\xa9\xed\xb5\x28\x9b\x03\x75\xbd\xaa\xb2\xcd\x72\xbf\x59\xf8\xf1\x1f\xb3\x49\xf8\xa3\x97\x84\xd5\xff\x44\x94\x49\x52\xcd\xa9\xe2\x4b\xf7\x47\x14\xff\x62\x91\x8f\x40\x88\xe2\x7e\xa6\x91\xf5\x42\x42\x6c\x95\x35\xbc\xb8\xf0\xcf\xf6\xa4\x40\xc9\x36\x87\x90\xc4\x4f\xf8\xf3\x1d\x11\x6b\xfc\x1c\x9b\xb3\xf3\x09\x93\x29\x17\x99\xbf\xf2\xef\xc4\x7b\x17\xfb\x61\x0b\x96\x62\x74\x16\xa0\x73\xc4\x50\x64\xd7\xaf\xdc\x15\x15\x71\xa7\xc0\x9b\xf3\x6e\x49\xf8\xa8\x45\xcc\xe2\xf1\x77\x00\x00\x00\xff\xff\xf4\xdb\x45\xa4\x3e\x05\x00\x00")

func pairsTmplBytes() ([]byte, error) {
	return bindataRead(
		_pairsTmpl,
		"pairs.tmpl",
	)
}

func pairsTmpl() (*asset, error) {
	bytes, err := pairsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pairs.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0x8c, 0x60, 0x98, 0xfe, 0xcd, 0x10, 0x8f, 0xf8, 0xbb, 0x18, 0x89, 0x2f, 0xa2, 0x4c, 0xeb, 0xb9, 0xb2, 0x2a, 0x21, 0x68, 0x98, 0x1d, 0x7, 0x81, 0x5f, 0xc5, 0x12, 0xdd, 0xd5, 0x46, 0x8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"context.tmpl": contextTmpl,
	"header.tmpl":  headerTmpl,
	"meta.tmpl":    metaTmpl,
	"pairs.tmpl":   pairsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"context.tmpl": &bintree{contextTmpl, map[string]*bintree{}},
	"header.tmpl":  &bintree{headerTmpl, map[string]*bintree{}},
	"meta.tmpl":    &bintree{metaTmpl, map[string]*bintree{}},
	"pairs.tmpl":   &bintree{pairsTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
