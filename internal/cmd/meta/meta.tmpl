// Code generated by go generate via internal/cmd/meta; DO NOT EDIT.
package {{ .Name }}

import (
    "github.com/Xuanwo/storage"
    "github.com/Xuanwo/storage/types"
    "github.com/Xuanwo/storage/types/pairs"
    "github.com/Xuanwo/storage/pkg/segment"
)

var _ storage.Storager
var _ segment.Segment

{{- if .Service }}
// ServicerType is the servicer type for {{ .Name }}
const ServicerType = types.ServicerType("{{ .Name }}")
{{- end }}

// StoragerType is the storager type for {{ .Name }}
const StoragerType = types.StoragerType("{{ .Name }}")

{{ $Data := . }}

var allowedStoragePairs = map[string]map[string]struct{}{
{{- range $k, $v := .Storage }}
    "{{ $k }}": {
    {{- range $key, $_ := $v }}
        "{{$key}}": struct{}{},
    {{- end }}
    },
{{- end }}
}

var allowedServicePairs = map[string]map[string]struct{}{
{{- range $k, $v := .Service }}
    "{{ $k }}": {
        {{- range $key, $_ := $v }}
        "{{$key}}": struct{}{},
        {{- end }}
    },
{{- end }}
}

{{- range $k, $v := .Storage }}
type pairStorage{{ $k | camelCase}} struct {
    {{- range $key, $_ := $v }}
    Has{{ $key | camelCase}} bool
    {{ $key | camelCase}}    {{ index $Data.TypeMap $key }}
    {{- end }}
}

func parseStoragePair{{ $k | camelCase}}(opts ...*types.Pair) (*pairStorage{{ $k | camelCase}}, error) {
    result := &pairStorage{{ $k | camelCase}}{}

    values := make(map[string]interface{})
    for _, v := range opts {
        if _, ok := allowedStoragePairs["{{ $k }}"]; !ok {
            continue
        }
        if _, ok := allowedStoragePairs["{{ $k }}"][v.Key]; !ok {
            continue
        }
        values[v.Key] = v.Value
    }

    {{- if $v }}
    var v interface{}
    var ok bool
    {{- end }}

    {{- range $key, $required := $v }}
    v, ok = values[pairs.{{ $key | camelCase}}]
    {{- if $required }}
    if !ok {
        return nil, types.NewErrPairRequired(pairs.{{ $key | camelCase}})
    }
    {{- end }}
    if ok {
        result.Has{{ $key | camelCase}} = true
        result.{{ $key | camelCase}} = v.({{ index $Data.TypeMap $key }})
    }
    {{- end }}
    return result, nil
}
{{- end }}

{{- range $k, $v := .Service }}
type pairService{{ $k | camelCase}} struct {
    {{- range $key, $_ := $v }}
    Has{{ $key | camelCase}} bool
    {{ $key | camelCase}}    {{ index $Data.TypeMap $key }}
    {{- end }}
}

func parseServicePair{{ $k | camelCase}}(opts ...*types.Pair) (*pairService{{ $k | camelCase}}, error) {
    result := &pairService{{ $k | camelCase}}{}

    values := make(map[string]interface{})
    for _, v := range opts {
        if _, ok := allowedServicePairs["{{ $k }}"]; !ok {
            continue
        }
        if _, ok := allowedServicePairs["{{ $k }}"][v.Key]; !ok {
            continue
        }
        values[v.Key] = v.Value
    }

    {{- if $v }}
    var v interface{}
    var ok bool
    {{- end }}

    {{- range $key, $required := $v }}
    v, ok = values[pairs.{{ $key | camelCase}}]
    {{- if $required }}
    if !ok {
        return nil, types.NewErrPairRequired(pairs.{{ $key | camelCase}})
    }
    {{- end }}
    if ok {
        result.Has{{ $key | camelCase}} = true
        result.{{ $key | camelCase}} = v.({{ index $Data.TypeMap $key }})
    }
    {{- end }}
    return result, nil
}
{{- end }}