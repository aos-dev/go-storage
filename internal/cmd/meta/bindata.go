// Code generated by go-bindata. DO NOT EDIT.
// sources:
// meta.tmpl (3.444kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\x5d\x6b\xdc\x3a\x10\x7d\xf7\xaf\x98\xbb\x2c\x97\xdd\xe0\x2b\xbf\x27\xec\x53\x12\xb8\xa5\x34\x09\x4d\x28\x85\x10\x82\x62\x8f\x1d\x61\x5b\x72\x25\xd9\xe9\xe2\xfa\xbf\x17\xc9\x5a\x5b\xbb\xec\x57\xda\x50\x28\x24\x2f\x1b\x8f\xe6\xcc\xd1\x19\x1d\x8d\xa2\x08\xce\x45\x82\x90\x21\x47\x49\x35\x26\xf0\xb4\x84\x4c\x0c\xdf\xd0\x30\x0a\x8c\x6b\x94\x9c\x16\x51\x5c\x26\x51\x89\x9a\x9e\xc1\xc5\x35\x5c\x5d\xdf\xc1\xe5\xc5\x87\x3b\x12\x54\x34\xce\x69\x86\xd0\xb6\x40\xae\x68\x89\xd0\x75\x41\xc0\xca\x4a\x48\x0d\xb3\x00\x00\x60\x92\x31\xfd\x5c\x3f\x91\x58\x94\xd1\xd7\x9a\xf2\x17\x11\x29\x2d\x24\xcd\x70\x72\x60\x3d\xd2\xcb\x0a\xd5\x71\x59\x51\x45\x99\x3c\x9c\x5b\xe5\x59\xa4\x30\x2b\x91\xeb\xa3\x72\x91\x27\x95\x60\x47\x26\xc7\x12\x13\xe4\x9a\xd1\x62\x12\xcc\x83\xa0\xa1\x12\x1e\x61\x0c\x92\x1b\x29\x1a\x96\xa0\x74\x2b\xab\xda\x9b\x71\xb7\x3f\x72\xdb\xff\xae\xa2\x3d\x11\xb9\xed\x7f\x65\x10\xb4\xed\x7f\xc0\x52\x20\xb7\x28\x1b\x16\xdb\xce\x47\x11\xb8\x2f\x79\xb7\xac\x10\x98\x02\xfd\x8c\xa0\x5c\x0c\x4c\xab\x20\x15\x72\xed\xb8\x62\xc1\x95\x5e\xc7\x2d\x6c\xa6\x22\x7e\x70\x36\xf1\x40\x93\xb9\xa5\x47\x9e\xd8\x03\x37\xbc\x6e\x5f\x6b\xbc\x2e\xb6\x97\xd7\xc7\x0d\xbc\x5e\x70\x93\x37\x68\x5b\x98\x5e\x50\x4d\xe1\x74\x01\xc4\xd2\x9b\x0e\xd1\xa2\x10\x2f\x98\x38\xe4\x8d\x71\x03\x2c\xa0\xa4\xd5\xbd\xd2\x92\xf1\xec\xc1\xfb\x57\x69\x59\xc7\xba\xed\x5a\x2b\x42\x52\x9e\x21\x4c\xf3\x10\xa6\x8d\xad\xe9\x6a\x98\xd2\xf6\xd4\x0d\x61\x6e\xc8\x4f\xa1\xb5\x11\x1f\x85\xcb\x10\xa6\x8f\x06\x37\x6d\x56\x08\x87\x32\x8b\x16\x35\xf0\x75\xe1\x80\x77\xad\x33\x9f\x5d\xe8\x37\x73\x43\x4f\x7f\x02\xbf\xa7\x67\x34\xc8\x76\x3d\x6f\xa1\xe9\x18\x5d\x87\xba\x6d\x6d\x62\x2e\xb2\x8b\xf5\x1b\xfd\x01\x31\x2d\xb1\x38\xa7\x0a\xbb\xce\xf1\x1e\x79\x10\xff\x53\x65\x6b\xe0\x72\xa3\xca\x93\x10\x85\xab\xb0\x6d\xb9\x5f\x60\x3c\xc1\xef\xbd\xd7\x88\x71\xe2\x27\x5a\xf5\xc9\xae\xfa\xba\xb8\xb4\xe6\x31\x54\x54\x2a\xf4\x3c\xb8\x45\xc1\x4c\x54\x5a\x01\x21\xe4\xa4\xf7\xba\x49\x9b\xc3\xec\x64\xbf\xee\x10\x50\x4a\x21\xe7\x4e\xb8\x44\x55\x17\xda\x88\xfd\x77\x3f\xae\xed\x02\x0b\x68\x68\x51\xa3\x32\x80\x92\xe6\x38\xf3\xcc\x63\x27\x7c\x4a\x63\x6c\xbb\xb9\x4d\x35\xf7\xf4\x31\x04\x7b\x3a\x7d\x73\xed\x8e\x47\xab\xb0\xd4\xac\x8b\xdc\x24\x6c\xb9\x76\xf7\xa3\xc1\x1e\xce\xe0\x1f\x91\x7b\x50\xf3\x17\x0b\xae\x19\xaf\x71\x08\x76\xbf\x52\xf9\xbe\x21\x1f\x71\xf9\x5a\x82\xbe\x0d\x0e\x0b\x0b\x68\xc8\x17\x13\xe9\xed\x1a\x0c\xa7\xca\x52\xcf\x44\xe6\x36\x36\xe0\xb5\x69\x88\x8a\xdc\x37\xd2\x38\x0e\xb7\x5a\x53\xe2\xb7\x9a\x49\x4c\xd6\x1d\xda\x58\xb9\x8b\xd5\xc6\xec\x2b\x46\xb6\x9a\xf2\x61\x6d\x77\x43\x35\x57\x87\xa5\x1b\x8d\x90\xa8\x6b\xc9\x81\xb3\x22\x74\x43\xf5\x0a\x5f\x2e\xa5\x34\x8d\xfc\xec\xc0\xb3\x3d\x74\xf3\x60\xec\xdc\xc6\xbd\x66\x29\x6c\x50\x19\x33\x92\x9d\x97\x6d\x01\x5a\x7a\xa7\xe1\xd2\x77\xe5\x36\x64\xb6\xff\xee\xed\xd9\x99\x13\xdd\x33\x84\x46\x7c\xd0\xad\x3d\x54\x87\xe6\xe3\x38\x81\xfa\xd8\xdf\x3a\x81\xc6\x57\xe3\xb5\x13\x68\xa7\xee\x03\x13\x68\x27\xee\x4f\x4d\x20\xef\xa1\x7c\xe3\x09\xb4\xa3\xf2\xfb\x04\x7a\x9f\x40\xaf\x9d\x40\x3f\x03\x00\x00\xff\xff\xdb\x4d\x6a\xeb\x74\x0d\x00\x00")

func metaTmplBytes() ([]byte, error) {
	return bindataRead(
		_metaTmpl,
		"meta.tmpl",
	)
}

func metaTmpl() (*asset, error) {
	bytes, err := metaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbc, 0xed, 0xc4, 0x54, 0xb4, 0x9, 0x5b, 0xb, 0x4b, 0xfa, 0xf8, 0x91, 0x3f, 0x51, 0xf8, 0x8a, 0xd6, 0xd9, 0xd6, 0x67, 0x7a, 0xe1, 0xb0, 0xd6, 0xbb, 0x7, 0x1a, 0xdc, 0x3c, 0xb7, 0xdc, 0xb7}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta.tmpl": metaTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"meta.tmpl": &bintree{metaTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
