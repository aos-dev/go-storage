// Code generated by go-bindata. DO NOT EDIT.
// sources:
// meta.tmpl (1.891kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x5d\x6f\xa3\x3a\x10\x7d\xf7\xaf\x98\x1b\x45\x57\xa4\xa2\xe6\xfd\x5e\xe5\x65\xdb\x4a\xbb\x5a\xf5\x43\xdb\x6a\xb5\x52\x15\x55\x2e\x0c\xd4\x02\x6c\xd6\x36\xb4\x11\xcb\x7f\x5f\xf9\x03\x42\xa3\x34\xcd\x13\x78\xe6\xcc\xcc\xf1\x99\x03\x49\x02\x17\x32\x43\x28\x50\xa0\x62\x06\x33\x78\xde\x42\x21\xa7\x33\x74\x9c\x01\x17\x06\x95\x60\x55\x92\xd6\x59\x52\xa3\x61\xff\xc3\xe5\x2d\xdc\xdc\x3e\xc0\xd5\xe5\xb7\x07\x4a\x1a\x96\x96\xac\x40\xe8\x7b\xa0\x37\xac\x46\x18\x06\x42\x78\xdd\x48\x65\x20\x22\x00\x00\x8b\x54\x0a\x83\x6f\x66\x41\xfc\xb1\xe0\xe6\xa5\x7d\xa6\xa9\xac\x93\x5f\x2d\x13\xaf\x32\xd1\x46\x2a\x56\xe0\xe2\x93\x7c\x62\xb6\x0d\xea\xd3\x50\x49\xc3\xb8\xfa\x1c\xdb\x94\x45\xa2\xb1\xa8\x51\x98\x93\xb0\x28\xb2\x46\xf2\x13\xc1\xa9\xc2\x0c\x85\xe1\xac\x5a\x90\x15\x21\x1d\x53\xf0\x04\xbb\x20\xbd\x53\xb2\xe3\x19\xaa\x90\x19\x7b\xef\xc7\x03\x3f\x7a\xef\x9f\x63\xd4\x0f\xa2\xf7\xfe\xa9\x08\x49\x12\x78\xd8\x36\x08\x5c\x83\x79\x41\xb0\x32\x40\x2e\xd5\xbb\xcd\xa4\x52\x68\xe3\x61\x6b\x58\xcc\x32\x0b\x42\xfa\x1e\x96\x97\xcc\x30\xf8\x6f\x0d\xd4\xad\xb1\xef\xcf\x41\x31\x51\x20\x2c\x05\xab\x31\x86\x65\x36\xe6\x1d\x70\x18\x5c\x51\x6a\x93\x36\xea\x50\xf0\x07\x52\x56\x63\x75\xc1\x34\x7a\xc4\xd4\xa4\x8c\x61\xd9\x39\x60\x36\x2f\x2f\x5d\xa8\xdc\x2f\x74\x17\xb0\x6b\xdc\xcd\x18\x86\x50\x30\x0c\xa0\x8d\x6a\x53\x03\xbd\xdb\x44\x92\xc0\x9d\xc2\xf3\x0c\x73\x2e\x30\x73\x55\xda\x25\x2e\xbc\xf7\x20\x78\x90\x86\x33\x19\xab\xae\xd1\xb0\x03\x65\x73\xd2\xb8\x8d\x61\xf9\xe4\x38\x76\x96\x97\xcd\x7f\x65\xda\x32\x29\x71\x3b\x67\x3d\x0c\xf0\x2c\x65\x15\x3a\x1c\x4a\xfb\x04\x17\x19\xbe\x79\xb1\xa9\xdd\xc5\x35\x6b\x3c\x38\x74\xb7\xd3\x51\x64\xf6\x38\x10\x92\xb7\x22\x85\x86\x29\x8d\x73\x21\xee\x46\x61\xac\x18\x91\x6c\x8c\x06\x4a\xe9\x99\x33\x3f\xb5\xc9\x15\x44\x67\x1f\xaa\x17\x03\x2a\x25\xd5\x2a\xc8\xa7\x50\xb7\x95\xb1\x57\xfc\xd7\x96\x04\x4f\x4d\xe8\x7e\xf0\x7a\x75\xac\x6a\x51\x5b\x58\xcd\x4a\x8c\x6a\xd6\x3c\x6a\xa3\xb8\x28\x36\xee\x2f\x91\xb3\x14\xfb\x61\xe5\xa0\xd6\x78\x4f\x31\xb8\x6d\x7b\x21\x1d\x45\x3f\x6e\xd7\xeb\xb1\xa3\xdf\x71\xbb\x81\x35\x74\xf4\xa7\x8d\xb8\x7c\x18\x67\x65\xe0\xf9\x4c\x75\xeb\xfc\x0e\x66\xb3\xa6\xa8\x2c\xe7\xca\x4f\xea\x4d\xde\xb0\xea\x41\x73\xd0\x21\x5d\x6c\xab\xd7\x23\x21\x97\x18\x6d\xb2\x71\x08\x9e\x5b\xc4\x8e\xba\x57\x6b\xc4\x38\xee\xd1\x9e\xbf\xbc\x08\x03\x60\xa5\xf1\x58\xe5\x58\xf6\x85\xa5\x65\xa1\x64\x2b\xb2\x68\x35\x97\x60\xe2\x5e\x9f\xe8\x53\x85\xbf\x5b\xae\x30\x7b\x6f\xd7\x83\x77\x3c\xe8\xd0\xcd\x3b\xe5\xa7\x6e\xa1\x0f\xcf\xe1\x9f\x3d\x29\x4c\xab\x04\x08\x5e\xc5\xe0\xad\x77\x83\xaf\x57\x4a\x59\x03\xfe\x08\xc5\xd1\x91\x71\xe3\x65\xf7\xf6\x76\x44\xf5\x0f\xbf\xbc\x35\x18\x15\xfc\x33\x83\x7f\x84\xed\x68\x74\xfc\x43\x3c\xc2\x2c\x5c\xda\x4f\x88\xed\xe5\x89\xff\xcd\x05\xcc\xec\xf5\x6f\x00\x00\x00\xff\xff\xff\x63\xe9\x9e\x63\x07\x00\x00")

func metaTmplBytes() ([]byte, error) {
	return bindataRead(
		_metaTmpl,
		"meta.tmpl",
	)
}

func metaTmpl() (*asset, error) {
	bytes, err := metaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x68, 0xc7, 0xfe, 0x48, 0x94, 0x1a, 0x83, 0x85, 0xf7, 0x3d, 0xfc, 0x7a, 0x4d, 0x4b, 0xdc, 0x5e, 0x8a, 0xa2, 0x93, 0xd8, 0xec, 0xd7, 0x54, 0xbb, 0x7d, 0x82, 0xa9, 0x4b, 0x63, 0xfe, 0x82, 0xfa}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta.tmpl": metaTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"meta.tmpl": &bintree{metaTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
