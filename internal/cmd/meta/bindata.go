// Code generated by go-bindata. DO NOT EDIT.
// sources:
// meta.tmpl (3.26kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\x5b\x6b\xdb\x30\x14\x7e\xd7\xaf\x38\x0b\x61\x24\xc5\x93\xdf\x5b\xf2\xd4\x16\x36\xc6\xda\xb2\x96\x31\x28\xa5\xa8\xf6\xb1\x2b\x6c\x4b\x9e\x2c\xbb\x0b\x9e\xff\xfb\xd0\x25\x8e\x13\x72\xdd\xca\x60\xd0\xbe\xb8\x39\x57\x7d\x47\xdf\xf9\x14\x86\x70\x2e\x63\x84\x14\x05\x2a\xa6\x31\x86\xa7\x39\xa4\xb2\xff\x0d\x0d\x67\xc0\x85\x46\x25\x58\x1e\x46\x45\x1c\x16\xa8\xd9\x19\x5c\x5c\xc3\xd5\xf5\x1d\x5c\x5e\x7c\xba\xa3\xa4\x64\x51\xc6\x52\x84\xb6\x05\x7a\xc5\x0a\x84\xae\x23\x84\x17\xa5\x54\x1a\x26\x04\x00\x60\x94\x72\xfd\x5c\x3f\xd1\x48\x16\xe1\xf7\x9a\x89\x17\x19\x56\x5a\x2a\x96\xe2\x68\x8f\x3f\xd4\xf3\x12\xab\xc3\xa2\xc2\x92\x71\xb5\x3f\xb6\xcc\xd2\xb0\xc2\xb4\x40\xa1\x0f\x8a\x45\x11\x97\x92\x1f\x18\x1c\x29\x8c\x51\x68\xce\xf2\x11\x99\x12\xd2\x30\x05\x8f\xb0\x34\xd2\x1b\x25\x1b\x1e\xa3\xf2\x9e\x45\xed\x75\xbb\x3f\x1f\xbd\x75\xdf\x85\xd5\x35\xa2\xb7\xee\xab\x08\x09\x43\xb8\x9b\x97\x08\xbc\x02\xfd\x8c\x60\xc6\x00\x89\x54\x2b\x57\x11\x49\x51\x69\x17\x36\x83\xd1\xc0\x33\x22\xa4\x6d\x61\x7c\xc1\x34\x83\xd3\x19\x50\x7b\x6f\xa6\x13\xcb\x73\xf9\x82\xb1\x6f\x73\x63\xa6\x0a\x33\x28\x58\x79\x5f\x69\xc5\x45\xfa\x30\xf8\xb7\xd2\xaa\x8e\x74\xdb\xb5\xa4\x6d\x3f\x80\x62\x22\x45\x18\x67\x01\x8c\x1b\x5b\xd3\xd7\x30\xa5\xed\xf4\x4c\xc3\xcc\xf4\x3e\x85\xd6\x5a\x86\x59\x38\x0f\x60\xfc\x68\xf2\xc6\xcd\x22\xc3\x67\x19\xa7\xcd\xea\xfb\x75\x41\x9f\x8f\x22\x5e\x84\x77\x01\x19\x58\xd6\xf0\xa0\x6a\x78\xf4\x97\x78\x5c\x8d\xed\x78\x5e\x03\xd3\x21\xb8\xf6\x4d\xdb\x52\xc1\x2c\x84\xb7\xb9\x83\xfe\x82\x88\x15\x98\x9f\xb3\x0a\xbb\xce\xf7\x3d\xf0\x22\x3e\xb2\xca\xd6\xc0\xf9\x5a\x95\x27\x29\x73\x5f\x61\x93\xdb\x39\xb8\x88\xf1\xa7\xe3\x1a\x35\x54\xfc\xc2\x4a\x17\xec\xab\xaf\x82\x4b\x6a\x11\x41\xc9\x54\x85\x03\x0e\x6e\x40\x30\x91\xa5\xae\x80\x52\x7a\x62\x05\x80\x9a\xb0\x29\x4c\x4e\x76\xe3\x0e\x00\x95\x92\x6a\xea\x81\x2b\xac\xea\x5c\x1b\xb0\xef\x77\xe7\xb5\x1d\xb1\x09\x0d\xcb\x6b\xac\x4c\x42\xc1\x32\x9c\x0c\xc8\x63\x95\x32\x61\x11\xb6\xdd\xd4\x86\x9a\x5d\x7c\x0c\xc0\xde\x8e\x1b\xae\x3d\xf1\x92\x2a\x3c\x31\x7e\x99\x99\x80\x0d\x6b\x77\xbf\x24\xd8\xc3\x19\xbc\x93\xd9\x20\xd5\xfc\x45\x52\x68\x2e\x6a\xec\x8d\xdd\x9f\x54\xbe\x6f\xe8\x67\x9c\x1f\xdb\xc0\x8d\xc1\xe7\xc2\x0c\x1a\xfa\xcd\x58\x1c\x5d\x49\x7f\xab\x3c\x19\x90\xc8\x6c\x63\x03\x83\x31\xf5\x56\x99\x0d\x89\xd4\x93\x61\x33\x35\x15\xfe\xa8\xb9\xc2\x78\x95\xa1\x8d\x85\x3b\x5b\x1c\xcc\xbe\x06\x74\x23\x29\x1f\x56\x4e\xd7\x57\xf3\x75\x78\xb2\x36\x08\x85\xba\x56\x02\x04\xcf\x03\x70\x44\xbb\xc2\x97\x4b\xa5\xcc\x20\xbf\xfa\xe4\xc9\x8e\x76\x53\xb2\x9c\xdc\xda\x5e\xf3\x04\xd6\x5a\x19\x32\xd2\xad\xcb\x36\x03\xad\x06\xb7\xe1\xc3\xb7\xc5\x36\x74\xb2\x7b\xf7\x76\x9c\xcc\x83\x76\x1d\x02\x03\x9e\x74\x43\x0d\xda\xab\x8f\x4b\x05\x72\xb6\xff\x55\x81\x96\xaf\xc6\xb1\x0a\xb4\x15\xf7\x1e\x05\xda\x9a\xf7\xaf\x14\x68\xf0\x50\xbe\xb2\x02\x6d\xa9\xfc\xa6\x40\x6f\x0a\x74\xac\x02\xfd\x0e\x00\x00\xff\xff\x1e\x09\x58\x54\xbc\x0c\x00\x00")

func metaTmplBytes() ([]byte, error) {
	return bindataRead(
		_metaTmpl,
		"meta.tmpl",
	)
}

func metaTmpl() (*asset, error) {
	bytes, err := metaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x39, 0x79, 0x42, 0xde, 0x86, 0x99, 0xe5, 0x5c, 0xd7, 0x5f, 0xdb, 0x1f, 0xaa, 0x9a, 0xc7, 0xc4, 0xd6, 0x9c, 0xbd, 0xe1, 0xf2, 0xe, 0xc8, 0xe1, 0xee, 0xd5, 0x93, 0xb2, 0xbb, 0xaf, 0xaa, 0x12}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta.tmpl": metaTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"meta.tmpl": &bintree{metaTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
