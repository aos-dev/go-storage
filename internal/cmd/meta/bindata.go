// Code generated by go-bindata. DO NOT EDIT.
// sources:
// meta.tmpl (3.136kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\xd1\x6a\xdc\x3a\x10\x7d\xf7\x57\xcc\x5d\x96\x8b\x37\xf8\xca\xef\x09\xfb\x94\x04\x6e\x29\x4d\x4a\x1b\x4a\x21\x84\xa0\xd8\x63\x47\xd8\x96\x5c\x49\x76\xba\xb8\xfe\xf7\x22\x59\xb1\xe5\x65\x77\x93\xb4\xa1\x50\xc8\x3e\xad\xc7\x73\xe6\xcc\x19\x1d\x8d\xe3\x18\x4e\x45\x8a\x90\x23\x47\x49\x35\xa6\x70\xb7\x81\x5c\x8c\xcf\xd0\x32\x0a\x8c\x6b\x94\x9c\x96\x71\x52\xa5\x71\x85\x9a\x9e\xc0\xd9\x25\x5c\x5c\x5e\xc1\xf9\xd9\xbb\x2b\x12\xd4\x34\x29\x68\x8e\xd0\x75\x40\x2e\x68\x85\xd0\xf7\x41\xc0\xaa\x5a\x48\x0d\x61\x00\x00\xb0\xc8\x99\xbe\x6f\xee\x48\x22\xaa\xf8\x6b\x43\xf9\x83\x88\x95\x16\x92\xe6\x18\xeb\x4d\x8d\x6a\x11\xac\x82\xa0\xeb\xfe\x03\x96\x01\xf9\x8c\xb2\x65\x89\xad\x12\xc7\xe0\x9e\xe4\xd5\xa6\x46\x60\x0a\xf4\x3d\x82\x72\x31\x30\x60\xc8\x84\x9c\x51\x27\x82\x2b\x3d\xc7\xad\x6d\xa6\x22\x7e\x30\x5c\x78\xa0\xc5\xca\xd2\x23\x4f\x6d\xf3\x86\x77\xe8\x6f\xce\xeb\x62\x07\x79\x7d\xdc\xc8\xeb\x05\xb7\x79\x83\xae\x83\xe5\x19\xd5\x14\x8e\xd7\x40\x2c\x7d\x4b\x25\xd0\xb2\x14\x0f\x98\x3a\xe4\x47\xca\xa4\x82\x35\x54\xb4\xbe\x56\x5a\x32\x9e\xdf\x78\x7f\x95\x96\x4d\xa2\xbb\xbe\xb3\x22\x24\xe5\x39\xc2\xb2\x88\x60\xd9\xda\x9a\xae\x86\x29\x6d\x0f\xc3\x10\x16\x86\xfc\x18\x3a\x1b\xf1\x51\xb8\x89\x60\x79\x6b\x70\xcb\xf6\x11\xe1\x50\xe6\xa5\x45\x8d\x7c\x7d\x34\xe2\xdd\xe8\xcc\x63\x1f\xf9\xc3\xdc\xd2\x33\x9c\xc0\xef\xe9\x99\x0c\xb2\x5b\xcf\x6b\x68\x7a\x8e\xae\xa7\xa6\x6d\x6d\x52\x53\x26\x5d\x6c\x68\xf4\x07\x24\xb4\xc2\xf2\x94\x2a\xec\x7b\xc7\xfb\xcc\x83\xf8\x9f\x2a\x5b\x03\x37\x5b\x55\xee\x84\x28\x5d\x85\x5d\xaf\x87\x17\x8c\xa7\xf8\x7d\xf0\x1a\x31\x4e\xfc\x40\xeb\x21\xd9\x55\x9f\x8b\xcb\x1a\x9e\x40\x4d\xa5\x42\xcf\x83\x3b\x14\x84\xa2\xd6\x0a\x08\x21\x47\x83\xd7\x4d\xda\x0a\xc2\xa3\xc3\xba\x23\x40\x29\x85\x5c\x39\xe1\x12\x55\x53\x6a\x23\xf6\xdf\xc3\xb8\xae\x0f\x2c\xa0\xa5\x65\x83\xca\x00\x2a\x5a\x60\xe8\x99\xc7\x6e\xab\x8c\x26\xd8\xf5\x2b\x9b\x6a\xee\xe9\x6d\x04\xf6\x74\x86\xe1\xda\x8e\x27\xab\xb0\xcc\xbc\x17\x85\x49\xd8\x71\xed\xae\x27\x83\xdd\x9c\xc0\x3f\xa2\xf0\xa0\xe6\x97\x08\xae\x19\x6f\x70\x0c\xf6\xbf\x52\xf9\xba\x25\xef\x71\xf3\x52\x82\x61\x0c\x0e\x0b\x6b\x68\xc9\x17\x13\x19\xec\x1a\x8c\xa7\xca\x32\xcf\x44\xe6\x36\xb6\xe0\x8d\x69\x8c\x8a\xc2\x37\xd2\xb4\x0e\x77\x5a\x53\xe2\xb7\x86\x49\x4c\xe7\x0e\x6d\xad\xdc\xf5\x63\x63\x83\x25\x76\x9a\xf2\x66\xd6\xdd\x58\xcd\xd5\x61\xd9\xd6\x20\x24\xea\x46\x72\xe0\xac\x8c\xdc\x52\xbd\xc0\x87\x73\x29\xcd\x20\x3f\x39\x70\x78\x80\x6e\x15\x4c\x93\xdb\xba\xd7\x2c\x83\x2d\x2a\x63\x46\xb2\xf7\xb2\xad\x41\x4b\xef\x34\x5c\xfa\xbe\xdc\x96\x84\x87\xef\xde\x81\xce\x9c\xe8\x81\x21\x32\xe2\x83\x7e\xf6\xa1\x7a\x6a\x3f\x4e\x1b\x68\x88\xfd\xad\x1b\x68\xfa\x6a\xbc\x74\x03\xed\xd5\xfd\xc4\x06\xda\x8b\xfb\x53\x1b\xc8\xfb\x50\xbe\xf2\x06\xda\x53\xf9\x6d\x03\xbd\x6d\xa0\x97\x6e\xa0\x9f\x01\x00\x00\xff\xff\x0a\xfc\x84\xcd\x40\x0c\x00\x00")

func metaTmplBytes() ([]byte, error) {
	return bindataRead(
		_metaTmpl,
		"meta.tmpl",
	)
}

func metaTmpl() (*asset, error) {
	bytes, err := metaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6f, 0x6c, 0x42, 0x3a, 0x25, 0x68, 0x33, 0x6, 0xa5, 0x36, 0xb5, 0x62, 0x6e, 0xdf, 0xc1, 0xb9, 0x7a, 0xdf, 0xc5, 0x1, 0xc9, 0xb0, 0x22, 0x68, 0x99, 0x4c, 0xad, 0xe3, 0x68, 0xca, 0x3e, 0xf2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta.tmpl": metaTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"meta.tmpl": &bintree{metaTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
