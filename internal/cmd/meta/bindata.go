// Code generated by go-bindata. DO NOT EDIT.
// sources:
// meta.tmpl (1.891kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x5d\x6f\xa3\x3a\x10\x7d\xf7\xaf\x98\x1b\x45\x57\xa4\xa2\xe6\xfd\x5e\xe5\x65\xdb\x4a\xbb\x5a\xf5\x43\xdb\x6a\xb5\x52\x15\x55\x2e\x0c\xd4\x02\x6c\xd6\x36\xb4\x11\xcb\x7f\x5f\xf9\x03\x42\xa3\x34\xcd\x13\xd8\x73\x8e\xe7\xcc\xf1\x81\x24\x81\x0b\x99\x21\x14\x28\x50\x31\x83\x19\x3c\x6f\xa1\x90\xd3\x1a\x3a\xce\x80\x0b\x83\x4a\xb0\x2a\x49\xeb\x2c\xa9\xd1\xb0\xff\xe1\xf2\x16\x6e\x6e\x1f\xe0\xea\xf2\xdb\x03\x25\x0d\x4b\x4b\x56\x20\xf4\x3d\xd0\x1b\x56\x23\x0c\x03\x21\xbc\x6e\xa4\x32\x10\x11\x00\x80\x45\x2a\x85\xc1\x37\xb3\x20\x7e\x59\x70\xf3\xd2\x3e\xd3\x54\xd6\xc9\xaf\x96\x89\x57\x99\x68\x23\x15\x2b\x70\xf1\x49\x3d\x69\xca\x22\xd1\x58\xd4\x28\xcc\x49\x58\x14\x59\x23\xf9\x89\xe0\x54\x61\x86\xc2\x70\x56\x7d\x0a\x37\xdb\x06\xf5\x69\xa8\xa4\x61\x5c\xe9\x05\x59\x11\xd2\x31\x05\x4f\xb0\x6b\x43\xef\x94\xec\x78\x86\x2a\x54\x46\xb5\xfb\xfb\x61\x62\x7a\xef\x9f\xe3\xae\xef\x42\xef\xfd\x53\x11\x92\x24\xf0\xb0\x6d\x10\xb8\x06\xf3\x82\x60\xdb\x43\x2e\xd5\xbb\x9b\x49\xa5\xd0\xc6\xc3\xd6\xb0\x98\x55\x16\x84\xf4\x3d\x2c\x2f\x99\x61\xf0\xdf\x1a\xa8\xbb\xc6\xbe\x3f\x07\xc5\x44\x81\xb0\x14\xac\xc6\x18\x96\xd9\x58\x77\xc0\x61\x70\xa4\xd4\x16\xed\xae\x43\xc1\x1f\x48\x59\x8d\xd5\x05\xd3\xe8\x11\xd3\x21\x65\x0c\xcb\xce\x01\xb3\x39\xbd\x74\x5b\xe5\x3e\xd1\x0d\x60\xed\xdb\xf5\x18\x86\x40\x18\x06\xd0\x46\xb5\xa9\x81\xde\x5d\x43\x92\xc0\x9d\xc2\xf3\x0c\x73\x2e\x30\x73\x2c\xed\x0a\x17\x3e\x7b\x10\x32\x48\xc3\x9a\x8c\xac\x6b\x34\xec\x00\x6d\x2e\x1a\xb7\x31\x2c\x9f\x9c\xc6\xce\xea\xb2\xf5\xaf\x4c\x5b\x25\x25\x6e\xe7\xaa\x87\x01\x9e\xa5\xac\xc2\x09\x87\xca\xbe\xc0\x45\x86\x6f\xde\x6c\x6a\xef\xe2\x9a\x35\x1e\x1c\x4e\xb7\xdd\x51\x64\x76\x39\x10\x92\xb7\x22\x85\x86\x29\x8d\x73\x23\xee\x46\x63\xac\x19\x91\x6c\x8c\x06\x4a\xe9\x99\x0b\x1d\xb5\xc5\x15\x44\x67\x1f\xba\x17\x03\x2a\x25\xd5\x2a\xd8\xa7\x50\xb7\x95\xb1\x23\xfe\x6b\x29\x21\x53\x13\xba\x1f\xbc\x5f\x1d\xab\x5a\xd4\x16\x56\xb3\x12\xa3\x9a\x35\x8f\xda\x28\x2e\x8a\x8d\xfb\x4b\xe4\x2c\xc5\x7e\x58\x39\xa8\x0d\xde\x53\x0c\xee\xb6\xbd\x91\x4e\xa2\x6f\xb7\x3b\xeb\xb1\xa3\xdf\x71\xbb\x81\x35\x74\xf4\xa7\xdd\x71\xf5\xd0\xce\xda\xc0\xf3\x99\xeb\x36\xf9\x1d\xcc\x7a\x4d\xbb\xb2\x9c\x3b\x3f\xb9\x37\x65\xc3\xba\x07\xcd\xc1\x84\x74\xb1\x65\xaf\x47\x41\xae\x30\xc6\x64\xe3\x10\x3c\xb7\x88\x9d\x74\xef\xd6\x88\x71\xda\xa3\xbd\x7c\x79\x13\x06\xc0\x4a\xe3\x31\xe6\x48\xfb\xc2\xd2\xb2\x50\xb2\x15\x59\xb4\x9a\x5b\x30\x69\xaf\x4f\xcc\xa9\xc2\xdf\x2d\x57\x98\xbd\x8f\xeb\xc1\x19\x0f\x26\x74\xf3\xce\xf9\xe9\xb4\x70\x0e\xcf\xe1\x9f\x3d\x2b\x4c\xab\x04\x08\x5e\xc5\xe0\xa3\x77\x83\xaf\x57\x4a\xd9\x00\xfe\x08\xe4\xe8\x48\xbb\x71\xd8\xbd\x7b\x3b\xe2\xfa\x87\x5f\xde\x1a\x8c\x0a\xf9\x99\xc1\x3f\xc2\x76\x34\x3a\xfe\x21\x1e\x51\x16\x86\xf6\x1d\x62\x3b\x3c\xf1\xbf\xb9\x80\x99\xbd\xfe\x0d\x00\x00\xff\xff\x8e\x42\x42\x96\x63\x07\x00\x00")

func metaTmplBytes() ([]byte, error) {
	return bindataRead(
		_metaTmpl,
		"meta.tmpl",
	)
}

func metaTmpl() (*asset, error) {
	bytes, err := metaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf, 0xa7, 0x9e, 0xa0, 0x11, 0x58, 0x5e, 0xf7, 0xcf, 0x3b, 0x49, 0x7e, 0x24, 0x36, 0x92, 0x34, 0xd1, 0x59, 0x57, 0x4e, 0xdd, 0x21, 0xb5, 0x9d, 0xaf, 0x16, 0xda, 0x9b, 0x87, 0xd4, 0xe1, 0xaa}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta.tmpl": metaTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"meta.tmpl": &bintree{metaTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
