// Code generated by go-bindata. DO NOT EDIT.
// sources:
// pair.tmpl (1.641kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x38\x23\x28\xec\xc1\xb5\x77\x76\x91\xc3\xb0\xf4\x30\x0c\x5b\x7a\x08\xb6\x01\x45\x31\xa8\x32\xe3\x08\x96\x25\x41\x92\xdd\x05\x9e\xfe\x7d\x90\x9c\xba\x49\x9a\xb4\xe1\x21\xb0\xc8\x47\xea\xf1\x89\x4c\x51\xc0\x17\x59\x21\xd4\x28\x50\x13\x8b\x15\x3c\x6e\xa1\x96\xd3\x19\x98\xb0\xa8\x05\xe1\x05\x6d\xab\x42\x11\xa6\xcd\x0d\x2c\x96\xf0\x63\xb9\x82\xdb\xc5\xd7\x55\x1e\x29\x42\x1b\x52\x23\x84\x58\x14\xb1\x56\x49\x6d\x21\x89\x00\x00\x62\x2a\x85\xc5\xbf\x36\x8e\xc6\x63\xcd\xec\xa6\x7b\xcc\xa9\x6c\x8b\xdf\x1d\x11\x4f\xb2\x30\x56\x6a\x52\x63\xfc\x4e\xbc\x50\x4d\x5d\x18\xac\x5b\x14\xf6\x22\x2c\x8a\x4a\x49\x76\x21\x98\x6a\xac\x50\x58\x46\xf8\x65\x3c\xc6\x6f\xca\x89\x31\x17\x25\x6c\xac\x55\x94\xb3\x4b\xb8\xdb\xad\x42\x13\x47\x69\x14\x15\x05\x7c\xe6\x1c\x48\x4f\x18\x27\x8f\x7c\x27\x70\x1e\x51\x29\x8c\xd7\x77\x18\xae\x41\x13\x51\x23\xcc\x9a\x0c\x66\x3d\x94\x73\xc8\x17\xc4\x12\x70\x2e\xdc\x52\x14\x30\x0c\x30\x6b\xe0\x1f\x58\x79\x47\x0c\x25\x1c\x9c\x83\x27\xc6\x79\x08\xf4\xf9\x02\x0d\xd5\x4c\x59\x26\xc5\x73\xd2\xa9\x8c\x39\xc4\xa3\xdb\xb9\x38\x5c\x8b\xa2\xf2\xf8\x34\x7a\x9b\x84\x0f\xce\x54\xe3\x7d\xc7\x35\x7d\x77\xbf\x98\xdd\xf8\xba\xaa\x99\x68\x11\xa5\xf8\x16\x9e\x2f\x83\x9e\xf0\x0e\xc1\x4a\x58\x06\x8e\xc6\x67\xad\x36\xcc\x04\x29\x80\x19\xe8\x0c\x56\x3e\x7e\xb2\x9d\x75\x27\xe8\xe1\x25\x49\xbf\x43\xae\xb6\x0a\xc1\xb9\x14\x3e\x06\xbd\xf3\x3b\x5f\x6f\x08\x02\x68\xb4\x9d\x16\x70\xf5\x12\x18\xfd\xde\xbe\xe1\xb6\x84\xa9\x5a\x36\xf9\x7f\x7a\x9e\x25\xf4\xa3\xc7\x45\x6e\x5f\x25\x4f\xfa\x8e\x68\x83\x63\x8b\x2a\x7c\x12\x68\xae\x7b\x68\x89\xf2\xec\xc3\xc3\x82\xe1\x8c\x62\x3e\xb2\x0e\xf8\xa4\xf5\x80\x7b\x63\x35\x13\xf5\x43\xd8\xc3\x35\xa1\x38\xb8\x14\x92\xfb\x87\x3d\xe6\x19\xa0\xd6\x52\xa7\xbb\x0e\xc6\x72\xe5\x1c\x5a\xd2\xe0\x31\xf2\x53\x06\x1c\x45\xd2\xa6\xe9\xb8\x92\x6b\xa9\xa1\xc9\x20\x3c\xdc\xf8\x90\x2d\xbc\x34\x6c\x9e\x98\xa5\x1b\x68\x60\x78\x7f\xdc\x9e\x8d\x12\x83\xa7\xc6\xa8\x3c\x40\x79\x63\x6b\xf8\x93\x81\x0c\x03\xd2\xe7\xc9\xe1\xd3\xdc\xc0\x07\xd9\xec\x51\xd9\xb7\xdd\x1b\x09\xc6\x33\xb8\xba\xf5\xbd\x9f\xc6\x79\x5b\xaa\x12\xe2\x20\x7a\x9c\x9d\x05\xdd\x6a\x5d\xfa\x1f\xaf\x91\x27\xf0\x9d\x99\x96\x58\xba\x39\x9f\x31\x8d\xc2\x51\x97\xe7\x33\x7c\xdd\x72\xdc\xa4\xa9\xcb\x37\x28\x1d\xce\xd4\xb1\xb9\x57\xde\x83\x99\xdb\x0f\x54\xb8\x26\x1d\xb7\xaf\xe5\xf7\xff\xcd\x4c\x74\x18\xbd\x2e\x3a\x8e\xd0\xdc\xef\x23\x8a\x2a\x09\xc7\xec\x60\x27\x42\xff\x4d\x36\xd1\x74\xe9\x6e\xf6\xf7\x97\x68\x97\x27\x18\x8f\xdc\xff\x00\x00\x00\xff\xff\xd7\x12\xa8\x04\x69\x06\x00\x00")

func pairTmplBytes() ([]byte, error) {
	return bindataRead(
		_pairTmpl,
		"pair.tmpl",
	)
}

func pairTmpl() (*asset, error) {
	bytes, err := pairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0xed, 0x33, 0x1f, 0x78, 0x6a, 0xec, 0x1a, 0xf1, 0x6f, 0xba, 0xf3, 0x4d, 0xa8, 0x8c, 0xc1, 0xe6, 0xfb, 0x79, 0xf4, 0xa3, 0x2e, 0x6e, 0xbe, 0x8f, 0xc, 0x84, 0x87, 0xe8, 0x8e, 0x9, 0xdd}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pair.tmpl": pairTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pair.tmpl": &bintree{pairTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
