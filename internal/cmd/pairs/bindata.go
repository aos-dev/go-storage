// Code generated by go-bindata. DO NOT EDIT.
// sources:
// pair.tmpl (1.594kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\xbc\x19\x41\x11\x0f\xae\xbd\xb3\x8b\x1c\x86\xa5\x87\x61\xd8\xd2\x43\xb0\x0d\x28\x8a\x41\xb5\x19\x47\xb0\x2c\x09\x92\xec\x2e\xc8\xfc\xdf\x07\xc9\x69\x9a\xa4\xe9\x07\x0f\x81\x45\x3e\x52\x8f\x4f\x64\xf2\x1c\x5f\x54\x45\xa8\x49\x92\x61\x8e\x2a\xdc\x6f\x50\xab\xfd\x19\x5c\x3a\x32\x92\x89\xbc\x6c\xab\x5c\x33\x6e\xec\x15\xe6\x0b\xfc\x58\x2c\x71\x3d\xff\xba\xcc\x22\xcd\xca\x86\xd5\x84\x10\x8b\x22\xde\x6a\x65\x1c\xa6\x11\x00\xc4\xa5\x92\x8e\xfe\xba\x38\x1a\x8f\x35\x77\xeb\xee\x3e\x2b\x55\x9b\xff\xee\x98\x7c\x50\xb9\x75\xca\xb0\x9a\xe2\x37\xe2\xb9\x6e\xea\xdc\x52\xdd\x92\x74\xef\xc2\x92\xac\xb4\xe2\xef\x04\x97\x86\x2a\x92\x8e\x33\xf1\x3e\x1e\xe3\x77\x29\x98\xb5\x6f\x26\xb8\x8d\x26\x1b\x47\x49\x14\xe5\x39\x3e\x0b\x01\xd6\x33\x2e\xd8\xbd\xd8\x29\x96\x45\xa5\x92\xd6\x0b\xb6\xdd\x5e\xc2\x30\x59\x13\x26\x4d\x8a\x49\x8f\x62\x86\x6c\xce\x1c\xc3\x30\x84\x5b\xf2\x1c\xdb\x2d\x26\x0d\xfe\xc1\xa9\x1b\x66\x4b\x26\x30\x0c\x78\xe0\x42\x84\x40\x9f\xcd\xc9\x96\x86\x6b\xc7\x95\x7c\x4c\x3a\x97\x31\x43\x3c\xba\x87\x21\x0e\xd7\x92\xac\x3c\x3e\x89\x5e\x27\xe1\x83\x13\xdd\x78\xdf\x69\x4d\xdf\xdd\x2f\xee\xd6\xbe\xae\x6e\xf6\xb4\x98\xd6\x62\x83\xc7\xcb\xd0\x33\xd1\x11\x9c\xc2\x22\x70\xb4\x3e\x6b\xb9\xe6\x36\x48\x01\x6e\xd1\x59\xaa\x7c\xfc\x6c\x3b\xab\x4e\x96\xc7\x97\x4c\xfb\x1d\x72\xb9\xd1\x84\x61\x48\xf0\x31\xe8\x9d\xdd\xf8\x7a\xdb\x20\x80\x21\xd7\x19\x89\x8b\xa7\xc0\xe8\xf7\xf6\x8d\x36\x05\xf6\xd5\xd2\xbd\xff\xa7\xe7\x59\xa0\x1f\x3d\x43\x34\x1c\xaa\xe4\x49\xdf\x30\x63\x69\x6c\x51\x87\x4f\x86\xe6\xb2\x47\xcb\xb4\x67\x1f\x1e\x16\x56\xf0\x92\xb2\x91\x75\xc0\x4f\x5b\x0f\xb8\xb5\xce\x70\x59\xdf\x85\xc5\x5a\xb1\x92\xb6\x43\x82\xe9\xed\xdd\x01\xf3\x14\x64\x8c\x32\xc9\xae\x83\xb1\x5c\x31\x43\xcb\x1a\x3a\x45\x7e\x4a\x21\x48\x4e\xdb\x24\x19\x77\x6c\xa5\x0c\x9a\x14\xe1\xe1\xc6\x87\x6c\xf1\xd4\xb0\x7d\xe0\xae\x5c\xa3\xc1\xf6\xed\x71\x7b\xb4\x92\x59\x3a\x37\x46\xc5\x11\xca\x1b\x5f\xe1\x4f\x0a\x15\x06\xa4\xcf\xa6\xc7\x4f\x73\x85\x0f\xaa\x39\xa0\x72\x68\xbb\x37\x92\x5c\xa4\xb8\xb8\xf6\xbd\x9f\xc7\x79\x5b\xe8\x02\x71\x10\x3d\x4e\x5f\x04\x5d\x1b\x53\xf8\x1f\xaf\x91\x27\xf0\x9d\xdb\x96\xb9\x72\xfd\x72\xc6\x7e\x14\x4e\xba\x7c\x39\xc3\xd7\x2d\xc6\x4d\xda\x77\xf9\x0a\xa5\xe3\x99\x3a\xb5\xe1\x99\xf7\x68\xe6\x0e\x03\x15\xad\x58\x27\xdc\x73\xf9\xfd\x9f\x2d\x97\x1d\x45\xcf\x8b\x8e\x23\x34\xf3\xfb\x48\xb2\x9a\x86\x63\x7a\xb4\x13\xa1\xff\x26\xdd\xd3\x1c\x92\xdd\xec\x1f\x2e\xd1\x2e\x4f\x72\x11\x0d\xff\x03\x00\x00\xff\xff\x53\x39\x1a\xfc\x3a\x06\x00\x00")

func pairTmplBytes() ([]byte, error) {
	return bindataRead(
		_pairTmpl,
		"pair.tmpl",
	)
}

func pairTmpl() (*asset, error) {
	bytes, err := pairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0xc0, 0x9a, 0xe4, 0x5e, 0x82, 0x78, 0xea, 0x12, 0x87, 0x34, 0x40, 0x74, 0x8d, 0x2a, 0x23, 0x2, 0x8a, 0xb1, 0x34, 0x30, 0x98, 0xa6, 0xa6, 0xec, 0x18, 0x84, 0xd7, 0xd7, 0xd, 0x30, 0xce}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pair.tmpl": pairTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pair.tmpl": &bintree{pairTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
