// Code generated by go-bindata. DO NOT EDIT.
// sources:
// pair.tmpl (2.448kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x4d\x8f\xe3\x36\x0c\xbd\xeb\x57\xb0\x46\xb0\xb0\x0b\xaf\xdd\xb3\x8b\x1c\x8a\x26\x87\xa2\x68\x33\x87\xa0\x2d\xb0\xd8\x83\x46\x66\x1c\xc1\xb2\x2c\x48\xb2\xa7\x81\xab\xff\x5e\x48\x4e\xbc\x49\x26\x1f\xde\xe1\x29\x16\xf9\xc8\x47\x3e\x7d\x24\xcf\xe1\xd7\xb6\x44\xa8\x50\xa2\xa6\x16\x4b\x78\x3d\x40\xd5\x4e\xdf\xc0\xa5\x45\x2d\xa9\xc8\x59\x53\xe6\x8a\x72\x6d\x7e\x86\xd5\x06\xfe\xdc\x6c\x61\xbd\xfa\x6d\x9b\x11\x45\x59\x4d\x2b\x84\xe0\x23\x84\x37\xaa\xd5\x16\x62\x02\x00\x10\xb1\x56\x5a\xfc\xd7\x46\x64\xfc\xac\xb8\xdd\x77\xaf\x19\x6b\x9b\xfc\x9f\x8e\xca\xb7\x36\x37\xb6\xd5\xb4\xc2\xe8\x89\x3f\x57\x75\x95\x1b\xac\x1a\x94\x76\x56\x2c\xca\x52\xb5\x7c\x66\x30\xd3\x58\xa2\xb4\x9c\x8a\x79\x3c\xc6\xdf\x4c\x50\x63\x66\x01\xf6\xd6\x2a\x26\xf8\x1c\xee\xf6\xa0\xd0\x44\x24\x21\x24\xcf\xe1\x17\x21\x80\xf6\x94\x0b\xfa\x2a\x8e\x03\xce\x08\x6b\xa5\xf1\xf3\x1d\x86\xcf\xa0\xa9\xac\x10\x16\x75\x0a\x8b\x1e\x8a\x25\x64\x2b\x6a\x29\x38\x17\xaa\xe4\x39\x0c\x03\x2c\x6a\xf8\x0f\x6c\xfb\x42\x0d\xa3\x02\x9c\x83\x37\x2e\x44\x70\xf4\xd9\x0a\x0d\xd3\x5c\x59\xde\xca\x13\xe8\x16\x62\x09\xd1\xb8\xec\x5c\x14\xca\xa2\x2c\x7d\x7c\x42\x1e\x93\xf0\xce\x85\xaa\xfd\xda\x75\x4e\xdf\xdd\xdf\xdc\xee\x7d\x5e\x55\x4f\xb4\xa8\x52\xe2\x00\xa7\x62\xd0\x53\xd1\x21\xd8\x16\x36\x81\xa3\xf1\xa8\xed\x9e\x9b\x30\x0a\xe0\x06\x3a\x83\xa5\xf7\xdf\x6c\x67\xd7\x49\x76\x59\x24\xee\x8f\x91\xdb\x83\x42\x70\x2e\x81\x1f\xc3\xbc\xb3\x17\x9f\x6f\x08\x03\xd0\x68\x3b\x2d\xe1\xd3\x37\xc7\xb8\xee\xed\x77\x3c\x14\x30\x65\x4b\xa7\xf5\xbf\x3c\xcf\x02\xfa\x71\xc5\x11\x77\x3e\x25\x4f\xfa\x85\x6a\x83\x63\x8b\x2a\xfc\xa4\x50\x7f\xee\xa1\xa1\xca\xb3\x0f\xc2\x82\x11\x9c\x61\x36\xb2\x0e\xf1\x71\xe3\x03\xbe\x18\xab\xb9\xac\xbe\x86\x73\xb8\xa3\x0c\x07\x97\x40\xfc\xe5\xeb\x19\xf3\x14\x50\xeb\x56\x27\xc7\x0e\xc6\x74\xc5\x12\x1a\x5a\xe3\x75\xe4\x4f\x29\x08\x94\x71\x93\x24\xe3\x91\xec\xa9\xf6\xe8\x31\xc3\xb8\xb4\x6b\x35\xd4\x29\x04\x2d\x47\x6d\x1b\xf8\x36\x03\x0f\x50\x3d\x9c\xd1\x99\x5c\xe6\x8d\x5b\xb6\x87\x1a\x86\xe7\x9b\xf3\x64\x8c\x1a\xbc\xb5\xe9\x8a\x8b\xa8\xab\x0a\x3a\xe4\xeb\xb3\xd8\x77\x96\x9c\x91\xbb\xb6\x29\xfb\x24\xf9\xed\xbc\x27\x53\x3d\x2c\x41\xf7\x77\x63\x7c\x5b\x7c\xe7\xd3\x05\x85\xf4\x75\x37\xef\x6a\x8f\xe2\x3d\x2b\x1a\x04\x84\x25\x0c\xc3\x94\xd9\xb9\x58\xf7\xc9\x43\x1c\xdf\x05\xd8\x0f\x4b\x90\x5c\x3c\x18\xc2\xc9\x8e\x3b\x5b\x72\x91\xc2\xa7\xb5\xd7\xfb\x39\xc6\xdb\x46\x15\x10\x85\x6d\x1b\xa5\xb3\x00\x6b\xad\x0b\x4f\x6d\x5e\xf4\x74\xa8\xae\x76\xc0\x3c\xb4\x97\xb5\x18\xef\xa7\x49\xe3\x99\x34\x2f\x4f\xed\x23\xbb\x2f\xf2\x63\xef\xd9\x2d\x70\x2f\xa4\xc4\x1d\xed\x84\x7d\xbc\x43\x3e\xa2\xdc\x77\xa9\x16\x14\x5b\x6b\xed\xef\x08\x3f\xc4\x3f\xb8\x69\xa8\x65\xfb\xe7\xc8\x8f\xab\xf7\x41\xe5\xe6\xa9\x76\x7b\xe0\x8e\x90\x3b\x92\xdc\x95\xc1\xff\x81\xe1\xb2\x43\xf2\x3e\xf3\x78\xcf\x2e\xfd\xa3\x85\xb2\x8c\xc3\x67\x7a\xf1\x70\x84\xe1\xd4\xe9\x89\xb3\xea\x5d\x72\x7c\x21\xce\x9f\x9a\x23\x50\x72\x41\x1c\xf9\x3f\x00\x00\xff\xff\x42\x9f\x00\xae\x90\x09\x00\x00")

func pairTmplBytes() ([]byte, error) {
	return bindataRead(
		_pairTmpl,
		"pair.tmpl",
	)
}

func pairTmpl() (*asset, error) {
	bytes, err := pairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa8, 0x9e, 0x32, 0xab, 0xb4, 0xa5, 0xf0, 0x68, 0x3c, 0x11, 0x37, 0x44, 0xd8, 0x16, 0xbe, 0xe2, 0xf9, 0xcc, 0x65, 0xca, 0x80, 0x2e, 0xe5, 0x6c, 0x78, 0xae, 0xea, 0x85, 0xef, 0x9c, 0xaa, 0x96}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pair.tmpl": pairTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pair.tmpl": &bintree{pairTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
