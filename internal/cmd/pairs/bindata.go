// Code generated by go-bindata. DO NOT EDIT.
// sources:
// pair.tmpl (672B)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\xaf\xd3\x30\x10\x84\xef\xfe\x15\xa3\xa8\x42\xaf\xe8\x11\xdf\x8b\x7a\x40\x2d\x07\x84\x44\x39\x54\xc0\x75\xeb\x2c\xae\x15\xc7\xb6\x1c\x27\x25\x0a\xfe\xef\x28\x09\x14\x0e\xe5\xb5\xbe\xed\xce\xec\xe7\x9d\x95\x12\x3b\x5f\x31\x34\x3b\x8e\x94\xb8\xc2\x69\x80\xf6\xd7\x1a\xc6\x25\x8e\x8e\xac\x54\x4d\x25\x03\x99\xd8\xbe\xc5\xfe\x80\x4f\x87\x23\xde\xef\x3f\x1c\x4b\x11\x48\xd5\xa4\x19\xb3\x26\x84\x69\x82\x8f\x09\x4f\x02\x00\x0a\xe5\x5d\xe2\x1f\xa9\x10\x4b\xa9\x4d\x3a\x77\xa7\x52\xf9\x46\x7e\xeb\xc8\x5d\xbc\x6c\x93\x8f\xa4\xb9\xb8\xa3\xcb\x50\x6b\xd9\xb2\x6e\xd8\xa5\x87\xbc\xec\xaa\xe0\xcd\x83\x66\x15\xb9\x62\x97\x0c\xd9\xbb\xf6\x34\x04\x6e\x0b\xb1\x16\x42\x4a\xbc\xb3\x16\xd4\x93\xb1\x74\xb2\xbf\x0f\x50\x0a\xe5\x5d\x3b\xe5\x1f\xc7\x37\x88\xe4\x34\x63\x55\x3f\x63\xd5\x63\xb3\x45\xb9\xa7\x44\xc8\x79\xfe\x65\x1c\xb1\xaa\xf1\x13\x8a\x1a\xb6\x3b\x6a\x19\x39\x63\x8b\x62\xe9\xe7\x5c\xcc\x08\x76\xd5\x34\xb0\x16\x2f\x03\xa5\xc4\x57\x93\xce\x37\x99\x17\x33\xed\x19\x82\x1d\xf0\x87\x8d\x9e\x6c\xc7\x48\x1e\x87\x90\x8c\x77\xad\xf8\xde\x39\xf5\x5f\xc4\x53\x3f\x4f\xf6\xc8\x79\x8d\xd7\xf3\x0d\xca\xcf\x64\x22\xc6\x39\x49\xe4\xd4\x45\x87\x57\x7f\x85\xa5\x3f\xbd\x8f\x3c\x6c\x6e\x46\x7d\xbe\x5a\xbe\x4c\xbb\x6c\xd0\x2f\x9d\x2c\xf2\x3f\xc1\x7f\x05\x00\x00\xff\xff\xe6\x7a\xd0\x74\xa0\x02\x00\x00")

func pairTmplBytes() ([]byte, error) {
	return bindataRead(
		_pairTmpl,
		"pair.tmpl",
	)
}

func pairTmpl() (*asset, error) {
	bytes, err := pairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcd, 0xf4, 0xe4, 0x90, 0xc2, 0xc2, 0xeb, 0xd, 0x21, 0x46, 0x36, 0x6, 0x99, 0xe1, 0x75, 0xfa, 0x7c, 0x51, 0x7a, 0x6c, 0xad, 0xcb, 0x6d, 0xc, 0xa3, 0x3d, 0xa3, 0x15, 0x3f, 0x75, 0x84, 0x4b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pair.tmpl": pairTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pair.tmpl": &bintree{pairTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
