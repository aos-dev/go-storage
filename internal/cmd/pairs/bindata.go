// Code generated by go-bindata. DO NOT EDIT.
// sources:
// pair.tmpl (715B)
// sf-kjlqsc36tch53jrf.tmp (8.29kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x50\x4d\x8f\xd3\x30\x10\xbd\xfb\x57\x3c\x45\x15\xda\xa2\x25\xbe\x17\xed\x01\x51\x0e\x08\x89\xee\x61\x05\x5c\xa7\xce\x90\xb5\xe2\xda\x96\x3d\xc9\x52\x05\xff\x77\xe4\x04\xca\xc7\x81\xad\x4f\x9e\xf7\xde\xbc\x99\x79\x5a\xe3\x6d\xe8\x18\x3d\x7b\x4e\x24\xdc\xe1\x78\x46\x1f\x2e\x35\xac\x17\x4e\x9e\x9c\x36\xa7\x4e\x47\xb2\x29\xbf\xc6\xfe\x80\x8f\x87\x07\xbc\xdb\xbf\x7f\x68\x55\x24\x33\x50\xcf\x58\x38\xa5\xec\x29\x86\x24\xb8\x51\x00\xd0\x98\xe0\x85\xbf\x49\xa3\xd6\xb2\xb7\xf2\x38\x1e\x5b\x13\x4e\xfa\xcb\x48\xfe\x29\xe8\x2c\x21\x51\xcf\xcd\x33\xbc\x8e\x43\xaf\x33\xf7\x27\xf6\x72\x95\x96\x7d\x17\x83\xbd\x52\x6c\x12\x77\xec\xc5\x92\xbb\x6e\x8f\xf5\x6f\x1c\xe5\xfc\x6c\x83\x9c\x23\xe7\x46\x6d\x95\xd2\x1a\x6f\x9c\x03\x4d\x64\x1d\x1d\xdd\xcf\xc4\x5a\x65\x82\xcf\x35\xb0\x79\x7e\x85\x44\xbe\x67\x6c\x86\x5b\x6c\x26\xec\xee\xd0\xee\x49\x08\xa5\x2c\x53\xe6\x19\x9b\x01\xdf\x21\xe1\x9e\xb2\x21\x87\x52\x70\x87\x66\x85\x4b\x69\x16\x07\xf6\x5d\xd5\x6f\xd5\xff\xfd\x2a\xb9\x89\x43\xc5\xfe\xf5\xac\x8b\x7e\xb6\xf2\x58\x7d\x63\x35\xc6\x93\xad\x7b\xc7\xe8\xce\xf8\x35\x0c\x13\xb9\x91\x21\x01\x87\x28\x36\xf8\xac\xbe\x8e\xde\xfc\xdd\x77\x33\x2d\xf2\x09\xa5\x6c\xf1\x72\x09\xa2\xbd\x27\x9b\x30\x2f\xe7\x24\x96\x31\x79\xbc\xf8\x4d\xac\x78\x7d\x1f\xf8\xbc\xc3\xc5\xe8\xf6\x82\x7f\xaa\x53\x77\x98\x56\xa4\xa8\xf2\xc7\xcd\x3f\x02\x00\x00\xff\xff\xef\xa9\x77\x96\xcb\x02\x00\x00")

func pairTmplBytes() ([]byte, error) {
	return bindataRead(
		_pairTmpl,
		"pair.tmpl",
	)
}

func pairTmpl() (*asset, error) {
	bytes, err := pairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x49, 0xfe, 0x56, 0x85, 0xdb, 0x90, 0x73, 0x96, 0xc8, 0xde, 0x5d, 0x23, 0x1, 0x79, 0x9a, 0x97, 0xf3, 0x19, 0xc8, 0x79, 0x37, 0xdc, 0x32, 0x35, 0x77, 0x11, 0xef, 0xb0, 0x14, 0x27, 0x36, 0xd5}}
	return a, nil
}

var _sfKjlqsc36tch53jrfTmp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x6d\x8f\xa3\x46\xf2\x7f\x6d\x3e\x45\xfd\x2d\x25\x7f\x48\x1c\x8c\x6d\xfc\x78\x9a\x17\xc9\x6e\x22\xed\xe9\xb2\x39\x25\x7b\xba\x17\xdb\xab\x55\x03\x8d\xdd\x1a\x4c\x73\x80\x67\x7a\x66\xe4\xef\x7e\xaa\xae\x06\x83\xc7\xf3\xb0\xab\xe8\x74\x37\xd2\x60\x68\xba\x9e\x7f\x55\x5d\x4d\x8f\xc7\xf0\x46\x25\x02\xb6\x22\x17\x25\xaf\x45\x02\xd1\x1d\x6c\xd5\x0f\x91\xcc\x13\x5e\x73\x1f\xde\xfe\x06\xef\x7f\xfb\x00\x3f\xbf\x7d\xf7\xc1\x77\xc6\x63\xa8\xd4\xa1\x8c\x45\xb5\xc1\xfb\x82\xcb\xd2\xaf\xf7\x45\x06\xee\x62\x39\xfd\xc9\x73\x9c\x82\xc7\xd7\x7c\x2b\x60\xcf\x65\xee\x38\x72\x5f\xa8\xb2\x06\xd7\x19\x0c\xa3\xbb\x5a\x54\x43\x67\x30\x8c\xd5\xbe\x28\x45\x55\x8d\xb7\xf7\xb2\x30\x03\xe5\x5d\x51\xab\x71\xb5\xe3\xd3\xf9\x02\x07\xd2\x7d\x8d\x3f\x52\xd1\x75\x2c\xd5\xa1\x96\x19\x3e\x28\xc3\xa1\xe0\xf5\x6e\x9c\xca\x4c\xe0\x0d\x0e\x54\x75\x29\xf3\xad\x79\x57\xcb\xbd\x18\x3a\x9e\xe3\xa4\x87\x3c\x06\x6b\xc4\xef\x82\x27\x2e\xde\xc0\xc7\x4f\xa8\xc7\x08\x72\xbe\x17\x40\x64\x1e\xb8\xcd\xa8\x28\x4b\x55\x7a\xf0\xe0\x0c\xb6\xf7\xe6\x09\x36\x57\x80\x6a\xfa\xef\xc5\x2d\x32\x11\xa5\x6b\xec\xc0\xe7\x9f\x0e\x69\x2a\x4a\xc3\xd6\xf3\x9c\x81\x4c\x0d\xc1\xff\x5d\x41\x2e\x33\x64\x31\x28\x45\x7d\x28\x73\x7c\x1c\x41\xba\xaf\xfd\x9f\x91\x7b\xea\x0e\x4b\xc1\x13\xf8\xe6\x5f\x1b\xf8\xe6\x66\x48\x9a\x18\x59\x9e\x33\x38\x3a\xce\xe0\x86\x97\x10\x1d\x52\x20\x39\x24\xc4\x19\x7c\x26\x75\xae\x40\x2a\xff\x8d\x2a\xee\xdc\x6f\xa3\x43\x3a\x82\xed\xbd\xe7\x0c\xe2\xec\xe7\x46\x53\xff\x4d\xa6\x2a\xe1\x7a\xce\x9f\xa5\x0f\xb2\x21\xfe\x4f\x30\x12\x65\x49\x7a\xdb\xc1\xe8\x90\xfa\x3f\xa1\xea\xae\x37\xc2\x19\xce\xd1\x71\xea\xbb\x42\x00\xaf\x2a\x51\xa3\xcb\x0f\x71\x8d\x5c\x8c\x7d\x60\x03\xe2\x0c\x64\x9e\x2a\x00\x50\x95\xff\x8b\xcc\xc4\xbb\x3c\x55\xce\x20\x91\x5b\x51\xd5\xf0\x91\x90\xe1\xff\x21\xef\x05\xcd\x6e\x78\xda\xf0\x36\x14\x1d\xee\x26\xbe\x00\x36\xc4\xce\xa0\x92\xf7\xe6\x59\xe6\xf5\x22\x74\x06\x7b\x44\xfc\x49\xdc\xaf\x2a\x11\x66\xf0\x83\xdc\x0b\x40\x08\xf9\x78\x87\x72\x0c\x8c\xdc\x54\x9e\xcb\xf2\xe0\x3d\xdf\x0b\xd7\xb3\x12\x50\xa6\xf5\x40\x2a\x7d\x94\xee\x1c\x9f\xa1\x45\x53\x5c\x8f\xb4\xe9\x93\xa2\xa2\xcf\x92\xa2\xae\xae\xd7\xd5\xbc\xcf\x00\x4d\x7b\x89\x01\x1a\xe7\x7a\x27\x43\x1f\x71\xb0\xd6\x3f\xcd\xe4\x5d\xf5\x56\x96\xae\x07\x91\x52\x59\x97\x9a\x67\xd5\x0b\x96\xdf\x55\x64\xb8\x28\x53\x1e\x8b\x87\x63\x87\xda\xc2\x05\x33\xe0\x33\x56\x96\x0f\x58\x58\xae\x2c\x44\xdc\x21\xd3\x93\x94\xe9\x55\xc4\x74\xb0\x62\x3a\x08\x2e\xff\xa7\x38\x27\x66\x7a\x1d\x30\x1d\x4e\x98\xe6\x29\xd3\xc9\x8c\xe9\x59\xc0\xf4\x24\x60\x7a\x15\x32\x2d\x52\xa6\x53\xc1\xf4\x64\xce\x34\x9f\x31\xcd\x57\x4c\x87\x53\x9a\x2b\x56\x4c\x4f\x26\x4c\x27\x56\xd6\x92\x33\x1d\x06\x4c\x4f\x13\xa6\x83\x25\xd1\x87\x21\xd3\xb3\x35\xd3\xf3\x90\xe9\x38\x60\x7a\x39\x67\x5a\x44\x4c\x4f\x63\xa6\xb9\xe5\x1b\x2f\x99\x8e\x16\x4c\x4f\x62\xa6\xa7\x4b\xa6\xa7\x73\xa6\x03\x4e\x72\x51\xfe\x14\x6d\x58\x33\x3d\x09\x99\x0e\x70\x6c\xce\x74\x84\xff\x78\x9f\x30\x1d\xe3\x6f\xcc\xb4\x58\x32\xbd\x4e\x98\x5e\xcf\x99\x9e\x4c\x99\x9e\x45\x4c\xcf\x53\xa6\x67\x13\xa6\x67\x21\x3d\xaf\x04\xd3\xeb\x90\xe9\x68\xc5\x74\x3c\x65\x7a\xb1\x66\x7a\x85\xbe\x58\x30\x9d\x2c\x99\x9e\x70\xa6\xe3\x05\xe9\x80\x73\xf1\x9f\xc7\xa4\x7f\x98\x58\xdd\x66\x4c\xaf\xd7\x4c\x27\x2b\xd2\x21\x9e\x93\xae\xc8\x27\x44\x5f\xa0\x0d\x33\xa6\x13\xab\xff\x2c\x25\xdb\xc2\x88\xfc\x15\xae\x98\x4e\xd0\x9f\x21\xd3\x93\x35\xd3\xd1\x8c\xe9\xe9\x82\xfc\x65\xf4\x99\x32\xbd\x4a\xc9\x66\xe4\x17\x4c\x6d\xcc\x38\xd9\x3e\x4f\x98\x16\x53\x8a\x31\x5f\x53\xac\x90\x37\xde\xa3\x8e\x33\xce\xf4\x72\xc9\x34\x5f\x32\x3d\x9f\x32\x9d\xe2\xf8\x82\xe9\xa5\x20\xdf\xc7\x2b\xe2\x11\xc5\x4c\x2f\x30\xfe\x33\x92\x87\xfa\x44\x6b\xf2\x0d\xc6\x3a\x46\xff\x05\x4c\x2f\x22\xa6\x13\x1c\x47\x7f\x09\xb2\x9b\xcf\xc9\x4e\xe4\x81\xbe\xe7\xa8\x5b\xc0\x74\x9c\x30\xbd\x9a\x31\xbd\x58\x50\x6c\x91\xdf\x62\xca\xf4\x7a\xc9\x74\x10\x5b\x3e\x11\xf9\x1b\x63\x12\x84\xc4\x33\x88\x98\x8e\x26\x4c\x4f\x16\x84\xaf\x90\x13\x6f\xf4\x0d\x8e\x25\x21\xe9\x89\x73\x96\x21\xe9\x12\xa1\x6f\x52\xd2\xb1\xeb\x1b\x8c\x33\xde\xa3\x7f\x10\x5b\x33\xc4\xe2\x8a\x69\x11\x92\xcc\xc5\x8c\xe9\xf9\x9c\xe2\x82\xf7\x18\x0b\xfc\x45\x59\xa1\xd5\x19\x7d\x87\xd8\x45\x5f\x2d\xd7\x14\xdf\xc5\x9c\xe2\x88\x3a\xa0\xbd\x29\xea\x8b\xbe\xe3\x84\x1b\xc4\x30\xca\x5e\x70\x8a\x2b\xe2\x1e\xf9\x62\x6e\xa0\x0f\xc4\x9a\x30\x3a\x8f\x99\x8e\x63\xca\xcd\xe5\x82\xe4\xa3\x5e\x51\x40\xb6\x4e\x53\xc2\x18\xfa\x38\x0e\x99\x9e\x2f\xc9\x76\xc4\x39\xda\x82\xd8\x9b\xa0\x5d\x33\xc2\xff\xc4\x62\x66\x92\x30\x9d\x06\x14\x97\x15\xe6\x81\xa0\xf8\xa2\x0f\x10\x73\x13\x41\xef\x30\xdf\x31\xef\x0d\x46\x90\x66\x45\x58\x45\x7d\xd3\x39\xe5\x8c\x91\x3b\x23\x1f\x21\x06\x31\x5e\x8d\x2f\x90\x37\xe6\x4a\x3a\x63\x3a\xc0\xfc\xc3\x9c\x41\x5f\x86\x4c\x4f\xa7\x94\x3f\xc8\x2b\x5c\x93\xcf\x31\x76\xa1\xc5\x0b\xda\xb2\xc4\x1c\x99\x93\x7d\xc8\x3f\x4a\x08\x7f\x33\x8b\x47\xc4\x83\xc1\x6b\x42\xf9\x35\xe7\xf4\x1b\xc6\x84\x1d\x9c\x93\x04\xe4\x27\xcc\x77\xac\x25\xe9\x94\x78\xc5\x13\xe2\x1f\xcc\xfb\x75\x0e\xff\xc5\x82\x6a\x14\xd2\x22\x86\x78\xd0\xc9\xad\x60\xd8\x74\x42\x4d\x3d\xb5\x6b\xf3\xa5\x9e\xa7\x59\xc1\x3b\x3d\x93\x33\x18\xb4\x95\x78\xe4\x0c\xb0\xf5\xb2\x0d\xdf\x70\xe4\x0c\xbc\x76\x81\x6c\xe6\x20\xe3\xef\xcc\x4a\xdf\x65\x6c\x96\xfa\xb6\x9f\x3a\xd3\xe4\xa5\x4e\xa5\x6d\x30\x4c\x87\xb0\xb9\x3a\x5f\x52\x1e\x70\xb1\xdd\x40\x57\x33\xc0\x45\x74\x03\xc1\x08\x70\x31\xdc\x74\xd7\x4a\x37\xf0\xcc\x28\x2e\x70\x1b\x5a\x00\xff\x91\x4b\xed\x06\x23\x08\xbc\xa3\x33\xe0\x28\xe1\x5b\x63\xc1\x83\x51\x7b\x03\x56\x7b\x14\xbf\x31\xd7\x11\x50\x63\xb2\x81\x8f\xb3\xe9\xa7\x83\xcc\xeb\xd5\x43\xa0\xe3\x64\x04\x81\x4e\x43\xbc\x0a\x73\x5d\x23\x53\x1d\x4f\x4f\x57\x11\xe1\xd5\x4c\x9c\x4e\xf0\x1a\x2e\xf0\x3a\x33\x57\x73\x59\xaf\xcd\x3c\xf3\x72\x39\x37\x1c\xb9\xb9\x8f\xf1\x3a\xa7\x71\x33\xb2\x30\x23\xdc\x30\x8b\x0d\xdf\x05\xdd\x9b\xe1\x99\xe1\x9b\x9c\xee\x27\x86\xd9\x2c\x3d\x31\x5e\x19\x25\xc3\xe8\x78\x6c\x43\xcf\xdb\x96\x6d\x3c\x86\x1f\x4d\xc3\x96\x29\x9e\x54\xc0\xf3\x04\x68\x4e\x05\xf5\xae\x69\xe6\x52\x55\x9a\xa7\xad\xbc\x11\xb9\x69\x1c\xcd\x06\xe1\x5d\xdd\xce\xe5\x39\xc1\x00\x64\xda\xa1\x8b\xd5\x21\x4b\x20\x57\x35\x44\x02\x52\x75\xc8\x13\x50\x25\x52\xf6\x5e\xa0\x64\x91\xf8\x04\x30\xa3\x8c\xfb\x52\xd7\x1e\xf3\x5c\xe5\x32\xe6\x19\xf6\x66\x18\x49\xbb\x31\xf0\x7f\x17\x45\xc6\x63\xe1\x52\x73\x3b\x64\x6c\x38\x82\xe1\x78\x38\x82\x1f\x26\x04\xc0\x74\x04\xea\x1a\x29\x3e\x5b\x78\x7d\xec\xf1\xfa\xf4\x17\x7c\x8d\xd0\xe4\x2d\x8e\x53\xc4\xee\x05\xf0\x3e\xd9\x67\x93\x43\xbf\xa9\x20\xe6\xf9\xff\xa3\x8f\xb8\xd9\x6b\x19\xf5\x2f\x34\xdf\xd8\x7d\xb7\x81\xf1\x2d\x0a\x31\x3c\x83\xa3\xf3\xb2\x0c\x74\xa2\x71\xad\xe5\xea\x75\xa3\xfa\x07\xf5\xac\x8f\x23\x1a\xab\xbc\x16\x79\x5d\x01\xaf\x80\x37\xad\xad\x2b\xf3\xaa\x46\x65\x55\x0a\xcd\x0e\xca\xeb\xc6\x85\xd8\x9d\x45\x87\x6e\xba\xd1\x41\xb7\xb6\xde\x3b\x05\xd4\x6b\xad\x21\x12\xda\x51\x51\xe2\x93\xce\xbf\x1e\xaa\x9a\x0c\x93\x15\x64\xf2\x5a\x58\x6c\x46\x87\x1a\x0a\x9e\xcb\xb8\x82\xdb\x9d\xc8\xed\xe8\xad\x01\x51\xe3\x38\x0b\xc0\x06\x98\x95\xdc\x17\x99\x4c\xa5\xa8\xa0\xe2\xa9\x00\x99\xcb\x5a\xf2\x4c\xde\xf3\x5a\xaa\x1c\x2d\xdc\x66\x2a\xe2\x19\xdc\xf0\x52\xf2\x28\x13\x95\x35\xb4\xd5\xa1\x6f\x26\x79\x03\xad\x7b\xc2\xb4\xc7\xf8\x30\x1a\xbb\x43\xe3\xf0\x8d\x9d\x3c\x84\xef\x69\x4b\xfa\x3d\x0c\xbd\x0d\xe0\xa3\x28\x4b\x8a\xaa\xeb\x79\xbd\x1d\x16\x3f\xf7\x8a\x8d\x66\xcf\x37\x76\xec\x55\x1e\x42\x66\xe4\xa4\x3f\xc7\x43\x97\xe0\xf0\x68\x97\x64\x63\xdd\x77\xab\xd7\x43\xa9\xd9\xd2\x3d\x57\x7f\xcc\x8a\xf0\x9f\x2e\x42\xa8\xd5\x19\xd4\x3b\x9b\xd6\xff\xb1\x6a\x64\x5c\xfc\x95\x15\x89\x96\xc2\x57\x15\xa4\x46\xcc\xb3\x45\xe9\x2d\xed\xf6\xbb\x61\xb6\x1f\x00\x14\xc5\x2d\x95\x99\x80\x5b\x59\xef\xce\xe3\xdd\x0f\x76\x0b\xe7\x57\xc4\xbb\x2b\xe5\x85\xb8\x93\x7a\xe7\x4b\xd0\xf9\xa7\x89\xff\xda\xf8\x3f\xd2\xf4\xe1\x78\x21\x50\x36\x06\x5f\x89\x08\x72\xe4\x23\x4c\x7c\xa9\xe8\xa7\x50\x42\x33\xaa\x53\xa8\x61\xcf\x0b\xb3\x28\x65\x19\x5c\xe7\xea\x36\x37\x10\xa1\x6a\x51\xef\x84\x2c\x21\xde\x89\xf8\xba\x3a\xec\x9b\x1a\x65\x59\x60\x9b\xba\xe7\xc5\x47\x0a\xc8\xa7\x67\xa3\xb8\x2f\xd0\xbd\x7b\x7e\x2d\x5e\x20\xc9\x44\xee\x36\xf1\xc2\x92\x8d\x85\x29\xb7\x91\x2f\x79\xbe\x15\x6d\x34\xcf\x42\xd7\x06\x19\x67\x7f\x7a\x4d\x1e\x9b\x9e\xd8\xf8\x7e\x5f\x10\x15\x5c\xb5\xfe\xef\xba\x7e\x5f\x3c\xea\xe8\x10\x40\x55\x2f\xcb\x72\x33\xa2\x3a\xc9\x52\x75\x81\x6f\x08\x5c\x5c\xea\x4e\x45\x9c\x48\x1a\xbf\x34\x6f\x46\xd8\x72\x7f\xa1\x1b\x88\xd3\x15\xf0\xa2\x10\x79\x62\x52\xa2\x6a\xc2\xde\xad\x2b\x38\x6e\xcd\x68\xe9\x25\x62\xa0\xc6\x35\x68\x04\x3b\x95\x25\xa8\x9c\xe0\xf1\xce\x66\xbc\xfd\xa2\xad\xca\x11\x02\xa5\x10\x09\xd4\x0a\x64\x5d\xd9\x45\xc2\x7c\x66\x6a\x58\xa1\x25\x6d\x70\xd1\xf6\xc7\x3b\x99\x07\xa7\xbb\xfd\xd9\xc0\x69\x5f\xd4\x2b\x62\x65\xcf\xb7\xa6\x66\x91\x8d\x91\xc8\xd4\x2d\x70\x88\x45\x59\x73\x69\xca\x54\x22\x4b\x11\xd7\xaa\xbc\x03\xb1\x8f\x44\x92\x88\x04\x64\x7e\xa2\xeb\x7f\x88\x47\x82\x5f\x54\x09\x42\xf3\x7d\x91\x09\xac\x6e\x77\xea\x00\xe5\x21\xef\xcc\x02\x95\x03\xfe\x8e\x7d\xdf\x37\x79\x60\x06\xb1\xad\xe3\x92\x54\x42\x36\xa9\xca\x32\x75\x8b\xee\xda\x49\x51\xf2\x32\xde\xdd\x99\xcf\xf9\xf8\x67\xa8\x9b\x07\x80\x54\x29\xbf\xd6\xf5\x69\x40\xee\xb7\x9d\xd7\x00\xdc\x2f\xf2\x6d\x77\x20\x6a\x06\xea\xb6\xe3\x78\x2b\x4b\x77\x88\x8c\x87\x5e\xbf\xf9\x68\x90\xf3\x30\xb4\x72\xb0\x12\xca\xfd\x76\x78\x1c\x75\x5d\x4a\xc4\x63\x7c\xf1\x24\x03\xa3\x07\x92\x1b\xf9\x8f\x18\x34\xfc\x3d\xe3\x95\xd3\x78\xae\x6a\xa1\x65\x55\x9f\x33\x6e\x9a\x86\x11\xce\xef\xb3\xc2\xa9\x32\xcb\x1e\xab\x60\x2c\x3c\xf6\x17\x8d\xf2\xd1\xa6\xe5\x71\x63\x9c\xab\x44\x34\x85\xa0\x2e\x85\x30\x6b\x00\xe6\x91\x49\x03\xac\x02\x81\xc9\x95\xaf\x5c\x50\x06\x05\xaf\x77\x7f\x93\x55\xdd\x25\xf9\xa3\xc8\x64\xed\xf6\x38\x1a\x1a\x9c\x8f\x29\xfb\x79\x04\xc5\x29\x65\x5b\x0e\xa6\x14\x19\x7d\xaf\x00\x7f\xfc\x37\x3b\x99\x25\xa5\xc8\x3f\x16\x9f\xf0\x95\x4c\x81\xde\x76\x2a\xd7\xd7\x6c\x56\x06\x54\xde\x8e\xcd\x19\x84\x91\xf5\x0b\xfa\xf5\x15\x07\x1a\xcf\xf1\xc5\x92\x72\xf3\x74\xe5\xea\xd9\xd4\x94\xaf\x18\x9f\xdf\xf7\x6a\x58\x6f\x1e\x29\x73\x73\xaa\x62\xe5\xcd\xe8\x44\xd4\xab\x63\xf8\xa6\x7b\x2a\x62\x23\xde\x39\xb9\x30\x46\x9a\xcc\xbb\x58\x85\x9c\x41\x2b\xb5\x53\xb1\xbe\x6b\x90\xd3\x7c\x3e\x6f\xf8\x5e\xc1\xb7\xf6\xf6\xc1\xb8\xe9\x02\xcd\x79\x5d\x6b\x09\xda\x02\x77\x91\xea\x78\x1c\x39\x47\xaa\x7c\xbf\x8b\xaa\x56\xa5\x20\xb7\x97\xf4\x60\xda\x6e\xaa\xc3\x87\x3c\x11\xdd\x1e\xbd\xad\x7a\x36\x53\xba\xe4\x6e\x22\xcb\xb3\xd3\x39\xea\xe5\x9e\xdd\x3f\x3e\xf9\x05\xc9\x7e\x3c\x1a\xc8\xa6\x35\x6f\x49\xdb\x36\xfe\x35\xe4\x74\xf4\xa6\x2a\xff\xd7\xeb\x44\x96\x3f\x66\x99\xfb\x19\x0b\xf4\xdf\x79\xbd\x23\x85\x9b\xc3\x48\xbf\x49\x78\xcf\x1b\xf5\x3f\x3b\x2d\xe7\xf3\x67\x4f\x09\xfb\xa2\xe8\xc4\xd3\xff\x67\x29\x6b\x81\x3c\xce\xe5\x19\x11\x23\x20\x8f\xa0\x71\x3e\x1d\x0b\xbd\x46\x82\x7d\x54\x95\xff\x66\x57\x4b\x5c\xdb\x2f\x33\x6f\xd8\xd2\x61\xd1\xf9\x73\xd3\x94\x75\x83\x57\x7d\x49\xf0\xa1\x14\xf1\xa1\xac\xe4\x8d\xc8\x2e\x01\xa1\x7a\x0e\x09\xb1\x4d\x81\x7e\x48\x5b\xdf\x3b\x03\x5c\x2a\x65\x26\x9e\xf1\xc6\x65\xd0\x51\xae\x9a\x5e\xb3\x74\x9a\x3a\x68\xa4\x9d\x52\x3f\xee\x66\x3d\x85\xeb\x82\xe2\x2d\x22\xfe\xaa\x64\x6e\x0b\xb3\xa1\xf4\x9e\xef\xef\xda\xd6\xee\x78\x7e\x2c\x66\x5c\x74\x21\x54\x17\xf6\xd8\x5f\xb9\x50\xb4\x47\x80\x5d\xd5\x6d\x49\x6b\x57\xb9\x44\x96\xc7\xd1\xcb\xcb\x88\xef\xfb\xe6\xdf\x39\x3a\xff\x0e\x00\x00\xff\xff\x81\xda\x76\x84\x62\x20\x00\x00")

func sfKjlqsc36tch53jrfTmpBytes() ([]byte, error) {
	return bindataRead(
		_sfKjlqsc36tch53jrfTmp,
		"sf-kjlqsc36tch53jrf.tmp",
	)
}

func sfKjlqsc36tch53jrfTmp() (*asset, error) {
	bytes, err := sfKjlqsc36tch53jrfTmpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sf-kjlqsc36tch53jrf.tmp", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7b, 0x72, 0xf2, 0x8c, 0x3f, 0x3d, 0x11, 0x87, 0xc1, 0x96, 0x15, 0x31, 0x32, 0xcd, 0xa4, 0x55, 0xae, 0x32, 0x32, 0xfe, 0x16, 0x4, 0xce, 0x43, 0xc8, 0xb3, 0x52, 0x64, 0xc, 0x30, 0x71, 0xaa}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pair.tmpl":               pairTmpl,
	"sf-kjlqsc36tch53jrf.tmp": sfKjlqsc36tch53jrfTmp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pair.tmpl":               &bintree{pairTmpl, map[string]*bintree{}},
	"sf-kjlqsc36tch53jrf.tmp": &bintree{sfKjlqsc36tch53jrfTmp, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
