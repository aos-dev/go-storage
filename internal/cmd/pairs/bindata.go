// Code generated by go-bindata. DO NOT EDIT.
// sources:
// pair.tmpl (715B)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x50\x4d\x8f\xd3\x30\x10\xbd\xfb\x57\x3c\x45\x15\xda\xa2\x25\xbe\x17\xed\x01\x51\x0e\x08\x89\xee\x61\x05\x5c\xa7\xce\x90\xb5\xe2\xda\x96\x3d\xc9\x52\x05\xff\x77\xe4\x04\xca\xc7\x81\xad\x4f\x9e\xf7\xde\xbc\x99\x79\x5a\xe3\x6d\xe8\x18\x3d\x7b\x4e\x24\xdc\xe1\x78\x46\x1f\x2e\x35\xac\x17\x4e\x9e\x9c\x36\xa7\x4e\x47\xb2\x29\xbf\xc6\xfe\x80\x8f\x87\x07\xbc\xdb\xbf\x7f\x68\x55\x24\x33\x50\xcf\x58\x38\xa5\xec\x29\x86\x24\xb8\x51\x00\xd0\x98\xe0\x85\xbf\x49\xa3\xd6\xb2\xb7\xf2\x38\x1e\x5b\x13\x4e\xfa\xcb\x48\xfe\x29\xe8\x2c\x21\x51\xcf\xcd\x33\xbc\x8e\x43\xaf\x33\xf7\x27\xf6\x72\x95\x96\x7d\x17\x83\xbd\x52\x6c\x12\x77\xec\xc5\x92\xbb\x6e\x8f\xf5\x6f\x1c\xe5\xfc\x6c\x83\x9c\x23\xe7\x46\x6d\x95\xd2\x1a\x6f\x9c\x03\x4d\x64\x1d\x1d\xdd\xcf\xc4\x5a\x65\x82\xcf\x35\xb0\x79\x7e\x85\x44\xbe\x67\x6c\x86\x5b\x6c\x26\xec\xee\xd0\xee\x49\x08\xa5\x2c\x53\xe6\x19\x9b\x01\xdf\x21\xe1\x9e\xb2\x21\x87\x52\x70\x87\x66\x85\x4b\x69\x16\x07\xf6\x5d\xd5\x6f\xd5\xff\xfd\x2a\xb9\x89\x43\xc5\xfe\xf5\xac\x8b\x7e\xb6\xf2\x58\x7d\x63\x35\xc6\x93\xad\x7b\xc7\xe8\xce\xf8\x35\x0c\x13\xb9\x91\x21\x01\x87\x28\x36\xf8\xac\xbe\x8e\xde\xfc\xdd\x77\x33\x2d\xf2\x09\xa5\x6c\xf1\x72\x09\xa2\xbd\x27\x9b\x30\x2f\xe7\x24\x96\x31\x79\xbc\xf8\x4d\xac\x78\x7d\x1f\xf8\xbc\xc3\xc5\xe8\xf6\x82\x7f\xaa\x53\x77\x98\x56\xa4\xa8\xf2\xc7\xcd\x3f\x02\x00\x00\xff\xff\xef\xa9\x77\x96\xcb\x02\x00\x00")

func pairTmplBytes() ([]byte, error) {
	return bindataRead(
		_pairTmpl,
		"pair.tmpl",
	)
}

func pairTmpl() (*asset, error) {
	bytes, err := pairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x49, 0xfe, 0x56, 0x85, 0xdb, 0x90, 0x73, 0x96, 0xc8, 0xde, 0x5d, 0x23, 0x1, 0x79, 0x9a, 0x97, 0xf3, 0x19, 0xc8, 0x79, 0x37, 0xdc, 0x32, 0x35, 0x77, 0x11, 0xef, 0xb0, 0x14, 0x27, 0x36, 0xd5}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pair.tmpl": pairTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pair.tmpl": &bintree{pairTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
