// Code generated by go-bindata. DO NOT EDIT.
// sources:
// metadata.tmpl (579B)
// pair.tmpl (450B)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metadataTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xbd\x6e\xe3\x30\x10\x84\x7b\x3e\xc5\x9c\xe1\x42\x02\x74\x52\x7f\x07\x57\xf6\xe1\x90\x22\x71\x11\x23\x4d\x90\x62\x2d\xad\x04\x42\xfc\x11\x28\x8a\x81\x23\xf3\xdd\x03\xc9\x3f\x08\x90\x38\x29\xb9\x9c\xfd\x38\x9c\x29\x0a\xac\x6d\xc5\x68\xd8\xb0\x23\xcf\x15\xf6\x07\x34\xf6\x7a\x86\x34\x9e\x9d\x21\x55\x94\xba\x2a\x3a\x92\xae\xff\x8b\xcd\x16\x0f\xdb\x1d\xfe\x6d\xee\x76\xb9\xe8\xa8\x6c\xa9\x61\xf8\x43\xc7\xbd\x10\x52\x77\xd6\x79\x24\x62\xe1\xa5\xe6\x85\x48\x85\x18\xc7\xdf\x70\x64\x1a\xc6\xb2\xcd\xb0\x0c\xf8\xb3\x42\xbe\x21\x4f\x88\x51\x00\x40\x51\xe0\x3f\xfb\x71\xc4\xb2\xc5\x11\x25\x69\x56\x6b\xea\x19\x31\xe2\x55\x2a\x85\x86\x3d\x4e\xb7\x31\x22\x90\x1a\x18\xb5\xb3\x1a\x9a\x3d\x55\xe4\x29\x9f\x29\xf5\x60\x4a\x24\x1a\xf7\xe7\x69\x7a\x0b\x9a\xa4\x48\xa6\x79\x40\x8c\x19\xf6\xd6\xaa\x14\x18\x67\x46\xc8\x60\xdb\xc9\x9f\x7e\xfe\x6a\xf3\x65\x16\xc9\x1a\xbf\x6c\x7b\xde\x70\xec\x07\x67\x70\xe2\x1d\xf1\xc6\xce\x3e\xcd\x0e\x27\x76\x4d\xaa\xe7\x59\x16\x3f\x8a\x43\x7e\x7d\x3f\xcd\xe0\xdd\x70\xd1\x5c\xd2\x78\xfc\x2e\x8d\xfe\x73\x1a\xd2\x78\xfb\x63\x1a\x37\xa0\x49\xc0\xd5\xcc\x25\x86\x1b\xbf\xc7\x0a\xe1\xec\x74\xea\x94\x4d\x35\x35\xf8\x1e\x00\x00\xff\xff\x15\xd4\x90\x8b\x43\x02\x00\x00")

func metadataTmplBytes() ([]byte, error) {
	return bindataRead(
		_metadataTmpl,
		"metadata.tmpl",
	)
}

func metadataTmpl() (*asset, error) {
	bytes, err := metadataTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metadata.tmpl", size: 579, mode: os.FileMode(0644), modTime: time.Unix(1573453397, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6f, 0xc6, 0x20, 0x55, 0xbf, 0xa7, 0x8f, 0x5, 0x9c, 0x81, 0xa3, 0xab, 0xac, 0xef, 0x64, 0x47, 0xe4, 0xd7, 0x15, 0xf4, 0x55, 0x17, 0xfb, 0xbc, 0xf1, 0xf8, 0x65, 0xb2, 0x9f, 0xb3, 0x5a, 0xb3}}
	return a, nil
}

var _pairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\xcf\x6a\xf3\x30\x10\xc4\xef\x7a\x8a\xc1\x84\x8f\xe4\x23\x8d\xee\x29\x39\x94\xa4\x87\x52\x68\x7a\x08\xed\x79\x63\x6f\x5d\x61\x59\x12\xb2\xac\x62\x5c\xbd\x7b\xb1\xdc\x3f\x97\x94\x5e\x04\x33\xda\xf9\xed\x8e\x94\xd8\xdb\x8a\x51\xb3\x61\x4f\x81\x2b\x9c\x07\xd4\xf6\x5b\x43\x99\xc0\xde\x90\x96\x65\x5b\x49\x47\xca\x77\xd7\x38\x1c\xf1\x70\x3c\xe1\xf6\x70\x77\xda\x08\x47\x65\x43\x35\x23\x0c\x8e\x3b\x21\x54\xeb\xac\x0f\x58\x8a\x22\xa8\x96\x0b\xb1\x12\x42\x4a\xdc\x68\x0d\x8a\xa4\x34\x9d\x35\x23\x63\x36\xa2\xb4\xa6\x9b\x26\xc7\xf1\x0a\x9e\x4c\xcd\x58\x34\x6b\x2c\x22\xb6\x3b\x6c\x0e\x14\x08\x29\x09\x00\x18\x47\x2c\x1a\xbc\xa3\xa4\x96\xf5\x9e\x3a\x46\x4a\xd8\xa1\x98\xfd\x94\x8a\x8c\x60\x53\x4d\x81\x95\xf8\x1b\x28\x25\x9e\x55\x78\xbd\xc8\x7d\x53\xd3\xad\xce\xe9\x01\x5f\x7c\x44\xd2\x3d\x23\x58\x1c\x5d\x50\xd6\x74\x19\xf2\xd2\x9b\xf2\x57\xcc\x32\xe6\x74\x44\x4a\x2b\xfc\x7f\x24\xe5\x31\xe6\x94\xe7\xd0\x7b\x83\x7f\x93\x35\x3b\xf7\x3c\x6c\x2f\x56\x5c\xe7\xef\xa7\x69\xf7\x16\x71\x56\xe9\xf3\xfd\x29\xfc\x11\x00\x00\xff\xff\x62\x7d\xe4\xdc\xc2\x01\x00\x00")

func pairTmplBytes() ([]byte, error) {
	return bindataRead(
		_pairTmpl,
		"pair.tmpl",
	)
}

func pairTmpl() (*asset, error) {
	bytes, err := pairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pair.tmpl", size: 450, mode: os.FileMode(0644), modTime: time.Unix(1573453065, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x51, 0xfb, 0x76, 0x76, 0x42, 0x39, 0xb1, 0x2b, 0x1b, 0x4f, 0xcb, 0xc6, 0x41, 0x71, 0xcf, 0x7f, 0xf2, 0xcb, 0x39, 0x60, 0x5d, 0xbe, 0x68, 0x2, 0xc2, 0x32, 0xb1, 0xdc, 0x5f, 0x1, 0xc1, 0x4c}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"metadata.tmpl": metadataTmpl,
	"pair.tmpl":     pairTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"metadata.tmpl": &bintree{metadataTmpl, map[string]*bintree{}},
	"pair.tmpl":     &bintree{pairTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
