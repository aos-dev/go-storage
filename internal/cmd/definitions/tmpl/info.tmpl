// Code generated by go generate internal/cmd; DO NOT EDIT.
package info

// All available metadata.
const (
{{- range $_, $v := .Infos }}
    {{- $pname := $v.Name | toPascal }}
    {{- if $v.DisplayName }}
        {{- $pname = $v.DisplayName }}
    {{- end }}
    {{ $v.Scope | toPascal }}{{ $v.Category | toPascal }}{{ $pname }} = "{{ $v.Name }}"
{{- end }}
)

{{- range $_, $v := .Infos }}
    {{ $pname := $v.Name | toPascal }}
    {{- if $v.DisplayName }}
        {{ $pname = $v.DisplayName }}
    {{- end }}
    {{ $serviceName := printf "%s%s" ($v.Scope | toPascal) ($v.Category | toPascal) }}
    // Get{{ $pname }} will get {{ $v.Name }} value from metadata.
    func (m {{ $serviceName }}) Get{{ $pname }}() ({{ $v.Type }}, bool)  {
    v, ok := m.m[{{ $serviceName }}{{ $pname }}]
    if !ok {
    {{- if $v.ZeroValue }}
        return {{ $v.ZeroValue }}, false
    {{- else }}
        return {{ $v.Type | zeroValue }}, false
    {{- end }}
    }
    return v.({{ $v.Type }}), true
    }

    // MustGet{{ $v.Name }} will get {{ $v.Name }} value from metadata.
    func (m {{ $serviceName }}) MustGet{{ $pname }}() {{ $v.Type }}  {
    return m.m[{{ $serviceName }}{{ $pname }}].({{ $v.Type }})
    }

    // Set{{ $v.Name }} will set {{ $v.Name }} value into metadata.
    func (m {{ $serviceName }}) Set{{ $pname }}(v {{ $v.Type }}) {{ $serviceName }} {
    m.m[{{ $serviceName }}{{ $pname }}] = v
    return m
    }
{{- end }}
