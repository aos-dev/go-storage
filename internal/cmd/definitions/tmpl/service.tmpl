// Code generated by go generate via internal/cmd/service; DO NOT EDIT.
package {{ .Name }}

import (
    "context"
    "io"

    "github.com/opentracing/opentracing-go"

    "github.com/Xuanwo/storage"
    "github.com/Xuanwo/storage/pkg/segment"
    "github.com/Xuanwo/storage/pkg/endpoint"
    "github.com/Xuanwo/storage/pkg/credential"
    "github.com/Xuanwo/storage/pkg/httpclient"
    "github.com/Xuanwo/storage/services"
    "github.com/Xuanwo/storage/types"
    ps "github.com/Xuanwo/storage/types/pairs"
    "github.com/Xuanwo/storage/types/info"
)

var _ credential.Provider
var _ endpoint.Provider
var _ segment.Segment
var _ storage.Storager
var _ services.ServiceError
var _ httpclient.Options

// Type is the type for {{ .Name }}
const Type = "{{ .Name }}"

// Service available pairs.
const (
{{- range $_, $v := .Pairs }}
    {{- if not $v.Global }}
    {{- $pname := $v.Name | toPascal }}
    // {{ $pname }} will {{ $v.Description }}
    Pair{{ $pname }} = "{{ $.Name }}_{{ $v.Name }}"
    {{- end }}
{{- end }}
)

// Service available infos.
const (
{{- range $_, $v := .Infos }}
    {{- if not $v.Global }}
    {{- $pname := $v.Name | toPascal }}
    {{- if $v.DisplayName }}
        {{- $pname = $v.DisplayName }}
    {{- end }}
    Info{{ $v.Scope | toPascal }}{{ $v.Category | toPascal }}{{ $pname }} = "{{ $.Name }}-{{ $v.Name }}"
    {{- end }}
{{- end }}
)

{{- range $_, $v := .Pairs }}
{{- if not $v.Global }}
{{- $pname := $v.Name | toPascal }}
// With{{ $pname }} will apply {{ $v.Name }} value to Options
// This pair is used to {{ $v.Description }}
func With{{ $pname }}(v {{ $v.Type }}) *types.Pair {
        return &types.Pair{
        Key: Pair{{ $pname }},
        Value: v,
    }
}
{{- end }}
{{- end }}


{{- range $_, $v := .Infos }}
    {{- if not $v.Global }}
    {{ $pname := $v.Name | toPascal }}
    {{- if $v.DisplayName }}
        {{ $pname = $v.DisplayName }}
    {{- end }}
    {{ $serviceName := printf "%s%s" ($v.Scope | toPascal) ($v.Category | toPascal) }}
    // Get{{ $pname }} will get {{ $v.Name }} value from metadata.
    func Get{{ $pname }}(m info.{{ $serviceName }}) ({{ $v.Type }}, bool)  {
    v, ok := m.Get(Info{{ $serviceName }}{{ $pname }})
    if !ok {
    {{- if $v.ZeroValue }}
        return {{ $v.ZeroValue }}, false
    {{- else }}
        return {{ $v.Type | zeroValue }}, false
    {{- end }}
    }
    return v.({{ $v.Type }}), true
    }

    // set{{ $v.Name }} will set {{ $v.Name }} value into metadata.
    func set{{ $pname }}(m info.{{ $serviceName }}, v {{ $v.Type }}) info.{{ $serviceName }} {
    return m.Set(Info{{ $serviceName }}{{ $pname }}, v)
    }
    {{- end }}
{{- end }}


{{- if .Service }}
    {{- template "pairs" makeSlice "service" .Service }}
{{- end }}

{{- template "pairs" makeSlice "storage" .Storage }}

{{- define "pairs" }}
    {{- $pn := index . 0 | toPascal }}
    {{- $data := index . 1 }}

    {{- range $_, $v := $data }}
        {{- template "pair" makeSlice "storage" $v}}
    {{- end }}
{{- end}}

{{- define "pair" }}
    {{- $pn := index . 0 | toPascal }}
    {{- $fn := index . 1 }}

    {{- $fnk := $fn.Name | toPascal }}

    // pair{{ $pn }}{{ $fnk }}Map holds all available pairs
    var pair{{ $pn }}{{ $fnk }}Map = map[string]struct{}{
        // Required pairs
        {{- range $_, $pair := $fn.Required }}
        {{ $pair.FullName }}: struct{}{},
        {{- end }}
        // Optional pairs
        {{- range $_, $pair := $fn.Optional }}
        {{ $pair.FullName }}: struct{}{},
        {{- end }}
        // Generated pairs
        {{- range $_, $pair := $fn.Generated }}
        {{ $pair.FullName }}: struct{}{},
        {{- end }}
    }

    // pair{{ $pn }}{{ $fnk }} is the parsed struct
    type pair{{ $pn }}{{ $fnk }} struct {
        // Required pairs
        {{- range $_, $pair := $fn.Required }}
        {{ $pair.Name | toPascal }}    {{ $pair.Type }}
        {{- end }}
        // Optional pairs
        {{- range $_, $pair := $fn.Optional }}
        Has{{ $pair.Name | toPascal }}   bool
        {{ $pair.Name | toPascal }}      {{ $pair.Type }}
        {{- end }}
        // Generated pairs
        {{- range $_, $pair := $fn.Generated }}
        {{- if not $pair.Default }}
        Has{{ $pair.Name | toPascal }}   bool
        {{- end }}
        {{ $pair.Name | toPascal }}    {{ $pair.Type }}
        {{- end }}
    }

    // parsePair{{ $pn }}{{ $fnk }} will parse *types.Pair slice into *pair{{ $pn }}{{ $fnk }}
    func parsePair{{ $pn }}{{ $fnk }}(opts []*types.Pair) (*pair{{ $pn }}{{ $fnk }}, error) {
    result := &pair{{ $pn }}{{ $fnk }}{}

    values := make(map[string]interface{})
    for _, v := range opts {
        {{- if not (hasPrefix $fnk "New") }}
        if _, ok := pair{{ $pn }}{{ $fnk }}Map[v.Key]; !ok {
            return nil, services.NewPairUnsupportedError(v)
        }
        {{- end }}
        values[v.Key] = v.Value
    }

    var v interface{}
    var ok bool

    // Handle required pairs
    {{- range $_, $pair := $fn.Required }}
        {{- $pkey := $pair.Name | toPascal }}
        v, ok = values[{{- $pair.FullName -}}]
        if !ok {
            return nil, services.NewPairRequiredError({{- $pair.FullName -}})
        }
        if ok {
            result.{{ $pkey }} = v.({{ $pair.Type }})
        }
    {{- end }}
    // Handle optional pairs
    {{- range $_, $pair := $fn.Optional }}
        {{- $pkey := $pair.Name | toPascal }}
        v, ok = values[{{- $pair.FullName -}}]
        if ok {
        result.Has{{ $pkey }} = true
        result.{{ $pkey }} = v.({{ $pair.Type }})
        }
    {{- end }}
    // Handle generated pairs
    {{- range $_, $pair := $fn.Generated }}
        {{- $pkey := $pair.Name | toPascal }}
        v, ok = values[{{- $pair.FullName -}}]
        if ok {
        {{- if not $pair.Default }}
            result.Has{{ $pkey }} = true
        {{- end }}
        result.{{ $pkey }} = v.({{ $pair.Type }})
        }
        {{- if $pair.Default }}
            if !ok {
            result.{{ $pkey }} = {{ $pair.Default }}
            }
        {{- end }}
    {{- end }}

    return result, nil
    }
{{- end }}