// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/function.tmpl (258B)
// tmpl/info.tmpl (1.442kB)
// tmpl/open.tmpl (1.125kB)
// tmpl/operation.tmpl (883B)
// tmpl/pair.tmpl (2.267kB)
// tmpl/service.tmpl (7.616kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _functionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x4a\xc4\x40\x10\x45\xf7\x39\xc5\x67\xc8\x22\x33\x68\x1f\x40\x70\x15\x74\x25\x32\xa8\x17\x28\xda\x1e\x6d\x4c\x55\x9a\x54\x05\x07\xda\xba\xbb\xf4\x44\x04\x5d\x15\xd4\xff\xbc\xff\x6a\xbd\x46\x7f\x92\x0f\xdc\xdc\xa2\x0f\xf7\xab\xc4\xf0\x48\x9c\xf0\x05\x9b\x47\xe2\x34\xc1\xbd\x3b\xad\x12\x31\x28\x0e\xb5\xa2\xbf\xe4\x5a\x28\x6e\xa5\x23\x69\xa4\xd6\xda\xa3\xd6\x46\x72\x1f\xa2\x9d\x11\x67\xb1\x74\xb6\x30\x6e\xf7\xaa\xa5\x1b\xff\x48\x0b\xb1\x86\x97\x25\xf3\x03\xa9\x85\x67\x5b\xb2\xbc\xdd\xc9\xab\x7e\x66\x7b\x1f\x67\x66\x72\xc7\x5c\x0c\x87\x42\x79\xf9\xb7\xe9\xde\x1e\xcd\xf8\xef\xfa\xf0\xcb\x7f\x4a\xba\x4e\xa6\x3f\xdc\x8b\x58\x07\x00\x85\x24\xc7\x61\x97\xb9\x4c\x89\x93\x18\xb2\xed\xf6\x9d\x7f\x07\x00\x00\xff\xff\x5b\xb1\x71\xf7\x02\x01\x00\x00")

func functionTmplBytes() ([]byte, error) {
	return bindataRead(
		_functionTmpl,
		"function.tmpl",
	)
}

func functionTmpl() (*asset, error) {
	bytes, err := functionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf3, 0x17, 0x45, 0xc4, 0x8, 0xb1, 0x57, 0xf3, 0x99, 0x7b, 0x1f, 0xcd, 0xe4, 0x30, 0x7e, 0x3, 0x30, 0xba, 0x28, 0xed, 0x36, 0x1c, 0xd3, 0x4a, 0x24, 0xfc, 0x10, 0x73, 0xfe, 0xf7, 0xda, 0x75}}
	return a, nil
}

var _infoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcf\xab\x9b\x4e\x14\xc5\xf7\xfe\x15\xe7\x1b\xf2\x40\xc1\xaf\xee\x5b\xb2\x28\x2f\xa5\xbc\x45\xf3\x0a\x09\x5d\xb4\x94\x32\xd1\xab\x48\xc6\x19\x99\x19\x2d\x69\x9e\xff\x7b\x19\x9d\xd4\x1f\x49\x4a\x5a\xde\x26\x44\xef\xb9\xe7\xde\xcf\xb9\xc6\x31\x1e\x65\x4a\xc8\x49\x90\x62\x86\x52\xec\x8f\xc8\xe5\xef\x67\x14\xc2\x90\x12\x8c\xc7\x49\x99\xbe\xc5\xfa\x19\x9b\xe7\x1d\xde\xaf\x9f\x76\x91\x57\xb1\xe4\xc0\x72\x2b\xc9\xa4\xe7\xc5\x31\xde\x71\x0e\xd6\xb0\x82\xb3\x3d\x27\x94\x64\x58\xca\x0c\x8b\xbc\x44\x0a\x6d\xe0\x7b\xa7\xd3\xff\x50\x4c\xe4\x84\xe5\xf7\x10\xcb\x06\x6f\x56\x88\x9e\x44\x26\x35\xda\xd6\x03\x00\xab\x58\x56\x82\x95\x64\x6b\xcb\x26\xda\xd8\xbf\x2f\x30\xf2\x13\xd3\x09\xe3\x63\x5d\x91\x59\xc1\xba\xd0\x15\x67\xc7\x4e\xe7\x8a\x33\xa3\xd5\x0d\x99\x95\x90\x48\x87\x47\xab\xdb\x26\xb2\x9a\x0d\xec\x0b\x8f\xcc\x50\x2e\xd5\xf1\xb2\xd6\x4f\x69\x5b\xac\xb0\xe8\xb5\x6e\xca\xc2\x1b\x8d\x08\xbc\xbb\xf0\x5f\x8b\xfe\x1f\xe0\x35\xa9\xa6\x48\x68\xe3\xc6\x57\xaa\x10\x26\xc3\xe2\x41\x3f\xe8\x05\xfc\x2b\xd9\x04\xdd\xdb\x2b\xc1\x04\x67\xdb\x38\xc6\x07\x32\x93\x90\x7e\x14\x9c\x23\x27\x83\x49\x54\x68\x18\xaf\x09\x99\x92\xe5\xe8\xbb\xb1\x16\x59\x2d\x12\xf8\xe5\xc5\x86\x6d\x1b\xcc\xbd\xfd\x00\x7e\xef\xba\x3b\x56\xf6\x45\x88\xbd\x94\x3c\x00\x4e\x9d\x55\x13\x42\x1e\x2c\x5a\x19\x95\x5f\x2f\xfd\xc6\x56\xdf\xba\x86\x22\xc3\x7f\xf2\xe0\xba\x87\xd0\xbf\x90\x92\x9f\xbb\x7d\x47\x91\x2b\x32\xb5\x12\x8e\x6a\xac\x08\x91\x31\xae\x69\x48\x9d\xeb\xdb\x8d\xdd\xe2\x2f\xf8\xf9\xa7\xfe\xe1\x6a\xfd\xaf\x33\x68\xa2\x29\x7c\x10\xc2\xa8\x9a\x9c\xf0\x7c\x8e\x8f\xb5\x36\x2e\xb6\x21\xfc\xd7\xbc\xc9\x68\xc0\xe8\x2e\x93\xcd\xce\xf7\x70\x8b\xdf\x71\x8d\x39\xda\x0c\x6a\x7b\x15\x48\xdf\x00\x2a\x84\x91\x7f\x01\xb4\x9d\xc1\x34\x53\x98\xe0\x4a\x93\xe3\xbb\x03\x0c\x2b\x34\x93\x2c\x1c\xd9\xe8\xd0\xbf\x02\x00\x00\xff\xff\x72\xdd\x2f\x33\xa2\x05\x00\x00")

func infoTmplBytes() ([]byte, error) {
	return bindataRead(
		_infoTmpl,
		"info.tmpl",
	)
}

func infoTmpl() (*asset, error) {
	bytes, err := infoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0x3c, 0xa5, 0x63, 0x49, 0xa1, 0x4f, 0xb6, 0xc6, 0xa1, 0x7d, 0xfa, 0x3c, 0x28, 0xef, 0x86, 0xa3, 0xaa, 0x1b, 0xf2, 0x4e, 0xdd, 0x7a, 0xeb, 0x3a, 0xbf, 0x42, 0xf, 0xcd, 0x6a, 0x44, 0xe3}}
	return a, nil
}

var _openTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\x4f\x8b\xd4\x40\x10\xc5\xef\xfd\x29\x1e\xc3\x1e\x66\x24\x76\x83\xc7\x95\x3d\xb9\x0a\x1e\x9c\x15\x9c\x83\x20\x22\xbd\x9d\xda\xd8\x38\xe9\x6e\xab\x3b\x59\x86\x90\xef\x2e\xf9\x6b\xd4\xc0\xec\x78\xda\x43\x48\x52\xf5\xfa\x75\xbd\x1f\xa5\x14\xde\xf8\x9c\x50\x90\x23\xd6\x89\x72\xdc\x9f\x50\xf8\xf9\x1f\xb5\xd5\xb0\x2e\x11\x3b\x7d\x54\xa6\xcc\x95\xf1\x4c\x55\xb2\xc7\xf8\x1a\xb7\x77\xd8\xdf\x1d\xf0\xf6\xf6\xfd\x41\x8a\xa0\xcd\x0f\x5d\x10\xe6\xbe\x10\xb6\x0c\x9e\x13\xb6\x02\x00\x36\x85\x4d\xdf\xab\x7b\x69\x7c\xa9\x3e\x57\xda\x3d\x7a\x15\x93\x67\x5d\xd0\xe6\x4c\x5f\xa5\x53\xa0\xb8\x11\x4d\xf3\x12\xac\x5d\x41\xb8\xfa\x96\xe1\x2a\x72\x8d\xeb\x1b\xc8\x4f\xc4\xb5\x35\x14\xd1\xb6\xe7\x8c\xe2\x28\x55\x4d\xd3\x9f\x97\x7b\x5d\x12\xda\x76\xf0\x26\x97\x77\x1e\x3b\x21\xba\x0b\xe1\x03\xb9\x77\x95\x33\x78\xa8\x9c\xd9\xfa\x90\x20\xa5\x7c\xd1\xcf\x22\x3f\x6a\xcb\x3b\x6c\xbb\x11\x46\xef\x69\x0c\xce\xfa\x0a\xfd\xae\x0f\x6f\xce\x40\xcc\xdd\xe3\x79\x27\x44\xad\x79\xbe\xe0\x83\x0e\xb8\x41\xa9\xc3\x97\x98\xd8\xba\xe2\xeb\xd4\x68\xfe\x8e\x5c\x52\xd2\xab\x99\x3b\x9d\x7d\x00\xfd\xc4\xf6\x48\x6e\x10\xf6\xe1\x62\xd0\x86\xe2\x0e\xaf\x26\xe5\xa0\x5e\x28\xd0\xb6\xf2\x70\x0a\x74\xfd\x6f\x79\x4f\x8f\xd9\x6c\x3f\xd2\x59\x7c\xb6\x0b\x50\x53\xfa\xff\x02\xb6\x06\x66\x69\xb8\x0a\x68\x29\x78\x06\xa0\xe6\x34\x4f\x05\x36\xae\xc5\x39\x60\x17\xec\xd2\xd2\x72\x1d\xd9\x42\x70\x09\xb2\xa7\x43\x98\xe6\xfb\x33\xf5\xaf\x00\x00\x00\xff\xff\x16\x4c\xf1\x3f\x65\x04\x00\x00")

func openTmplBytes() ([]byte, error) {
	return bindataRead(
		_openTmpl,
		"open.tmpl",
	)
}

func openTmpl() (*asset, error) {
	bytes, err := openTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "open.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe8, 0xd9, 0xae, 0x42, 0xc3, 0x8, 0xb4, 0xda, 0x1f, 0x3a, 0x28, 0x8, 0x64, 0x87, 0xdd, 0xcc, 0x9f, 0x22, 0xb, 0x6f, 0xc1, 0x70, 0x2b, 0x8c, 0x74, 0xa2, 0x2d, 0xfc, 0x64, 0x1c, 0xa, 0x9d}}
	return a, nil
}

var _operationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\x4d\x4f\xe3\x30\x10\xbd\xfb\x57\x8c\xac\x1c\x12\xa9\x9b\xdc\x57\xda\xd3\x02\x12\x17\xa8\xe0\x00\x37\xe4\xba\xd3\x74\xd4\xc6\x36\xf6\x14\x5a\x85\xfc\x77\xe4\xc4\x29\x6d\x45\x05\x42\xdc\xc6\x33\xef\x3d\xbf\xf9\x70\x4a\xaf\x54\x8d\x10\xd8\x7a\x55\xa3\x10\xd4\x38\xeb\x19\x72\x01\x00\x20\xb5\x35\x8c\x5b\x96\xc3\x8b\xac\x14\x43\x54\x13\x2f\x37\xb3\x52\xdb\xa6\x7a\xdc\x28\xf3\x6a\xab\x24\x50\xb9\x55\x5d\x05\xac\x1b\x34\x23\xeb\x3c\x96\x77\x0e\xc3\xf7\x50\x15\x99\x85\x95\xa2\x10\xa2\x6d\xff\x80\x57\xa6\x46\xc8\x9e\x26\x90\x11\xfc\xfd\x07\xe5\xb5\x61\xf4\x0b\xa5\x31\x40\xd7\x89\xb6\x85\x8c\xca\x0b\x0c\xda\x93\x63\xb2\x26\x26\xa3\x0c\xa4\x0a\x05\xb7\x56\xbb\x1b\xd5\x20\x74\x1d\xd0\x48\x86\xb6\xf7\x12\x7f\xa0\x05\x58\x0f\x39\x3e\x47\x7c\x0f\x94\x01\xfd\x0b\x69\xf4\xb2\x38\xc9\x0f\x3e\xbd\x2c\xba\xae\xe7\xdf\xb3\x27\x53\xe7\x05\x84\x3e\xd8\x6b\xa2\x99\x47\x23\xfb\xf7\x41\x17\xd8\xcc\x70\x1e\x3b\xc9\xa8\xbc\xec\xe3\xa4\x35\x60\x13\xe0\xc4\xf8\x19\xe1\x43\x5d\xeb\x92\xe8\xad\x0b\x23\xa3\xaa\x7a\x45\xeb\x06\xff\x6f\xc0\x76\xaa\x82\x56\xeb\x38\x8b\x54\x39\x99\xdd\xe8\xe2\x53\x4e\x9e\x2a\x57\xd6\x37\x8a\xa7\xca\xab\x26\xfe\x55\xc0\x71\xe1\x0e\xc3\x66\xcd\xe1\x81\x78\x39\x1d\x8e\xee\x68\x7c\x32\x52\xbe\xf4\x17\xd9\xff\x87\x9b\xfc\x89\xd5\x03\x7a\xae\x79\x0b\xe9\xbc\xcb\x94\x9b\xfc\x72\x27\x6d\x3b\xae\xa6\x13\x1f\x7b\x7a\x0f\x00\x00\xff\xff\xcc\xf8\x47\xf9\x73\x03\x00\x00")

func operationTmplBytes() ([]byte, error) {
	return bindataRead(
		_operationTmpl,
		"operation.tmpl",
	)
}

func operationTmpl() (*asset, error) {
	bytes, err := operationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa5, 0x93, 0x1, 0x64, 0xa5, 0x2, 0xc, 0xc7, 0x88, 0x7d, 0x91, 0x51, 0x72, 0xf, 0x45, 0x5e, 0x5e, 0x7b, 0x8e, 0x23, 0x4a, 0x31, 0x4d, 0xa5, 0x5e, 0x38, 0x61, 0x7b, 0x8c, 0x1a, 0x3f, 0xa5}}
	return a, nil
}

var _pairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x41\x6f\xdb\x3a\x0c\xbe\xfb\x57\xf0\x19\x41\x61\x3f\xb8\xf6\x3b\xfb\x21\x87\x61\xcd\x61\x18\xd6\xf4\x10\x6c\x03\x8a\x62\x50\x65\xc6\x11\x22\xcb\x82\x24\xab\x0b\x3c\xff\xf7\x41\x72\x92\xda\x71\xd2\xe6\x32\x60\x3a\x59\xe2\x27\xf2\xe3\x47\x52\x49\x96\xc1\xc7\xba\x40\x28\x51\xa0\x22\x06\x0b\x78\xde\x41\x59\x1f\xf7\xc0\x84\x41\x25\x08\xcf\x68\x55\xfc\x0f\x77\x4b\xb8\x5f\xae\x60\x71\xf7\x69\x95\x06\x92\xd0\x2d\x29\x11\x24\x61\x4a\x07\x01\xab\x64\xad\x0c\x44\x01\x00\x40\x48\x6b\x61\xf0\xa7\x09\x83\x7e\x5b\x32\xb3\x69\x9e\x53\x5a\x57\xd9\xf7\x86\x88\x97\x3a\xd3\xa6\x56\xa4\xc4\xf0\x1d\x7b\x26\xb7\x65\xa6\xb1\xac\x50\x98\xab\xb0\x28\x0a\x59\xb3\x2b\xc1\x54\x61\x81\xc2\x30\xc2\xaf\x82\x6f\x8c\x91\x94\xb3\x6b\xa8\x98\x9d\x44\x1d\x06\x71\x10\x64\x19\x7c\xe0\x1c\x88\x25\x8c\x93\x67\xbe\xd7\x2b\x0d\x68\x2d\xb4\x93\xab\x6d\x6f\x41\x11\x51\x22\xcc\x7e\x24\x30\xb3\x90\xcf\x21\x7d\x70\x18\xe8\x3a\x1f\xc6\x21\x66\x52\x90\x0a\x9d\x6d\x66\xd3\x7b\xf7\xf9\x0b\x4c\xfd\x40\x34\x25\xfc\x80\xcb\x32\x68\xdb\x03\xb2\xeb\xe0\x85\x71\xee\x4f\x6c\x7a\x87\x9a\x2a\x26\x0d\xab\xc5\xab\xd7\x01\x74\x0e\x61\x0f\xbc\xef\x0f\x42\x4f\x0b\x45\xe1\xd0\x71\xf0\x0e\xc9\x6b\x08\x66\x19\x7c\x63\x66\x33\x25\x48\xa4\xe4\x3b\x18\x45\x07\x4b\x78\x83\x60\x6a\x58\x7a\xca\xda\xdd\x5e\x6d\x98\xf6\xda\x01\xd3\xd0\x68\x2c\x9c\xfd\x6c\x76\xeb\x46\xd0\x49\xb0\xc8\xee\xc1\xab\x9d\x74\xfb\x18\xfe\xf5\x35\xf2\x59\x40\xeb\x25\x51\x68\x1a\x25\xe0\xe6\xd5\xd0\x9f\xbb\xf5\x19\x77\xf9\x48\xb3\xe4\x68\xfa\xea\xd8\xe6\x60\xfb\x93\x2e\xe8\x86\xe2\x39\xea\x0f\x44\x69\xec\xb3\x95\xfe\x93\xc0\xf6\xd6\x42\x45\xa4\xcb\xc1\xf7\x03\x68\xce\x28\xa6\x3d\x77\x8f\x8f\x2a\x07\x78\xd4\x46\x31\x51\x3e\xf9\x39\x5c\x13\x8a\x6d\x17\x43\xf4\xf8\x34\x20\x9f\x00\x2a\x55\xab\x78\x9f\x44\xef\x2e\x9f\x43\x45\xb6\x78\x8a\xfc\x2f\x01\x8e\x22\xaa\xe2\xb8\x1f\x4c\x4b\x94\xbb\xdd\x7b\xe8\x8f\xd6\xb5\x82\x6d\x02\xbe\xc4\x7d\xc9\x2b\x78\x95\xc1\x5d\x90\x16\x06\x74\x8e\x26\xfd\xc2\x0c\xdd\xc0\x76\x80\x7e\xbf\xb7\x87\xc8\x6b\x7a\xfc\xb0\x28\xd1\x38\x2a\x47\x3e\x32\x0f\xf8\x28\x1f\xd5\xa6\x91\xd3\x21\x1e\x90\x9b\xb8\x3a\xf6\xc6\xd4\x97\x17\xd6\xc2\x1c\x94\x9d\xd8\x1c\x75\xb6\x76\xd7\x7d\xdd\xd4\x29\xd5\x63\x8c\xbe\x94\x97\x9c\xfb\x32\xc2\x1c\xda\xf6\xe8\xa9\xeb\x22\x65\xe3\xb3\x78\xb6\xf6\xf0\x7f\xe6\x20\x18\x3f\x93\xd4\x61\xed\x5b\x5a\x30\x9e\xc0\xcd\xc2\x55\xf9\x32\x76\x29\x73\x08\x7d\x83\x86\xc9\x45\xd0\x42\xa9\xdc\x85\xbe\x8c\x78\x63\x52\x4e\x97\xd3\x3b\x3f\x3c\x3d\x7b\xf1\xdf\x88\x3d\x1e\xb4\xd3\x35\x55\x7d\x7a\x32\x18\xcc\x53\x53\x81\x6b\xd2\x70\x73\xbe\x3c\x7f\x46\xc6\x85\x52\x6e\x18\x5c\xe2\x5f\x98\xae\x88\xa1\x9b\xbf\x5d\xd6\x6e\x34\xdb\x67\xa4\xbc\x28\xa3\xfb\x47\xc0\x44\x83\xc1\xd4\x55\xff\x64\xcd\xdd\x4f\x01\x8a\x22\xf2\xdb\x64\xf4\x0c\xfb\xe4\xb7\xc9\x81\xaa\xb4\x5d\xbc\x7f\x6c\x87\x0f\xf7\xfe\xa2\x60\x3c\xe8\x82\xdf\x01\x00\x00\xff\xff\x92\x3d\x03\x2f\xdb\x08\x00\x00")

func pairTmplBytes() ([]byte, error) {
	return bindataRead(
		_pairTmpl,
		"pair.tmpl",
	)
}

func pairTmpl() (*asset, error) {
	bytes, err := pairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0x86, 0xc3, 0x97, 0xca, 0x3a, 0xb5, 0x39, 0x37, 0x2e, 0x61, 0x51, 0x68, 0x95, 0x43, 0xa4, 0x9c, 0x13, 0x68, 0xe5, 0xb2, 0xc7, 0x46, 0x17, 0xaa, 0xc8, 0xb1, 0xbe, 0x4f, 0x28, 0x38, 0xe1}}
	return a, nil
}

var _serviceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x5b\x6f\xdb\xbe\x15\x7f\xf7\xa7\x38\x7f\xc1\x2d\xa4\xc2\x95\xb6\x57\x17\x7e\x59\xd2\xa6\x45\xb7\x24\x58\xb2\x75\x58\x1b\x04\x8c\x44\xd9\x84\x25\x52\x25\x69\x25\x9e\xab\xef\x3e\xf0\x22\x89\x92\x25\xc7\xee\xd2\xce\x0f\xad\x2d\x9e\xeb\xef\x5c\xa9\x44\x11\x9c\xb1\x04\xc3\x12\x53\xcc\x91\xc4\x09\x3c\x6c\x61\xc9\x9a\xdf\x50\x12\x04\x84\x4a\xcc\x29\xca\xa2\x38\x4f\x22\x81\x79\x49\x62\xfc\x0e\xce\xaf\xe0\xf2\xea\x16\xde\x9f\x7f\xba\x0d\x27\x05\x8a\xd7\x68\x89\x61\xb7\x83\xf0\x12\xe5\x18\xaa\x6a\x32\x21\x79\xc1\xb8\x04\x7f\x02\x00\xe0\xc5\x8c\x4a\xfc\x24\x3d\xf3\x8b\x30\x6f\x62\xbe\x2d\x89\x5c\x6d\x1e\xc2\x98\xe5\xd1\xbf\x36\x88\x3e\xb2\x48\x48\xc6\xd1\x12\x7b\xcf\x9c\x47\xc5\x7a\x19\x09\xbc\xcc\x31\x95\x47\xd1\x62\x9a\x14\x8c\x1c\x49\x1c\x73\x9c\x60\x2a\x09\xca\x8e\x22\x5f\x49\x59\xc4\x19\x39\xc6\x14\x8b\xa0\x78\x96\x50\x6e\x8b\x9a\xaa\x10\xcf\x12\x46\x05\x22\xfc\x48\xa1\x11\xa1\x29\xf3\x26\xc1\x64\x52\x22\x0e\xf7\xd0\x3a\x1b\x5e\x73\x56\x92\x04\x73\x7b\x52\x63\xd6\x7f\x6e\x71\x0f\x6f\xcc\xff\xf5\x53\xa3\x24\xbc\x31\xff\xb7\xc4\xc6\xe3\xf0\xc6\x7c\x79\xcf\x39\xab\xcf\x5a\xe0\xc2\xab\x42\x12\x46\xc5\x64\x12\x45\x70\xbb\x2d\x30\x10\x01\x72\x85\x41\x99\x0c\x29\xe3\x9d\xec\x8a\x19\x15\xd2\x90\x2d\xc0\x73\x4e\x3c\xcd\x6f\x35\x01\x2a\x11\xc9\xd0\x43\x86\x41\xc3\x13\x5a\x3e\x7f\xb2\xdb\xbd\x05\x8e\xe8\x12\xc3\xf4\x7e\x06\xd3\x12\xe6\x0b\x08\xaf\x15\x8d\x92\xae\x40\x54\x14\x24\x05\xca\x24\x4c\xcb\xf0\x22\x63\x0f\x28\x73\xcf\xa6\x05\x55\x1a\xe7\x0b\x75\xac\x95\xff\x00\xc9\xae\x91\x88\x5b\xba\x28\x52\x46\x5b\xca\xaa\x82\x47\x92\x65\xfa\x49\x19\x9e\x63\x11\x73\xa2\x5d\xae\xa9\x95\xfa\x0e\xb9\xf1\x6c\x5a\xbb\x76\x6f\x38\x1b\x47\x6b\x4b\x30\x4d\x94\x08\xe7\x6b\x30\x02\x82\x8a\xfb\x73\x20\x7c\x52\x34\x2f\x09\x82\x95\xa1\x7c\x26\xa2\xc8\xd0\xb6\x8e\x21\xd8\x8f\x23\x68\x31\x42\xe6\xf8\xa6\x7e\x2a\x1b\x0d\x18\x37\x31\x2b\x7a\x4a\xcd\xc1\x19\x92\x78\xc9\xf8\x76\xff\x6c\x0c\xde\xb7\xa7\xc0\x7b\x38\x7f\xc6\x60\x3b\x06\xb2\x28\x82\x2f\x44\xae\xf6\xf3\x06\x15\x45\xb6\x85\x8e\x91\x50\xa2\x6c\x83\x41\x32\xa8\x8b\x47\xd5\xce\x8a\x08\x9d\xee\xaa\x80\x36\x02\x27\xea\x7c\x30\xe9\xd2\x0d\x8d\xf7\x94\xf9\xa5\x25\xd6\xc5\x55\x55\x01\xbc\xd1\x4d\x43\x7b\x07\xbb\x26\x6a\x1c\xcb\x0d\xa7\xf0\xba\x3d\x6c\xcf\x3e\xe3\xed\x7c\x2f\x9d\x67\xcd\xf1\x3f\x95\xd5\x73\x28\xcd\x93\x6a\xd2\x01\xd7\xf9\x3a\x02\xf3\x09\x19\xfa\x52\x09\x7a\x62\x7e\x2a\x06\xdb\xf5\x2e\xad\xfa\x82\x13\x2a\x53\xf0\x5e\x89\x57\xc2\x03\x7f\x20\x75\x03\xfd\x74\x20\x6f\x03\xa7\x9d\x5c\x60\xb9\x9f\x19\x4b\x2c\x07\xf3\x22\xe5\x2c\x87\x1c\x4b\x94\x20\x89\x42\x2d\x42\x87\xbc\x27\xc4\xcf\x75\x63\x08\xfb\x56\xab\xd8\xfb\x9d\x5c\x98\xc1\x03\x63\x59\x00\x36\x0d\xca\x19\xb0\xb5\x72\x2e\x0f\x2f\xb0\xf4\xeb\xaa\xec\xca\x70\x35\x05\x9a\x8d\xa4\xf0\x07\x5b\x5b\x19\x2d\xf8\xff\xc6\x9c\xe9\xcc\x70\xa1\xb7\x59\x66\xac\x70\x29\x66\x90\xa2\x4c\xe0\x16\xfd\x4c\x8c\x33\x6a\xf3\x7f\xc0\x7f\x0e\xf1\xb7\xd1\x33\xff\x5a\x01\x65\xd8\x85\x20\x98\x81\xe4\x1b\x6c\x09\xeb\xb0\x08\x83\x68\x1b\x00\x1d\x17\x31\x12\x17\x42\x25\x1b\x8a\x8b\x38\x36\x2e\x33\xd8\x2b\xd2\x11\x4a\x8b\xb2\x75\x26\x0f\x6f\x8e\x8a\xd3\x0c\xca\xc0\x81\x62\xa4\x3a\x07\x8b\x53\x49\x13\x05\x8a\x71\xa7\x42\x25\xce\x8b\x4c\x2d\x94\x9e\x6a\x4c\x1e\xe4\x68\x8d\x6f\x32\x35\x9c\xfc\xa1\xc2\x0c\xf4\x43\xfc\x38\x2e\x42\xb8\x32\x6a\x09\xd3\x32\xfc\xb0\xa1\xf1\x88\x66\x05\xb1\x6e\x92\xcf\xb1\xf6\x7d\x4c\x70\x4a\x68\xab\xb7\x3b\xfe\x94\xd3\x84\x26\xf8\x09\x42\xf8\xd3\x48\x73\x99\xaa\x38\xbb\x84\x7f\xd6\xb2\xeb\xe3\x3e\x86\x86\xbc\x37\x20\xc7\x11\x54\x46\x4c\xcb\xfd\x46\x64\xbf\x0e\x79\x71\xd8\x09\xf7\x2c\xa5\xe3\x76\x4f\x53\xaa\xab\x7f\x9a\xd2\xa1\xd6\x5a\xd7\x46\xd1\xcc\x01\x9b\x65\x8a\xad\xaa\xfe\x86\x0a\x58\xb1\x2c\x11\x80\xd4\x70\xeb\x2e\x6a\xa6\xbd\x20\x7e\x88\x79\x01\x39\x2a\xbe\x0a\xc9\x09\x5d\xde\x09\xc9\x37\xb1\xdc\x55\xed\x0c\x8a\x22\xf8\x3b\xfe\xbe\x21\x1c\x27\x8e\xcc\x01\xcc\xf5\xa8\xb4\x6e\x34\x1c\xfd\xee\x8f\x08\x0f\x3f\x6c\xb2\xcc\x16\xcb\x1c\x1a\x85\xce\x5c\xeb\xf5\x11\x6b\x85\x19\xcd\x28\x3b\xde\x8a\x86\xe3\x05\xad\xb8\x68\xae\x78\x47\x9b\xd1\xb2\xbc\x84\x1d\xcf\x26\x44\xbd\xef\x17\x88\xab\xa5\xc5\x88\xd4\x3c\xfa\x06\x30\xc6\x65\xe8\x9c\xc5\x44\xfb\x07\x5f\xef\x9c\xb5\x65\xf2\x0b\xb3\x62\x3f\xf3\x3b\xc7\xb6\x41\xff\x96\x1c\xf9\x88\xc4\x61\xb3\xd4\xf4\x3e\xd6\x83\x93\x7d\x78\xb9\x0c\x6b\x37\x3a\xad\xfe\x1c\xa7\x68\x93\xc9\xff\xc5\xd3\x3d\x7b\x5f\x28\x7c\x6e\x52\x73\x81\xaf\x47\x72\x54\x6f\x03\x9a\xa2\xb3\x4c\x0b\xdd\xbf\xf5\x36\xf0\x66\x24\xbd\xdb\xe5\xe0\x90\x02\x9f\x15\xb2\x97\xf2\x01\xf8\x63\x32\x67\x80\xd5\x0d\x3c\x68\x76\x03\xa1\xd0\x9d\x2f\xe0\xf5\x08\x43\xaf\xb6\xe6\xa0\xd4\xcd\x5c\x00\xf4\x5e\x23\xf4\x2a\x88\xd6\xd8\x77\x1a\xb3\x7e\x7b\x94\xa2\x18\xef\xec\xf6\xa7\x6e\xf2\xf7\x6a\x81\x99\x2f\x6c\x5a\x68\xe3\x77\x43\xf1\xf7\x57\x48\x5c\x73\x9c\x92\x27\x63\x8a\x77\x89\x1f\xbd\xc0\x8d\x07\x49\x95\x30\xb3\x85\x8e\xcf\x8a\xaf\x65\xf8\x19\x6f\xef\xde\x39\x7b\x67\xfd\xb1\x9b\x11\x25\xd9\xac\x7d\x51\x71\x89\x1f\x15\x86\xff\xa0\x62\x53\x14\x8c\x4b\x9c\xe8\x77\x16\xbe\xdd\x8a\xa0\xd9\x8c\x46\xb2\xcb\xc0\x61\xb5\xc2\x02\xca\x50\xaf\x9d\x2e\x62\xd6\x4b\xc6\xbb\x1d\xa6\x53\xda\x83\x25\xa2\xa6\x62\x09\x0e\xac\xcd\x53\xb6\x6e\xd3\xde\xdd\x61\x6c\x86\x7e\x44\x34\xc9\x30\xf0\xfd\xf6\x77\x72\xeb\x53\x4b\xc3\x1a\x6f\x35\xd1\x48\x15\xb5\x58\xe8\xf0\x2c\x6a\x4c\x0c\x73\x67\x80\xbc\xad\xaa\x3b\x37\xa0\xa7\x05\xa9\xb6\xd0\x44\x68\x58\xfc\x50\xd8\x14\xf8\xfb\x7a\x54\x29\xe8\x35\x5a\xfb\xa7\x5f\x12\xd8\x1b\x80\xdb\x0e\xfa\xf2\x7a\x29\xd0\x82\xcd\xf6\xfb\xfa\xc9\x73\xff\xd7\x82\xdd\xc1\xc0\xfa\x5f\x77\xd7\x06\x82\xe6\xc6\xf3\x4b\x40\x5a\x0e\x0c\x8e\x9f\x19\x1a\xbf\x0d\xa6\x63\x26\xd4\xd1\x70\x0e\xb4\x8f\x9f\x45\xd8\xb1\xed\xa0\x5d\x23\x35\x36\xa0\xb4\xd1\x38\x22\x69\xb4\x0b\xf6\xfb\x8f\xad\x60\xa3\x64\xa6\x2a\xd9\x36\xc3\xb1\xcb\x96\x73\x5b\xfb\x7f\x5f\xb8\x6a\x53\x4e\xb8\x74\x8d\xba\xf3\x12\x37\xaf\x63\x2f\x5e\xce\x02\x62\xbe\x0e\xbd\x74\x8e\xa2\x9a\x5c\xbf\x37\xac\xed\x34\x2b\x4b\xcc\xb1\x42\x00\x81\xfd\xeb\x0d\x3c\x6c\x95\x47\x2a\x13\x9c\xd7\x16\xbe\x80\x37\xbb\xdd\xb4\xa0\x55\x15\x38\x4a\xfd\xdd\x4e\xe9\xbc\x46\x1c\xe5\x22\xbc\xd1\xeb\x80\x7d\xa5\x64\x26\x8b\x4a\x05\xf7\xa0\xcd\xc7\x58\x3e\x29\xff\xac\xd6\xf0\x2f\x28\x5e\x2f\x39\xdb\xd0\xc4\x0f\xfa\x2f\x78\x44\xd8\x6a\xfc\x42\xe4\xea\xcc\xf0\xf8\xb1\x7c\x9a\x41\xc7\x82\x33\x94\x65\x98\xd7\x55\x33\x04\x93\xc3\x7f\x00\xb1\x43\x3e\xf7\x2c\x68\x3c\xb0\xcf\x7a\x16\x9d\x84\x49\x82\x53\xcc\xb5\x72\x3f\xe8\x56\xae\x6d\x5f\x72\x55\xe7\x84\x15\x7f\x8d\xe4\xca\x38\xdd\x2f\x5b\xdb\x24\x10\x4d\xc0\xc7\xdf\x2d\xb3\xe7\x05\xf6\x17\x05\xcf\xfe\xed\xa0\xbb\x6c\xb5\xec\x96\x65\x01\xde\xec\x9b\xf7\xcd\xf3\x86\x14\xf4\x9a\x9a\xfa\x60\xce\x61\x01\x22\x4c\x19\xcf\x91\x34\x13\xbb\x99\xe7\x57\x45\x6f\x45\x6d\xf5\x54\x15\x38\xbd\xce\x49\x02\xbd\xf6\x14\xf2\xf0\xfa\xac\x3e\xac\x90\x33\xab\xfe\xe0\x22\xad\x27\x50\xe0\x76\x7e\xc5\xf4\xc7\x42\x75\xac\xc1\xa5\xc4\x69\xc1\x83\xa9\xd9\x2d\xd2\x33\x94\x63\x55\xa3\x03\xe9\x79\xcb\x49\xfe\x57\x24\xa4\xcd\xd3\xf7\x34\x11\x8f\x3a\x9b\xf2\x1c\x55\x95\x72\x20\xd8\x6b\x99\xff\x0d\x00\x00\xff\xff\xb0\x5e\xd0\x51\xc0\x1d\x00\x00")

func serviceTmplBytes() ([]byte, error) {
	return bindataRead(
		_serviceTmpl,
		"service.tmpl",
	)
}

func serviceTmpl() (*asset, error) {
	bytes, err := serviceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb6, 0x39, 0x2, 0xcb, 0x91, 0x1f, 0x1b, 0x6e, 0xa3, 0xf0, 0x23, 0x77, 0x9a, 0x41, 0x10, 0xeb, 0x22, 0x34, 0x55, 0x35, 0xf7, 0x21, 0x6, 0xc8, 0x8f, 0x25, 0x40, 0xda, 0x68, 0x1d, 0x1f, 0xf7}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"function.tmpl":  functionTmpl,
	"info.tmpl":      infoTmpl,
	"open.tmpl":      openTmpl,
	"operation.tmpl": operationTmpl,
	"pair.tmpl":      pairTmpl,
	"service.tmpl":   serviceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"function.tmpl":  &bintree{functionTmpl, map[string]*bintree{}},
	"info.tmpl":      &bintree{infoTmpl, map[string]*bintree{}},
	"open.tmpl":      &bintree{openTmpl, map[string]*bintree{}},
	"operation.tmpl": &bintree{operationTmpl, map[string]*bintree{}},
	"pair.tmpl":      &bintree{pairTmpl, map[string]*bintree{}},
	"service.tmpl":   &bintree{serviceTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
