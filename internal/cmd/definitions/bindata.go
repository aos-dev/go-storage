// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/info.tmpl (1.442kB)
// tmpl/open.tmpl (1.162kB)
// tmpl/pair.tmpl (2.285kB)
// tmpl/service.tmpl (7.325kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _infoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcf\xab\x9b\x4e\x14\xc5\xf7\xfe\x15\xe7\x1b\xf2\x40\xc1\xaf\xee\x5b\xb2\x28\x2f\xa5\xbc\x45\xf3\x0a\x09\x5d\xb4\x94\x32\xd1\xab\x48\xc6\x19\x99\x19\x2d\x69\x9e\xff\x7b\x19\x9d\xd4\x1f\x49\x4a\x5a\xde\x26\x44\xef\xb9\xe7\xde\xcf\xb9\xc6\x31\x1e\x65\x4a\xc8\x49\x90\x62\x86\x52\xec\x8f\xc8\xe5\xef\x67\x14\xc2\x90\x12\x8c\xc7\x49\x99\xbe\xc5\xfa\x19\x9b\xe7\x1d\xde\xaf\x9f\x76\x91\x57\xb1\xe4\xc0\x72\x2b\xc9\xa4\xe7\xc5\x31\xde\x71\x0e\xd6\xb0\x82\xb3\x3d\x27\x94\x64\x58\xca\x0c\x8b\xbc\x44\x0a\x6d\xe0\x7b\xa7\xd3\xff\x50\x4c\xe4\x84\xe5\xf7\x10\xcb\x06\x6f\x56\x88\x9e\x44\x26\x35\xda\xd6\x03\x00\xab\x58\x56\x82\x95\x64\x6b\xcb\x26\xda\xd8\xbf\x2f\x30\xf2\x13\xd3\x09\xe3\x63\x5d\x91\x59\xc1\xba\xd0\x15\x67\xc7\x4e\xe7\x8a\x33\xa3\xd5\x0d\x99\x95\x90\x48\x87\x47\xab\xdb\x26\xb2\x9a\x0d\xec\x0b\x8f\xcc\x50\x2e\xd5\xf1\xb2\xd6\x4f\x69\x5b\xac\xb0\xe8\xb5\x6e\xca\xc2\x1b\x8d\x08\xbc\xbb\xf0\x5f\x8b\xfe\x1f\xe0\x35\xa9\xa6\x48\x68\xe3\xc6\x57\xaa\x10\x26\xc3\xe2\x41\x3f\xe8\x05\xfc\x2b\xd9\x04\xdd\xdb\x2b\xc1\x04\x67\xdb\x38\xc6\x07\x32\x93\x90\x7e\x14\x9c\x23\x27\x83\x49\x54\x68\x18\xaf\x09\x99\x92\xe5\xe8\xbb\xb1\x16\x59\x2d\x12\xf8\xe5\xc5\x86\x6d\x1b\xcc\xbd\xfd\x00\x7e\xef\xba\x3b\x56\xf6\x45\x88\xbd\x94\x3c\x00\x4e\x9d\x55\x13\x42\x1e\x2c\x5a\x19\x95\x5f\x2f\xfd\xc6\x56\xdf\xba\x86\x22\xc3\x7f\xf2\xe0\xba\x87\xd0\xbf\x90\x92\x9f\xbb\x7d\x47\x91\x2b\x32\xb5\x12\x8e\x6a\xac\x08\x91\x31\xae\x69\x48\x9d\xeb\xdb\x8d\xdd\xe2\x2f\xf8\xf9\xa7\xfe\xe1\x6a\xfd\xaf\x33\x68\xa2\x29\x7c\x10\xc2\xa8\x9a\x9c\xf0\x7c\x8e\x8f\xb5\x36\x2e\xb6\x21\xfc\xd7\xbc\xc9\x68\xc0\xe8\x2e\x93\xcd\xce\xf7\x70\x8b\xdf\x71\x8d\x39\xda\x0c\x6a\x7b\x15\x48\xdf\x00\x2a\x84\x91\x7f\x01\xb4\x9d\xc1\x34\x53\x98\xe0\x4a\x93\xe3\xbb\x03\x0c\x2b\x34\x93\x2c\x1c\xd9\xe8\xd0\xbf\x02\x00\x00\xff\xff\x72\xdd\x2f\x33\xa2\x05\x00\x00")

func infoTmplBytes() ([]byte, error) {
	return bindataRead(
		_infoTmpl,
		"info.tmpl",
	)
}

func infoTmpl() (*asset, error) {
	bytes, err := infoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0x3c, 0xa5, 0x63, 0x49, 0xa1, 0x4f, 0xb6, 0xc6, 0xa1, 0x7d, 0xfa, 0x3c, 0x28, 0xef, 0x86, 0xa3, 0xaa, 0x1b, 0xf2, 0x4e, 0xdd, 0x7a, 0xeb, 0x3a, 0xbf, 0x42, 0xf, 0xcd, 0x6a, 0x44, 0xe3}}
	return a, nil
}

var _openTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\x4f\x6b\xe3\x30\x10\xc5\xef\xfa\x14\x43\xc8\x21\x59\xbc\xd2\x3d\x4b\x4e\x9b\x16\x7a\x68\x52\x68\x0e\x85\x52\xca\xc4\x9e\xb8\xa2\xb1\x24\xc6\xb2\x43\x30\xfe\xee\xc5\xf1\x9f\xba\xad\x69\x9a\xf4\x10\x62\xcd\x3c\xbd\x79\xfa\x31\x4a\xc1\x7f\x1b\x11\xc4\x64\x88\xd1\x53\x04\x9b\x03\xc4\xb6\x3b\x43\xae\x11\xb4\xf1\xc4\x06\x77\x2a\x4c\x22\x15\x5a\xa6\xcc\xeb\x5d\xfa\x0f\x16\x2b\x58\xae\xd6\x70\xb5\xb8\x59\x4b\xe1\x30\x7c\xc5\x98\xa0\xeb\x0b\xa1\x13\x67\xd9\xc3\x44\x00\x00\x8c\x62\xed\x5f\xb2\x8d\x0c\x6d\xa2\x1e\x32\x34\x7b\xab\x52\x6f\x19\x63\x1a\x9d\xe8\x2b\x7f\x70\x94\x8e\x44\x51\xfc\x05\x46\x13\x13\x8c\x9f\x03\x18\xa7\x9c\xc3\x6c\x0e\xf2\x9e\x38\xd7\x21\xa5\x50\x96\xa7\x8c\xd2\x46\xaa\x8a\xe2\x78\x5f\x2e\x31\x21\x28\xcb\xda\x9b\x4c\x54\x79\x4c\x85\xa8\x06\x82\x75\x64\xae\x33\x13\xc2\x36\x33\xe1\xc4\x3a\x0f\x52\xca\x3f\xc7\x2c\xf2\x0e\x35\x4f\x61\x52\x45\x68\xbc\xdb\x18\x1c\x1c\x2b\xf4\x5e\xaf\xff\x39\x00\x62\xae\x7e\x96\xa7\x42\xe4\xc8\xdd\x80\x5b\x74\x30\x87\x04\xdd\x63\xea\x59\x9b\xf8\xa9\x6d\x14\x9f\x9f\x9c\x90\xc7\xc1\x37\x57\x3a\xbd\x05\x34\x51\x2d\x6a\x05\xed\xa9\xce\xd0\xaa\xeb\x1b\x4d\xaf\x41\x20\xd7\x07\x47\xb3\xaf\xe5\x25\xed\x83\x6e\x44\x43\xa8\xf7\x59\xf6\x60\xb5\x04\x2e\x82\x36\x04\xa7\x6f\x38\x08\xa9\x2f\x38\x1b\xd6\x47\x50\x97\xa1\xe9\xf2\xff\x14\x51\xb3\x0c\xa7\x10\x9d\xb1\x41\x7d\xcb\x61\x48\x3d\xc1\xa5\x90\x7e\xb5\x3f\x5d\xfe\x6f\x21\xbd\x05\x00\x00\xff\xff\xe4\x0a\x67\xc8\x8a\x04\x00\x00")

func openTmplBytes() ([]byte, error) {
	return bindataRead(
		_openTmpl,
		"open.tmpl",
	)
}

func openTmpl() (*asset, error) {
	bytes, err := openTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "open.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf8, 0xc8, 0x9a, 0x70, 0xbb, 0xb4, 0xb6, 0xf6, 0x20, 0x86, 0xe4, 0x9f, 0x1, 0x8b, 0x2c, 0x4, 0x41, 0x21, 0x32, 0xca, 0xf2, 0x78, 0x9d, 0x67, 0x75, 0x29, 0x7d, 0x8c, 0x12, 0x41, 0xaf, 0xb2}}
	return a, nil
}

var _pairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xc1\x6e\xdb\x38\x10\xbd\xeb\x2b\x66\x05\x23\x90\x16\x8a\xb4\x67\x2d\x7c\x58\x6c\x8c\xa2\x28\x1a\xe7\x60\xb4\x05\x82\xa0\x60\xa8\xb1\x4c\x98\xa2\x08\x92\x62\x6a\xa8\xfa\xf7\x82\x94\xed\x48\x96\x9d\xf8\x52\xa0\x3c\x89\x9c\x37\x33\x6f\xde\x70\x68\x67\x19\xfc\x5f\x17\x08\x25\x0a\x54\xc4\x60\x01\xcf\x3b\x28\xeb\xe3\x1e\x98\x30\xa8\x04\xe1\x19\xad\x8a\x7f\xe1\x6e\x09\xf7\xcb\x15\x2c\xee\x3e\xae\xd2\x40\x12\xba\x25\x25\x82\x24\x4c\xe9\x20\x60\x95\xac\x95\x81\x28\x00\x00\x08\x69\x2d\x0c\xfe\x30\x61\xd0\x6f\x4b\x66\x36\xcd\x73\x4a\xeb\x2a\xfb\xd6\x10\xf1\x52\x67\xda\xd4\x8a\x94\x18\xbe\x63\xcf\xe4\xb6\xcc\x34\x96\x15\x0a\x73\x15\x16\x45\x21\x6b\x76\x25\x98\x2a\x2c\x50\x18\x46\xf8\x55\xf0\x8d\x31\x92\x72\x76\x0d\x15\xb3\x93\xa8\xc3\x20\x0e\x82\x2c\x83\xff\x38\x07\x62\x09\xe3\xe4\x99\xef\xf5\x4a\x03\x5a\x0b\xed\xe4\x6a\xdb\x5b\x50\x44\x94\x08\xb3\xef\x09\xcc\x2c\xe4\x73\x48\x1f\x1c\x06\xba\xce\xa7\x71\x88\x99\x14\xa4\x42\x67\x9b\xd9\xf4\xde\x7d\xfe\x04\x53\x3f\x10\x4d\x09\x3f\xe0\xb2\x0c\xda\xf6\x80\xec\x3a\x78\x61\x9c\xfb\x13\x9b\x7e\x38\xf4\xf7\x0e\x35\x55\x4c\x1a\x56\x8b\xd7\xf0\x03\x9f\x39\x84\xbd\xc7\x7d\x7f\x10\x7a\x7e\x28\x0a\x87\x8e\x83\x77\xd8\x5e\xc3\x34\xcb\xe0\x2b\x33\x9b\x29\x53\x22\x25\xdf\xc1\x28\x3b\x58\xc2\x1b\x04\x53\xc3\xd2\x53\xd6\xce\x7b\xb5\x61\xda\x8b\x08\x4c\x43\xa3\xb1\x70\xf6\xb7\xcb\x5c\x37\x82\x4e\xb2\x46\x76\xef\xb5\xda\x49\xb7\x8f\xe1\x6f\xdf\x35\x5f\x0e\xb4\x5e\x1b\x85\xa6\x51\x02\x6e\x5e\x0d\xfd\xb9\x5b\x9f\x70\x97\x8f\xc4\x4b\x8e\xa6\x2f\x8e\x76\x0e\xb6\x3f\xe9\x82\x6e\xa8\xa2\xab\xe1\x81\x28\x8d\x7d\xd9\xd2\x7f\x12\xd8\xde\x5a\xa8\x88\x74\xc5\xf8\x1b\x02\x9a\x33\x8a\x69\xcf\xdd\xe3\xa3\xca\x01\x1e\xb5\x51\x4c\x94\x4f\x7e\x32\xd7\x84\x62\xdb\xc5\x10\x3d\x3e\x0d\xc8\x27\x80\x4a\xd5\x2a\xde\x17\xd1\x87\xcb\xe7\x50\x91\x2d\x9e\x22\xff\x49\x80\xa3\x88\xaa\x38\xee\x47\xd5\x12\xe5\xbc\xfb\x08\xfd\xd1\xba\x56\xb0\x4d\xc0\xf7\xba\xef\x7d\x05\xaf\x32\x38\x07\x69\x61\x40\xe7\x68\xd2\x2f\xcc\xd0\x0d\x6c\x07\xe8\xf7\x6f\xfb\x10\x79\xcd\xad\x3f\x2c\x4a\x34\x8e\xda\x91\x8f\xcc\x03\x3e\xca\x67\xb5\x69\xe4\x74\x88\x07\xe4\x26\xa1\x8e\x77\x63\x1a\xcb\x0b\x6b\x61\x0e\xca\x4e\x6c\x8e\x3a\x5b\x3b\x77\xdf\x37\x75\x4a\xf5\x98\xa3\x6f\xe5\xa5\xe0\xbe\x8d\x30\x87\xb6\x3d\x46\xea\xba\x48\xd9\xf8\x2c\x9e\xad\x3d\xfc\xaf\x39\x08\xc6\xcf\x14\x75\x58\xfb\x2b\x2d\x18\x4f\xe0\x66\xe1\xba\x7c\x19\xbb\x94\x39\x84\xfe\x82\x86\xc9\x45\xd0\x42\xa9\xdc\xa5\xbe\x8c\x78\x63\x52\x4e\x97\xd3\x3b\x3f\xbc\x41\x7b\xf1\xdf\xc8\x3d\x1e\xb4\xd3\x35\x55\x7d\x7a\x32\x18\xcc\x53\x53\x81\x6b\xd2\x70\x73\xbe\x3d\xbf\x47\xc6\x85\x52\x6e\x18\x5c\xe1\x9f\x99\xae\x88\xa1\x9b\x3f\x5d\xd6\x6e\x34\xdb\x67\xa4\xbc\x28\xa3\xfb\x8f\xc0\x44\x83\xc1\x34\x54\xff\x64\xcd\xdd\x6f\x02\x8a\x22\xf2\xdb\x64\xf4\x0c\xfb\xe2\xb7\xc9\x81\xaa\xb4\x5d\xbc\x7f\x6c\x87\x0f\xf7\xde\x51\x30\x1e\x74\xc1\xaf\x00\x00\x00\xff\xff\xab\xce\xbc\x6c\xed\x08\x00\x00")

func pairTmplBytes() ([]byte, error) {
	return bindataRead(
		_pairTmpl,
		"pair.tmpl",
	)
}

func pairTmpl() (*asset, error) {
	bytes, err := pairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe0, 0x45, 0x33, 0xc9, 0x78, 0x34, 0xbe, 0x40, 0xc2, 0x39, 0x23, 0xfd, 0xc2, 0x63, 0x96, 0x2b, 0xe2, 0xc0, 0xca, 0x56, 0x79, 0x8b, 0x43, 0xba, 0x5a, 0x41, 0x9e, 0xda, 0x84, 0xc4, 0xac, 0x3a}}
	return a, nil
}

var _serviceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5b\x6f\xdb\xb6\x17\x7f\xf7\xa7\x38\x7f\xc1\x2d\xa4\xc2\xa1\xfe\xdb\x63\x0a\x3f\x25\x6d\x5a\x14\x4b\x83\xba\x5b\x87\x15\x45\xc0\x48\x94\x4d\x58\x26\x35\x92\x56\xe2\xb9\xfe\xee\x03\x2f\x92\xa8\x8b\x2f\xd9\x82\xf4\x65\x79\x48\x24\xf1\xdc\xcf\xef\x1c\x1e\x32\x71\x0c\x17\x3c\x25\x30\x27\x8c\x08\xac\x48\x0a\x77\x1b\x98\xf3\xfa\x1d\x4a\x8a\x81\x32\x45\x04\xc3\x79\x9c\xac\xd2\x58\x12\x51\xd2\x84\xbc\x86\xcb\x8f\x70\xfd\xf1\x33\xbc\xb9\x7c\xff\x19\x8d\x0a\x9c\x2c\xf1\x9c\xc0\x76\x0b\xe8\x1a\xaf\x08\xec\x76\xa3\x11\x5d\x15\x5c\x28\x08\x47\x00\x00\x41\xc2\x99\x22\x0f\x2a\xb0\x6f\x94\x07\x23\xfb\x34\xa7\x6a\xb1\xbe\x43\x09\x5f\xc5\xbc\x20\x4c\x09\x9c\x50\x36\xf7\x9f\xcf\xe6\x43\xc4\xbf\xaf\x31\xbb\xe7\xb1\x54\x5c\xe0\x39\x09\x8e\xac\xc7\xc5\x72\x1e\x4b\x32\x5f\x11\xa6\x4e\xa2\x25\x2c\x2d\x38\x3d\x91\x38\x11\x24\x25\x4c\x51\x9c\x9f\x44\xbe\x50\xaa\x48\x72\x7a\x8a\x29\x2e\xdc\xf2\x28\xa1\xda\x14\x15\x55\x21\x8f\x12\xc6\x05\xa6\xe2\x44\xa1\x31\x65\x19\x0f\x46\xd1\x68\x54\x62\x01\xb7\xd0\x38\x8b\x6e\x04\x2f\x69\x4a\x84\x5b\xa9\x62\xd6\xfd\xee\xe2\x8e\x66\xf6\x6f\xf5\xd5\x2a\x41\x33\xfb\xb7\x21\xb6\x1e\xa3\x99\x7d\x78\x23\x04\xaf\xd6\x9a\xc0\xa1\x8f\x85\xa2\x9c\xc9\xd1\x28\x8e\xe1\xf3\xa6\x20\x40\x25\xa8\x05\x01\x6d\x32\x64\x5c\xb4\xa0\x98\x70\x26\x95\x25\x9b\x42\xe0\xad\x04\x86\xdf\x69\x02\x5c\x62\x9a\xe3\xbb\x9c\x80\x09\x0f\x72\x7c\xe1\x68\xbb\x3d\x03\x81\xd9\x9c\xc0\xf8\x76\x02\xe3\x12\xce\xa7\x80\x6e\x34\x8d\x96\xae\x83\xa8\x29\x68\x06\x8c\x2b\x18\x97\xe8\x2a\xe7\x77\x38\xf7\xd7\xc6\x05\xd3\x1a\xcf\xa7\x7a\xd9\x28\xff\x0e\x8a\xdf\x60\x99\x34\x74\x71\xac\x8d\x76\x94\xbb\x1d\xdc\xd3\x3c\x37\x5f\x4a\x74\x55\xd5\xe7\x25\x91\x89\xa0\xc6\xf7\x8a\x4d\xdb\xd1\xe2\xb3\x2e\x8e\x2b\x1f\x6f\xad\x88\xda\xe3\xca\x24\xc2\x52\x2d\xc2\x7b\x8c\xf6\x44\x43\x03\xe0\x58\x34\xde\x6b\x9a\xa7\x8c\x86\x93\x31\x2e\xd1\x25\x95\x45\x8e\x37\x55\x32\xc1\xfd\x78\x82\xa6\x7b\xc8\x3c\xdf\xf4\xab\xb6\xd1\x06\x63\x96\xf0\xa2\xa3\xd4\x2e\x5c\x60\x45\xe6\x5c\x6c\xfa\x6b\xfb\xc2\x7b\xf6\x98\xf0\x1e\x06\xd2\xbe\xb0\x9d\x12\xb2\x38\x86\x2f\x54\x2d\xfa\x00\xc2\x45\x91\x6f\xa0\x65\x24\x94\x38\x5f\x13\x50\x1c\xaa\x2a\xd2\x45\xb4\xa0\xd2\xe0\x5e\x57\xd2\x5a\x92\x54\xaf\x1f\x46\x5f\xb6\x66\x49\x4f\x6b\x58\x3a\x2e\x53\x6e\xbb\x5d\x04\xaf\x4c\x1b\x31\x6e\xc2\xb6\x4e\x9f\x20\x6a\x2d\x18\xbc\x6c\x16\x9b\xb5\x0f\x64\x73\xde\xc3\xf5\xa4\x5e\xfe\x4d\x9b\x7f\x0e\xa5\xfd\xb2\x1b\xb5\xa2\xec\x3d\xee\x89\xf7\x23\xa0\xfa\x54\x48\x7d\x24\x50\x35\x83\xeb\x83\xd7\x4e\x7d\x21\x28\x53\x19\x04\x2f\xe4\x0b\x19\x40\x38\x80\xe1\xc8\x7c\x1d\x00\x70\xe4\x35\x98\x2b\xa2\xfa\x10\x99\x13\x35\x08\x90\x4c\xf0\x15\xac\x88\xc2\x29\x56\x18\x19\x11\x26\xe5\x1d\x21\xe1\xca\x74\x08\xd4\xb5\x5a\xe7\x3e\x6c\x61\x61\x02\x77\x9c\xe7\x11\x38\x18\x94\x13\xe0\x4b\xed\xdc\x0a\x5d\x11\x15\x56\xe5\xd9\x96\xe1\x6b\x8a\x0c\x1b\xcd\xe0\x7f\x7c\xe9\x64\x34\xc1\xff\x83\x08\x6e\x90\xe1\x87\xde\xa1\xcc\x5a\xe1\x53\x4c\x20\xc3\xb9\x24\x4d\xf4\x73\xb9\x9f\xd1\x98\xff\x1d\xfe\x3a\xc4\xdf\x64\xcf\xfe\x76\x02\x4a\xd4\x0e\x41\x34\x01\x25\xd6\xc4\x11\x56\x69\x91\x36\xa2\x4d\x02\x4c\x5e\xe4\x9e\xbc\x50\xa6\xf8\x50\x5e\xe4\xa9\x79\x99\x40\xaf\x48\xf7\x50\xba\x28\x3b\x67\x56\x68\x76\x52\x9e\x26\x50\x46\x5e\x28\x0e\x55\x27\xcd\xa0\xda\xe9\xfd\x62\x50\x64\x55\xe4\x7a\x00\x0d\xec\xa4\x02\x2b\xbc\x24\xb3\x5c\x53\x05\x4e\x6f\xd0\x30\xf6\xf7\xe2\x86\xdf\xcd\x9d\xb7\x3a\x42\xc7\xc4\x54\x25\xe9\x5b\x79\xd4\x1a\x37\x80\x42\x35\xc8\x74\x1a\xfa\x29\x96\xf4\x45\xd4\x43\xb4\x16\x91\x92\x8c\x32\xa7\xfc\x56\x87\x38\x68\x6d\xa6\x4b\xb2\xd1\x45\x44\x59\x4a\x1e\x00\xc1\xff\xe1\xac\xb5\xd5\x1a\x63\xbc\xf5\x9f\x5a\xeb\x34\x83\xd0\xae\x38\x4a\x2d\x2e\xaa\x1a\xe1\x99\x57\x11\x85\x44\xb5\x3a\xaf\x09\xfa\xc2\x4c\x11\xf9\x3c\xb6\x87\x1f\x61\x62\xa9\x79\xef\x06\xdd\xf7\x5a\x06\x9d\xf1\xa1\xed\xf0\x70\x4f\x1e\xeb\xf2\x68\x7b\x7e\x30\x30\x3f\x1b\xd5\xd5\x7a\x77\xdb\xb0\xd2\x7a\xf3\xc7\xf2\xf0\xde\x60\xda\x1c\x16\x66\x63\xb5\x15\x52\x95\xca\x12\x76\xbb\x5f\x70\x01\x53\x58\xe1\xe2\xab\x54\x82\xb2\xf9\x37\xa9\xc4\x3a\x51\xdb\x5d\xb3\x15\xc6\x31\x7c\x22\x7f\xae\xa9\x20\xa9\x9d\x4a\x5b\xfa\x9d\x91\xa5\x33\xa2\xa6\xf4\xb4\xbb\xfd\xa4\x0d\x61\x87\xa2\x06\x83\xe3\xb2\x0a\xc8\xd9\x6e\x77\x0e\xb5\x1d\xde\xae\xdb\xe9\x72\xce\x38\x3b\x41\xe0\xfc\xb8\x71\x35\xe5\xf3\x19\x57\x0f\x2e\xc7\xad\x6b\x48\x9f\xc9\x3c\x07\x35\xfd\x63\xce\x2c\xc3\x08\x71\xd2\xe0\x91\x80\xd0\xa8\x75\x6d\xe1\x30\x2c\xba\x85\xb9\xdb\xb9\x85\xa1\xa6\xe0\x36\x8b\x7f\x8d\x88\xb6\x75\xfb\x70\xf1\x0e\xcb\x61\x03\xf5\x0c\xf1\x0c\x7e\x9c\x00\x9e\xb6\x23\x7b\x21\xf4\x43\x3d\xf1\x70\xb6\xdd\xea\x76\xbf\xc0\xf2\x46\x90\x8c\x3e\x18\x88\x05\xd7\xe4\x3e\x68\xf5\x6c\xa8\xc6\x89\x02\x0b\x49\x6a\x48\xea\x56\xde\xd6\xd3\x6d\xf6\x35\x63\x28\xe1\x55\xcd\x07\x91\x15\xd4\xe7\x77\x7d\xdf\xf7\xdd\x60\x3e\xe4\x85\x92\x80\x10\xf2\x0e\x0e\x11\x84\xaf\x86\x2b\x64\x02\x44\x08\x2e\xa2\xd6\xd1\x42\xae\x73\xa5\xb3\xf2\x72\x98\x67\xeb\x05\xc5\x8c\x54\x66\x1f\xd0\x15\x1d\x7a\xcd\xd8\xdc\x7b\x65\x38\x21\x5b\x37\x78\x1a\x07\xb9\x80\x5b\x3d\x3f\x9d\x4f\x1d\x0a\x8c\xb5\xdb\x96\x6b\xee\x40\x11\x0e\x84\x3a\xea\x82\x83\x66\x5a\x9e\x9d\x83\xf7\xee\x12\x5f\x4b\xf4\x81\x6c\xbe\xbd\xf6\x06\xdf\xc6\x59\x33\x9a\x31\x9a\x4f\x9a\xbb\x93\x6b\x72\xaf\xa3\xf6\x2b\x93\xeb\xa2\xe0\x42\x91\xd4\x5c\xa3\x84\x65\xd4\xe2\x3d\x08\x1c\x1b\x18\xa7\x19\xa6\x50\x22\x33\xfb\x0e\x01\x4b\xef\x70\x25\x78\xf1\x6a\xad\xf0\xa5\x05\xba\x5f\x5c\xef\x30\x4b\x73\x02\xe2\x09\x3a\x99\xdb\x87\x1d\x4d\xaf\x7a\x1a\x53\x4c\x94\xa7\x95\x5f\xfd\xb9\xae\xdf\xd8\xb5\xb0\xa6\xb5\x7f\x1b\x79\x39\x7b\x5c\x22\x2a\xbb\x6d\x16\x1e\xaf\x3a\x1a\xf5\x53\x46\x33\x18\xb0\x41\x23\x1f\x59\xe8\x90\x8d\xbd\xae\xb0\x47\x90\x03\xed\x63\x48\xfa\x70\x4f\x74\x69\xe3\x4f\xd0\xe2\x7f\x4c\xda\xf6\x45\xcc\xb5\xe8\x26\x68\xf5\x21\xed\x99\x43\x3b\x7f\x92\x5d\xe7\xbf\xe0\xee\xbc\xf6\xe4\x2a\xd3\x2a\x99\xe8\x0a\xed\x30\xf6\x0f\xa8\xdd\x43\x48\xfb\xec\xe6\x1f\x23\xaa\xfb\xa1\xfa\x34\xd2\x3f\xa8\x58\x9a\x7f\x74\x48\xe9\xdc\x02\xd5\x47\x15\x8f\xe6\x84\x83\x0a\x8c\x33\xe6\xe0\xf2\x56\x6f\xd0\x1d\xa4\xd0\xcc\x10\xf4\xa6\xc3\x6a\x45\x27\xf0\xc2\x06\xa0\x4b\x04\xcd\xbd\x75\xc6\xd0\x0d\x16\x84\x69\x9a\x2f\x54\x2d\x2a\x0e\x9c\xa6\x12\x5c\xfc\xc0\xed\x47\xd5\x0d\x7d\x8b\x09\xf5\x24\xdb\x69\xc2\xd1\x7d\x22\x09\xa1\x25\x11\xe6\xba\xe2\x80\xc2\x30\x51\x0f\x95\x3e\xe4\xbe\x4d\x3c\x06\xbc\x92\xf6\x6a\x0a\x6a\xc1\x1a\x1e\xf6\xe3\xb6\x67\x83\x2c\x30\x9b\x80\x96\x79\x3e\x05\xef\xbf\x52\x68\xa6\xb0\x50\xb3\x02\xb3\xb7\x82\xaf\x3c\xdd\x93\x53\xfe\x9f\x13\xf7\x2f\x50\x0c\xfa\x99\xf7\xec\xfb\x17\x44\x3d\xc3\x52\x92\x11\x61\xcc\x43\x6f\x29\xa3\x72\x11\x46\xa3\x1e\x91\xad\x9a\x29\xe0\xa2\x20\x2c\x0d\xcd\xeb\x44\x1f\xe5\x3b\x01\x8b\xfa\xf2\x5d\xd5\xc8\x9e\x2d\x55\x42\x2e\x70\x9e\xdb\x74\xf4\x78\xfb\x48\xea\x34\xbc\xde\x85\xe7\xc0\x0d\xd1\xdf\x01\x00\x00\xff\xff\x7e\x16\x8a\x42\x9d\x1c\x00\x00")

func serviceTmplBytes() ([]byte, error) {
	return bindataRead(
		_serviceTmpl,
		"service.tmpl",
	)
}

func serviceTmpl() (*asset, error) {
	bytes, err := serviceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x98, 0x37, 0x62, 0xf6, 0xc2, 0xdd, 0xd9, 0x24, 0x59, 0xa, 0xa3, 0x71, 0xea, 0xbf, 0x46, 0x93, 0x42, 0x90, 0x9f, 0x7f, 0xcb, 0xde, 0x17, 0xe8, 0x1e, 0x5d, 0xbc, 0x26, 0x16, 0x53, 0x58, 0xb0}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"info.tmpl":    infoTmpl,
	"open.tmpl":    openTmpl,
	"pair.tmpl":    pairTmpl,
	"service.tmpl": serviceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"info.tmpl":    &bintree{infoTmpl, map[string]*bintree{}},
	"open.tmpl":    &bintree{openTmpl, map[string]*bintree{}},
	"pair.tmpl":    &bintree{pairTmpl, map[string]*bintree{}},
	"service.tmpl": &bintree{serviceTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
