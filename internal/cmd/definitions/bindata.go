// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/function.tmpl (247B)
// tmpl/info.tmpl (1.442kB)
// tmpl/open.tmpl (1.162kB)
// tmpl/operation.tmpl (883B)
// tmpl/pair.tmpl (2.267kB)
// tmpl/service.tmpl (7.324kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _functionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xc1\x4a\xc4\x40\x0c\x86\xef\x7d\x8a\x9f\xa5\x87\x76\xd1\x79\x00\xc1\x53\xd1\x93\xc8\xa2\xbe\x40\x18\x67\x75\xb0\x49\x87\x26\xc5\x85\x31\xef\x2e\xb3\x2b\x5e\xf6\x14\xc8\x47\xbe\x7c\xb5\xde\xa2\x3f\xca\x17\xee\xee\xd1\x87\xc7\x4d\x62\x78\x26\x4e\xf8\x81\x2d\x13\x71\x9a\xe1\xde\x1d\x37\x89\x18\x14\xfb\x5a\xd1\x9f\xb9\x16\x8a\x09\xee\x23\x6a\x6d\xe7\xee\x43\xb4\x13\xe2\x22\x96\x4e\x16\xa6\xcb\xbc\x69\xf4\x22\x3d\xd0\x4a\xac\xe1\x6d\xcd\xfc\x44\x6a\xe1\xd5\xd6\x2c\x1f\x0f\xf2\xae\xdf\xd9\x3e\xa7\x85\x99\xdc\xb1\x14\xc3\xbe\x50\x5e\xaf\x1e\xb5\x45\xcb\x6c\x5d\x07\xd2\x48\x2d\x6c\x1c\xfe\xfd\x2f\x49\xb7\xd9\xf4\xcf\x7b\x0e\xeb\x00\xa0\x90\xe4\x38\xec\x32\x97\x39\x71\x12\x43\xb6\xdd\xd8\xf9\x6f\x00\x00\x00\xff\xff\x04\xff\x8d\x44\xf7\x00\x00\x00")

func functionTmplBytes() ([]byte, error) {
	return bindataRead(
		_functionTmpl,
		"function.tmpl",
	)
}

func functionTmpl() (*asset, error) {
	bytes, err := functionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc3, 0xfa, 0x15, 0x97, 0xd9, 0xcb, 0x7a, 0x58, 0x3e, 0xc4, 0xec, 0xe3, 0xfb, 0x72, 0x50, 0x3f, 0xe4, 0x66, 0xf4, 0x1c, 0x5d, 0x8, 0x4a, 0xd7, 0x5, 0x67, 0x56, 0x1f, 0xfe, 0xb9, 0x2f, 0x0}}
	return a, nil
}

var _infoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcf\xab\x9b\x4e\x14\xc5\xf7\xfe\x15\xe7\x1b\xf2\x40\xc1\xaf\xee\x5b\xb2\x28\x2f\xa5\xbc\x45\xf3\x0a\x09\x5d\xb4\x94\x32\xd1\xab\x48\xc6\x19\x99\x19\x2d\x69\x9e\xff\x7b\x19\x9d\xd4\x1f\x49\x4a\x5a\xde\x26\x44\xef\xb9\xe7\xde\xcf\xb9\xc6\x31\x1e\x65\x4a\xc8\x49\x90\x62\x86\x52\xec\x8f\xc8\xe5\xef\x67\x14\xc2\x90\x12\x8c\xc7\x49\x99\xbe\xc5\xfa\x19\x9b\xe7\x1d\xde\xaf\x9f\x76\x91\x57\xb1\xe4\xc0\x72\x2b\xc9\xa4\xe7\xc5\x31\xde\x71\x0e\xd6\xb0\x82\xb3\x3d\x27\x94\x64\x58\xca\x0c\x8b\xbc\x44\x0a\x6d\xe0\x7b\xa7\xd3\xff\x50\x4c\xe4\x84\xe5\xf7\x10\xcb\x06\x6f\x56\x88\x9e\x44\x26\x35\xda\xd6\x03\x00\xab\x58\x56\x82\x95\x64\x6b\xcb\x26\xda\xd8\xbf\x2f\x30\xf2\x13\xd3\x09\xe3\x63\x5d\x91\x59\xc1\xba\xd0\x15\x67\xc7\x4e\xe7\x8a\x33\xa3\xd5\x0d\x99\x95\x90\x48\x87\x47\xab\xdb\x26\xb2\x9a\x0d\xec\x0b\x8f\xcc\x50\x2e\xd5\xf1\xb2\xd6\x4f\x69\x5b\xac\xb0\xe8\xb5\x6e\xca\xc2\x1b\x8d\x08\xbc\xbb\xf0\x5f\x8b\xfe\x1f\xe0\x35\xa9\xa6\x48\x68\xe3\xc6\x57\xaa\x10\x26\xc3\xe2\x41\x3f\xe8\x05\xfc\x2b\xd9\x04\xdd\xdb\x2b\xc1\x04\x67\xdb\x38\xc6\x07\x32\x93\x90\x7e\x14\x9c\x23\x27\x83\x49\x54\x68\x18\xaf\x09\x99\x92\xe5\xe8\xbb\xb1\x16\x59\x2d\x12\xf8\xe5\xc5\x86\x6d\x1b\xcc\xbd\xfd\x00\x7e\xef\xba\x3b\x56\xf6\x45\x88\xbd\x94\x3c\x00\x4e\x9d\x55\x13\x42\x1e\x2c\x5a\x19\x95\x5f\x2f\xfd\xc6\x56\xdf\xba\x86\x22\xc3\x7f\xf2\xe0\xba\x87\xd0\xbf\x90\x92\x9f\xbb\x7d\x47\x91\x2b\x32\xb5\x12\x8e\x6a\xac\x08\x91\x31\xae\x69\x48\x9d\xeb\xdb\x8d\xdd\xe2\x2f\xf8\xf9\xa7\xfe\xe1\x6a\xfd\xaf\x33\x68\xa2\x29\x7c\x10\xc2\xa8\x9a\x9c\xf0\x7c\x8e\x8f\xb5\x36\x2e\xb6\x21\xfc\xd7\xbc\xc9\x68\xc0\xe8\x2e\x93\xcd\xce\xf7\x70\x8b\xdf\x71\x8d\x39\xda\x0c\x6a\x7b\x15\x48\xdf\x00\x2a\x84\x91\x7f\x01\xb4\x9d\xc1\x34\x53\x98\xe0\x4a\x93\xe3\xbb\x03\x0c\x2b\x34\x93\x2c\x1c\xd9\xe8\xd0\xbf\x02\x00\x00\xff\xff\x72\xdd\x2f\x33\xa2\x05\x00\x00")

func infoTmplBytes() ([]byte, error) {
	return bindataRead(
		_infoTmpl,
		"info.tmpl",
	)
}

func infoTmpl() (*asset, error) {
	bytes, err := infoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0x3c, 0xa5, 0x63, 0x49, 0xa1, 0x4f, 0xb6, 0xc6, 0xa1, 0x7d, 0xfa, 0x3c, 0x28, 0xef, 0x86, 0xa3, 0xaa, 0x1b, 0xf2, 0x4e, 0xdd, 0x7a, 0xeb, 0x3a, 0xbf, 0x42, 0xf, 0xcd, 0x6a, 0x44, 0xe3}}
	return a, nil
}

var _openTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\x4f\x6b\xe3\x30\x10\xc5\xef\xfa\x14\x43\xc8\x21\x59\xbc\xd2\x3d\x4b\x4e\x9b\x16\x7a\x68\x52\x68\x0e\x85\x52\xca\xc4\x9e\xb8\xa2\xb1\x24\xc6\xb2\x43\x30\xfe\xee\xc5\xf1\x9f\xba\xad\x69\x9a\xf4\x10\x62\xcd\x3c\xbd\x79\xfa\x31\x4a\xc1\x7f\x1b\x11\xc4\x64\x88\xd1\x53\x04\x9b\x03\xc4\xb6\x3b\x43\xae\x11\xb4\xf1\xc4\x06\x77\x2a\x4c\x22\x15\x5a\xa6\xcc\xeb\x5d\xfa\x0f\x16\x2b\x58\xae\xd6\x70\xb5\xb8\x59\x4b\xe1\x30\x7c\xc5\x98\xa0\xeb\x0b\xa1\x13\x67\xd9\xc3\x44\x00\x00\x8c\x62\xed\x5f\xb2\x8d\x0c\x6d\xa2\x1e\x32\x34\x7b\xab\x52\x6f\x19\x63\x1a\x9d\xe8\x2b\x7f\x70\x94\x8e\x44\x51\xfc\x05\x46\x13\x13\x8c\x9f\x03\x18\xa7\x9c\xc3\x6c\x0e\xf2\x9e\x38\xd7\x21\xa5\x50\x96\xa7\x8c\xd2\x46\xaa\x8a\xe2\x78\x5f\x2e\x31\x21\x28\xcb\xda\x9b\x4c\x54\x79\x4c\x85\xa8\x06\x82\x75\x64\xae\x33\x13\xc2\x36\x33\xe1\xc4\x3a\x0f\x52\xca\x3f\xc7\x2c\xf2\x0e\x35\x4f\x61\x52\x45\x68\xbc\xdb\x18\x1c\x1c\x2b\xf4\x5e\xaf\xff\x39\x00\x62\xae\x7e\x96\xa7\x42\xe4\xc8\xdd\x80\x5b\x74\x30\x87\x04\xdd\x63\xea\x59\x9b\xf8\xa9\x6d\x14\x9f\x9f\x9c\x90\xc7\xc1\x37\x57\x3a\xbd\x05\x34\x51\x2d\x6a\x05\xed\xa9\xce\xd0\xaa\xeb\x1b\x4d\xaf\x41\x20\xd7\x07\x47\xb3\xaf\xe5\x25\xed\x83\x6e\x44\x43\xa8\xf7\x59\xf6\x60\xb5\x04\x2e\x82\x36\x04\xa7\x6f\x38\x08\xa9\x2f\x38\x1b\xd6\x47\x50\x97\xa1\xe9\xf2\xff\x14\x51\xb3\x0c\xa7\x10\x9d\xb1\x41\x7d\xcb\x61\x48\x3d\xc1\xa5\x90\x7e\xb5\x3f\x5d\xfe\x6f\x21\xbd\x05\x00\x00\xff\xff\xe4\x0a\x67\xc8\x8a\x04\x00\x00")

func openTmplBytes() ([]byte, error) {
	return bindataRead(
		_openTmpl,
		"open.tmpl",
	)
}

func openTmpl() (*asset, error) {
	bytes, err := openTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "open.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf8, 0xc8, 0x9a, 0x70, 0xbb, 0xb4, 0xb6, 0xf6, 0x20, 0x86, 0xe4, 0x9f, 0x1, 0x8b, 0x2c, 0x4, 0x41, 0x21, 0x32, 0xca, 0xf2, 0x78, 0x9d, 0x67, 0x75, 0x29, 0x7d, 0x8c, 0x12, 0x41, 0xaf, 0xb2}}
	return a, nil
}

var _operationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\x4d\x4f\xe3\x30\x10\xbd\xfb\x57\x8c\xac\x1c\x12\xa9\x9b\xdc\x57\xda\xd3\x02\x12\x17\xa8\xe0\x00\x37\xe4\xba\xd3\x74\xd4\xc6\x36\xf6\x14\x5a\x85\xfc\x77\xe4\xc4\x29\x6d\x45\x05\x42\xdc\xc6\x33\xef\x3d\xbf\xf9\x70\x4a\xaf\x54\x8d\x10\xd8\x7a\x55\xa3\x10\xd4\x38\xeb\x19\x72\x01\x00\x20\xb5\x35\x8c\x5b\x96\xc3\x8b\xac\x14\x43\x54\x13\x2f\x37\xb3\x52\xdb\xa6\x7a\xdc\x28\xf3\x6a\xab\x24\x50\xb9\x55\x5d\x05\xac\x1b\x34\x23\xeb\x3c\x96\x77\x0e\xc3\xf7\x50\x15\x99\x85\x95\xa2\x10\xa2\x6d\xff\x80\x57\xa6\x46\xc8\x9e\x26\x90\x11\xfc\xfd\x07\xe5\xb5\x61\xf4\x0b\xa5\x31\x40\xd7\x89\xb6\x85\x8c\xca\x0b\x0c\xda\x93\x63\xb2\x26\x26\xa3\x0c\xa4\x0a\x05\xb7\x56\xbb\x1b\xd5\x20\x74\x1d\xd0\x48\x86\xb6\xf7\x12\x7f\xa0\x05\x58\x0f\x39\x3e\x47\x7c\x0f\x94\x01\xfd\x0b\x69\xf4\xb2\x38\xc9\x0f\x3e\xbd\x2c\xba\xae\xe7\xdf\xb3\x27\x53\xe7\x05\x84\x3e\xd8\x6b\xa2\x99\x47\x23\xfb\xf7\x41\x17\xd8\xcc\x70\x1e\x3b\xc9\xa8\xbc\xec\xe3\xa4\x35\x60\x13\xe0\xc4\xf8\x19\xe1\x43\x5d\xeb\x92\xe8\xad\x0b\x23\xa3\xaa\x7a\x45\xeb\x06\xff\x6f\xc0\x76\xaa\x82\x56\xeb\x38\x8b\x54\x39\x99\xdd\xe8\xe2\x53\x4e\x9e\x2a\x57\xd6\x37\x8a\xa7\xca\xab\x26\xfe\x55\xc0\x71\xe1\x0e\xc3\x66\xcd\xe1\x81\x78\x39\x1d\x8e\xee\x68\x7c\x32\x52\xbe\xf4\x17\xd9\xff\x87\x9b\xfc\x89\xd5\x03\x7a\xae\x79\x0b\xe9\xbc\xcb\x94\x9b\xfc\x72\x27\x6d\x3b\xae\xa6\x13\x1f\x7b\x7a\x0f\x00\x00\xff\xff\xcc\xf8\x47\xf9\x73\x03\x00\x00")

func operationTmplBytes() ([]byte, error) {
	return bindataRead(
		_operationTmpl,
		"operation.tmpl",
	)
}

func operationTmpl() (*asset, error) {
	bytes, err := operationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa5, 0x93, 0x1, 0x64, 0xa5, 0x2, 0xc, 0xc7, 0x88, 0x7d, 0x91, 0x51, 0x72, 0xf, 0x45, 0x5e, 0x5e, 0x7b, 0x8e, 0x23, 0x4a, 0x31, 0x4d, 0xa5, 0x5e, 0x38, 0x61, 0x7b, 0x8c, 0x1a, 0x3f, 0xa5}}
	return a, nil
}

var _pairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x41\x6f\xdb\x3a\x0c\xbe\xfb\x57\xf0\x19\x41\x61\x3f\xb8\xf6\x3b\xfb\x21\x87\x61\xcd\x61\x18\xd6\xf4\x10\x6c\x03\x8a\x62\x50\x65\xc6\x11\x22\xcb\x82\x24\xab\x0b\x3c\xff\xf7\x41\x72\x92\xda\x71\xd2\xe6\x32\x60\x3a\x59\xe2\x27\xf2\xe3\x47\x52\x49\x96\xc1\xc7\xba\x40\x28\x51\xa0\x22\x06\x0b\x78\xde\x41\x59\x1f\xf7\xc0\x84\x41\x25\x08\xcf\x68\x55\xfc\x0f\x77\x4b\xb8\x5f\xae\x60\x71\xf7\x69\x95\x06\x92\xd0\x2d\x29\x11\x24\x61\x4a\x07\x01\xab\x64\xad\x0c\x44\x01\x00\x40\x48\x6b\x61\xf0\xa7\x09\x83\x7e\x5b\x32\xb3\x69\x9e\x53\x5a\x57\xd9\xf7\x86\x88\x97\x3a\xd3\xa6\x56\xa4\xc4\xf0\x1d\x7b\x26\xb7\x65\xa6\xb1\xac\x50\x98\xab\xb0\x28\x0a\x59\xb3\x2b\xc1\x54\x61\x81\xc2\x30\xc2\xaf\x82\x6f\x8c\x91\x94\xb3\x6b\xa8\x98\x9d\x44\x1d\x06\x71\x10\x64\x19\x7c\xe0\x1c\x88\x25\x8c\x93\x67\xbe\xd7\x2b\x0d\x68\x2d\xb4\x93\xab\x6d\x6f\x41\x11\x51\x22\xcc\x7e\x24\x30\xb3\x90\xcf\x21\x7d\x70\x18\xe8\x3a\x1f\xc6\x21\x66\x52\x90\x0a\x9d\x6d\x66\xd3\x7b\xf7\xf9\x0b\x4c\xfd\x40\x34\x25\xfc\x80\xcb\x32\x68\xdb\x03\xb2\xeb\xe0\x85\x71\xee\x4f\x6c\x7a\x87\x9a\x2a\x26\x0d\xab\xc5\xab\xd7\x01\x74\x0e\x61\x0f\xbc\xef\x0f\x42\x4f\x0b\x45\xe1\xd0\x71\xf0\x0e\xc9\x6b\x08\x66\x19\x7c\x63\x66\x33\x25\x48\xa4\xe4\x3b\x18\x45\x07\x4b\x78\x83\x60\x6a\x58\x7a\xca\xda\xdd\x5e\x6d\x98\xf6\xda\x01\xd3\xd0\x68\x2c\x9c\xfd\x6c\x76\xeb\x46\xd0\x49\xb0\xc8\xee\xc1\xab\x9d\x74\xfb\x18\xfe\xf5\x35\xf2\x59\x40\xeb\x25\x51\x68\x1a\x25\xe0\xe6\xd5\xd0\x9f\xbb\xf5\x19\x77\xf9\x48\xb3\xe4\x68\xfa\xea\xd8\xe6\x60\xfb\x93\x2e\xe8\x86\xe2\x39\xea\x0f\x44\x69\xec\xb3\x95\xfe\x93\xc0\xf6\xd6\x42\x45\xa4\xcb\xc1\xf7\x03\x68\xce\x28\xa6\x3d\x77\x8f\x8f\x2a\x07\x78\xd4\x46\x31\x51\x3e\xf9\x39\x5c\x13\x8a\x6d\x17\x43\xf4\xf8\x34\x20\x9f\x00\x2a\x55\xab\x78\x9f\x44\xef\x2e\x9f\x43\x45\xb6\x78\x8a\xfc\x2f\x01\x8e\x22\xaa\xe2\xb8\x1f\x4c\x4b\x94\xbb\xdd\x7b\xe8\x8f\xd6\xb5\x82\x6d\x02\xbe\xc4\x7d\xc9\x2b\x78\x95\xc1\x5d\x90\x16\x06\x74\x8e\x26\xfd\xc2\x0c\xdd\xc0\x76\x80\x7e\xbf\xb7\x87\xc8\x6b\x7a\xfc\xb0\x28\xd1\x38\x2a\x47\x3e\x32\x0f\xf8\x28\x1f\xd5\xa6\x91\xd3\x21\x1e\x90\x9b\xb8\x3a\xf6\xc6\xd4\x97\x17\xd6\xc2\x1c\x94\x9d\xd8\x1c\x75\xb6\x76\xd7\x7d\xdd\xd4\x29\xd5\x63\x8c\xbe\x94\x97\x9c\xfb\x32\xc2\x1c\xda\xf6\xe8\xa9\xeb\x22\x65\xe3\xb3\x78\xb6\xf6\xf0\x7f\xe6\x20\x18\x3f\x93\xd4\x61\xed\x5b\x5a\x30\x9e\xc0\xcd\xc2\x55\xf9\x32\x76\x29\x73\x08\x7d\x83\x86\xc9\x45\xd0\x42\xa9\xdc\x85\xbe\x8c\x78\x63\x52\x4e\x97\xd3\x3b\x3f\x3c\x3d\x7b\xf1\xdf\x88\x3d\x1e\xb4\xd3\x35\x55\x7d\x7a\x32\x18\xcc\x53\x53\x81\x6b\xd2\x70\x73\xbe\x3c\x7f\x46\xc6\x85\x52\x6e\x18\x5c\xe2\x5f\x98\xae\x88\xa1\x9b\xbf\x5d\xd6\x6e\x34\xdb\x67\xa4\xbc\x28\xa3\xfb\x47\xc0\x44\x83\xc1\xd4\x55\xff\x64\xcd\xdd\x4f\x01\x8a\x22\xf2\xdb\x64\xf4\x0c\xfb\xe4\xb7\xc9\x81\xaa\xb4\x5d\xbc\x7f\x6c\x87\x0f\xf7\xfe\xa2\x60\x3c\xe8\x82\xdf\x01\x00\x00\xff\xff\x92\x3d\x03\x2f\xdb\x08\x00\x00")

func pairTmplBytes() ([]byte, error) {
	return bindataRead(
		_pairTmpl,
		"pair.tmpl",
	)
}

func pairTmpl() (*asset, error) {
	bytes, err := pairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0x86, 0xc3, 0x97, 0xca, 0x3a, 0xb5, 0x39, 0x37, 0x2e, 0x61, 0x51, 0x68, 0x95, 0x43, 0xa4, 0x9c, 0x13, 0x68, 0xe5, 0xb2, 0xc7, 0x46, 0x17, 0xaa, 0xc8, 0xb1, 0xbe, 0x4f, 0x28, 0x38, 0xe1}}
	return a, nil
}

var _serviceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x5b\x6f\xdb\x38\x16\x7e\xf7\xaf\x38\x15\xdc\x42\x2a\x5c\x69\xf7\x35\x85\x5f\x36\xe9\xa6\x45\x77\x93\x60\x93\x9d\x0e\xa6\x08\x02\x46\xa2\x6c\xc2\x12\xa9\x21\x69\x25\x1e\x57\xff\x7d\xc0\x8b\x24\x4a\x96\x7c\xe9\xa4\x1d\x3f\x34\xb6\x78\xae\xdf\xb9\x52\x8d\x22\x38\x67\x09\x86\x05\xa6\x98\x23\x89\x13\x78\xdc\xc0\x82\x35\xbf\xa1\x24\x08\x08\x95\x98\x53\x94\x45\x71\x9e\x44\x02\xf3\x92\xc4\xf8\x3d\x5c\x5c\xc3\xd5\xf5\x1d\x7c\xb8\xf8\x74\x17\x4e\x0a\x14\xaf\xd0\x02\xc3\x76\x0b\xe1\x15\xca\x31\x54\xd5\x64\x42\xf2\x82\x71\x09\xfe\x04\x00\xc0\x8b\x19\x95\xf8\x59\x7a\xe6\x17\x61\xde\xc4\x7c\x5b\x10\xb9\x5c\x3f\x86\x31\xcb\xa3\x5f\xd7\x88\x3e\xb1\x48\x48\xc6\xd1\x02\x7b\x07\xce\xa3\x62\xb5\x88\x04\x5e\xe4\x98\xca\xa3\x68\x31\x4d\x0a\x46\x8e\x24\x8e\x39\x4e\x30\x95\x04\x65\x47\x91\x2f\xa5\x2c\xe2\x8c\x1c\x63\x8a\x45\x50\x1c\x24\x94\x9b\xa2\xa6\x2a\xc4\x41\xc2\xa8\x40\x84\x1f\x29\x34\x22\x34\x65\xde\x24\x98\x4c\x4a\xc4\xe1\x01\x5a\x67\xc3\x1b\xce\x4a\x92\x60\x6e\x4f\x6a\xcc\xfa\xcf\x2d\xee\xe1\xad\xf9\x5b\x3f\x35\x4a\xc2\x5b\xf3\xb7\x25\x36\x1e\x87\xb7\xe6\xcb\x07\xce\x59\x7d\xd6\x02\x17\x5e\x17\x92\x30\x2a\x26\x93\x28\x82\xbb\x4d\x81\x81\x08\x90\x4b\x0c\xca\x64\x48\x19\xef\x64\x57\xcc\xa8\x90\x86\x6c\x0e\x9e\x73\xe2\x69\x7e\xab\x09\x50\x89\x48\x86\x1e\x33\x0c\x1a\x9e\xd0\xf2\xf9\x93\xed\xf6\x1d\x70\x44\x17\x18\xa6\x0f\x33\x98\x96\x70\x36\x87\xf0\x46\xd1\x28\xe9\x0a\x44\x45\x41\x52\xa0\x4c\xc2\xb4\x0c\x2f\x33\xf6\x88\x32\xf7\x6c\x5a\x50\xa5\xf1\x6c\xae\x8e\xb5\xf2\x6f\x20\xd9\x0d\x12\x71\x4b\x17\x45\xca\x68\x4b\x59\x55\xf0\x44\xb2\x4c\x3f\x29\xc3\x0b\x2c\x62\x4e\xb4\xcb\x35\xb5\x52\xdf\x21\x37\x9e\x4d\x6b\xd7\x1e\x0c\x67\xe3\x68\x6d\x09\xa6\x89\x12\xe1\x7c\x0d\x46\x40\x50\x71\x3f\x04\xc2\x27\x45\xf3\x92\x20\x58\x19\xca\x67\x22\x8a\x0c\x6d\xea\x18\x82\xfd\x38\x82\xe6\x23\x64\x8e\x6f\xea\xa7\xb2\xd1\x80\x71\x1b\xb3\xa2\xa7\xd4\x1c\x9c\x23\x89\x17\x8c\x6f\x76\xcf\xc6\xe0\x7d\x77\x0a\xbc\xfb\xf3\x67\x0c\xb6\x63\x20\x8b\x22\xf8\x42\xe4\x72\x37\x6f\x50\x51\x64\x1b\xe8\x18\x09\x25\xca\xd6\x18\x24\x83\xba\x78\x54\xed\x2c\x89\xd0\xe9\xae\x0a\x68\x2d\x70\xa2\xce\x07\x93\x2e\x5d\xd3\x78\x47\x99\x5f\x5a\x62\x5d\x5c\x55\x15\xc0\x5b\xdd\x34\xb4\x77\xb0\x6d\xa2\xc6\xb1\x5c\x73\x0a\x6f\xda\xc3\xf6\xec\x33\xde\x9c\xed\xa4\xf3\xac\x39\xfe\x45\x59\x7d\x06\xa5\x79\x52\x4d\x3a\xe0\x3a\x5f\x47\x60\x3e\x21\x43\x5f\x2a\x41\x4f\xcc\x4f\xc5\x60\xbb\xde\x95\x55\x5f\x70\x42\x65\x0a\xde\x6b\xf1\x5a\x78\xe0\x0f\xa4\x6e\xa0\x9f\x0e\xe4\x6d\xe0\xb4\x93\x4b\x2c\x77\x33\x63\x81\xe5\x60\x5e\xa4\x9c\xe5\x90\x63\x89\x12\x24\x51\xa8\x45\xe8\x90\xf7\x84\xf8\xb9\x6e\x0c\x61\xdf\x6a\x15\x7b\xbf\x93\x0b\x33\x78\x64\x2c\x0b\xc0\xa6\x41\x39\x03\xb6\x52\xce\xe5\xe1\x25\x96\x7e\x5d\x95\x5d\x19\xae\xa6\x40\xb3\x91\x14\x5e\xb1\x95\x95\xd1\x82\xff\x1b\xe6\x4c\x67\x86\x0b\xbd\xcd\x32\x63\x85\x4b\x31\x83\x14\x65\x02\xb7\xe8\x67\x62\x9c\x51\x9b\xff\x0d\xfe\xd8\xc7\xdf\x46\xcf\xfc\x6b\x05\x94\x61\x17\x82\x60\x06\x92\xaf\xb1\x25\xac\xc3\x22\x0c\xa2\x6d\x00\x74\x5c\xc4\x48\x5c\x08\x95\x6c\x28\x2e\xe2\xd8\xb8\xcc\x60\xa7\x48\x47\x28\x2d\xca\xd6\x99\x3c\xbc\x3d\x2a\x4e\x33\x28\x03\x07\x8a\x7d\xd5\x49\x52\xa8\xe7\xba\x5b\x0c\x12\xe7\x45\xa6\x36\x48\x4f\x75\x22\x0f\x72\xb4\xc2\xb7\x99\x22\xf2\x2c\xb5\x07\xe1\x15\x7e\xb2\x3f\x46\x39\x45\x87\x55\x34\xac\x7b\x55\x2a\x30\x75\x3b\x3c\xcc\xec\xfa\x73\xc8\x6e\xbb\x97\x1a\xbb\xcd\x0f\x2b\x61\xaf\xcd\x0d\x9b\xe5\x81\x1d\xa6\x11\x7b\x87\x18\x35\x67\x82\x53\x42\x5b\x65\xdd\x79\xac\xea\x91\xd0\x04\x3f\x43\x08\xff\x18\xe9\x76\x53\x95\x78\x2e\xe1\x3f\xb5\xec\xfa\xb8\xdf\x71\x0d\x79\x6f\x62\x8f\x23\xa5\x8c\x98\x96\xbb\x9d\xd1\x7e\x1d\xf2\x62\xbf\x13\xee\x59\x4a\xc7\xed\x9e\xa6\x54\xb7\xa3\x69\x4a\x87\x7a\x7d\x5d\xac\x45\x33\x98\x6c\xda\x2b\xb6\xaa\xfa\x2f\x2a\x60\xc9\xb2\x44\x00\x52\xd3\xb6\xbb\x39\x9a\x7e\x87\xf8\x3e\xe6\x39\xe4\xa8\xf8\x2a\x24\x27\x74\x71\x2f\x24\x5f\xc7\x72\x5b\xb5\x43\x31\x8a\xe0\x7f\xf8\xf7\x35\xe1\x38\x71\x64\x0e\x60\xae\x67\xb7\x75\xa3\xe1\xe8\x8f\x23\x44\x78\xf8\xef\x75\x96\xd9\xea\x3d\x83\x46\xa1\x33\x68\x7b\x8d\xcd\x5a\x61\x76\x05\x94\x1d\x6f\x45\xc3\xf1\x82\x56\x5c\x36\x77\xce\xa3\xcd\x68\x59\x5e\xc2\x8e\x83\x09\x51\x5f\x40\x0a\xc4\xd5\x16\x65\x44\x6a\x1e\x7d\x25\x19\xe3\x32\x74\xf0\x23\x03\xbf\x9b\xdc\x9d\x63\x3b\x14\x7e\x4a\x1a\x7c\x44\x62\xbf\x59\x6a\x63\x38\xd6\x83\x93\x7d\x78\xb9\x24\x6a\xb7\x48\xad\xfe\x02\xa7\x68\x9d\xc9\xbf\xe2\xe9\x8e\xbd\x2f\x14\x3e\x37\x6f\xb9\xc0\x37\x23\x69\xa8\x37\x10\x4d\xd1\x59\xe0\x85\x6e\xd1\x7a\x03\x79\x3b\x92\xc1\xed\x42\xb2\x4f\x81\xcf\x0a\x29\xe0\xeb\xbd\x23\x3c\x00\x7f\x4c\xe6\x0c\xb0\xba\xf5\x07\xcd\x3e\x22\x14\xba\x67\x73\x78\x33\xc2\xb0\xb5\x6e\xea\x8d\x49\xe8\x25\x13\xad\xb0\xef\x74\x58\xfd\x5e\x2a\x45\x31\xde\xda\xbd\x32\x65\x1c\x1e\xd4\x6a\x74\x36\xb7\xc1\xd7\x26\x6e\x87\xa2\xec\x2f\x91\xb8\xe1\x38\x25\xcf\x46\xa1\x77\x85\x9f\xbc\xc0\x45\x9d\xa4\x4a\x98\xd9\x6f\xc7\x9b\xfe\xd7\x32\xfc\x8c\x37\xf7\xef\x9d\x8d\xb6\xfe\xd8\x9d\x8b\x92\x6c\xd6\xbe\x02\xb9\xc2\x4f\x0a\xa9\xff\x53\xb1\x2e\x0a\xc6\x25\x4e\xf4\xdb\x10\xdf\xee\x5b\xd0\xec\x5c\x23\x39\x64\xe0\xb0\x5a\x61\x0e\x65\xa8\x17\x5a\x37\x31\xd4\x94\x2a\xc1\x41\xa7\x79\xca\x56\x26\x47\xeb\xfc\xf9\x88\x68\x92\x61\xe0\xbb\xcd\xe9\xe4\xc6\xa4\xa6\xf6\x0a\x6f\x34\xd1\x48\x8e\xb7\x3e\x68\x58\xe7\xb5\x2f\x86\xb9\xd3\xc1\xdf\x55\xd5\xbd\x1b\x88\xd3\xc0\xad\x2d\x34\xc8\x0e\x8b\x1f\x82\x9b\xa4\x30\xa0\x47\x25\xaa\x5e\xac\xb5\x7f\xfa\xb5\x81\xbd\x13\xb8\xc5\xda\x97\xd7\x0b\x5d\x0b\x36\xdb\xed\xba\x27\x0f\xde\x1f\x0b\x76\x07\x03\xeb\x7f\xdd\xfb\x1a\x08\x9a\x3b\xd0\x0f\x01\x69\x31\xd0\xd6\xbf\xa7\xa5\xff\x34\x98\x8e\x99\x1f\x47\xc3\x39\x50\xf6\xdf\x8b\xb0\x63\xdb\x5e\xbb\x46\x6a\x6c\x40\x69\xa3\x71\x44\xd2\x68\xf7\x72\x6f\x5a\xd0\x56\xb0\x51\x32\x53\x95\x6c\x9b\x58\xff\x4a\x56\xdf\x13\x9c\x5b\xd2\xdf\x7d\xe3\xa9\x4d\x39\xe1\xd6\x33\xea\xce\x4b\x5c\x7d\x8e\xba\xf9\xe8\x89\xee\x0b\x78\xbb\xdd\x4e\x0b\x5a\x55\x01\x38\xc3\x7c\xbb\x55\xac\x37\x88\xa3\x5c\x84\xb7\x7a\xc0\xda\xd7\x3f\xa6\xe7\xab\x20\xb9\x07\x6d\xa6\xc4\xf2\x59\x69\xb6\xff\xbf\x13\xfe\x0b\xc5\xab\x05\x67\x6b\x9a\xf8\x41\xff\x65\x8c\x08\x5b\x8d\x5f\x88\x5c\x9e\x1b\x1e\x3f\x96\xcf\x33\xe8\x58\x70\x8e\xb2\x0c\xf3\x3a\x9f\xab\x83\xf6\xf7\xa4\x35\xd6\xd8\x67\x3d\xe9\x27\xf9\x97\xe0\x14\x73\xad\xdc\x0f\xba\xf5\x81\x39\x87\x39\x88\x30\x65\x3c\x47\xd2\x4c\x9b\x66\x16\x5d\x17\xbd\xe5\xa7\x6b\xc2\x0d\x92\xcb\xda\x49\x70\xaa\xd6\x01\x4d\x4f\xec\x42\xee\x5f\xd3\xd4\x87\x15\x72\x66\x8d\xd9\xbb\xb0\xe9\x5e\x1a\xb8\x3d\x4c\x31\xbd\x9a\xab\xda\x1b\x1c\xaf\x4e\x33\x19\x0c\x65\x37\xdd\xce\x51\x8e\x55\xb6\x0d\x84\xf3\x8e\x93\xfc\x3f\x48\x48\x1b\xd7\x0f\x34\x11\x4f\x3a\x62\x79\x8e\xaa\x4a\x39\x10\xec\x14\xff\x9f\x01\x00\x00\xff\xff\x6f\xc5\x9b\xb1\x9c\x1c\x00\x00")

func serviceTmplBytes() ([]byte, error) {
	return bindataRead(
		_serviceTmpl,
		"service.tmpl",
	)
}

func serviceTmpl() (*asset, error) {
	bytes, err := serviceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7a, 0x9, 0x8c, 0x7e, 0xff, 0x91, 0xe, 0xca, 0x11, 0x5f, 0xb6, 0xd3, 0xf5, 0xe5, 0xf9, 0x50, 0xd0, 0xf6, 0x6a, 0xbd, 0x6d, 0xbd, 0xb2, 0x34, 0xa5, 0x9c, 0xd, 0x81, 0x7b, 0x9d, 0x96, 0xeb}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"function.tmpl":  functionTmpl,
	"info.tmpl":      infoTmpl,
	"open.tmpl":      openTmpl,
	"operation.tmpl": operationTmpl,
	"pair.tmpl":      pairTmpl,
	"service.tmpl":   serviceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"function.tmpl":  &bintree{functionTmpl, map[string]*bintree{}},
	"info.tmpl":      &bintree{infoTmpl, map[string]*bintree{}},
	"open.tmpl":      &bintree{openTmpl, map[string]*bintree{}},
	"operation.tmpl": &bintree{operationTmpl, map[string]*bintree{}},
	"pair.tmpl":      &bintree{pairTmpl, map[string]*bintree{}},
	"service.tmpl":   &bintree{serviceTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
