// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/function.tmpl (258B)
// tmpl/info.tmpl (1.442kB)
// tmpl/open.tmpl (1.143kB)
// tmpl/operation.tmpl (901B)
// tmpl/pair.tmpl (2.303kB)
// tmpl/service.tmpl (7.67kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _functionTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\x4a\xc4\x40\x10\x45\xf7\x39\xc5\x67\xc8\x22\x33\x68\x1f\x40\x70\x15\x74\x25\x32\xa8\x17\x28\xda\x1e\x6d\x4c\x55\x9a\x54\x05\x07\xda\xba\xbb\xf4\x44\x04\x5d\x15\xd4\xff\xbc\xff\x6a\xbd\x46\x7f\x92\x0f\xdc\xdc\xa2\x0f\xf7\xab\xc4\xf0\x48\x9c\xf0\x05\x9b\x47\xe2\x34\xc1\xbd\x3b\xad\x12\x31\x28\x0e\xb5\xa2\xbf\xe4\x5a\x28\x6e\xa5\x23\x69\xa4\xd6\xda\xa3\xd6\x46\x72\x1f\xa2\x9d\x11\x67\xb1\x74\xb6\x30\x6e\xf7\xaa\xa5\x1b\xff\x48\x0b\xb1\x86\x97\x25\xf3\x03\xa9\x85\x67\x5b\xb2\xbc\xdd\xc9\xab\x7e\x66\x7b\x1f\x67\x66\x72\xc7\x5c\x0c\x87\x42\x79\xf9\xb7\xe9\xde\x1e\xcd\xf8\xef\xfa\xf0\xcb\x7f\x4a\xba\x4e\xa6\x3f\xdc\x8b\x58\x07\x00\x85\x24\xc7\x61\x97\xb9\x4c\x89\x93\x18\xb2\xed\xf6\x9d\x7f\x07\x00\x00\xff\xff\x5b\xb1\x71\xf7\x02\x01\x00\x00")

func functionTmplBytes() ([]byte, error) {
	return bindataRead(
		_functionTmpl,
		"function.tmpl",
	)
}

func functionTmpl() (*asset, error) {
	bytes, err := functionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "function.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf3, 0x17, 0x45, 0xc4, 0x8, 0xb1, 0x57, 0xf3, 0x99, 0x7b, 0x1f, 0xcd, 0xe4, 0x30, 0x7e, 0x3, 0x30, 0xba, 0x28, 0xed, 0x36, 0x1c, 0xd3, 0x4a, 0x24, 0xfc, 0x10, 0x73, 0xfe, 0xf7, 0xda, 0x75}}
	return a, nil
}

var _infoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcf\xab\x9b\x4e\x14\xc5\xf7\xfe\x15\xe7\x1b\xf2\x40\xc1\xaf\xee\x5b\xb2\x28\x2f\xa5\xbc\x45\xf3\x0a\x09\x5d\xb4\x94\x32\xd1\xab\x48\xc6\x19\x99\x19\x2d\x69\x9e\xff\x7b\x19\x9d\xd4\x1f\x49\x4a\x5a\xde\x26\x44\xef\xb9\xe7\xde\xcf\xb9\xc6\x31\x1e\x65\x4a\xc8\x49\x90\x62\x86\x52\xec\x8f\xc8\xe5\xef\x67\x14\xc2\x90\x12\x8c\xc7\x49\x99\xbe\xc5\xfa\x19\x9b\xe7\x1d\xde\xaf\x9f\x76\x91\x57\xb1\xe4\xc0\x72\x2b\xc9\xa4\xe7\xc5\x31\xde\x71\x0e\xd6\xb0\x82\xb3\x3d\x27\x94\x64\x58\xca\x0c\x8b\xbc\x44\x0a\x6d\xe0\x7b\xa7\xd3\xff\x50\x4c\xe4\x84\xe5\xf7\x10\xcb\x06\x6f\x56\x88\x9e\x44\x26\x35\xda\xd6\x03\x00\xab\x58\x56\x82\x95\x64\x6b\xcb\x26\xda\xd8\xbf\x2f\x30\xf2\x13\xd3\x09\xe3\x63\x5d\x91\x59\xc1\xba\xd0\x15\x67\xc7\x4e\xe7\x8a\x33\xa3\xd5\x0d\x99\x95\x90\x48\x87\x47\xab\xdb\x26\xb2\x9a\x0d\xec\x0b\x8f\xcc\x50\x2e\xd5\xf1\xb2\xd6\x4f\x69\x5b\xac\xb0\xe8\xb5\x6e\xca\xc2\x1b\x8d\x08\xbc\xbb\xf0\x5f\x8b\xfe\x1f\xe0\x35\xa9\xa6\x48\x68\xe3\xc6\x57\xaa\x10\x26\xc3\xe2\x41\x3f\xe8\x05\xfc\x2b\xd9\x04\xdd\xdb\x2b\xc1\x04\x67\xdb\x38\xc6\x07\x32\x93\x90\x7e\x14\x9c\x23\x27\x83\x49\x54\x68\x18\xaf\x09\x99\x92\xe5\xe8\xbb\xb1\x16\x59\x2d\x12\xf8\xe5\xc5\x86\x6d\x1b\xcc\xbd\xfd\x00\x7e\xef\xba\x3b\x56\xf6\x45\x88\xbd\x94\x3c\x00\x4e\x9d\x55\x13\x42\x1e\x2c\x5a\x19\x95\x5f\x2f\xfd\xc6\x56\xdf\xba\x86\x22\xc3\x7f\xf2\xe0\xba\x87\xd0\xbf\x90\x92\x9f\xbb\x7d\x47\x91\x2b\x32\xb5\x12\x8e\x6a\xac\x08\x91\x31\xae\x69\x48\x9d\xeb\xdb\x8d\xdd\xe2\x2f\xf8\xf9\xa7\xfe\xe1\x6a\xfd\xaf\x33\x68\xa2\x29\x7c\x10\xc2\xa8\x9a\x9c\xf0\x7c\x8e\x8f\xb5\x36\x2e\xb6\x21\xfc\xd7\xbc\xc9\x68\xc0\xe8\x2e\x93\xcd\xce\xf7\x70\x8b\xdf\x71\x8d\x39\xda\x0c\x6a\x7b\x15\x48\xdf\x00\x2a\x84\x91\x7f\x01\xb4\x9d\xc1\x34\x53\x98\xe0\x4a\x93\xe3\xbb\x03\x0c\x2b\x34\x93\x2c\x1c\xd9\xe8\xd0\xbf\x02\x00\x00\xff\xff\x72\xdd\x2f\x33\xa2\x05\x00\x00")

func infoTmplBytes() ([]byte, error) {
	return bindataRead(
		_infoTmpl,
		"info.tmpl",
	)
}

func infoTmpl() (*asset, error) {
	bytes, err := infoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0x3c, 0xa5, 0x63, 0x49, 0xa1, 0x4f, 0xb6, 0xc6, 0xa1, 0x7d, 0xfa, 0x3c, 0x28, 0xef, 0x86, 0xa3, 0xaa, 0x1b, 0xf2, 0x4e, 0xdd, 0x7a, 0xeb, 0x3a, 0xbf, 0x42, 0xf, 0xcd, 0x6a, 0x44, 0xe3}}
	return a, nil
}

var _openTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\x4f\x8f\xd3\x30\x10\xc5\xef\xfe\x14\x4f\xd5\x1e\x5a\xd4\xda\xd2\x1e\x17\xed\x89\x05\x89\x03\x5d\x24\x7a\x43\x08\x79\xdd\x59\x63\xd1\xd8\x66\xec\x06\x55\x51\xbe\x3b\xca\x5f\x02\x44\x22\xe5\xc4\x21\x4a\x32\x7e\x7e\x33\xef\xa7\x51\x0a\xaf\xc2\x91\x60\xc9\x13\xeb\x4c\x47\x3c\x5d\x60\xc3\xf8\x8f\xd2\x69\x38\x9f\x89\xbd\x3e\x29\x53\x1c\x95\x09\x4c\xe7\xec\x4e\xe9\x25\x1e\x1e\xb1\x7f\x3c\xe0\xf5\xc3\xdb\x83\x14\x51\x9b\xaf\xda\x12\xc6\x73\x21\x5c\x11\x03\x67\xac\x05\x00\xac\xac\xcb\x5f\xce\x4f\xd2\x84\x42\x19\x9f\x76\x2e\x28\x1b\x76\x29\x07\xd6\x96\x54\x79\xbb\x5a\xa4\x52\xf9\x12\x29\xad\x44\x55\xed\xc0\xda\x5b\xc2\xcd\xe7\x2d\x6e\x12\x97\xb8\xbb\x87\xfc\x40\x5c\x3a\x43\x09\x75\xbd\xcc\x2e\xf5\x17\x54\x55\xb5\x2e\x72\xaf\x0b\x42\x5d\x77\x1d\xc8\x1f\x1b\xa7\x8d\x10\x4d\x5b\x84\x48\xfe\xcd\xd9\x1b\x3c\x9f\xbd\x59\x87\x98\x21\xa5\x7c\xd1\x4e\x24\xdf\x6b\xc7\x1b\xac\x9b\x41\x7a\xfb\x61\x18\xde\xb6\x15\xfa\x59\xef\xde\xbc\x05\x31\x37\x4f\xe0\x8d\x10\xa5\xe6\xb1\xc1\x3b\x1d\x71\x8f\x42\xc7\x8f\x29\xb3\xf3\xf6\xd3\x70\x50\xfd\x1e\xbc\xa0\xac\x67\x93\x37\x3a\xf7\x0c\xfa\x86\xf5\x89\x7c\x27\x6c\xc3\xa5\xa8\x0d\xa5\x0d\x6e\x07\x65\xa7\x9e\x28\x50\xd7\xf2\x70\x89\x74\xf7\x67\x79\x4f\xdf\xb7\xa3\x7d\x4f\x67\xf2\x59\x4f\x40\x0d\xe9\xff\x09\xd8\x1c\x98\xa9\xe1\x2c\xa0\xa9\xe0\x3f\x00\x35\xa6\x59\x0a\xac\x5f\x8b\xbf\x01\xbb\x62\x97\xa6\x96\xf3\xc8\x26\x82\x6b\x90\x2d\x87\x30\xcc\xf7\x6b\xea\x1f\x01\x00\x00\xff\xff\x0d\x2c\xfd\xad\x77\x04\x00\x00")

func openTmplBytes() ([]byte, error) {
	return bindataRead(
		_openTmpl,
		"open.tmpl",
	)
}

func openTmpl() (*asset, error) {
	bytes, err := openTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "open.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x68, 0xdf, 0x7b, 0x30, 0x81, 0xf7, 0xdd, 0x7b, 0x6d, 0x57, 0x3e, 0xd0, 0x89, 0x45, 0xc8, 0x3c, 0x6e, 0xa, 0xfb, 0xbe, 0x84, 0x73, 0x74, 0xfe, 0xa4, 0xc4, 0x8a, 0x8c, 0x6, 0x83, 0x49, 0xde}}
	return a, nil
}

var _operationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\x4d\x6b\xe3\x30\x10\xbd\xeb\x57\x0c\xc2\x07\x1b\x12\x0b\xf6\xb8\xb0\xa7\xdd\x2d\xf4\xd2\x86\xf6\xd0\x63\x51\x94\x89\x32\x24\x96\x54\x49\x09\x09\xae\xff\x7b\x91\x2d\xa7\x49\x68\x09\x2d\xbd\x8d\x66\xde\x7b\x7a\xf3\xe1\xa4\x5a\x4b\x8d\x10\xa2\xf5\x52\x23\x63\xd4\x38\xeb\x23\x94\x0c\x00\x80\x2b\x6b\x22\xee\x23\x1f\x5e\x64\x39\x1b\x22\x4d\x71\xb5\x9d\xd7\xca\x36\x42\x99\x30\x25\x2b\xb4\x9d\x66\x0d\xb1\xfb\x25\xdc\x5a\x8b\x80\xba\x41\x33\x72\xaf\x31\xe2\xc1\x61\xf8\x0a\x56\x90\x59\x5a\xce\x2a\xc6\xda\x76\x0a\x5e\x1a\x8d\x50\x3c\x4f\xa0\x20\xf8\xfd\x07\xea\x5b\x13\xd1\x2f\xa5\xc2\x00\x5d\xc7\xda\x16\x0a\xaa\xff\x61\x50\x9e\x5c\x24\x6b\x52\x32\xc9\x40\xae\x50\x70\x1b\x79\xb8\x93\x0d\x42\xd7\x01\x8d\x64\x68\x7b\x47\xe9\x07\x5a\x82\xf5\x50\xe2\x4b\xc2\xf7\x40\x1e\xd0\xef\x48\xa1\xe7\xd5\x45\x7e\xb0\xea\x79\xd5\x75\x3d\xff\x31\x7a\x32\xba\xac\x20\xf4\xc1\x51\x13\xcd\x22\x19\x39\xbe\x4f\xba\xc0\x66\x8e\x8b\xd4\x49\x41\xf5\xff\x3e\xce\x5a\x03\x36\x03\x2e\x8c\x7f\x22\x7c\xaa\x6b\x5d\x16\xbd\x77\x61\x64\x08\xd1\x2b\x5a\x37\xf8\x7f\x85\x68\x67\x32\x28\xb9\x49\xb3\xc8\x95\x8b\xd9\x8d\x2e\x3e\xe4\x94\xb9\x72\x63\x7d\x23\xe3\x4c\x7a\xd9\xa4\xbf\x2a\x38\x2f\x3c\x60\xd8\x6e\x62\x78\xa2\xb8\x9a\x0d\x67\x78\x36\x3e\x9e\x28\x57\xfd\x25\xf6\xdf\xe1\x4a\xbf\x63\xf5\x84\x5e\xaa\xb8\x87\x7c\xf0\x75\xce\x4d\x7e\xb8\x93\xb6\x1d\x57\xd3\xb1\xf7\x3d\xbd\x05\x00\x00\xff\xff\x4a\x0e\xb1\xc0\x85\x03\x00\x00")

func operationTmplBytes() ([]byte, error) {
	return bindataRead(
		_operationTmpl,
		"operation.tmpl",
	)
}

func operationTmpl() (*asset, error) {
	bytes, err := operationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd, 0xa, 0x67, 0xe5, 0xb4, 0x7e, 0x60, 0x1, 0x9b, 0xd5, 0x11, 0x3e, 0x86, 0x83, 0x25, 0xb2, 0xac, 0xec, 0x49, 0x97, 0xd4, 0x2c, 0x89, 0xc8, 0xa1, 0xe9, 0xaa, 0x7c, 0xe7, 0x75, 0x32, 0x48}}
	return a, nil
}

var _pairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xc1\x6e\xe3\x36\x10\xbd\xeb\x2b\xa6\x82\x11\x48\x85\x2c\x15\x3d\xaa\xf0\xa1\x68\x7c\x28\x8a\xc6\x39\x18\xed\x21\x08\x16\x0c\x35\x96\x09\x53\x24\x41\xd2\xcc\x1a\x5a\xfd\xfb\x82\x94\xed\xc8\x96\x9d\x38\x87\x05\x96\x27\x91\xf3\x66\xe6\xcd\x1b\x0e\xed\xa2\x80\xbf\x64\x85\x50\xa3\x40\x4d\x2c\x56\xf0\xb2\x83\x5a\x1e\xf7\xc0\x84\x45\x2d\x08\x2f\x68\x53\xfd\x01\xf7\x0b\x78\x58\x2c\x61\x7e\xff\xf7\x32\x8f\x14\xa1\x1b\x52\x23\x28\xc2\xb4\x89\x22\xd6\x28\xa9\x2d\x24\x11\x00\x40\x4c\xa5\xb0\xf8\xd5\xc6\x51\xbf\xad\x99\x5d\x6f\x5f\x72\x2a\x9b\x82\x0a\x33\x65\xb2\xa8\xe5\xd4\x58\xa9\x49\x8d\x85\xfb\x3d\xbe\x09\x55\xa8\x4d\x5d\x18\xac\x1b\x14\xf6\x13\x1e\x28\x2a\x25\xd9\xa7\x5c\xa8\xc6\x0a\x85\x65\x84\x7f\xc2\x69\x6d\xad\xa2\x9c\xdd\x4e\xce\xee\x14\x9a\x38\x4a\xa3\xa8\x28\xe0\x4f\xce\x81\x38\xc2\x38\x79\xe1\x7b\x4d\xf3\x88\x4a\x61\xbc\xa4\x6d\x3b\x05\x4d\x44\x8d\x30\xf9\x92\xc1\xc4\x41\x39\x83\xfc\xd1\x63\xa0\xeb\x42\x32\x8f\x98\x28\x41\x1a\xf4\xb6\x89\xcb\x1f\xfc\xe7\x37\xb0\xf2\x91\x18\x4a\xf8\x01\x57\x14\xd0\xb6\x07\x64\xd7\xc1\x2b\xe3\x3c\x9c\xb8\xfc\x1e\x0d\xd5\x4c\x59\x26\xc5\x5b\xd4\x01\x74\x06\x71\x0f\x7c\xe8\x0f\xe2\x40\x0b\x45\xe5\xd1\x69\xf4\x01\xc9\x5b\x08\x16\x05\xfc\xcf\xec\x7a\x4c\x90\x28\xc5\x77\x70\x92\x1d\x1c\xe1\x5b\x04\x2b\x61\x11\x28\x1b\xef\xbd\x5c\x33\x13\xb4\x03\x66\x60\x6b\xb0\xf2\xf6\x8b\xd5\xad\xb6\x82\x8e\x92\x25\x6e\x0f\x5e\xee\x94\xdf\xa7\xf0\x6b\xe8\x51\xa8\x02\xda\x20\x89\x46\xbb\xd5\x02\xee\xde\x0c\xfd\xb9\x5f\xff\xe0\xae\x3c\xd1\x2c\x3b\x9a\xfe\xf3\x6c\x4b\x70\xfd\x49\x17\x75\x43\xf1\x3c\xf5\x47\xa2\x0d\xf6\xd5\xaa\xf0\x49\x60\x33\x75\xd0\x10\xe5\x6b\x08\xf7\x01\x0c\x67\x14\xf3\x9e\x7b\xc0\x27\x8d\x07\x3c\x19\xab\x99\xa8\x9f\xc3\xac\xae\x08\xc5\xb6\x4b\x21\x79\x7a\x1e\x90\xcf\x00\xb5\x96\x3a\xdd\x17\xd1\x87\x2b\x67\xd0\x90\x0d\x9e\x23\x7f\xcb\x80\xa3\x48\x9a\x34\xed\x87\xd7\x11\xed\xbd\xfb\x08\xfd\xd1\x4a\x6a\xd8\x64\x10\x5a\xdc\xb7\xbc\x81\x37\x19\xbc\x83\x72\x30\xa0\x73\x34\x99\x57\x66\xe9\x1a\x36\x03\xf4\xc7\x77\x7b\x88\xbc\xe5\x8e\x1f\x16\x25\x06\x4f\xda\x51\x9e\x98\x07\x7c\x74\xc8\xea\xf2\xc4\xeb\x90\x0e\xc8\x8d\x42\x1d\xef\xc6\x38\x56\x10\xd6\xc1\x0c\xb4\x1b\xd9\x3c\x75\xb6\xf2\xee\xa1\x6f\xfa\x9c\xea\x31\x47\xdf\xca\x6b\xc1\x43\x1b\x61\x06\x6d\x7b\x8c\xd4\x75\x89\x76\xe9\x45\x3c\x5b\x05\xf8\x2f\x33\x10\x8c\x5f\x28\xea\xb0\xf6\x57\x5a\x30\x9e\xc1\xdd\xdc\x77\xf9\x3a\x76\xa1\x4a\x88\xc3\x05\x8d\xb3\xab\xa0\xb9\xd6\xa5\x4f\x7d\x1d\xf1\xce\xa4\x9c\x2f\xaf\x77\x79\x78\x7a\xf6\xe2\xbf\x93\xfb\x74\xd0\xce\xd7\x58\xf5\xf1\xc9\x60\x30\xcf\x4d\x15\xae\xc8\x96\xdb\xcb\xed\xf9\x31\x32\xce\xb5\xf6\xc3\xe0\x0b\xff\x97\x99\x86\x58\xba\xfe\xd9\x65\xed\x4e\x66\xfb\x82\x94\x57\x65\xf4\xff\x1a\x98\xd8\x62\x34\x0e\xd5\x3f\x59\x33\xff\x53\x80\xa2\x4a\xc2\x36\x3b\x79\x86\x43\xf1\x9b\xec\x40\x55\xb9\x2e\xdd\x3f\xb6\xc3\x87\x7b\xef\x28\x18\x8f\xba\xe8\x7b\x00\x00\x00\xff\xff\xff\x97\x6a\xd5\xff\x08\x00\x00")

func pairTmplBytes() ([]byte, error) {
	return bindataRead(
		_pairTmpl,
		"pair.tmpl",
	)
}

func pairTmpl() (*asset, error) {
	bytes, err := pairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcd, 0x8, 0xa, 0x20, 0xc9, 0xb2, 0xdc, 0x46, 0xa, 0x99, 0xd8, 0xfe, 0xb6, 0x5d, 0x5d, 0x16, 0xd0, 0x5d, 0x96, 0x96, 0x56, 0xcf, 0xee, 0x61, 0xa2, 0x33, 0xf1, 0x8, 0x54, 0xfa, 0x40, 0xf7}}
	return a, nil
}

var _serviceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x5b\x6f\xdb\xbe\x15\x7f\xf7\xa7\x38\x7f\xc1\x2d\xa4\xc2\x91\xb6\x3d\xba\xf0\xcb\x92\x36\x2d\xba\x25\xc1\x92\xad\xc0\xda\x20\x60\x24\xca\x26\x2c\x91\x2a\x49\x2b\xf1\x5c\x7d\xf7\x81\x17\x49\x94\x2c\xb9\x76\x97\x76\x7e\x68\x6d\xf1\x5c\x7f\xe7\x4a\x25\x8a\xe0\x9c\x25\x18\x96\x98\x62\x8e\x24\x4e\xe0\x71\x0b\x4b\xd6\xfc\x86\x92\x20\x20\x54\x62\x4e\x51\x16\xc5\x79\x12\x09\xcc\x4b\x12\xe3\xb7\x70\x71\x0d\x57\xd7\x77\xf0\xee\xe2\xe3\x5d\x38\x29\x50\xbc\x46\x4b\x0c\xbb\x1d\x84\x57\x28\xc7\x50\x55\x93\x09\xc9\x0b\xc6\x25\xf8\x13\x00\x00\x2f\x66\x54\xe2\x67\xe9\x99\x5f\x84\x79\x13\xf3\x6d\x49\xe4\x6a\xf3\x18\xc6\x2c\x8f\x62\x2a\xce\x08\x8b\x96\xec\x4c\x48\xc6\xd1\x12\x47\xe5\x5f\xbc\xa3\xa8\xa2\x62\xbd\x8c\x04\x5e\xe6\x98\xca\x13\x38\x30\x4d\x0a\x46\x4e\x62\x89\x39\x4e\x30\x95\x04\x65\x27\x30\xad\xa4\x2c\xe2\x8c\x1c\x6f\x9c\x45\x59\x1c\x49\x2e\xb7\x45\x4d\x5b\x88\x23\xc9\xa3\x02\x11\x7e\x92\x82\x88\xd0\x94\x79\x93\x60\x32\x29\x11\x87\x07\x68\xa1\x08\x6f\x38\x2b\x49\x82\xb9\x3d\xa9\x71\xed\x3f\xb7\x11\x0a\x6f\xcd\xff\xf5\x53\xa3\x27\xbc\x35\xff\xb7\xc4\x06\x83\xf0\xd6\x7c\x79\xc7\x39\xab\xcf\x5a\x40\xc3\xeb\x42\x12\x46\xc5\x64\x12\x45\x70\xb7\x2d\x30\x10\x01\x72\x85\x41\x99\x0c\x29\xe3\x9d\x9c\x8c\x19\x15\xd2\x90\x2d\xc0\x73\x4e\x3c\xcd\x6f\x35\x01\x2a\x11\xc9\xd0\x63\x86\x41\x83\x14\x5a\x3e\x7f\xb2\xdb\x9d\x01\x47\x74\x89\x61\xfa\x30\x83\x69\x09\xf3\x05\x84\x37\x8a\x46\x49\x57\x50\x2a\x0a\x92\x02\x65\x12\xa6\x65\x78\x99\xb1\x47\x94\xb9\x67\xd3\x82\x2a\x8d\xf3\x85\x3a\xd6\xca\xbf\x83\x64\x37\x48\xc4\x2d\x5d\x14\x29\xa3\x2d\x65\x55\xc1\x13\xc9\x32\xfd\xa4\x0c\x2f\xb0\x88\x39\xd1\x2e\xd7\xd4\x4a\x7d\x87\xdc\x78\x36\xad\x5d\x7b\x30\x9c\x8d\xa3\xb5\x25\x98\x26\x4a\x84\xf3\x35\x18\x01\x41\xc5\xfd\x47\x20\x7c\x54\x34\x2f\x09\x82\x95\xa1\x7c\x26\xa2\xc8\xd0\xb6\x8e\x21\xd8\x8f\x23\x68\x31\x42\xe6\xf8\xa6\x7e\x2a\x1b\x0d\x18\xb7\x31\x2b\x7a\x4a\xcd\xc1\x39\x92\x78\xc9\xf8\x76\xff\x6c\x0c\xde\xb3\x53\xe0\x3d\x9c\x3f\x63\xb0\x1d\x03\x59\x14\xc1\x67\x22\x57\xfb\x79\x83\x8a\x22\xdb\x42\xc7\x48\x28\x51\xb6\xc1\x20\x19\xd4\xc5\xa3\x6a\x67\x45\x84\x4e\x77\x55\x40\x1b\x81\x13\x75\x3e\x98\x74\xe9\x86\xc6\x7b\xca\xfc\xd2\x12\xeb\xe2\xaa\xaa\x00\xde\xe8\xa6\xa1\xbd\x83\x5d\x13\x35\x8e\xe5\x86\x53\x78\xdd\x1e\xb6\x67\x9f\xf0\x76\xbe\x97\xce\xb3\xe6\xf8\x5f\xca\xea\x39\x94\xe6\x49\x35\xe9\x80\xeb\x7c\x1d\x81\xf9\x84\x0c\x7d\xa9\x04\x3d\x31\x3f\x15\x83\xed\x7a\x57\x56\x7d\xc1\x09\x95\x29\x78\xaf\xc4\x2b\xe1\x81\x3f\x90\xba\x81\x7e\x3a\x90\xb7\x81\xd3\x4e\x2e\xb1\xdc\xcf\x8c\x25\x96\x83\x79\x91\x72\x96\x43\x8e\x25\x4a\x90\x44\xa1\x16\xa1\x43\xde\x13\xe2\xe7\xba\x31\x84\x7d\xab\x55\xec\xfd\x4e\x2e\xcc\xe0\x91\xb1\x2c\x00\x9b\x06\xe5\x0c\xd8\x5a\x39\x97\x87\x97\x58\xfa\x75\x55\x76\x65\xb8\x9a\x02\xcd\x46\x52\xf8\x83\xad\xad\x8c\x16\xfc\x7f\x63\xce\x74\x66\xb8\xd0\xdb\x2c\x33\x56\xb8\x14\x33\x48\x51\x26\x70\x8b\x7e\x26\xc6\x19\xb5\xf9\xdf\xe1\x3f\x87\xf8\xdb\xe8\x99\x7f\xad\x80\x32\xec\x42\x10\xcc\x40\xf2\x0d\xb6\x84\x75\x58\x84\x41\xb4\x0d\x80\x8e\x8b\x18\x89\x0b\xa1\x92\x0d\xc5\x45\x1c\x1b\x97\x19\xec\x15\xe9\x08\xa5\x45\xd9\x3a\x93\x87\xb7\x47\xc5\x69\x06\x65\xe0\x40\x31\x52\x9d\x83\xc5\xa9\xa4\x89\x02\xc5\xb8\x53\xa1\x12\xe7\x45\xa6\xd6\x50\x4f\x35\x26\x0f\x72\xb4\xc6\xb7\x99\x1a\x4e\xfe\x50\x61\x06\xfa\x21\x7e\x1a\x17\x21\x5c\x19\xb5\x84\x69\x19\xbe\xdf\xd0\x78\x44\xb3\x82\x58\x37\xc9\x1f\xb1\xf6\x7d\x4c\x70\x4a\x68\xab\xb7\x3b\xfe\x94\xd3\x84\x26\xf8\x19\x42\xf8\xd3\x48\x73\x99\xaa\x38\xbb\x84\x7f\xd6\xb2\xeb\xe3\x3e\x86\x86\xbc\x37\x20\xc7\x11\x54\x46\x4c\xcb\xfd\x46\x64\xbf\x0e\x79\x71\xd8\x09\xf7\x2c\xa5\xe3\x76\x4f\x53\xaa\xab\x7f\x9a\xd2\xa1\xd6\x5a\xd7\x46\xd1\xcc\x01\x9b\x65\x8a\xad\xaa\xfe\x8e\x0a\x58\xb1\x2c\x11\x80\xd4\x70\xeb\x2e\x6a\xa6\xbd\x20\x7e\x88\x79\x01\x39\x2a\xbe\x08\xc9\x09\x5d\xde\x0b\xc9\x37\xb1\xdc\x55\xed\x0c\x8a\x22\xf8\x07\xfe\xb6\x21\x1c\x27\x8e\xcc\x01\xcc\xf5\xa8\xb4\x6e\x34\x1c\xfd\xee\x8f\x08\x0f\xdf\x6f\xb2\xcc\x16\xcb\x1c\x1a\x85\xce\x5c\xeb\xf5\x11\x6b\x85\x19\xcd\x28\x3b\xde\x8a\x86\xe3\x05\xad\xb8\x6c\x2e\x86\x47\x9b\xd1\xb2\xbc\x84\x1d\x3f\x4c\x88\x7a\xdf\x2f\x10\x57\x4b\x8b\x11\xa9\x79\xf4\x0d\x60\x8c\xcb\xd0\x39\x8b\x89\xf6\x0f\xbe\xdc\x3b\x6b\xcb\xe4\x17\x66\xc5\x7e\xe6\x77\x8e\x6d\x83\xfe\x2d\x39\xf2\x01\x89\xc3\x66\xa9\xe9\x7d\xac\x07\x27\xfb\xf0\x72\x19\xd6\x6e\x74\x5a\xfd\x05\x4e\xd1\x26\x93\xff\x8b\xa7\x7b\xf6\xbe\x50\xf8\xdc\xa4\xe6\x02\xdf\x8c\xe4\xa8\xde\x06\x34\x45\x67\x99\x16\xba\x7f\xeb\x6d\xe0\xcd\x48\x7a\xb7\xcb\xc1\x21\x05\x3e\x2b\x64\x2f\xe5\x03\xf0\xc7\x64\xce\x00\xab\x1b\x78\xd0\xec\x06\x42\xa1\x3b\x5f\xc0\xeb\x11\x86\x5e\x6d\xcd\x41\xa9\x9b\xb9\x00\xe8\xbd\x46\xe8\x55\x10\xad\xb1\xef\x34\x66\xfd\xce\x29\x45\x31\xde\xd9\xed\x4f\xdd\xe4\x1f\xd4\x02\x33\x5f\xd8\xb4\xd0\xc6\xef\x86\xe2\xef\xaf\x90\xb8\xe1\x38\x25\xcf\xc6\x14\xef\x0a\x3f\x79\x81\x1b\x0f\x92\x2a\x61\x66\x0b\x1d\x9f\x15\x5f\xca\xf0\x13\xde\xde\xbf\x75\xf6\xce\xfa\x63\x37\x23\x4a\xb2\x59\xfb\xa2\xe2\x0a\x3f\x29\x0c\xff\x49\xc5\xa6\x28\x18\x97\x38\xd1\xef\x2c\x7c\xbb\x15\x41\xb3\x19\x8d\x64\x97\x81\xc3\x6a\x85\x05\x94\xa1\x5e\x3b\x5d\xc4\xac\x97\x8c\x77\x3b\x4c\xa7\xb4\x07\x4b\x44\x4d\xc5\x12\x1c\x58\x9b\xa7\x6c\xdd\xa6\xbd\xbb\xc3\xd8\x0c\xfd\x80\x68\x92\x61\xe0\xfb\xed\xef\xe4\xd6\xa7\x96\x86\x35\xde\x6a\xa2\x91\x2a\x6a\xb1\xd0\xe1\x59\xd4\x98\x18\xe6\xce\x00\x39\xab\xaa\x7b\x37\xa0\xa7\x05\xa9\xb6\xd0\x44\x68\x58\xfc\x50\xd8\x14\xf8\xfb\x7a\x54\x29\xe8\x35\x5a\xfb\xa7\x5f\x12\xd8\x1b\x80\xdb\x0e\xfa\xf2\x7a\x29\xd0\x82\xcd\xf6\xfb\xfa\xc9\x73\xff\xd7\x82\xdd\xc1\xc0\xfa\x5f\x77\xd7\x06\x82\xe6\xc6\xf3\x4b\x40\x5a\x0e\x0c\x8e\x9f\x19\x1a\xbf\x0d\xa6\x63\x26\xd4\xd1\x70\x0e\xb4\x8f\x9f\x45\xd8\xb1\xed\xa0\x5d\x23\x35\x36\xa0\xb4\xd1\x38\x22\x69\xb4\x0b\xf6\xfb\x8f\xad\x60\xa3\x64\xa6\x2a\xd9\x36\xc3\xb1\xcb\x96\x73\x5b\xfb\x7f\x5f\xb8\x6a\x53\x4e\xb8\x74\x8d\xba\xf3\x12\x37\xaf\x63\x2f\x5e\xce\x02\x62\xbe\x0e\xbd\x74\x8e\xa2\x9a\x5c\xbf\x37\xac\xed\x34\x2b\x4b\xcc\xb1\x42\x00\x81\xfd\x9b\x0f\x3c\x6e\x95\x47\x2a\x13\x9c\xd7\x16\xbe\x80\x37\xbb\xdd\xb4\xa0\x55\x15\x38\x4a\xfd\xdd\x4e\xe9\xbc\x41\x1c\xe5\x22\xbc\xd5\xeb\x80\x7d\xa5\x64\x26\x8b\x4a\x05\xf7\xa0\xcd\xc7\x58\x3e\x2b\xff\xac\xd6\xf0\xaf\x28\x5e\x2f\x39\xdb\xd0\xc4\x0f\xfa\x2f\x78\x44\xd8\x6a\xfc\x4c\xe4\xea\xdc\xf0\xf8\xb1\x7c\x9e\x41\xc7\x82\x73\x94\x65\x98\xd7\x55\x33\x04\x93\xc3\x7f\x00\xb1\x43\x3e\xf7\x2c\x68\x3c\xb0\xcf\x7a\x16\x9d\x84\x49\x82\x53\xcc\xb5\x72\x3f\xe8\x56\xae\x6d\x5f\x72\x55\xe7\x84\x15\x7f\x83\xe4\xca\x38\xdd\x2f\x5b\xdb\x24\x10\x4d\xc0\xc7\xdf\x2c\xb3\xe7\x05\xf6\x17\x05\xcf\xfe\xed\xa0\xbb\x6c\xb5\xec\x96\x65\x01\xde\xec\xab\xf7\xd5\xf3\x86\x14\xf4\x9a\x9a\xfa\x60\xce\x61\x01\x22\x4c\x19\xcf\x91\x34\x13\xbb\x99\xe7\xd7\x45\x6f\x45\x6d\xf5\x54\x15\x38\xbd\xce\x49\x02\xbd\xf6\x14\xf2\xf0\xfa\xac\x3e\xac\x90\x33\xab\xfe\xe0\x22\xad\x27\x50\xe0\x76\x7e\xc5\xf4\xc7\x42\x75\xac\xc1\xa5\xc4\x69\xc1\x83\xa9\xd9\x2d\xd2\x73\x94\x63\x55\xa3\x03\xe9\x79\xc7\x49\xfe\x37\x24\xa4\xcd\xd3\x77\x34\x11\x4f\x3a\x9b\xf2\x1c\x55\x95\x72\x20\xd8\x6b\x99\xff\x0d\x00\x00\xff\xff\xb1\x12\x1c\x39\xf6\x1d\x00\x00")

func serviceTmplBytes() ([]byte, error) {
	return bindataRead(
		_serviceTmpl,
		"service.tmpl",
	)
}

func serviceTmpl() (*asset, error) {
	bytes, err := serviceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4d, 0xc1, 0xb, 0x36, 0xc7, 0x89, 0xf0, 0xfe, 0x50, 0x17, 0x3, 0x57, 0xbf, 0x4a, 0xf6, 0x46, 0x4f, 0xa3, 0x8, 0x6f, 0xbd, 0x55, 0x4, 0x19, 0xa9, 0xc4, 0x61, 0x76, 0xc, 0xe8, 0x42, 0xe3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"function.tmpl":  functionTmpl,
	"info.tmpl":      infoTmpl,
	"open.tmpl":      openTmpl,
	"operation.tmpl": operationTmpl,
	"pair.tmpl":      pairTmpl,
	"service.tmpl":   serviceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"function.tmpl":  &bintree{functionTmpl, map[string]*bintree{}},
	"info.tmpl":      &bintree{infoTmpl, map[string]*bintree{}},
	"open.tmpl":      &bintree{openTmpl, map[string]*bintree{}},
	"operation.tmpl": &bintree{operationTmpl, map[string]*bintree{}},
	"pair.tmpl":      &bintree{pairTmpl, map[string]*bintree{}},
	"service.tmpl":   &bintree{serviceTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
