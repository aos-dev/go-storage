// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/metadata.tmpl (2.232kB)
// tmpl/open.tmpl (1.162kB)
// tmpl/pair.tmpl (2.316kB)
// tmpl/service.tmpl (4.632kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metadataTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x4f\x8f\xd3\x3c\x18\xc4\xef\xfe\x14\xf3\x46\x3d\xb4\x52\xdf\x04\xae\xa0\x1e\x10\x8b\x10\x87\xdd\x45\xea\x0a\x21\x10\xaa\xdc\xe4\x69\x30\x75\xec\x28\x76\xb2\x94\x6c\xbe\x3b\x72\x9b\xb4\x4e\xba\x7f\x5a\x76\x6f\xb1\x33\xfe\xf9\x99\x99\x28\x51\x84\xf7\x3a\x21\xa4\xa4\xa8\xe0\x96\x12\x2c\x37\x48\xf5\x7e\x0d\xa1\x2c\x15\x8a\xcb\x28\xce\x92\xb7\xb8\xb8\xc6\xd5\xf5\x0d\x3e\x5c\x7c\xba\x09\x59\xce\xe3\x35\x4f\x09\x19\x59\x9e\x70\xcb\x19\x13\x59\xae\x0b\x8b\x31\x03\x80\x20\x15\xf6\x67\xb9\x0c\x63\x9d\x45\x5f\x4b\xae\x6e\x75\x64\xac\x2e\x78\x4a\x51\xbe\x4e\xbb\xe7\x58\x72\x63\x02\x36\x61\xac\xe2\x05\x16\xf0\xb7\xc3\x9b\x4d\x4e\x8c\x45\x11\xde\x49\x09\x5e\x71\x21\xf9\x52\x1e\x2e\x0c\x59\xac\x95\xe9\xee\xab\xeb\xff\x61\x29\xcb\xa5\x1b\x3b\xe8\x34\x8b\xad\x24\x40\xc6\xd7\x34\x97\x22\x26\x04\x7a\xf9\x8b\x62\xbb\x70\x8a\x00\xe1\xf5\x76\x75\x49\x96\xa3\x69\xce\x03\xb5\xb3\x76\xa4\xf9\x6e\xf9\x2c\x94\xb1\xdc\x0a\x63\x45\x7c\xe0\xcd\xbb\x2d\x07\x9d\x30\xf6\x00\x73\xa9\x93\xcd\xc9\x36\x4f\x65\x3c\xee\xf0\x5c\xca\x53\xe6\x58\x5d\x27\xb4\x12\xea\x38\x2a\x2f\xce\x91\xe2\x19\xe1\xcd\x0c\x42\x25\xf4\x1b\x21\x5e\xf9\x2f\xdd\x19\xff\xe5\x6b\xef\x65\xc1\x55\x4a\x18\x2d\xa6\x18\x55\x4e\xb3\x13\xb7\x82\x3d\x21\xef\xf8\xa3\x2a\xbc\x72\x8f\x77\xb0\xfa\x33\x37\x31\x97\x43\xad\x58\x39\xd1\x85\x30\xb9\xe4\x9b\xad\xd6\x13\x0c\x80\xb3\x47\xa4\x4e\x46\x2a\xe9\x6f\xb5\x46\x7b\xb7\xbb\xdd\x1d\xae\x69\x30\x43\xe0\xd6\xed\x94\x4d\x13\xb0\x01\xab\xae\x49\x25\x2e\xd6\xfb\x72\xdd\x96\xf4\xac\x58\x59\x37\xa7\xa1\xa2\x12\x31\x5d\x75\xb9\x1d\xcf\x7d\x4e\x05\x2f\xdd\xc0\x3f\x16\x10\x45\xf8\x48\xb6\x17\xf8\xad\x90\x12\x29\x59\xf4\x62\x47\xc5\x65\x49\x58\x15\x3a\xf3\x7e\x4c\x1d\x66\x55\xaa\x18\xe3\xec\x28\xa7\xa6\x99\x0c\xf9\xe3\x09\xc6\x3b\xb2\xfb\xed\xa1\x69\xa6\x58\x6a\x2d\x27\x40\xbd\xc7\x55\x53\xe8\xb5\x8b\x26\x0b\xb3\xef\xc7\x4c\x1f\xf7\x63\x7f\x48\xac\xf0\x9f\x5e\x7b\x94\x43\x72\xdf\xa8\xd0\x5f\xb6\xf3\x0f\x72\x2b\xc8\x96\x85\x6a\x9d\xfa\xaa\x29\x56\x5c\x1a\xea\x47\x27\xcd\xe3\x80\xad\xa1\x3b\xfc\x79\x8a\xd3\xaf\xe0\xf0\xd4\xc2\xaa\xb0\x1f\xd0\x64\x0a\x5b\x94\xe4\x1d\xf0\xeb\xbb\x2c\x8d\x6d\x23\x3e\x94\xf5\xd2\x1d\x7a\x97\x78\x3d\xf6\xa6\xf4\xfb\x6b\x8d\x9c\xd0\xde\xd0\xea\x03\x26\xe7\xf7\x1a\x34\x0f\x18\x14\xca\xea\x33\x0d\xce\x07\xe6\xaa\xbe\xb9\xc9\x3d\x87\x3c\xbf\x27\x18\xc5\x0c\xd5\x51\x3e\x83\x6f\xe0\xf8\xa7\xf6\x37\x00\x00\xff\xff\x8b\xaa\x50\xdd\xb8\x08\x00\x00")

func metadataTmplBytes() ([]byte, error) {
	return bindataRead(
		_metadataTmpl,
		"metadata.tmpl",
	)
}

func metadataTmpl() (*asset, error) {
	bytes, err := metadataTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metadata.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfd, 0x23, 0x7, 0x6c, 0x43, 0x3c, 0x66, 0xbd, 0x2b, 0x7e, 0xde, 0x29, 0x70, 0x72, 0x1a, 0xd3, 0x72, 0x2, 0x4c, 0xe7, 0x1c, 0x9e, 0x14, 0x33, 0x60, 0x81, 0xdf, 0xcf, 0x92, 0xf8, 0x1e, 0x3f}}
	return a, nil
}

var _openTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xcf\x6a\xe3\x40\x0c\xc6\xef\xf3\x14\x22\xe4\x90\x2c\xde\x99\x7b\x96\x9c\x36\x2d\xf4\xd0\xb8\xd0\x1c\x0a\xa5\x14\xc5\x56\xdc\xa1\xf1\xcc\x20\x8f\x1d\x82\xc9\xbb\x17\xc7\x7f\x6a\x1a\x93\x36\xe9\xc1\xd8\x96\x3e\x7d\x92\x7e\x48\x29\xf8\x6f\x63\x82\x84\x0c\x31\x7a\x8a\x61\xbd\x87\xc4\x76\xff\x50\x68\x04\x6d\x3c\xb1\xc1\xad\x8a\xd2\x58\x45\x96\x29\xf7\x7a\x9b\xfd\x83\x45\x08\xcb\x70\x05\x37\x8b\xbb\x95\x14\x0e\xa3\x77\x4c\x08\xba\xbc\x10\x3a\x75\x96\x3d\x4c\xc4\x28\xd1\xfe\x2d\x5f\xcb\xc8\xa6\xea\x29\x47\xb3\xb3\x2a\xf3\x96\x31\xa1\xd1\x99\x9c\xf2\x7b\x47\xd9\x48\x94\xe5\x5f\x60\x34\x09\xc1\xf8\x35\x80\x71\xc6\x05\xcc\xe6\x20\x1f\x89\x0b\x1d\x11\x1c\x0e\x02\x00\xe0\x8c\x4f\x56\x2b\x33\x55\x96\xc7\x72\xb9\xc4\xb4\xaa\xab\xad\xc9\xc4\x95\xc7\x54\x88\xaa\x1f\x58\x47\xe6\x36\x37\x11\x6c\x72\x13\x4d\xac\xf3\x20\xa5\xfc\x73\x1c\x45\x3e\xa0\xe6\x29\x4c\xaa\x09\x1a\xef\x76\x0a\x0e\x8e\x11\xfa\x8c\xd7\x6f\x0e\x80\x98\xab\xc7\xf2\x54\x88\x02\xb9\x6b\x70\x8f\x0e\xe6\x90\xa2\x7b\xce\x3c\x6b\x93\xbc\xb4\x89\xf2\xeb\xc6\x29\x79\x1c\x5a\xb9\x92\xe9\x0d\xa0\x89\x6b\x4d\x9b\x97\xa1\x6b\x03\xcd\x34\xa1\x6b\x6b\xea\xba\x26\xdd\x70\x90\xab\xbd\xa3\xd9\x69\x78\x49\xbb\xa0\x6b\xd4\x60\xea\x7d\x1e\x7a\xc4\x5a\x0c\x57\x91\x1b\x22\xd4\x37\x1c\x24\xd5\x17\x5c\x4a\xec\x84\xd6\x75\x70\xba\x0d\x7e\x0a\xa9\xb9\x89\xef\x20\x5d\x70\x48\x7d\xcb\x61\x4c\x3d\xc1\x95\x98\x7e\x7b\x43\xdd\x06\x67\x31\x7d\x04\x00\x00\xff\xff\x9a\xcd\xbf\xe2\x8a\x04\x00\x00")

func openTmplBytes() ([]byte, error) {
	return bindataRead(
		_openTmpl,
		"open.tmpl",
	)
}

func openTmpl() (*asset, error) {
	bytes, err := openTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "open.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb0, 0x22, 0x2, 0x77, 0x42, 0x7d, 0x26, 0x91, 0xac, 0xde, 0x72, 0x9e, 0x9f, 0x10, 0xf6, 0x88, 0xa2, 0x33, 0xf2, 0x72, 0x8a, 0x7, 0xa5, 0x42, 0xbc, 0x3c, 0x42, 0x42, 0x17, 0xff, 0x6f, 0x55}}
	return a, nil
}

var _pairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xc1\x6e\xe3\x36\x10\xbd\xeb\x2b\xa6\x82\x11\x48\x85\x22\xf5\xac\xc2\x87\xa2\xf1\xa1\x28\x1a\xe7\x60\xb4\x05\x82\x60\xc1\x50\x63\x99\x30\x45\x11\x24\xc5\xac\xa1\xd5\xbf\x2f\x48\xda\x8e\x6c\xd9\x89\x2f\x0b\x2c\x4f\x22\xe7\x71\xe6\xcd\x9b\x19\xda\x45\x01\x7f\xb6\x15\x42\x8d\x02\x15\x31\x58\xc1\xeb\x0e\xea\xf6\xb8\x07\x26\x0c\x2a\x41\x78\x41\x9b\xea\x77\x78\x58\xc2\xe3\x72\x05\x8b\x87\xbf\x56\x79\x24\x09\xdd\x92\x1a\x41\x12\xa6\x74\x14\xb1\x46\xb6\xca\x40\x12\x01\x00\xc4\xb4\x15\x06\xbf\x9a\x38\x0a\xdb\x9a\x99\x4d\xf7\x9a\xd3\xb6\x29\xfe\xef\x88\x78\x6b\x0b\x6d\x5a\x45\x6a\x8c\x3f\xb1\x17\x72\x5b\x17\x1a\xeb\x06\x85\xb9\x09\x8b\xa2\x92\x2d\xbb\x11\x4c\x15\x56\x28\x0c\x23\xfc\x36\x1e\xe1\x9b\x72\xa2\xf5\x4d\x17\x36\xc6\x48\xca\xd9\x2d\xdc\xcd\x4e\xa2\x8e\xa3\x34\x8a\x8a\x02\xfe\xe0\x1c\x88\x25\x8c\x93\x57\xbe\x17\x38\x8f\x68\x2b\xb4\xd3\xb7\xef\xef\x41\x11\x51\x23\xcc\xbe\x64\x30\xb3\x50\xce\x21\x7f\x72\x18\x18\x06\x1f\xc6\x21\x66\x52\x90\x06\x9d\x6d\x66\xf3\x47\xf7\xf9\x0d\x4c\xfb\x44\x34\x25\xfc\x80\x2b\x0a\xe8\xfb\x03\x72\x18\xe0\x8d\x71\xee\x4f\x6c\xfe\x80\x9a\x2a\x26\x0d\x6b\xc5\xbb\xd7\x11\x74\x0e\x71\x00\x3e\x86\x83\xd8\xd3\x42\x51\x39\x74\x1a\x7d\x42\xf2\x16\x82\x45\x01\xff\x31\xb3\x99\x12\x24\x52\xf2\x1d\x9c\x44\x07\x4b\x78\x87\x60\x5a\x58\x7a\xca\xda\xdd\x5e\x6d\x98\xf6\xda\x01\xd3\xd0\x69\xac\x9c\xfd\x62\x76\xeb\x4e\xd0\x49\xb0\xc4\xee\xc1\xab\x9d\x74\xfb\x14\x7e\xf5\x35\xf2\x59\x40\xef\x25\x51\x68\x3a\x25\xe0\xee\xdd\x10\xce\xdd\xfa\x1b\x77\xe5\x89\x66\xd9\xd1\xf4\xaf\x63\x5b\x82\x0d\x27\x43\x34\x8c\xc5\x73\xd4\x9f\x88\xd2\x18\xb2\x95\xfe\x93\xc0\xf6\xde\x42\x43\xa4\xcb\xc1\xf7\x03\x68\xce\x28\xe6\x81\xbb\xc7\x27\x8d\x03\x3c\x6b\xa3\x98\xa8\x5f\xfc\xe0\xae\x09\xc5\x7e\x48\x21\x79\x7e\x19\x91\xcf\x00\x95\x6a\x55\xba\x4f\x22\xb8\x2b\xe7\xd0\x90\x2d\x9e\x23\x7f\xcb\x80\xa3\x48\x9a\x34\x0d\x93\x6c\x89\x72\xb7\x83\x87\x70\xb4\x6e\x15\x6c\x33\xf0\x25\x0e\x25\x6f\xe0\x5d\x06\x77\x41\x5a\x18\xd1\x39\x9a\xf4\x1b\x33\x74\x03\xdb\x11\xfa\xf3\xde\x1e\x23\x6f\xe9\xf1\xc3\xa2\x44\xe3\x49\x39\xca\x13\xf3\x88\x8f\xf2\x51\x6d\x9e\x38\x1d\xd2\x11\xb9\x89\xab\x63\x6f\x4c\x7d\x79\x61\x2d\xcc\x41\xd9\x89\xcd\x51\x67\x6b\x77\xdd\xd7\x4d\x9d\x53\x3d\xc6\x08\xa5\xbc\xe6\xdc\x97\x11\xe6\xd0\xf7\x47\x4f\xc3\x90\x28\x9b\x5e\xc4\xb3\xb5\x87\xff\x32\x07\xc1\xf8\x85\xa4\x0e\x6b\xdf\xd2\x82\xf1\x0c\xee\x16\xae\xca\xd7\xb1\x4b\x59\x42\xec\x1b\x34\xce\xae\x82\x16\x4a\x95\x2e\xf4\x75\xc4\x07\x93\x72\xbe\x9c\xde\xe5\xe1\xe9\xd9\x8b\xff\x41\xec\xd3\x41\x3b\x5f\x53\xd5\xa7\x27\xa3\xc1\x3c\x37\x55\xb8\x26\x1d\x37\x97\xcb\xf3\x63\x64\x5c\x28\xe5\x86\xc1\x25\xfe\x0f\xd3\x0d\x31\x74\xf3\xb3\xcb\x3a\x9c\xcc\xf6\x05\x29\xaf\xca\xe8\xfe\x42\x30\xd1\x61\x34\x75\x15\x9e\xac\xb9\xfb\x29\x40\x51\x25\x7e\x9b\x9d\x3c\xc3\x3e\xf9\x6d\x76\xa0\x2a\xed\x90\xee\x1f\xdb\xf1\xc3\xbd\xbf\x28\x18\x8f\x86\xe8\x7b\x00\x00\x00\xff\xff\xe7\xd3\x93\xbc\x0c\x09\x00\x00")

func pairTmplBytes() ([]byte, error) {
	return bindataRead(
		_pairTmpl,
		"pair.tmpl",
	)
}

func pairTmpl() (*asset, error) {
	bytes, err := pairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7e, 0xc2, 0x7c, 0xf1, 0xf1, 0xbf, 0x30, 0xd8, 0xfa, 0x92, 0xbf, 0x22, 0xb6, 0xb6, 0x99, 0x81, 0x67, 0xd1, 0x7c, 0x41, 0xfb, 0x7e, 0x27, 0x84, 0x6e, 0xc4, 0x4, 0x2f, 0x22, 0x6a, 0x61, 0x83}}
	return a, nil
}

var _serviceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5b\x6f\xdb\x36\x14\x7e\xd7\xaf\x38\x13\x82\x41\x2e\x1c\x6a\xeb\x63\x0b\xbf\xac\x17\x6c\x18\x9a\x04\x4d\x77\x01\x8a\x22\x60\xa5\x63\x87\xb0\x44\x72\x24\xad\x26\xd0\xf4\xdf\x07\x5e\xe4\x50\x17\x5f\x5a\xac\x7e\x89\x2c\x9e\xcb\x77\xbe\xf3\xf1\x90\x4e\x9e\xc3\x2b\x51\x22\x6c\x90\xa3\xa2\x06\x4b\xf8\xfc\x08\x1b\xb1\xff\x0e\x0d\xa3\xc0\xb8\x41\xc5\x69\x95\x17\x75\x99\x6b\x54\x0d\x2b\xf0\x25\xbc\xbe\x86\xab\xeb\x0f\xf0\xe6\xf5\x6f\x1f\x48\x22\x69\xb1\xa5\x1b\x84\xb6\x05\x72\x45\x6b\x84\xae\x4b\x12\x56\x4b\xa1\x0c\x64\x49\x5a\x08\x6e\xf0\xc1\xa4\x49\xca\x44\x9a\x24\xe9\x86\x99\xfb\xdd\x67\x52\x88\x3a\x17\x12\xb9\x51\xb4\x60\x7c\x13\x3f\x5f\x6e\xc6\x86\x7f\xef\x28\xff\x22\x72\x6d\x84\xa2\x1b\x4c\x8f\xac\xe5\x72\xbb\xc9\x35\x6e\x6a\xe4\xe6\xa4\x1d\xf2\x52\x0a\x76\x86\x61\xa1\xb0\x44\x6e\x18\xad\x4e\xe7\xf6\xcf\x45\x45\xb5\x3e\x69\x7c\x6f\x8c\x2c\x2a\x76\x0a\x6b\xe0\xfd\x78\x3c\xf3\x28\xad\x85\xd4\x70\xca\x28\x97\x94\xa9\x33\x82\xe5\x35\x1a\x5a\x52\x43\xd3\x64\x91\x24\x6d\x7b\x09\x17\xaf\xa9\xa1\xf0\x62\x05\xc4\x35\xb9\xa1\x0a\xee\xe0\x89\x1c\x72\xa3\x44\xc3\x4a\x54\x61\xa5\xe7\x77\xfc\x3e\xf4\x87\xdc\xfa\xbf\xfd\x5b\x9f\x9b\xdc\xfa\xbf\x6a\xf8\xda\x11\x4a\x3e\x3c\x4a\xdc\x07\xf1\xa4\x90\x5b\xff\xf0\x46\x29\xd1\xfb\x3c\xf1\x4a\xae\xa5\x61\x82\xeb\x24\xc9\x73\xb0\xde\xc0\x34\x98\x7b\x04\x5b\x21\xac\x85\x1a\xc8\xb6\x10\x5c\x1b\x6f\xb6\x82\x34\x5a\x49\x7d\xfd\x06\x6b\x59\xd9\xad\x91\x7a\x0a\xa1\xa6\x5b\xbc\xad\x58\x81\x90\x06\x3c\x29\xf4\x80\xc0\xa1\x7d\x47\xa5\x8d\x7c\xd2\x3b\x48\x1b\xfa\xf2\x8f\x78\x87\x1d\x75\xb7\xde\xf1\xe2\x10\x84\x3e\x48\x5f\xd9\xb9\x11\xa6\x30\xf6\x5b\xda\x86\x28\x71\xcd\xf8\x53\x01\x5d\x97\x00\x00\x38\x69\x48\x6e\x85\xc1\x78\x89\x0f\x40\xe0\x27\xf8\x17\x8c\xb8\xa1\xba\xa0\xd5\xc0\xac\x0c\x0a\xea\x0d\x7f\x1e\xac\x9a\x50\x73\x64\xf0\xdc\x25\xef\x2d\x14\xe5\x1b\x84\x8b\xbb\x25\x5c\x34\xd6\xca\xc5\x23\xd7\xb2\x8f\xf2\x04\x67\xeb\x96\x1b\xbb\x36\x85\x62\x3f\x56\x2a\xb6\x8e\xb6\x75\xe0\xbb\xce\x3d\x6c\xa1\xeb\x2c\x82\x15\xd4\x54\x7e\xd4\x46\x31\xbe\xf9\xa4\x8d\xda\x15\xa6\xed\xda\xbd\x73\x9e\xc3\x3b\x34\xf4\xd2\x13\x52\xba\x40\x7a\x80\x20\x20\x6d\x02\x8c\xf7\xf8\xcf\x8e\x29\x2c\x63\x04\xf6\x63\x55\x76\xd1\x58\x89\xbd\x80\x7d\x9a\x6e\x39\x08\x85\xbc\x1c\xd7\x37\x8a\xee\x55\x3e\xac\xef\x1b\xa3\x07\xb2\xed\xc7\xed\x91\x79\x8a\x42\x34\x18\x30\x72\xa3\xf0\x08\x21\x6c\x6d\x91\xbe\xdd\xf1\x62\x8c\xf2\x95\x97\x23\x04\x59\x92\xf0\x7d\x0e\xe5\xd7\x37\xc0\x4a\x65\x8b\x8f\x27\xda\x60\x0b\xb3\x56\x03\xa9\x84\x85\xcc\x4b\x71\x2f\x4e\x6b\xb8\x18\x37\xe4\x70\x8f\x86\x00\x0e\x75\xea\x57\xaa\xe7\x31\x7c\x16\xa2\xfa\xae\x50\x23\x52\xdb\xd6\x76\xe9\x9e\xea\x1b\x85\x6b\xf6\xe0\x7a\x9d\x5e\xe1\x97\x14\x2e\x47\x70\xed\xe4\x00\x49\x95\xc6\xbd\x36\x6e\x28\x53\xc3\x3c\x95\xc6\x79\xc7\x4c\xc3\xb3\xbd\x1f\x2c\x7c\xa0\xa9\x3f\x2f\x07\xee\x7b\xf1\x65\x42\x1a\x0d\x84\x90\x67\xee\x9c\x22\xd6\x73\x01\xd9\xb3\x79\xa9\x2e\x01\xed\xd1\xb0\x88\xb4\xaa\x50\xef\x2a\x63\x3b\xf2\xe3\xbc\x4f\x1b\x91\xd2\xd0\x6a\x87\xda\x1a\xdb\x41\x99\x45\x63\xc1\x5d\x8e\xd6\xb4\xc0\xb6\x5b\xec\xcd\xed\x99\x72\xb7\x04\xb7\x33\xbd\x02\x1c\xda\x76\xbc\x17\xb8\x30\x90\xcd\x50\xbd\x18\x2b\x83\xad\x6d\x3c\xe1\xe6\xd9\xc1\x79\xf5\xb1\x21\xbf\xe3\xe3\xa7\x97\xf0\x83\xd8\x46\xb9\x7c\xb1\x66\xa7\x38\x70\x56\x2d\x9f\x0e\xcd\x2b\xfc\x62\x59\xfb\x83\xeb\x9d\xb4\x37\x35\x2c\xdd\xf9\x99\x35\x8b\x81\xef\x51\xe1\x78\x62\x42\x66\x58\x41\x43\xfe\xb4\x6f\xe6\x84\x65\x67\x6d\x03\x11\x5f\x83\x15\xb1\xf5\x2a\x1f\xcc\x12\x2b\x09\x90\xdf\x38\x51\x1a\x47\xd8\xaa\x87\x28\x75\x3f\x53\x3e\x8d\xa9\x9d\xa1\xcb\x6a\xa3\xb7\x77\x65\x65\xa3\xc1\x34\xe2\xc8\x0b\xfd\x44\x94\x3e\xc4\x2f\xb4\xd8\x6e\x94\xd8\xf1\x32\x3b\x83\xea\x29\x23\xf5\xff\x3a\xf4\xdc\x41\x19\xec\x26\x33\xe5\x04\xa3\x5e\x7e\xf8\x08\x5d\x37\x61\x75\xaa\x42\x38\xa1\xc4\x1e\xa3\x97\xe1\x30\xfc\x21\xa2\x0e\xb5\x30\x6a\x40\x14\xc5\xb7\xf2\xc8\x90\xfc\x0a\xe9\x7f\xf5\x78\xff\x7e\x54\x1f\x12\x70\x38\x50\x9e\x8a\x37\x2a\xda\x9b\x27\x28\x9a\x61\xe8\x3c\x82\x92\x51\xaf\x7d\x8e\xa5\xed\x79\x32\x74\x8c\x9c\xc2\xe3\xf8\x92\x39\xbc\xa5\xc6\xd7\x44\x6e\xef\xa4\xf1\x6d\x73\x7a\x11\xf5\x36\xdf\x74\x09\x0d\xd2\xbc\x1a\x25\x79\x1e\xd9\x9c\x77\x0d\x85\x8b\x35\x0f\xba\x18\x0f\xa9\x7e\x7c\xad\xf9\x9c\x52\xfc\x8a\x6d\x61\x3f\x40\x46\x46\xe0\x47\x82\x4f\x41\x6e\xa8\x42\x6e\x6d\xfe\x62\xe6\xbe\xf7\xa0\x65\xa9\xfb\xa9\x03\x61\xca\xf7\x3f\x78\x06\x4e\x64\x12\xd9\x9f\xd1\xc1\xee\x3d\x16\xc8\x1a\x54\xb6\xff\xc7\x12\x66\x85\x79\x18\xdf\xe0\x96\x91\x03\xad\xb5\x0b\x91\xc1\x3e\xb0\x55\x88\x7f\x39\xdd\xbf\x5a\x52\xbe\x04\x1b\xf3\xc5\x0a\xa2\x7f\x0e\x90\x5b\x43\x95\xb9\x95\x94\xbf\x55\xa2\x8e\x72\x2f\x8f\xfd\xee\xed\xa7\x4d\x6e\x73\xc7\xfd\xed\x3a\xa7\x7f\x1e\x3d\xc7\xf5\xa5\x8b\x09\xb0\x12\xd7\xa8\x1c\x3c\xf2\x96\x71\xa6\xef\xb3\x45\x32\x31\x72\x83\x19\x56\x40\xa5\x44\x5e\x66\xee\xeb\x12\xa4\x26\x23\xc2\x16\xd3\xf8\x61\xe3\xe8\x09\x96\xbe\x21\xaf\x68\x55\xf9\x76\x4c\x7c\xa7\x4a\x9a\x99\x5b\xd1\xab\xe9\x1e\x84\xae\xfb\x2f\x00\x00\xff\xff\xf6\xa5\xa6\x0f\x18\x12\x00\x00")

func serviceTmplBytes() ([]byte, error) {
	return bindataRead(
		_serviceTmpl,
		"service.tmpl",
	)
}

func serviceTmpl() (*asset, error) {
	bytes, err := serviceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x74, 0xd, 0x94, 0xc8, 0x3d, 0xfc, 0x8, 0x2c, 0x39, 0xf2, 0xbd, 0xb9, 0x4a, 0x96, 0xbd, 0x39, 0x3a, 0xf7, 0xa4, 0x65, 0xa, 0x65, 0x4b, 0x92, 0xb0, 0xd9, 0x32, 0xe2, 0x84, 0x16, 0xdd, 0x38}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"metadata.tmpl": metadataTmpl,
	"open.tmpl":     openTmpl,
	"pair.tmpl":     pairTmpl,
	"service.tmpl":  serviceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"metadata.tmpl": &bintree{metadataTmpl, map[string]*bintree{}},
	"open.tmpl":     &bintree{openTmpl, map[string]*bintree{}},
	"pair.tmpl":     &bintree{pairTmpl, map[string]*bintree{}},
	"service.tmpl":  &bintree{serviceTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
