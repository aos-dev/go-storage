// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/metadata.tmpl (2.232kB)
// tmpl/open.tmpl (1.26kB)
// tmpl/pair.tmpl (2.316kB)
// tmpl/service.tmpl (4.671kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metadataTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x4f\x8f\xd3\x3c\x18\xc4\xef\xfe\x14\xf3\x46\x3d\xb4\x52\xdf\x04\xae\xa0\x1e\x10\x8b\x10\x87\xdd\x45\xea\x0a\x21\x10\xaa\xdc\xe4\x69\x30\x75\xec\x28\x76\xb2\x94\x6c\xbe\x3b\x72\x9b\xb4\x4e\xba\x7f\x5a\x76\x6f\xb1\x33\xfe\xf9\x99\x99\x28\x51\x84\xf7\x3a\x21\xa4\xa4\xa8\xe0\x96\x12\x2c\x37\x48\xf5\x7e\x0d\xa1\x2c\x15\x8a\xcb\x28\xce\x92\xb7\xb8\xb8\xc6\xd5\xf5\x0d\x3e\x5c\x7c\xba\x09\x59\xce\xe3\x35\x4f\x09\x19\x59\x9e\x70\xcb\x19\x13\x59\xae\x0b\x8b\x31\x03\x80\x20\x15\xf6\x67\xb9\x0c\x63\x9d\x45\x5f\x4b\xae\x6e\x75\x64\xac\x2e\x78\x4a\x51\xbe\x4e\xbb\xe7\x58\x72\x63\x02\x36\x61\xac\xe2\x05\x16\xf0\xb7\xc3\x9b\x4d\x4e\x8c\x45\x11\xde\x49\x09\x5e\x71\x21\xf9\x52\x1e\x2e\x0c\x59\xac\x95\xe9\xee\xab\xeb\xff\x61\x29\xcb\xa5\x1b\x3b\xe8\x34\x8b\xad\x24\x40\xc6\xd7\x34\x97\x22\x26\x04\x7a\xf9\x8b\x62\xbb\x70\x8a\x00\xe1\xf5\x76\x75\x49\x96\xa3\x69\xce\x03\xb5\xb3\x76\xa4\xf9\x6e\xf9\x2c\x94\xb1\xdc\x0a\x63\x45\x7c\xe0\xcd\xbb\x2d\x07\x9d\x30\xf6\x00\x73\xa9\x93\xcd\xc9\x36\x4f\x65\x3c\xee\xf0\x5c\xca\x53\xe6\x58\x5d\x27\xb4\x12\xea\x38\x2a\x2f\xce\x91\xe2\x19\xe1\xcd\x0c\x42\x25\xf4\x1b\x21\x5e\xf9\x2f\xdd\x19\xff\xe5\x6b\xef\x65\xc1\x55\x4a\x18\x2d\xa6\x18\x55\x4e\xb3\x13\xb7\x82\x3d\x21\xef\xf8\xa3\x2a\xbc\x72\x8f\x77\xb0\xfa\x33\x37\x31\x97\x43\xad\x58\x39\xd1\x85\x30\xb9\xe4\x9b\xad\xd6\x13\x0c\x80\xb3\x47\xa4\x4e\x46\x2a\xe9\x6f\xb5\x46\x7b\xb7\xbb\xdd\x1d\xae\x69\x30\x43\xe0\xd6\xed\x94\x4d\x13\xb0\x01\xab\xae\x49\x25\x2e\xd6\xfb\x72\xdd\x96\xf4\xac\x58\x59\x37\xa7\xa1\xa2\x12\x31\x5d\x75\xb9\x1d\xcf\x7d\x4e\x05\x2f\xdd\xc0\x3f\x16\x10\x45\xf8\x48\xb6\x17\xf8\xad\x90\x12\x29\x59\xf4\x62\x47\xc5\x65\x49\x58\x15\x3a\xf3\x7e\x4c\x1d\x66\x55\xaa\x18\xe3\xec\x28\xa7\xa6\x99\x0c\xf9\xe3\x09\xc6\x3b\xb2\xfb\xed\xa1\x69\xa6\x58\x6a\x2d\x27\x40\xbd\xc7\x55\x53\xe8\xb5\x8b\x26\x0b\xb3\xef\xc7\x4c\x1f\xf7\x63\x7f\x48\xac\xf0\x9f\x5e\x7b\x94\x43\x72\xdf\xa8\xd0\x5f\xb6\xf3\x0f\x72\x2b\xc8\x96\x85\x6a\x9d\xfa\xaa\x29\x56\x5c\x1a\xea\x47\x27\xcd\xe3\x80\xad\xa1\x3b\xfc\x79\x8a\xd3\xaf\xe0\xf0\xd4\xc2\xaa\xb0\x1f\xd0\x64\x0a\x5b\x94\xe4\x1d\xf0\xeb\xbb\x2c\x8d\x6d\x23\x3e\x94\xf5\xd2\x1d\x7a\x97\x78\x3d\xf6\xa6\xf4\xfb\x6b\x8d\x9c\xd0\xde\xd0\xea\x03\x26\xe7\xf7\x1a\x34\x0f\x18\x14\xca\xea\x33\x0d\xce\x07\xe6\xaa\xbe\xb9\xc9\x3d\x87\x3c\xbf\x27\x18\xc5\x0c\xd5\x51\x3e\x83\x6f\xe0\xf8\xa7\xf6\x37\x00\x00\xff\xff\x8b\xaa\x50\xdd\xb8\x08\x00\x00")

func metadataTmplBytes() ([]byte, error) {
	return bindataRead(
		_metadataTmpl,
		"metadata.tmpl",
	)
}

func metadataTmpl() (*asset, error) {
	bytes, err := metadataTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metadata.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfd, 0x23, 0x7, 0x6c, 0x43, 0x3c, 0x66, 0xbd, 0x2b, 0x7e, 0xde, 0x29, 0x70, 0x72, 0x1a, 0xd3, 0x72, 0x2, 0x4c, 0xe7, 0x1c, 0x9e, 0x14, 0x33, 0x60, 0x81, 0xdf, 0xcf, 0x92, 0xf8, 0x1e, 0x3f}}
	return a, nil
}

var _openTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcf\x8e\xda\x40\x0c\xc6\xef\xf3\x14\x16\xe2\x00\x55\x3a\x73\xa7\xe2\x54\x5a\xa9\x87\x92\x4a\xe5\x50\xa9\x5a\xad\x4c\x62\xb2\xa3\x25\x33\x23\x67\x12\x84\x22\xde\x7d\x15\xf2\x67\x03\x1b\x58\xc1\xee\x01\x91\xf1\x67\x7f\xb6\x7f\xb2\x52\xf0\xdd\xc6\x04\x09\x19\x62\xf4\x14\xc3\x7a\x0f\x89\xed\xde\x50\x68\x04\x6d\x3c\xb1\xc1\xad\x8a\xd2\x58\x45\x96\x29\xf7\x7a\x9b\x7d\x83\x45\x08\xcb\x70\x05\x3f\x16\xbf\x56\x52\x38\x8c\x9e\x31\x21\xe8\x74\x21\x74\xea\x2c\x7b\x98\x88\x51\xa2\xfd\x53\xbe\x96\x91\x4d\xd5\xbf\x1c\xcd\xce\xaa\xcc\x5b\xc6\x84\x46\x57\x34\xe5\xf7\x8e\xb2\x91\x28\xcb\xaf\xc0\x68\x12\x82\xf1\x63\x00\xe3\x8c\x0b\x98\xcd\x41\xfe\x25\x2e\x74\x44\x70\x38\x08\x00\x80\x2b\x3e\x59\x9d\x99\xa9\xb2\x3c\x96\xcb\x25\xa6\x55\x5d\x6d\x4d\x26\xae\x3c\xa6\x42\x54\xfd\xc0\x3a\x32\x3f\x73\x13\xc1\x26\x37\xd1\xc4\x3a\x0f\x52\xca\x2f\xc7\x51\xe4\x1f\xd4\x3c\x85\x49\x35\x41\xe3\xdd\x4e\xc1\xc1\x31\x42\xaf\xf1\xfa\x9f\x03\x20\xe6\xea\x67\x79\x2a\x44\x81\xdc\x35\xf8\x8d\x0e\xe6\x90\xa2\xfb\x9f\x79\xd6\x26\x79\x68\x85\xf2\x7c\xe3\x94\x3c\x0e\xad\x5c\xa5\xe9\x4d\xad\x5f\xd0\xd0\xc4\xa7\xba\x0c\x5d\x1b\x68\x26\x0d\x5d\x5b\x53\xd7\x35\x72\xc3\x48\xae\xf6\x8e\x66\x6f\xc3\x4b\xda\x05\x5d\xa3\x06\xe1\xd9\xb3\xf7\x79\xe8\xc1\x6d\x89\xdd\x05\x79\x08\x66\xdf\x70\x10\x6a\x3f\xe1\x53\xe0\x5e\xd2\xcf\x58\xde\xc8\xb3\xdb\xf2\xa4\xc7\x6d\x6c\x9b\xab\x7b\x8f\xed\x0d\xa7\xda\xb7\x1c\xa6\xdb\x4b\xb8\x93\xee\x47\x2f\xb1\xdb\xe0\x2a\xa6\x97\x00\x00\x00\xff\xff\x22\xfc\x6e\x1a\xec\x04\x00\x00")

func openTmplBytes() ([]byte, error) {
	return bindataRead(
		_openTmpl,
		"open.tmpl",
	)
}

func openTmpl() (*asset, error) {
	bytes, err := openTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "open.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xad, 0xc8, 0xcf, 0xd7, 0x74, 0x3a, 0x76, 0x8c, 0x65, 0x19, 0x92, 0xa7, 0x90, 0x56, 0xbb, 0x62, 0x9b, 0xda, 0x54, 0xd8, 0xd1, 0xc3, 0xe6, 0xf4, 0x24, 0xfd, 0x7, 0xbf, 0xa3, 0x6d, 0xbb, 0x99}}
	return a, nil
}

var _pairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xc1\x6e\xe3\x36\x10\xbd\xeb\x2b\xa6\x82\x11\x48\x85\x22\xf5\xac\xc2\x87\xa2\xf1\xa1\x28\x1a\xe7\x60\xb4\x05\x82\x60\xc1\x50\x63\x99\x30\x45\x11\x24\xc5\xac\xa1\xd5\xbf\x2f\x48\xda\x8e\x6c\xd9\x89\x2f\x0b\x2c\x4f\x22\xe7\x71\xe6\xcd\x9b\x19\xda\x45\x01\x7f\xb6\x15\x42\x8d\x02\x15\x31\x58\xc1\xeb\x0e\xea\xf6\xb8\x07\x26\x0c\x2a\x41\x78\x41\x9b\xea\x77\x78\x58\xc2\xe3\x72\x05\x8b\x87\xbf\x56\x79\x24\x09\xdd\x92\x1a\x41\x12\xa6\x74\x14\xb1\x46\xb6\xca\x40\x12\x01\x00\xc4\xb4\x15\x06\xbf\x9a\x38\x0a\xdb\x9a\x99\x4d\xf7\x9a\xd3\xb6\x29\xfe\xef\x88\x78\x6b\x0b\x6d\x5a\x45\x6a\x8c\x3f\xb1\x17\x72\x5b\x17\x1a\xeb\x06\x85\xb9\x09\x8b\xa2\x92\x2d\xbb\x11\x4c\x15\x56\x28\x0c\x23\xfc\x36\x1e\xe1\x9b\x72\xa2\xf5\x4d\x17\x36\xc6\x48\xca\xd9\x2d\xdc\xcd\x4e\xa2\x8e\xa3\x34\x8a\x8a\x02\xfe\xe0\x1c\x88\x25\x8c\x93\x57\xbe\x17\x38\x8f\x68\x2b\xb4\xd3\xb7\xef\xef\x41\x11\x51\x23\xcc\xbe\x64\x30\xb3\x50\xce\x21\x7f\x72\x18\x18\x06\x1f\xc6\x21\x66\x52\x90\x06\x9d\x6d\x66\xf3\x47\xf7\xf9\x0d\x4c\xfb\x44\x34\x25\xfc\x80\x2b\x0a\xe8\xfb\x03\x72\x18\xe0\x8d\x71\xee\x4f\x6c\xfe\x80\x9a\x2a\x26\x0d\x6b\xc5\xbb\xd7\x11\x74\x0e\x71\x00\x3e\x86\x83\xd8\xd3\x42\x51\x39\x74\x1a\x7d\x42\xf2\x16\x82\x45\x01\xff\x31\xb3\x99\x12\x24\x52\xf2\x1d\x9c\x44\x07\x4b\x78\x87\x60\x5a\x58\x7a\xca\xda\xdd\x5e\x6d\x98\xf6\xda\x01\xd3\xd0\x69\xac\x9c\xfd\x62\x76\xeb\x4e\xd0\x49\xb0\xc4\xee\xc1\xab\x9d\x74\xfb\x14\x7e\xf5\x35\xf2\x59\x40\xef\x25\x51\x68\x3a\x25\xe0\xee\xdd\x10\xce\xdd\xfa\x1b\x77\xe5\x89\x66\xd9\xd1\xf4\xaf\x63\x5b\x82\x0d\x27\x43\x34\x8c\xc5\x73\xd4\x9f\x88\xd2\x18\xb2\x95\xfe\x93\xc0\xf6\xde\x42\x43\xa4\xcb\xc1\xf7\x03\x68\xce\x28\xe6\x81\xbb\xc7\x27\x8d\x03\x3c\x6b\xa3\x98\xa8\x5f\xfc\xe0\xae\x09\xc5\x7e\x48\x21\x79\x7e\x19\x91\xcf\x00\x95\x6a\x55\xba\x4f\x22\xb8\x2b\xe7\xd0\x90\x2d\x9e\x23\x7f\xcb\x80\xa3\x48\x9a\x34\x0d\x93\x6c\x89\x72\xb7\x83\x87\x70\xb4\x6e\x15\x6c\x33\xf0\x25\x0e\x25\x6f\xe0\x5d\x06\x77\x41\x5a\x18\xd1\x39\x9a\xf4\x1b\x33\x74\x03\xdb\x11\xfa\xf3\xde\x1e\x23\x6f\xe9\xf1\xc3\xa2\x44\xe3\x49\x39\xca\x13\xf3\x88\x8f\xf2\x51\x6d\x9e\x38\x1d\xd2\x11\xb9\x89\xab\x63\x6f\x4c\x7d\x79\x61\x2d\xcc\x41\xd9\x89\xcd\x51\x67\x6b\x77\xdd\xd7\x4d\x9d\x53\x3d\xc6\x08\xa5\xbc\xe6\xdc\x97\x11\xe6\xd0\xf7\x47\x4f\xc3\x90\x28\x9b\x5e\xc4\xb3\xb5\x87\xff\x32\x07\xc1\xf8\x85\xa4\x0e\x6b\xdf\xd2\x82\xf1\x0c\xee\x16\xae\xca\xd7\xb1\x4b\x59\x42\xec\x1b\x34\xce\xae\x82\x16\x4a\x95\x2e\xf4\x75\xc4\x07\x93\x72\xbe\x9c\xde\xe5\xe1\xe9\xd9\x8b\xff\x41\xec\xd3\x41\x3b\x5f\x53\xd5\xa7\x27\xa3\xc1\x3c\x37\x55\xb8\x26\x1d\x37\x97\xcb\xf3\x63\x64\x5c\x28\xe5\x86\xc1\x25\xfe\x0f\xd3\x0d\x31\x74\xf3\xb3\xcb\x3a\x9c\xcc\xf6\x05\x29\xaf\xca\xe8\xfe\x42\x30\xd1\x61\x34\x75\x15\x9e\xac\xb9\xfb\x29\x40\x51\x25\x7e\x9b\x9d\x3c\xc3\x3e\xf9\x6d\x76\xa0\x2a\xed\x90\xee\x1f\xdb\xf1\xc3\xbd\xbf\x28\x18\x8f\x86\xe8\x7b\x00\x00\x00\xff\xff\xe7\xd3\x93\xbc\x0c\x09\x00\x00")

func pairTmplBytes() ([]byte, error) {
	return bindataRead(
		_pairTmpl,
		"pair.tmpl",
	)
}

func pairTmpl() (*asset, error) {
	bytes, err := pairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7e, 0xc2, 0x7c, 0xf1, 0xf1, 0xbf, 0x30, 0xd8, 0xfa, 0x92, 0xbf, 0x22, 0xb6, 0xb6, 0x99, 0x81, 0x67, 0xd1, 0x7c, 0x41, 0xfb, 0x7e, 0x27, 0x84, 0x6e, 0xc4, 0x4, 0x2f, 0x22, 0x6a, 0x61, 0x83}}
	return a, nil
}

var _serviceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5b\x6f\xdb\x36\x14\x7e\xd7\xaf\x38\x13\x82\x41\x2e\x1c\x6a\xeb\x63\x0b\xbf\xac\x17\x6c\x18\x9a\x04\x4d\x77\x01\x8a\x22\x60\xa5\x63\x87\xb0\x4c\x72\x24\xad\x26\xd0\xf4\xdf\x07\x5e\x64\x53\x97\x58\x6e\xb1\xfa\x25\x34\x79\x2e\x1f\xbf\xf3\xf1\x90\x4e\x9e\xc3\x2b\x51\x22\x6c\x90\xa3\xa2\x06\x4b\xf8\xfc\x08\x1b\x71\xf8\x0e\x35\xa3\xc0\xb8\x41\xc5\x69\x95\x17\xbb\x32\xd7\xa8\x6a\x56\xe0\x4b\x78\x7d\x0d\x57\xd7\x1f\xe0\xcd\xeb\xdf\x3e\x90\x44\xd2\x62\x4b\x37\x08\x4d\x03\xe4\x8a\xee\x10\xda\x36\x49\xd8\x4e\x0a\x65\x20\x4b\xd2\x42\x70\x83\x0f\x26\x4d\x52\x26\xd2\x24\x49\x37\xcc\xdc\xef\x3f\x93\x42\xec\x72\x21\x91\x1b\x45\x0b\xc6\x37\xf1\xf8\x72\x33\x34\xfc\x7b\x4f\xf9\x17\x91\x6b\x23\x14\xdd\x60\x7a\x62\x2d\x97\xdb\x4d\xae\x71\xb3\x43\x6e\x66\xed\x90\x97\x52\xb0\x33\x0c\x0b\x85\x25\x72\xc3\x68\x35\x9f\xdb\x8f\x8b\x8a\x6a\x3d\x6b\x7c\x6f\x8c\x2c\x2a\x36\x87\x35\xf0\x7e\x3a\x9e\x79\x94\xd6\x42\x6a\x98\x33\xca\x25\x65\xea\x8c\x60\xf9\x0e\x0d\x2d\xa9\xa1\x69\xb2\x48\x92\xa6\xb9\x84\x8b\xd7\xd4\x50\x78\xb1\x02\xe2\x8a\x5c\x53\x05\x77\x70\x24\x87\xdc\x28\x51\xb3\x12\x55\x58\xe9\xf8\x1d\xce\x87\xfa\x90\x5b\xff\xb7\x9b\xf5\xb9\xc9\xad\xff\xab\xfa\xd3\x8e\x50\xf2\xe1\x51\xe2\x21\x88\x27\x85\xdc\xfa\xc1\x1b\xa5\x44\xe7\x73\xe4\x95\x5c\x4b\xc3\x04\xd7\x49\x92\xe7\x60\xbd\x81\x69\x30\xf7\x08\x76\x87\xb0\x16\xaa\x27\xdb\x42\x70\x6d\xbc\xd9\x0a\xd2\x68\x25\xf5\xfb\x67\x6b\xe8\xd2\x59\x73\x00\x00\x3b\x6d\x70\x27\x2b\x7b\x62\x52\xcf\x2c\xec\xe8\x16\x6f\x2b\x6b\x95\x06\x98\xe9\xd1\xd1\x6d\xe2\x1d\x95\xd3\x11\xc2\x71\xb9\x5b\xef\x79\x31\x17\xa8\x83\x6d\x23\x20\x2f\x5d\x4d\x66\xf1\x84\x33\x04\x1d\xcf\x3d\x3c\xe7\x62\x19\x07\x39\x9c\x7c\x1b\xa2\xc4\x35\xe3\xc7\xf4\xd1\x46\x2f\x24\xb7\xfa\x61\xbc\xc4\x07\x20\xf0\x13\xfc\x0b\x46\xdc\x50\x5d\xd0\xaa\x67\x56\x06\xa1\x75\x86\x3f\xf7\x56\x4d\x40\x1c\x19\x3c\x77\xc9\x3b\x0b\x45\xf9\x06\xe1\xe2\x6e\x09\x17\xb5\xb5\x72\xf1\xc8\xf5\x81\xf3\x23\x9c\xad\x5b\xae\xed\xda\x18\x8a\xfd\x58\x45\xd9\x7d\x34\x8d\x03\xdf\xb6\x6e\xb0\x85\xb6\xb5\x08\x56\xb0\xa3\xf2\xa3\x36\x8a\xf1\xcd\x27\x6d\xd4\xbe\x30\x4d\xdb\x1c\x9c\xf3\x1c\xde\xa1\xa1\x97\x9e\x90\xd2\x05\xd2\x3d\x04\x01\x69\x1d\x60\xbc\xc7\x7f\xf6\x4c\x61\x19\x23\xb0\x1f\x2b\xc6\x8b\xda\x2a\xf1\x05\x1c\xd2\xb4\xcb\x5e\xa8\x20\x81\x13\xd1\xfd\x61\xe8\xef\xef\x1b\xa3\x07\xb2\xed\xc7\x1d\xa5\x69\x8a\x42\x34\xe8\x31\x72\xa3\xf0\x04\x21\x6c\x6d\x91\xbe\xdd\xf3\x62\x88\xf2\x95\x97\x23\x04\x59\x92\xf0\x7d\x0a\xe5\xd7\x17\xc0\x4a\x65\x8b\x8f\x33\x65\xb0\x1b\xb3\x56\x3d\xa9\x84\x85\xcc\x4b\xf1\x20\x4e\x6b\xb8\x18\x16\xe4\xe9\x1a\xf5\x01\x3c\x55\xa9\x5f\xa9\x9e\xc6\xf0\x59\x88\xea\xbb\x42\x8d\x48\x6d\x1a\x5b\xa5\x7b\xaa\x6f\x14\xae\xd9\x83\xab\x75\x7a\x85\x5f\x52\xb8\x1c\xc0\xb5\x9d\x03\x24\x55\x1a\x0f\xda\xb8\xa1\x4c\xf5\xf3\x54\x1a\xa7\x1d\x33\x0d\xcf\x0e\x7e\xb0\xf0\x81\xc6\xfe\xbc\xec\xb9\x1f\xc4\x97\x09\x69\x34\x10\x42\x9e\xb9\xeb\x8c\x58\xcf\x05\x64\xcf\xa6\xa5\xba\x04\xb4\x37\xc8\x22\xd2\xaa\x42\xbd\xaf\x8c\xad\xc8\x8f\xd3\x3e\x4d\x44\x4a\x4d\xab\x3d\x6a\x6b\x6c\x1b\x65\x16\xb5\x05\xf7\x86\x5a\xd3\x02\x9b\x76\x71\x30\xb7\x57\xcf\xdd\x12\xdc\xc9\xf4\x0a\x70\x68\x9b\xe1\x59\xe0\xc2\x40\x36\x41\xf5\x62\xa8\x0c\xb6\xb6\xf1\x84\xeb\x67\x4f\xf6\xab\x8f\x35\xf9\x1d\x1f\x3f\xbd\x84\x1f\xc4\x36\xca\xe5\x37\x6b\xf6\x8a\x03\x67\xd5\xf2\x78\xb7\x5e\xe1\x17\xcb\xda\x1f\x5c\xef\xa5\x7d\xd0\x61\xe9\xae\xd9\xac\x5e\xf4\x7c\x4f\x0a\xc7\x13\x13\x32\xc3\x0a\x6a\xf2\xa7\x9d\x99\x12\x96\xed\xb5\x35\x44\x7c\xf5\x56\xc4\xd6\xab\xbc\xd7\x4b\xac\x24\x40\x7e\x63\x47\xa9\x1d\x61\xab\x0e\xa2\xd4\x5d\x4f\xf9\x34\xa4\x76\x82\x2e\xab\x8d\xce\xde\x6d\x2b\x1b\x34\xa6\x01\x47\x5e\xe8\x33\x51\xba\x10\xbf\xd0\x62\xbb\x51\x62\xcf\xcb\xec\x0c\xaa\xc7\x8c\xec\xfe\xd7\xa6\xe7\x2e\xca\x60\x37\xea\x29\x33\x8c\x7a\xf9\xe1\x23\xb4\xed\x88\xd5\xb1\x0a\x61\x46\x89\x1d\x46\x2f\xc3\x7e\xf8\xa7\x88\x7a\xaa\x84\x51\x01\xa2\x28\xbe\x94\x27\x9a\xe4\x57\x48\xff\xab\xdb\xfb\xf7\xa3\xfa\x29\x01\x87\x0b\xe5\xb8\x79\xa3\xa2\xb3\x39\x43\xd1\x04\x43\xe7\x11\x94\x0c\x6a\xed\x73\x2c\x6d\xcd\x93\xbe\x63\xe4\x14\x86\xc3\x47\x66\xff\x95\x1a\x3f\x13\xb9\x7d\x93\xc6\xaf\xcd\xf1\x43\xd4\xdb\x7c\xd3\x23\x34\x48\xf3\x6a\x90\xe4\x79\x64\x73\xde\x33\x14\x2e\xd6\x3c\xe8\x62\xd8\xa4\xba\xf6\xb5\xe6\x53\x4a\xf1\x2b\xb6\x84\x5d\x03\x19\x18\x81\x6f\x09\x3e\x05\xb9\xa1\x0a\xb9\xb5\xf9\x8b\x99\xfb\xce\x83\x96\xa5\xee\xba\x0e\x84\x2e\xdf\xfd\x2e\xea\x39\x91\x51\x64\x7f\x47\x07\xbb\xf7\x58\x20\xab\x51\xd9\xfa\x9f\x4a\x98\x15\xe6\x61\xf8\x82\x5b\x46\x0e\x74\xa7\x5d\x88\x0c\x0e\x81\xad\x42\xfc\xe4\xf8\xfc\x6a\x49\xf9\x12\x6c\xcc\x17\x2b\x88\xfe\x87\x40\x6e\x0d\x55\xe6\x56\x52\xfe\x56\x89\x5d\x94\x7b\x79\xea\xe7\x71\xd7\x6d\x72\x9b\x3b\xae\x6f\xdb\x3a\xfd\xf3\x68\x1c\xef\x2f\x5d\x8c\x80\x95\xb8\x46\xe5\xe0\x91\xb7\x8c\x33\x7d\x9f\x2d\x92\x91\x91\x6b\xcc\xb0\x02\x2a\x25\xf2\x32\x73\x5f\x97\x20\x35\x19\x10\xb6\x18\xc7\x0f\x07\x47\x8f\xb0\x74\x05\x79\x45\xab\xca\x97\x63\xe4\x3b\x56\xd2\x44\xdf\x8a\xa6\xc6\x67\x10\xda\xf6\xbf\x00\x00\x00\xff\xff\x42\xed\x37\x59\x3f\x12\x00\x00")

func serviceTmplBytes() ([]byte, error) {
	return bindataRead(
		_serviceTmpl,
		"service.tmpl",
	)
}

func serviceTmpl() (*asset, error) {
	bytes, err := serviceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8b, 0xe1, 0xe0, 0xa6, 0x2f, 0xf6, 0xa5, 0x92, 0xb0, 0x60, 0xa4, 0x6c, 0xda, 0xbd, 0xd6, 0x63, 0x67, 0x6e, 0xeb, 0x30, 0x6a, 0x9e, 0xf1, 0x30, 0xb5, 0x8c, 0xa8, 0x67, 0x16, 0x45, 0x31, 0xd3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"metadata.tmpl": metadataTmpl,
	"open.tmpl":     openTmpl,
	"pair.tmpl":     pairTmpl,
	"service.tmpl":  serviceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"metadata.tmpl": &bintree{metadataTmpl, map[string]*bintree{}},
	"open.tmpl":     &bintree{openTmpl, map[string]*bintree{}},
	"pair.tmpl":     &bintree{pairTmpl, map[string]*bintree{}},
	"service.tmpl":  &bintree{serviceTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
