// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/info.tmpl (1.442kB)
// tmpl/open.tmpl (1.162kB)
// tmpl/operation.tmpl (833B)
// tmpl/pair.tmpl (2.285kB)
// tmpl/service.tmpl (7.63kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _infoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcf\xab\x9b\x4e\x14\xc5\xf7\xfe\x15\xe7\x1b\xf2\x40\xc1\xaf\xee\x5b\xb2\x28\x2f\xa5\xbc\x45\xf3\x0a\x09\x5d\xb4\x94\x32\xd1\xab\x48\xc6\x19\x99\x19\x2d\x69\x9e\xff\x7b\x19\x9d\xd4\x1f\x49\x4a\x5a\xde\x26\x44\xef\xb9\xe7\xde\xcf\xb9\xc6\x31\x1e\x65\x4a\xc8\x49\x90\x62\x86\x52\xec\x8f\xc8\xe5\xef\x67\x14\xc2\x90\x12\x8c\xc7\x49\x99\xbe\xc5\xfa\x19\x9b\xe7\x1d\xde\xaf\x9f\x76\x91\x57\xb1\xe4\xc0\x72\x2b\xc9\xa4\xe7\xc5\x31\xde\x71\x0e\xd6\xb0\x82\xb3\x3d\x27\x94\x64\x58\xca\x0c\x8b\xbc\x44\x0a\x6d\xe0\x7b\xa7\xd3\xff\x50\x4c\xe4\x84\xe5\xf7\x10\xcb\x06\x6f\x56\x88\x9e\x44\x26\x35\xda\xd6\x03\x00\xab\x58\x56\x82\x95\x64\x6b\xcb\x26\xda\xd8\xbf\x2f\x30\xf2\x13\xd3\x09\xe3\x63\x5d\x91\x59\xc1\xba\xd0\x15\x67\xc7\x4e\xe7\x8a\x33\xa3\xd5\x0d\x99\x95\x90\x48\x87\x47\xab\xdb\x26\xb2\x9a\x0d\xec\x0b\x8f\xcc\x50\x2e\xd5\xf1\xb2\xd6\x4f\x69\x5b\xac\xb0\xe8\xb5\x6e\xca\xc2\x1b\x8d\x08\xbc\xbb\xf0\x5f\x8b\xfe\x1f\xe0\x35\xa9\xa6\x48\x68\xe3\xc6\x57\xaa\x10\x26\xc3\xe2\x41\x3f\xe8\x05\xfc\x2b\xd9\x04\xdd\xdb\x2b\xc1\x04\x67\xdb\x38\xc6\x07\x32\x93\x90\x7e\x14\x9c\x23\x27\x83\x49\x54\x68\x18\xaf\x09\x99\x92\xe5\xe8\xbb\xb1\x16\x59\x2d\x12\xf8\xe5\xc5\x86\x6d\x1b\xcc\xbd\xfd\x00\x7e\xef\xba\x3b\x56\xf6\x45\x88\xbd\x94\x3c\x00\x4e\x9d\x55\x13\x42\x1e\x2c\x5a\x19\x95\x5f\x2f\xfd\xc6\x56\xdf\xba\x86\x22\xc3\x7f\xf2\xe0\xba\x87\xd0\xbf\x90\x92\x9f\xbb\x7d\x47\x91\x2b\x32\xb5\x12\x8e\x6a\xac\x08\x91\x31\xae\x69\x48\x9d\xeb\xdb\x8d\xdd\xe2\x2f\xf8\xf9\xa7\xfe\xe1\x6a\xfd\xaf\x33\x68\xa2\x29\x7c\x10\xc2\xa8\x9a\x9c\xf0\x7c\x8e\x8f\xb5\x36\x2e\xb6\x21\xfc\xd7\xbc\xc9\x68\xc0\xe8\x2e\x93\xcd\xce\xf7\x70\x8b\xdf\x71\x8d\x39\xda\x0c\x6a\x7b\x15\x48\xdf\x00\x2a\x84\x91\x7f\x01\xb4\x9d\xc1\x34\x53\x98\xe0\x4a\x93\xe3\xbb\x03\x0c\x2b\x34\x93\x2c\x1c\xd9\xe8\xd0\xbf\x02\x00\x00\xff\xff\x72\xdd\x2f\x33\xa2\x05\x00\x00")

func infoTmplBytes() ([]byte, error) {
	return bindataRead(
		_infoTmpl,
		"info.tmpl",
	)
}

func infoTmpl() (*asset, error) {
	bytes, err := infoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "info.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0x3c, 0xa5, 0x63, 0x49, 0xa1, 0x4f, 0xb6, 0xc6, 0xa1, 0x7d, 0xfa, 0x3c, 0x28, 0xef, 0x86, 0xa3, 0xaa, 0x1b, 0xf2, 0x4e, 0xdd, 0x7a, 0xeb, 0x3a, 0xbf, 0x42, 0xf, 0xcd, 0x6a, 0x44, 0xe3}}
	return a, nil
}

var _openTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\x4f\x6b\xe3\x30\x10\xc5\xef\xfa\x14\x43\xc8\x21\x59\xbc\xd2\x3d\x4b\x4e\x9b\x16\x7a\x68\x52\x68\x0e\x85\x52\xca\xc4\x9e\xb8\xa2\xb1\x24\xc6\xb2\x43\x30\xfe\xee\xc5\xf1\x9f\xba\xad\x69\x9a\xf4\x10\x62\xcd\x3c\xbd\x79\xfa\x31\x4a\xc1\x7f\x1b\x11\xc4\x64\x88\xd1\x53\x04\x9b\x03\xc4\xb6\x3b\x43\xae\x11\xb4\xf1\xc4\x06\x77\x2a\x4c\x22\x15\x5a\xa6\xcc\xeb\x5d\xfa\x0f\x16\x2b\x58\xae\xd6\x70\xb5\xb8\x59\x4b\xe1\x30\x7c\xc5\x98\xa0\xeb\x0b\xa1\x13\x67\xd9\xc3\x44\x00\x00\x8c\x62\xed\x5f\xb2\x8d\x0c\x6d\xa2\x1e\x32\x34\x7b\xab\x52\x6f\x19\x63\x1a\x9d\xe8\x2b\x7f\x70\x94\x8e\x44\x51\xfc\x05\x46\x13\x13\x8c\x9f\x03\x18\xa7\x9c\xc3\x6c\x0e\xf2\x9e\x38\xd7\x21\xa5\x50\x96\xa7\x8c\xd2\x46\xaa\x8a\xe2\x78\x5f\x2e\x31\x21\x28\xcb\xda\x9b\x4c\x54\x79\x4c\x85\xa8\x06\x82\x75\x64\xae\x33\x13\xc2\x36\x33\xe1\xc4\x3a\x0f\x52\xca\x3f\xc7\x2c\xf2\x0e\x35\x4f\x61\x52\x45\x68\xbc\xdb\x18\x1c\x1c\x2b\xf4\x5e\xaf\xff\x39\x00\x62\xae\x7e\x96\xa7\x42\xe4\xc8\xdd\x80\x5b\x74\x30\x87\x04\xdd\x63\xea\x59\x9b\xf8\xa9\x6d\x14\x9f\x9f\x9c\x90\xc7\xc1\x37\x57\x3a\xbd\x05\x34\x51\x2d\x6a\x05\xed\xa9\xce\xd0\xaa\xeb\x1b\x4d\xaf\x41\x20\xd7\x07\x47\xb3\xaf\xe5\x25\xed\x83\x6e\x44\x43\xa8\xf7\x59\xf6\x60\xb5\x04\x2e\x82\x36\x04\xa7\x6f\x38\x08\xa9\x2f\x38\x1b\xd6\x47\x50\x97\xa1\xe9\xf2\xff\x14\x51\xb3\x0c\xa7\x10\x9d\xb1\x41\x7d\xcb\x61\x48\x3d\xc1\xa5\x90\x7e\xb5\x3f\x5d\xfe\x6f\x21\xbd\x05\x00\x00\xff\xff\xe4\x0a\x67\xc8\x8a\x04\x00\x00")

func openTmplBytes() ([]byte, error) {
	return bindataRead(
		_openTmpl,
		"open.tmpl",
	)
}

func openTmpl() (*asset, error) {
	bytes, err := openTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "open.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf8, 0xc8, 0x9a, 0x70, 0xbb, 0xb4, 0xb6, 0xf6, 0x20, 0x86, 0xe4, 0x9f, 0x1, 0x8b, 0x2c, 0x4, 0x41, 0x21, 0x32, 0xca, 0xf2, 0x78, 0x9d, 0x67, 0x75, 0x29, 0x7d, 0x8c, 0x12, 0x41, 0xaf, 0xb2}}
	return a, nil
}

var _operationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xcd\x4e\xeb\x30\x10\x85\xf7\x7e\x8a\x51\x94\x45\x22\xf5\x26\xfb\x2b\xb1\xe2\x47\x62\x03\x15\x2c\x60\x87\x5c\x77\x9a\x8e\xda\xd8\xc6\x9e\x42\xab\x90\x77\x47\x76\x9c\x52\x2a\x2a\x50\x77\xe3\x99\x73\x8e\x3f\x8f\x6c\xa5\x5a\xc9\x06\xc1\xb3\x71\xb2\x41\x21\xa8\xb5\xc6\x31\x14\x02\x00\x20\x53\x46\x33\x6e\x39\x1b\x4e\x64\x32\x31\x54\x0d\xf1\x72\x33\xab\x94\x69\xeb\xe7\x8d\xd4\xef\xa6\x4e\x01\xb5\x5d\x35\xb5\xc7\xa6\x45\x3d\xba\x4e\x6b\x79\x67\xd1\xff\x4d\x55\x93\x5e\x98\x4c\x94\x42\x74\xdd\x3f\x70\x52\x37\x08\xf9\xcb\x04\x72\x82\xff\x17\x50\xdd\x6a\x46\xb7\x90\x0a\x3d\xf4\xbd\xe8\x3a\xc8\xa9\xba\x42\xaf\x1c\x59\x26\xa3\x43\x33\xc4\x40\x9a\x90\xb7\x6b\xb9\xbb\x93\x2d\x42\xdf\x03\x8d\x66\xe8\x22\x4b\xb8\x81\x16\x60\x1c\x14\xf8\x1a\xf4\x51\x98\x79\x74\x6f\xa4\xd0\x65\xe5\x51\x7f\xe0\x74\x59\xd9\xf7\xd1\xff\xc8\x8e\x74\x53\x94\xe0\x63\xb1\xcf\x44\x3d\x0f\x20\xfb\xf3\xc1\x2b\xb0\x9d\xe1\x3c\xbc\x24\xa7\xea\x3a\xd6\x29\x6b\xd0\x26\xc1\x11\xf8\x89\xe0\xc3\x5c\x63\x53\xe8\xbd\xf5\xa3\xa3\xae\x63\xa2\xb1\x03\xff\x07\xb0\x99\x4a\xaf\xe4\x3a\xec\x22\x4d\x8e\x76\x37\x52\xfc\xe8\x29\xd2\xe4\xc6\xb8\x56\xf2\x54\x3a\xd9\x86\xbb\x4a\xf8\x3e\x78\x40\xbf\x59\x73\x9c\xfc\x8a\xf1\x44\xbc\xbc\x1c\xbe\xde\x39\x44\x07\xf6\x42\xf1\x16\xd2\x2f\xae\x52\x6f\x72\x1e\x70\xd7\x8d\x8b\xee\xc5\xd7\xd6\x3f\x03\x00\x00\xff\xff\xd9\x15\x9b\xd3\x41\x03\x00\x00")

func operationTmplBytes() ([]byte, error) {
	return bindataRead(
		_operationTmpl,
		"operation.tmpl",
	)
}

func operationTmpl() (*asset, error) {
	bytes, err := operationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "operation.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9e, 0xb3, 0x46, 0xbd, 0x47, 0xfa, 0xe1, 0xea, 0x2e, 0xc7, 0x5c, 0x64, 0xd6, 0xd8, 0xc0, 0x35, 0xd2, 0x0, 0x10, 0x3a, 0x1a, 0xdd, 0xf5, 0xb1, 0x2a, 0x72, 0x20, 0xfc, 0xa2, 0xc9, 0x1f, 0x17}}
	return a, nil
}

var _pairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xc1\x6e\xdb\x38\x10\xbd\xeb\x2b\x66\x05\x23\x90\x16\x8a\xb4\x67\x2d\x7c\x58\x6c\x8c\xa2\x28\x1a\xe7\x60\xb4\x05\x82\xa0\x60\xa8\xb1\x4c\x98\xa2\x08\x92\x62\x6a\xa8\xfa\xf7\x82\x94\xed\x48\x96\x9d\xf8\x52\xa0\x3c\x89\x9c\x37\x33\x6f\xde\x70\x68\x67\x19\xfc\x5f\x17\x08\x25\x0a\x54\xc4\x60\x01\xcf\x3b\x28\xeb\xe3\x1e\x98\x30\xa8\x04\xe1\x19\xad\x8a\x7f\xe1\x6e\x09\xf7\xcb\x15\x2c\xee\x3e\xae\xd2\x40\x12\xba\x25\x25\x82\x24\x4c\xe9\x20\x60\x95\xac\x95\x81\x28\x00\x00\x08\x69\x2d\x0c\xfe\x30\x61\xd0\x6f\x4b\x66\x36\xcd\x73\x4a\xeb\x2a\xfb\xd6\x10\xf1\x52\x67\xda\xd4\x8a\x94\x18\xbe\x63\xcf\xe4\xb6\xcc\x34\x96\x15\x0a\x73\x15\x16\x45\x21\x6b\x76\x25\x98\x2a\x2c\x50\x18\x46\xf8\x55\xf0\x8d\x31\x92\x72\x76\x0d\x15\xb3\x93\xa8\xc3\x20\x0e\x82\x2c\x83\xff\x38\x07\x62\x09\xe3\xe4\x99\xef\xf5\x4a\x03\x5a\x0b\xed\xe4\x6a\xdb\x5b\x50\x44\x94\x08\xb3\xef\x09\xcc\x2c\xe4\x73\x48\x1f\x1c\x06\xba\xce\xa7\x71\x88\x99\x14\xa4\x42\x67\x9b\xd9\xf4\xde\x7d\xfe\x04\x53\x3f\x10\x4d\x09\x3f\xe0\xb2\x0c\xda\xf6\x80\xec\x3a\x78\x61\x9c\xfb\x13\x9b\x7e\x38\xf4\xf7\x0e\x35\x55\x4c\x1a\x56\x8b\xd7\xf0\x03\x9f\x39\x84\xbd\xc7\x7d\x7f\x10\x7a\x7e\x28\x0a\x87\x8e\x83\x77\xd8\x5e\xc3\x34\xcb\xe0\x2b\x33\x9b\x29\x53\x22\x25\xdf\xc1\x28\x3b\x58\xc2\x1b\x04\x53\xc3\xd2\x53\xd6\xce\x7b\xb5\x61\xda\x8b\x08\x4c\x43\xa3\xb1\x70\xf6\xb7\xcb\x5c\x37\x82\x4e\xb2\x46\x76\xef\xb5\xda\x49\xb7\x8f\xe1\x6f\xdf\x35\x5f\x0e\xb4\x5e\x1b\x85\xa6\x51\x02\x6e\x5e\x0d\xfd\xb9\x5b\x9f\x70\x97\x8f\xc4\x4b\x8e\xa6\x2f\x8e\x76\x0e\xb6\x3f\xe9\x82\x6e\xa8\xa2\xab\xe1\x81\x28\x8d\x7d\xd9\xd2\x7f\x12\xd8\xde\x5a\xa8\x88\x74\xc5\xf8\x1b\x02\x9a\x33\x8a\x69\xcf\xdd\xe3\xa3\xca\x01\x1e\xb5\x51\x4c\x94\x4f\x7e\x32\xd7\x84\x62\xdb\xc5\x10\x3d\x3e\x0d\xc8\x27\x80\x4a\xd5\x2a\xde\x17\xd1\x87\xcb\xe7\x50\x91\x2d\x9e\x22\xff\x49\x80\xa3\x88\xaa\x38\xee\x47\xd5\x12\xe5\xbc\xfb\x08\xfd\xd1\xba\x56\xb0\x4d\xc0\xf7\xba\xef\x7d\x05\xaf\x32\x38\x07\x69\x61\x40\xe7\x68\xd2\x2f\xcc\xd0\x0d\x6c\x07\xe8\xf7\x6f\xfb\x10\x79\xcd\xad\x3f\x2c\x4a\x34\x8e\xda\x91\x8f\xcc\x03\x3e\xca\x67\xb5\x69\xe4\x74\x88\x07\xe4\x26\xa1\x8e\x77\x63\x1a\xcb\x0b\x6b\x61\x0e\xca\x4e\x6c\x8e\x3a\x5b\x3b\x77\xdf\x37\x75\x4a\xf5\x98\xa3\x6f\xe5\xa5\xe0\xbe\x8d\x30\x87\xb6\x3d\x46\xea\xba\x48\xd9\xf8\x2c\x9e\xad\x3d\xfc\xaf\x39\x08\xc6\xcf\x14\x75\x58\xfb\x2b\x2d\x18\x4f\xe0\x66\xe1\xba\x7c\x19\xbb\x94\x39\x84\xfe\x82\x86\xc9\x45\xd0\x42\xa9\xdc\xa5\xbe\x8c\x78\x63\x52\x4e\x97\xd3\x3b\x3f\xbc\x41\x7b\xf1\xdf\xc8\x3d\x1e\xb4\xd3\x35\x55\x7d\x7a\x32\x18\xcc\x53\x53\x81\x6b\xd2\x70\x73\xbe\x3d\xbf\x47\xc6\x85\x52\x6e\x18\x5c\xe1\x9f\x99\xae\x88\xa1\x9b\x3f\x5d\xd6\x6e\x34\xdb\x67\xa4\xbc\x28\xa3\xfb\x8f\xc0\x44\x83\xc1\x34\x54\xff\x64\xcd\xdd\x6f\x02\x8a\x22\xf2\xdb\x64\xf4\x0c\xfb\xe2\xb7\xc9\x81\xaa\xb4\x5d\xbc\x7f\x6c\x87\x0f\xf7\xde\x51\x30\x1e\x74\xc1\xaf\x00\x00\x00\xff\xff\xab\xce\xbc\x6c\xed\x08\x00\x00")

func pairTmplBytes() ([]byte, error) {
	return bindataRead(
		_pairTmpl,
		"pair.tmpl",
	)
}

func pairTmpl() (*asset, error) {
	bytes, err := pairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe0, 0x45, 0x33, 0xc9, 0x78, 0x34, 0xbe, 0x40, 0xc2, 0x39, 0x23, 0xfd, 0xc2, 0x63, 0x96, 0x2b, 0xe2, 0xc0, 0xca, 0x56, 0x79, 0x8b, 0x43, 0xba, 0x5a, 0x41, 0x9e, 0xda, 0x84, 0xc4, 0xac, 0x3a}}
	return a, nil
}

var _serviceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5b\x8f\xe3\xb6\x15\x7e\xd7\xaf\x38\x15\x9c\x40\x5a\x78\xa8\xb6\x8f\x0e\xfc\xb4\x93\xdd\x04\x41\x67\x07\xf1\xb6\x29\x1a\x2c\x06\x1c\x89\xb2\x09\xcb\xa4\x4a\xd2\x9a\x71\x1d\xff\xf7\x82\x17\x49\xd4\xcd\xf6\x64\xa7\xd3\xec\xc3\x8e\x2d\x9e\xfb\xf9\xce\x85\x72\x92\xc0\x7b\x9e\x11\x58\x13\x46\x04\x56\x24\x83\xc7\x03\xac\x79\xf3\x1d\x2a\x8a\x81\x32\x45\x04\xc3\x45\x92\xee\xb2\x44\x12\x51\xd1\x94\x7c\x07\xb7\x9f\xe0\xee\xd3\x67\xf8\xfe\xf6\xc7\xcf\x28\x28\x71\xba\xc5\x6b\x02\xc7\x23\xa0\x3b\xbc\x23\x70\x3a\x05\x01\xdd\x95\x5c\x28\x88\x02\x00\x80\x30\xe5\x4c\x91\x67\x15\xda\x6f\x94\x87\x81\xfd\xb4\xa6\x6a\xb3\x7f\x44\x29\xdf\x25\xbc\x24\x4c\x09\x9c\x52\xb6\xf6\x3f\xdf\xac\xc7\x88\xff\xb9\xc7\xec\x89\x27\x52\x71\x81\xd7\x24\xbc\x70\x9e\x94\xdb\x75\x22\xc9\x7a\x47\x98\xba\x8a\x96\xb0\xac\xe4\xf4\x4a\xe2\x54\x90\x8c\x30\x45\x71\x71\x15\xf9\x46\xa9\x32\x2d\xe8\x35\xa6\xb8\x70\xcb\x8b\x84\xea\x50\xd6\x54\xa5\xbc\x48\x98\x94\x98\x8a\x2b\x85\x26\x94\xe5\x3c\x0c\xe2\x20\xa8\xb0\x80\x07\x68\x9d\x45\xf7\x82\x57\x34\x23\xc2\x9d\xd4\x31\xeb\x3f\x77\x71\x47\x2b\xfb\xb7\x7e\x6a\x95\xa0\x95\xfd\xdb\x12\x5b\x8f\xd1\xca\x7e\xf8\x5e\x08\x5e\x9f\xb5\x81\x43\x9f\x4a\x45\x39\x93\x41\x90\x24\xf0\xf9\x50\x12\xa0\x12\xd4\x86\x80\x36\x19\x72\x2e\x3a\x50\x4c\x39\x93\xca\x92\x2d\x21\xf4\x4e\x42\xc3\xef\x34\x01\xae\x30\x2d\xf0\x63\x41\xc0\x84\x07\x39\xbe\x28\x38\x1e\x6f\x40\x60\xb6\x26\x30\x7b\x98\xc3\xac\x82\xc5\x12\xd0\xbd\xa6\xd1\xd2\x75\x10\x35\x05\xcd\x81\x71\x05\xb3\x0a\x7d\x2c\xf8\x23\x2e\xfc\xb3\x59\xc9\xb4\xc6\xc5\x52\x1f\x1b\xe5\xbf\x81\xe2\xf7\x58\xa6\x2d\x5d\x92\x68\xa3\x1d\xe5\xe9\x04\x4f\xb4\x28\xcc\x93\x0a\x7d\xac\xeb\xf3\x96\xc8\x54\x50\xe3\x7b\xcd\xa6\xed\xe8\xf0\x59\x17\x67\xb5\x8f\x0f\x56\x44\xe3\x71\x6d\x12\x61\x99\x16\xe1\x7d\x8c\x27\xa2\xa1\x01\x70\x29\x1a\x3f\x6a\x9a\xd7\x8c\x86\x93\x31\xab\xd0\x2d\x95\x65\x81\x0f\x75\x32\xc1\xfd\xf3\x04\x2d\x27\xc8\x3c\xdf\xf4\x57\x6d\xa3\x0d\xc6\x2a\xe5\x65\x4f\xa9\x3d\x78\x8f\x15\x59\x73\x71\x18\x9e\x4d\x85\xf7\xe6\x25\xe1\x3d\x0f\xa4\xa9\xb0\x5d\x13\xb2\x24\x81\x5f\xa8\xda\x0c\x01\x84\xcb\xb2\x38\x40\xc7\x48\xa8\x70\xb1\x27\xa0\x38\xd4\x55\xa4\x8b\x68\x43\xa5\xc1\xbd\xae\xa4\xbd\x24\x99\x3e\x3f\x8f\xbe\x7c\xcf\xd2\x81\xd6\xa8\x72\x5c\xa6\xdc\x4e\xa7\x18\xde\x99\x36\x62\xdc\x84\x63\x93\x3e\x41\xd4\x5e\x30\xf8\xb6\x3d\x6c\xcf\x7e\x22\x87\xc5\x00\xd7\xf3\xe6\xf8\x1f\xda\xfc\x05\x54\xf6\xc9\x29\xe8\x44\xd9\xfb\x38\x11\xef\x17\x40\xf5\xb5\x90\xfa\x42\xa0\x6a\x06\xd7\x07\xef\x9c\xfa\x52\x50\xa6\x72\x08\xbf\x91\xdf\xc8\x10\xa2\x11\x0c\xc7\xe6\xe9\x08\x80\x63\xaf\xc1\x7c\x24\x6a\x08\x91\x35\x51\xa3\x00\xc9\x05\xdf\xc1\x8e\x28\x9c\x61\x85\x91\x11\x61\x52\xde\x13\x12\xed\x4c\x87\x40\x7d\xab\x75\xee\xa3\x0e\x16\xe6\xf0\xc8\x79\x11\x83\x83\x41\x35\x07\xbe\xd5\xce\xed\xd0\x47\xa2\xa2\xba\x3c\xbb\x32\x7c\x4d\xb1\x61\xa3\x39\xfc\x89\x6f\x9d\x8c\x36\xf8\xff\x22\x82\x1b\x64\xf8\xa1\x77\x28\xb3\x56\xf8\x14\x73\xc8\x71\x21\x49\x1b\xfd\x42\x4e\x33\x1a\xf3\x7f\x83\xff\x9c\xe3\x6f\xb3\x67\xff\x77\x02\x2a\xd4\x0d\x41\x3c\x07\x25\xf6\xc4\x11\xd6\x69\x91\x36\xa2\x6d\x02\x4c\x5e\xe4\x44\x5e\x28\x53\x7c\x2c\x2f\xf2\xda\xbc\xcc\x61\x50\xa4\x13\x94\x2e\xca\xce\x99\x1d\x5a\x5d\x95\xa7\x39\x54\xb1\x17\x8a\x73\xd5\x49\x73\xa8\x27\xbd\x5f\x0c\x8a\xec\xca\x42\x2f\xa0\xa1\xdd\x54\x60\x87\xb7\x64\x55\x68\xaa\xd0\xe9\x0d\x5b\xc6\xe1\x2c\x6e\xf9\xdd\xde\xf9\xa0\x23\x74\x49\x4c\x5d\x92\xbe\x95\x17\xad\x71\x0b\x28\xd4\x8b\x4c\xaf\xa1\x5f\x63\xc9\x50\x44\xb3\x44\x6b\x11\x19\xc9\x29\x73\xca\x1f\x74\x88\xc3\xce\x30\xdd\x92\x83\x2e\x22\xca\x32\xf2\x0c\x08\xfe\x0c\x37\x9d\x51\x6b\x8c\xf1\xce\xff\xd2\x39\xa7\x39\x44\xf6\xc4\x51\x6a\x71\x71\xdd\x08\x6f\xbc\x8a\x28\x25\x6a\xd4\x79\x4d\xd0\x17\x66\x8a\xc8\xe7\xb1\x3d\xfc\x02\x13\xcb\xcc\xf7\x7e\xd0\x7d\xaf\x65\xd8\x5b\x1f\xba\x0e\x8f\xf7\xe4\x99\x2e\x8f\xae\xe7\x67\x03\xf3\x57\xa3\xba\x3e\xef\x8f\x0d\x2b\x6d\xb0\x7f\x6c\xcf\xcf\x06\xd3\xe6\xb0\x30\x83\xd5\x56\x48\x5d\x2a\x5b\x38\x9d\xfe\x86\x4b\x58\xc2\x0e\x97\xbf\x4a\x25\x28\x5b\x7f\x91\x4a\xec\x53\x75\x3c\xb5\xa3\x30\x49\xe0\x67\xf2\xef\x3d\x15\x24\xb3\x5b\x69\x47\xbf\x33\xb2\x72\x46\x34\x94\x9e\x76\x37\x4f\xba\x10\x76\x28\x6a\x31\x38\xab\xea\x80\xdc\x9c\x4e\x0b\x68\xec\xf0\xa6\x6e\xaf\xcb\x39\xe3\xec\x06\x81\x8b\xcb\xc6\x35\x94\x6f\x67\x5c\xb3\xb8\x5c\xb6\xae\x25\x7d\x23\xf3\x1c\xd4\xf4\x3f\x73\x67\x19\x47\x88\x93\x06\x2f\x04\x84\x46\xad\x6b\x0b\xe7\x61\xd1\x2f\xcc\xd3\xc9\x1d\x8c\x35\x05\x37\x2c\xbe\x1a\x11\x5d\xeb\xa6\x70\xf1\x03\x96\xe3\x06\xea\x1d\xe2\x0d\xfc\xb8\x02\x3c\x5d\x47\xce\x40\xa8\xd9\x31\xc7\xcc\xb9\x25\x39\xde\x17\xea\x6b\xfc\x1f\xd8\xff\x3f\x0a\x8b\x07\xda\xe3\x51\xfb\xb4\xc1\xf2\x5e\x90\x9c\x3e\x1b\xbc\x86\x77\xe4\x29\xec\x0c\x00\xa8\x77\x93\x12\x0b\x49\x1a\x7c\xeb\xb9\xd0\xd5\xd3\x9f\x1c\x0d\x63\x24\xe1\x5d\xc3\x07\xb1\x15\x34\xe4\x77\x43\xc4\xf7\xdd\x14\x50\xc4\x4b\x25\x01\x21\xe4\xdd\x42\x62\x88\xde\x8d\x97\xdb\x1c\x88\x10\x5c\xc4\x9d\x7b\x8a\xd4\xc9\x59\x2c\xe1\xdb\x71\x9e\xa3\x17\x14\xb3\x9f\x99\xa1\xa2\xdb\x43\xe4\x75\x76\xf3\x12\x2d\xc7\x29\x39\xba\x2d\xd6\x38\xc8\x05\x3c\xe8\x65\x6c\xb1\x74\x90\x32\xd6\x1e\x83\x31\xe4\x8c\x84\x3a\xee\xa7\x9c\xe6\x5a\x9e\x5d\xaa\x27\x47\xce\xaf\x15\xfa\x89\x1c\xbe\x7c\xe7\x6d\xd1\xad\xb3\x66\xcf\x63\xb4\x98\xb7\x2f\x62\xee\xc8\x93\x8e\xda\xdf\x99\xdc\x97\x25\x17\x8a\x64\xe6\x9d\x4c\x54\xc5\x1d\xde\xb3\xc0\xb1\x81\x71\x9a\x61\x09\x15\x32\x8b\xf4\x18\xb0\xf4\xb8\xac\xc0\x8b\x57\xe7\x84\x6f\x2d\xfe\xfd\x4a\xfd\x01\xb3\xac\x20\x20\x5e\xa1\x2d\xba\xa1\xee\x68\x06\xd5\xd3\x9a\x62\xa2\xbc\xac\xfd\x1a\x2e\x89\xc3\x29\xa1\x85\xb5\x73\xe2\x4b\xe0\xe5\xec\x65\x89\xa8\xed\xb6\x59\x78\xb9\xea\x38\x18\xa6\x8c\xe6\x30\x62\x83\x46\x3e\xb2\xd0\x21\x07\xfb\xee\xc3\xde\x67\xce\xb4\x8f\x31\xe9\xe3\x0d\xd6\xa5\x8d\xbf\xc2\xbc\xf8\xff\xa4\x6d\x2a\x62\xae\x73\xb7\x41\x6b\x6e\x7c\x6f\x1c\xda\xf5\xab\x8c\xb0\x3f\x40\x70\x7f\xdf\x04\xbd\x2a\x1d\x13\xc3\xf3\x75\x33\x34\x71\xcb\x1a\xb1\x7b\xa2\x1b\x8c\x18\x33\x61\xc9\x88\xcc\xb3\x68\xf1\xaf\x5d\xad\x3e\xd3\x7d\xac\xda\xb9\xee\x42\x3d\x59\xc3\x1b\x7d\xff\xd6\xd6\xbd\xec\xfa\xf7\xae\xfa\x85\x5a\x73\x7d\x1b\xde\xec\x2c\xcd\xef\xba\xd5\xf5\x5e\x9b\x35\x77\x3b\x8f\xe6\x8a\x9b\x1d\xcc\x72\xe6\x4a\xe2\x83\x5e\x42\x4e\x83\x74\x6a\x82\xf1\x35\x6f\x96\x33\x0d\xb9\xf7\x36\x00\x7d\x22\x68\x5f\xf4\xe7\x0c\xdd\x63\x41\x98\xa6\xf9\x85\xaa\x4d\xcd\x81\xb3\x4c\x82\x8b\x1f\xb8\x99\x5b\xff\xa4\xd1\x61\x42\x03\xc9\x76\x63\x72\x74\x3f\x93\x94\xd0\x8a\x08\xf3\x7e\xe7\x8c\xc2\x28\x55\xcf\xb5\x3e\xe4\x9e\xcd\x3d\x06\xbc\x93\xf6\x5d\x1e\x34\x82\x35\x3c\xec\xc3\xe3\xc0\x06\x59\x62\x36\x07\x2d\x73\xb1\x04\xef\x67\x3c\xb4\x52\x58\xa8\x55\x89\xd9\x07\xc1\x77\x9e\xee\xf9\x35\x3f\x80\x25\xc3\x37\x4e\xa6\x1e\x98\xf7\xd9\xf7\x2f\x8c\x07\x86\x65\x24\x27\xc2\x98\x87\x3e\x50\x46\xe5\x26\x8a\x83\x01\x91\x2d\xa5\x25\xe0\xb2\x24\x2c\x8b\xcc\xd7\x39\x94\x12\xf5\x02\x16\x0f\xe5\xbb\xaa\x91\x03\x5b\xea\x84\xbc\xc7\x45\x61\xd3\x31\xe0\x1d\x22\x69\xba\x4c\x61\xea\x95\xda\x7f\x03\x00\x00\xff\xff\x2d\x2a\xea\xd4\xce\x1d\x00\x00")

func serviceTmplBytes() ([]byte, error) {
	return bindataRead(
		_serviceTmpl,
		"service.tmpl",
	)
}

func serviceTmpl() (*asset, error) {
	bytes, err := serviceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2, 0x20, 0x1a, 0xd, 0xcc, 0x7e, 0xd2, 0xdb, 0xbe, 0x32, 0x98, 0x10, 0x10, 0xbe, 0xf, 0x1a, 0x5e, 0xe, 0x9b, 0xa1, 0x1, 0x46, 0x54, 0x68, 0xf2, 0x30, 0x43, 0xaa, 0xb4, 0x8e, 0x82, 0x30}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"info.tmpl":      infoTmpl,
	"open.tmpl":      openTmpl,
	"operation.tmpl": operationTmpl,
	"pair.tmpl":      pairTmpl,
	"service.tmpl":   serviceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"info.tmpl":      &bintree{infoTmpl, map[string]*bintree{}},
	"open.tmpl":      &bintree{openTmpl, map[string]*bintree{}},
	"operation.tmpl": &bintree{operationTmpl, map[string]*bintree{}},
	"pair.tmpl":      &bintree{pairTmpl, map[string]*bintree{}},
	"service.tmpl":   &bintree{serviceTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
