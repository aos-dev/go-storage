// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/metadata.tmpl (2.268kB)
// tmpl/open.tmpl (1.162kB)
// tmpl/pair.tmpl (2.334kB)
// tmpl/service.tmpl (6.12kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metadataTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x41\x6f\xd3\x30\x1c\xc5\xef\xfe\x14\x8f\xa8\x87\x56\x2a\x09\x5c\x41\x3d\x20\x86\x10\x87\x6d\x48\x9d\x10\x02\xa1\xca\x4d\xfe\x0d\xa6\x8e\x1d\xc5\x4e\x46\xc9\xf2\xdd\x91\xdb\xa4\x75\xd2\x6d\xb4\x6c\x37\xd7\x7e\xfe\xf9\xff\xde\xab\x12\x45\x78\xaf\x13\x42\x4a\x8a\x0a\x6e\x29\xc1\x72\x83\x54\xef\x7f\x43\x28\x4b\x85\xe2\x32\x8a\xb3\xe4\x2d\x2e\xae\x71\x75\x7d\x83\x0f\x17\x9f\x6e\x42\x96\xf3\x78\xcd\x53\x42\x46\x96\x27\xdc\x72\xc6\x44\x96\xeb\xc2\x62\xcc\x00\x20\x48\x85\xfd\x59\x2e\xc3\x58\x67\xd1\xd7\x92\xab\x5b\x1d\x19\xab\x0b\x9e\x52\x94\xaf\xd3\x6e\x1d\x4b\x6e\x4c\xc0\x26\x8c\x55\xbc\xc0\x02\xfe\x76\x78\xb3\xc9\x89\xb1\x28\xc2\x3b\x29\xc1\x2b\x2e\x24\x5f\xca\xc3\x83\x21\x8b\xb5\x32\xdd\x7b\x75\xfd\x12\x96\xb2\x5c\xba\xb1\x83\x4e\xb3\xd8\x4a\x02\x64\x7c\x4d\x73\x29\x62\x42\xa0\x97\xbf\x28\xb6\x0b\xa7\x08\x10\x5e\x92\xe5\x26\xbc\xde\xee\xb9\x35\x9a\xe6\x3c\x5c\x3b\x71\x9f\x37\xdf\x6d\x3e\x09\x68\x2c\xb7\xc2\x58\x11\x0f\xa9\xf3\xee\xc0\xa1\x27\x8c\x3d\x40\x5e\xea\x64\x73\xa6\xf1\x53\x49\xa7\x78\x3e\x97\x75\x9a\x5d\x56\xd7\x09\xad\x84\x3a\x8e\xd0\x8b\x79\xa4\x78\x46\x78\x33\x83\x50\x09\xfd\x46\x88\x57\xfe\xa1\xbb\xe3\x1f\xbe\xf6\x0e\x0b\xae\x52\xc2\x68\x31\xc5\xa8\x72\x9a\x9d\xb8\x15\xec\x09\x79\xc7\x1f\x55\xe1\x95\x5b\xde\xc1\xea\xcf\xdc\xc4\x5c\x0e\xb5\x62\xe5\x44\x17\xc2\xe4\x92\x6f\xb6\x5a\x4f\x30\x00\xce\x1e\x91\x3a\x19\xa9\xa4\xbf\xd5\x1a\xed\xbd\xee\x76\x77\xb8\xa6\xc1\x0c\x81\xfb\xdd\x4e\xd9\x34\x01\x1b\xb0\xea\x9a\x54\xe2\x62\xbd\x2f\xd7\x6d\x55\x4f\x8a\x95\x75\x73\x1a\x2a\x2a\x11\xd3\x55\x97\xdb\xf1\xdc\xe7\x54\xf0\xdc\x0d\xfc\x67\x01\x51\x84\x8f\x64\x7b\x81\xdf\x0a\x29\x91\x92\x45\x2f\x76\x54\x5c\x96\x84\x55\xa1\x33\xef\xe3\xd5\x61\x56\xa5\x8a\x31\xce\x8e\x72\x6a\x9a\xc9\x90\x3f\x9e\x60\xbc\x23\xbb\x4f\x23\x9a\x66\x8a\xa5\xd6\x72\x02\xd4\x7b\x5c\x35\x85\x5e\xbb\x68\xb2\x30\xfb\x7e\xcc\xf4\x71\x3f\xf6\x97\xc4\x0a\x2f\xf4\xda\xa3\x1c\x92\xfb\x46\x85\xfe\xb2\x9d\x7f\x90\x5b\x41\xb6\x2c\x54\xeb\xd4\x57\x4d\xb1\xe2\xd2\x50\x3f\x3a\x69\x1e\x07\x6c\x0d\xdd\xe1\xcf\xbf\x38\xfd\x0a\x0e\xab\x16\x56\x85\xfd\x80\x26\x53\xd8\xa2\x24\xef\x82\x5f\xdf\x65\x69\x6c\x1b\xf1\xa1\xac\xe7\xee\xd0\x7b\xc4\xeb\xb1\x37\xa5\xdf\x5f\x6b\xe4\x84\xf6\x86\x56\x1f\x30\x39\xbf\xd7\xa0\x79\xc0\xa0\x50\x56\x9f\x69\x70\x3e\x30\x57\xf5\xcd\x4d\xee\xb9\xe4\xf9\x3d\xc1\x28\x66\xa8\x8e\xf2\x19\xfc\x07\x8e\x3f\x6a\x7f\x03\x00\x00\xff\xff\xa1\x3e\x56\xd8\xdc\x08\x00\x00")

func metadataTmplBytes() ([]byte, error) {
	return bindataRead(
		_metadataTmpl,
		"metadata.tmpl",
	)
}

func metadataTmpl() (*asset, error) {
	bytes, err := metadataTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metadata.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb0, 0x21, 0xae, 0x44, 0x43, 0x99, 0x11, 0x1d, 0xec, 0xa3, 0x36, 0xa7, 0xa6, 0xb1, 0x70, 0xd, 0xbe, 0x85, 0x80, 0x84, 0x18, 0xe2, 0x68, 0xbd, 0xa, 0x76, 0xa4, 0x40, 0x95, 0x6a, 0x21, 0x26}}
	return a, nil
}

var _openTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\x4f\x6b\xe3\x30\x10\xc5\xef\xfa\x14\x43\xc8\x21\x59\xbc\xd2\x3d\x4b\x4e\x9b\x16\x7a\x68\x52\x68\x0e\x85\x52\xca\xc4\x9e\xb8\xa2\xb1\x24\xc6\xb2\x43\x30\xfe\xee\xc5\xf1\x9f\xba\xad\x69\x9a\xf4\x10\x62\xcd\x3c\xbd\x79\xfa\x31\x4a\xc1\x7f\x1b\x11\xc4\x64\x88\xd1\x53\x04\x9b\x03\xc4\xb6\x3b\x43\xae\x11\xb4\xf1\xc4\x06\x77\x2a\x4c\x22\x15\x5a\xa6\xcc\xeb\x5d\xfa\x0f\x16\x2b\x58\xae\xd6\x70\xb5\xb8\x59\x4b\xe1\x30\x7c\xc5\x98\xa0\xeb\x0b\xa1\x13\x67\xd9\xc3\x44\x00\x00\x8c\x62\xed\x5f\xb2\x8d\x0c\x6d\xa2\x1e\x32\x34\x7b\xab\x52\x6f\x19\x63\x1a\x9d\xe8\x2b\x7f\x70\x94\x8e\x44\x51\xfc\x05\x46\x13\x13\x8c\x9f\x03\x18\xa7\x9c\xc3\x6c\x0e\xf2\x9e\x38\xd7\x21\xa5\x50\x96\xa7\x8c\xd2\x46\xaa\x8a\xe2\x78\x5f\x2e\x31\x21\x28\xcb\xda\x9b\x4c\x54\x79\x4c\x85\xa8\x06\x82\x75\x64\xae\x33\x13\xc2\x36\x33\xe1\xc4\x3a\x0f\x52\xca\x3f\xc7\x2c\xf2\x0e\x35\x4f\x61\x52\x45\x68\xbc\xdb\x18\x1c\x1c\x2b\xf4\x5e\xaf\xff\x39\x00\x62\xae\x7e\x96\xa7\x42\xe4\xc8\xdd\x80\x5b\x74\x30\x87\x04\xdd\x63\xea\x59\x9b\xf8\xa9\x6d\x14\x9f\x9f\x9c\x90\xc7\xc1\x37\x57\x3a\xbd\x05\x34\x51\x2d\x6a\x05\xed\xa9\xce\xd0\xaa\xeb\x1b\x4d\xaf\x41\x20\xd7\x07\x47\xb3\xaf\xe5\x25\xed\x83\x6e\x44\x43\xa8\xf7\x59\xf6\x60\xb5\x04\x2e\x82\x36\x04\xa7\x6f\x38\x08\xa9\x2f\x38\x1b\xd6\x47\x50\x97\xa1\xe9\xf2\xff\x14\x51\xb3\x0c\xa7\x10\x9d\xb1\x41\x7d\xcb\x61\x48\x3d\xc1\xa5\x90\x7e\xb5\x3f\x5d\xfe\x6f\x21\xbd\x05\x00\x00\xff\xff\xe4\x0a\x67\xc8\x8a\x04\x00\x00")

func openTmplBytes() ([]byte, error) {
	return bindataRead(
		_openTmpl,
		"open.tmpl",
	)
}

func openTmpl() (*asset, error) {
	bytes, err := openTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "open.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf8, 0xc8, 0x9a, 0x70, 0xbb, 0xb4, 0xb6, 0xf6, 0x20, 0x86, 0xe4, 0x9f, 0x1, 0x8b, 0x2c, 0x4, 0x41, 0x21, 0x32, 0xca, 0xf2, 0x78, 0x9d, 0x67, 0x75, 0x29, 0x7d, 0x8c, 0x12, 0x41, 0xaf, 0xb2}}
	return a, nil
}

var _pairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x41\x8b\xeb\x36\x10\xbe\xfb\x57\x4c\x4d\x58\xec\xe2\xb5\x7b\x76\xc9\xa1\x74\x43\x29\xa5\x9b\x3d\x84\xb6\xb0\x2c\x45\x2b\x4f\x1c\x11\x59\x16\x92\xac\x7d\xc1\xcf\xff\xfd\x21\x29\xc9\x3a\x71\xb2\x9b\xcb\x83\xa7\x93\xa5\xf9\x66\xf4\xcd\x37\x33\x4a\x8a\x02\x7e\x6f\x2b\x84\x1a\x05\x2a\x62\xb0\x82\xd7\x1d\xd4\xed\x71\x0f\x4c\x18\x54\x82\xf0\x82\x36\xd5\xaf\xf0\xb0\x84\xc7\xe5\x0a\x16\x0f\x7f\xae\xf2\x48\x12\xba\x25\x35\x82\x24\x4c\xe9\x28\x62\x8d\x6c\x95\x81\x24\x02\x00\x88\x69\x2b\x0c\x7e\x31\x71\x14\xb6\x35\x33\x9b\xee\x35\xa7\x6d\x53\xfc\xd7\x11\xf1\xd6\x16\xda\xb4\x8a\xd4\x18\x7f\x62\x2f\xe4\xb6\x2e\x34\xd6\x0d\x0a\x73\x13\x16\x45\x25\x5b\x76\x23\x98\x2a\xac\x50\x18\x46\xf8\x6d\x3c\xc2\x37\xe5\x44\xeb\x9b\x1c\x36\xc6\x48\xca\xd9\x2d\xdc\xcd\x4e\xa2\x8e\xa3\x34\x8a\x8a\x02\x7e\xe3\x1c\x88\x25\x8c\x93\x57\xbe\x17\x38\x8f\x68\x2b\xb4\xd3\xb7\xef\xef\x41\x11\x51\x23\xcc\xfe\xcf\x60\x66\xa1\x9c\x43\xfe\xe4\x30\x30\x0c\xfe\x1a\x87\x98\x49\x41\x1a\x74\xb6\x99\xcd\x1f\xdd\xe7\x57\x30\xed\x13\xd1\x94\xf0\x03\xae\x28\xa0\xef\x0f\xc8\x61\x80\x37\xc6\xb9\x3f\xb1\xf9\x1f\x87\x86\x78\x40\x4d\x15\x93\x86\xb5\xe2\x3d\xfc\xc8\x67\x0e\x71\xf0\x78\x0c\x07\xb1\xe7\x87\xa2\x72\xe8\x34\xfa\x84\xed\x2d\x4c\x8b\x02\xfe\x65\x66\x33\x65\x4a\xa4\xe4\x3b\x38\xb9\x1d\x2c\xe1\x1d\x82\x69\x61\xe9\x29\x6b\xe7\xbd\xda\x30\xed\x45\x04\xa6\xa1\xd3\x58\x39\xfb\xc7\x69\xae\x3b\x41\x27\xb7\x26\x76\xef\xb5\xda\x49\xb7\x4f\xe1\x67\x5f\x35\x9f\x0e\xf4\x5e\x1b\x85\xa6\x53\x02\xee\xde\x0d\xe1\xdc\xad\xbf\x70\x57\x9e\x88\x97\x1d\x4d\xff\x38\xda\x25\xd8\x70\x32\x44\xc3\x58\x45\x97\xc3\x13\x51\x1a\x43\xda\xd2\x7f\x12\xd8\xde\x5b\x68\x88\x74\xc9\xf8\x0e\x01\xcd\x19\xc5\x3c\x70\xf7\xf8\xa4\x71\x80\x67\x6d\x14\x13\xf5\x8b\x1f\xe5\x35\xa1\xd8\x0f\x29\x24\xcf\x2f\x23\xf2\x19\xa0\x52\xad\x4a\xf7\x49\x84\x70\xe5\x1c\x1a\xb2\xc5\x73\xe4\x2f\x19\x70\x14\x49\x93\xa6\x61\xb6\x2d\x51\xce\x3b\x44\x08\x47\xeb\x56\xc1\x36\x03\x5f\xeb\x50\xfb\x06\xde\x65\x70\x0e\xd2\xc2\x88\xce\xd1\xa4\xdf\x98\xa1\x1b\xd8\x8e\xd0\x9f\x77\xfb\x18\x79\x4b\xd7\x1f\x16\x25\x1a\x4f\xca\x51\x9e\x98\x47\x7c\x94\xbf\xd5\xe6\x89\xd3\x21\x1d\x91\x9b\x84\x3a\xf6\xc6\x34\x96\x17\xd6\xc2\x1c\x94\x9d\xd8\x1c\x75\xb6\x76\xee\xbe\x6e\xea\x9c\xea\xf1\x8e\x50\xca\x6b\xc1\x7d\x19\x61\x0e\x7d\x7f\x8c\x34\x0c\x89\xb2\xe9\x45\x3c\x5b\x7b\xf8\x4f\x73\x10\x8c\x5f\x48\xea\xb0\xf6\x2d\x2d\x18\xcf\xe0\x6e\xe1\xaa\x7c\x1d\xbb\x94\x25\xc4\xbe\x41\xe3\xec\x2a\x68\xa1\x54\xe9\xae\xbe\x8e\xf8\x60\x52\xce\x97\xd3\xbb\x3c\xbc\x41\x7b\xf1\x3f\xb8\xfb\x74\xd0\xce\xd7\x54\xf5\xe9\xc9\x68\x30\xcf\x4d\x15\xae\x49\xc7\xcd\xe5\xf2\x7c\x1f\x19\x17\x4a\xb9\x61\x70\x89\xff\xcd\x74\x43\x0c\xdd\xfc\xe8\xb2\x0e\x27\xb3\x7d\x41\xca\xab\x32\xba\x3f\x15\x4c\x74\x18\x4d\x43\x85\x27\x6b\xee\x7e\x13\x50\x54\x89\xdf\x66\x27\xcf\xb0\x4f\x7e\x9b\x1d\xa8\x4a\x3b\xa4\xfb\xc7\x76\xfc\x70\xef\x1d\x05\xe3\xd1\x10\x7d\x0b\x00\x00\xff\xff\x93\x89\x21\x68\x1e\x09\x00\x00")

func pairTmplBytes() ([]byte, error) {
	return bindataRead(
		_pairTmpl,
		"pair.tmpl",
	)
}

func pairTmpl() (*asset, error) {
	bytes, err := pairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x80, 0xbb, 0x9f, 0x2f, 0x82, 0x9b, 0xf2, 0x13, 0xa5, 0x54, 0x7c, 0xb7, 0x3e, 0x6c, 0xad, 0xb9, 0xd, 0x7f, 0x20, 0x8f, 0xcb, 0x17, 0xed, 0x20, 0x81, 0xac, 0x8d, 0xa0, 0xf9, 0x56, 0x4e, 0xd6}}
	return a, nil
}

var _serviceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5b\x6f\xdb\xb8\x12\x7e\xd7\xaf\x98\x23\x18\x85\x5c\x38\xd4\x39\x7d\x4c\xe1\xa7\x5e\x0f\x8a\x4d\x83\xa6\xbb\x5d\xa0\x28\x02\x46\x1a\xdb\x84\x65\x52\x4b\xd2\x4a\x0c\xaf\xfe\xfb\x82\x17\x49\x94\xe4\xd8\xee\x6e\x91\xbe\xac\x5f\x2c\x71\xee\x33\xdf\x0c\x49\xa5\x29\xbc\x12\x39\xc2\x12\x39\x4a\xaa\x31\x87\xbb\x1d\x2c\x45\xfb\x0e\x15\xa3\xc0\xb8\x46\xc9\x69\x91\x66\x9b\x3c\x55\x28\x2b\x96\xe1\x4b\x78\xfd\x11\xae\x3e\x7e\x86\x37\xaf\xff\xff\x99\x44\x25\xcd\xd6\x74\x89\xb0\xdf\x03\xb9\xa2\x1b\x84\xba\x8e\x22\xb6\x29\x85\xd4\x90\x44\x00\x00\x71\x26\xb8\xc6\x07\x1d\xbb\x37\x26\xe2\xc8\x3d\x2d\x99\x5e\x6d\xef\x48\x26\x36\xa9\x28\x91\x6b\x49\x33\xc6\x97\xe1\xf3\xc5\xf2\x10\xf3\xef\x5b\xca\xef\x45\xaa\xb4\x90\x74\x89\xf1\x09\x7a\x5a\xae\x97\xa9\xc2\xe5\x06\xb9\x3e\x8b\x17\x79\x5e\x0a\x76\x26\x73\x26\x31\x47\xae\x19\x2d\xce\xf3\xc3\x3d\x67\x05\x55\xea\x2c\x81\x95\xd6\x65\x56\xb0\x73\x7c\xf7\xf5\x39\xad\x57\xef\xca\x86\xab\x54\x27\x19\xd3\x92\x32\x79\xa6\xd2\x74\x83\x9a\xe6\x54\xd3\x38\x9a\x46\x51\x45\x25\xdc\x42\x97\x21\x72\x2d\x45\xc5\x72\x94\x9e\xd2\x24\x7a\xb8\xee\x8b\x45\x6e\xdc\x7f\xb3\xea\x0c\x91\x1b\xf7\x2f\xfb\xcb\x36\xa3\xe4\xf3\xae\xc4\x56\x89\xcb\x06\xb9\x71\x0f\x6f\xa4\x14\x8d\x4c\x97\x54\xf2\xb1\xd4\x4c\x70\x15\x45\x69\x0a\x46\x1a\x98\x02\xbd\x42\x30\xe1\xc0\x42\xc8\x1e\xae\x33\xc1\x95\x76\x6c\x73\x88\x03\x4a\x6c\xe5\xbd\x25\xa0\x15\x65\x05\xbd\x2b\x10\x6c\xea\x88\x97\x4b\xa2\xfd\xfe\x02\x24\xe5\x4b\x84\xc9\xed\x0c\x26\x15\x5c\xce\x81\x5c\x1b\x1e\xa3\xdd\x24\xd8\x70\xb0\x05\x70\xa1\x61\x52\x91\x77\x85\xb8\xa3\x45\x48\x9b\x94\xdc\x58\xbc\x9c\x1b\xb2\x35\xfe\x27\x68\x71\x4d\x55\xd6\xf1\xa5\xa9\x71\xda\x73\xd6\x35\xdc\xb3\xa2\xb0\x2b\x15\x79\xd7\x34\xfb\x6b\x54\x99\x64\x36\xf6\x46\xcc\xf8\xd1\x93\x73\x21\x4e\x9a\x18\x6f\x9d\x8a\x36\xe2\xc6\x25\xe4\xb9\x51\x11\x3c\x4e\xa3\x13\x91\x3e\x16\xe5\x39\x11\xa6\x29\x7c\x61\x7a\x35\x8e\x90\x96\x65\xb1\x83\x9e\x93\x50\xd1\x62\x8b\xa0\x05\x34\x65\x36\x55\x5e\x31\x65\x0b\x63\x4a\xbd\x55\x98\x1b\xfa\xf1\xf4\x2c\xb6\x3c\x1b\x59\x4d\x2a\x2f\x65\xf1\x50\xd7\x53\x78\x6e\x7b\xc0\x86\x09\x7b\x9b\x1f\xf3\x93\xa8\xb7\x92\xc3\xb3\x8e\xd8\xd1\x3e\xe0\xee\xb2\x57\xac\x59\x4b\xfa\xcd\xb8\x7e\x09\x95\x5b\xa9\xa3\x5e\x86\x83\xc7\x26\x99\x0d\xce\x43\xb4\x68\xdc\x94\x85\x99\xe5\xb1\xeb\x61\xd8\xd0\x35\xde\x14\x86\x2b\xf6\xfd\x11\x77\x82\x63\x24\x76\xf2\x7e\x84\xdf\x9a\x4c\x9c\x52\xd3\x74\xcb\xd0\xc9\xa3\xde\xf8\x59\x0e\x4d\x7b\x0f\xd0\x72\x8e\x27\x63\x15\xed\x7e\x64\x54\xe4\xb8\x60\xdc\x1b\xbf\x35\xe9\x8e\x7b\x8d\xb5\xc6\x9d\x01\x1d\xe3\x39\x3e\x00\x81\xff\xc2\x45\xaf\xed\xac\x33\x01\xfd\x7f\x3d\x3a\x5b\x40\xe2\x28\x9e\xd3\xa8\x9b\x36\xc8\x6e\x38\xdd\xc0\x25\xad\xb9\x00\xd8\xa1\x32\x2c\x14\xf6\x64\x5c\x67\x9e\x10\xe2\xb9\x7d\x1f\x26\x3d\x8c\x5a\xc5\x83\x51\xd2\x0f\x78\x3c\x49\x2c\x9b\x19\xe7\xfd\xc8\x8f\x26\xe6\x85\x35\xdd\xd0\x87\x33\xc0\x69\x0b\x62\x73\x4a\xd6\xc7\x27\x9a\xf9\x99\xc9\x5d\xb6\x23\x0a\xea\xda\x3e\xac\xa1\xae\x7f\xa1\x25\xcc\x61\x43\xcb\xaf\x4a\x4b\xc6\x97\xdf\x94\x96\xdb\x4c\xef\xeb\xae\xcf\xd2\x14\x3e\xe1\x1f\x5b\x26\x31\x77\x33\xb9\x67\xdf\x3b\x59\x79\x27\x5a\xce\xc0\xba\x63\x1d\x40\xd8\xa3\xa8\xc3\xe0\xa4\x6a\x12\x72\x51\xd7\x97\xd0\xfa\x11\xb4\x75\x50\x9f\xc0\x39\x37\x9e\x68\x71\xda\xb9\x96\xf3\xe9\x9c\x6b\xa7\xe2\x69\xef\x3a\xd6\x27\x72\xcf\x43\xcd\xfc\xec\x8e\x7d\x18\x21\x5e\x1b\x7c\x27\x20\x0c\x6a\xfd\x58\x38\x0e\x8b\x61\x63\xd6\xb5\x27\x1c\x1a\x0a\x7e\xbb\xf8\xc7\x88\xe8\x7b\xf7\x18\x2e\xde\x53\x75\xd8\xc1\x3b\x21\x8a\x27\x88\xe3\x0c\xf0\xf4\x03\x79\x14\x42\x3f\x35\x92\x00\x67\xfb\xbd\x19\xf7\x2b\xaa\xae\x25\x2e\xd8\x83\x85\x58\x7c\x85\xf7\x71\x6f\x66\x9b\x9f\x3d\x36\x94\x54\x2a\x6c\x21\x69\x46\x79\xdf\xce\x70\xd8\xb7\x82\x89\x82\xe7\xad\x1c\x4c\x9d\xa2\xb1\xbc\x9f\xfb\x61\xec\x16\xf3\x89\x28\xb5\x02\x42\x48\x70\x2a\x99\x42\xf2\xfc\x70\x87\xcc\x00\xcd\xf9\x78\xda\x3b\xb7\xa8\x6d\xa1\x4d\x55\x9e\x1d\x96\xd9\x07\x49\xb1\x07\x2d\xbb\x0f\x98\x8e\x4e\x82\x61\x6c\xaf\x90\x0b\x9a\xe1\xbe\x9e\xb6\xec\xe6\x60\x7d\x3b\x03\x3b\x36\x1c\x0a\xac\xb7\xfb\x5e\x68\xfe\x84\x98\x1c\x48\xf5\x74\x08\x0e\xb6\x30\xfa\x84\xdd\x47\x1e\xdd\x25\xbe\x56\xe4\x03\xee\xbe\xbd\x84\xff\x88\x75\x60\x0b\xba\x43\x1a\x67\xc5\xac\xbb\x39\x5c\xe1\xbd\xc9\xda\xaf\x5c\x6d\x4b\x73\x9f\xc5\xdc\x5e\x22\x92\x6a\xda\x93\x3d\x0a\x1c\x97\x18\x6f\x19\xe6\x50\x11\x7b\xb0\x3b\x04\x2c\xb3\xc3\x55\x10\xe4\xab\x47\x11\x6b\x07\xf4\xb0\xb9\xde\x53\x9e\x17\x08\xf2\x07\x4c\x32\xbf\x0f\x7b\x9e\x51\xf7\x74\xae\xd8\x2c\xcf\x9b\xb8\xc6\xe7\xba\xf1\x60\x37\xca\xba\xd1\xfe\x2d\x0a\x6a\xf6\x7d\x85\x68\xfc\x76\x55\xf8\x7e\xd3\xd3\x68\x5c\x32\xb6\x80\x03\x3e\x18\xe4\x13\x07\x1d\xdc\xb9\xbb\x50\x45\x92\xe3\xe3\xe3\x90\xf6\xc3\x33\xd1\x97\x4d\xfc\x80\x11\xff\x73\xca\xf6\x58\xc6\xfc\x88\xee\x92\xa6\x65\x00\xf5\x27\x4c\xed\xf2\x87\xec\x3a\xff\x26\xb7\x0e\xc6\x93\xef\x4c\x67\x64\x66\x3a\x74\x20\x38\xbe\x9f\x0e\x2f\x21\xfd\xbb\x5b\x78\x8d\x68\xee\xfc\xed\x6d\x64\x7c\x51\x71\x3c\x7f\xeb\x92\xe2\x07\xc9\xd5\xc0\xc8\x8b\x80\xe7\x8c\x8b\x0a\x4c\x16\xdc\xc3\xe5\xad\xd9\xa0\x07\x48\x61\x0b\xcb\x30\x3a\x1d\x36\x14\x53\xc0\x57\x2e\x01\x43\x26\xe8\xbe\xda\x2c\x38\xb9\xa6\x12\xb9\xe1\xf9\xc2\xf4\xaa\x91\xa0\x79\xae\xc0\xe7\x0f\xfc\x7e\xd4\x7c\x9f\xea\x09\x91\x91\x66\x77\x9a\xf0\x7c\x9f\x30\x43\x56\xa1\xb4\x1f\x2c\x8e\x18\x4c\x32\xfd\xd0\xd8\x23\x7e\x6d\x16\x08\xd0\x8d\xb2\x2a\x12\x68\x15\x1b\x78\xb8\xc5\xfd\xc8\x07\x55\x52\x3e\x03\xa3\xf3\x72\x0e\xc1\x07\x5e\x72\xa3\xa9\xd4\x37\x25\xe5\x6f\xa5\xd8\x04\xb6\x67\xe7\x7c\xe9\x4c\x8d\xed\xb0\xb8\x75\x6d\xd1\xcf\x83\xe7\x30\xbe\x78\x3a\x72\x2c\xc7\x05\x4a\xeb\x1e\x79\xcb\x38\x53\xab\x64\x1a\x8d\x98\x5c\xd7\xcc\x81\x96\x25\xf2\x3c\xb1\xaf\x33\x73\x95\x1f\x24\x6c\x3a\xd6\xef\xbb\x46\x8d\x7c\x69\x0a\xf2\x8a\x16\x85\x2b\xc7\x48\x76\x8c\xa4\xc1\xc0\x1b\x2c\x1d\xfc\x40\xf4\x57\x00\x00\x00\xff\xff\x37\x01\x81\xf3\xe8\x17\x00\x00")

func serviceTmplBytes() ([]byte, error) {
	return bindataRead(
		_serviceTmpl,
		"service.tmpl",
	)
}

func serviceTmpl() (*asset, error) {
	bytes, err := serviceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa2, 0x44, 0x53, 0x30, 0xbf, 0xc3, 0xc1, 0xc9, 0x6d, 0x8d, 0xb4, 0x3d, 0x1f, 0xdd, 0x38, 0x3e, 0x38, 0x5b, 0x6b, 0x98, 0xc9, 0xa9, 0x2c, 0xa1, 0x5a, 0x14, 0x25, 0xd, 0xdc, 0xd8, 0xed, 0xb}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"metadata.tmpl": metadataTmpl,
	"open.tmpl":     openTmpl,
	"pair.tmpl":     pairTmpl,
	"service.tmpl":  serviceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"metadata.tmpl": &bintree{metadataTmpl, map[string]*bintree{}},
	"open.tmpl":     &bintree{openTmpl, map[string]*bintree{}},
	"pair.tmpl":     &bintree{pairTmpl, map[string]*bintree{}},
	"service.tmpl":  &bintree{serviceTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
