// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/metadata.tmpl (2.232kB)
// tmpl/open.tmpl (1.26kB)
// tmpl/pair.tmpl (2.334kB)
// tmpl/service.tmpl (4.941kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metadataTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x4f\x8f\xd3\x3c\x18\xc4\xef\xfe\x14\xf3\x46\x3d\xb4\x52\xdf\x04\xae\xa0\x1e\x10\x8b\x10\x87\xdd\x45\xea\x0a\x21\x10\xaa\xdc\xe4\x69\x30\x75\xec\x28\x76\xb2\x94\x6c\xbe\x3b\x72\x9b\xb4\x4e\xba\x7f\x5a\x76\x6f\xb1\x33\xfe\xf9\x99\x99\x28\x51\x84\xf7\x3a\x21\xa4\xa4\xa8\xe0\x96\x12\x2c\x37\x48\xf5\x7e\x0d\xa1\x2c\x15\x8a\xcb\x28\xce\x92\xb7\xb8\xb8\xc6\xd5\xf5\x0d\x3e\x5c\x7c\xba\x09\x59\xce\xe3\x35\x4f\x09\x19\x59\x9e\x70\xcb\x19\x13\x59\xae\x0b\x8b\x31\x03\x80\x20\x15\xf6\x67\xb9\x0c\x63\x9d\x45\x5f\x4b\xae\x6e\x75\x64\xac\x2e\x78\x4a\x51\xbe\x4e\xbb\xe7\x58\x72\x63\x02\x36\x61\xac\xe2\x05\x16\xf0\xb7\xc3\x9b\x4d\x4e\x8c\x45\x11\xde\x49\x09\x5e\x71\x21\xf9\x52\x1e\x2e\x0c\x59\xac\x95\xe9\xee\xab\xeb\xff\x61\x29\xcb\xa5\x1b\x3b\xe8\x34\x8b\xad\x24\x40\xc6\xd7\x34\x97\x22\x26\x04\x7a\xf9\x8b\x62\xbb\x70\x8a\x00\xe1\xf5\x76\x75\x49\x96\xa3\x69\xce\x03\xb5\xb3\x76\xa4\xf9\x6e\xf9\x2c\x94\xb1\xdc\x0a\x63\x45\x7c\xe0\xcd\xbb\x2d\x07\x9d\x30\xf6\x00\x73\xa9\x93\xcd\xc9\x36\x4f\x65\x3c\xee\xf0\x5c\xca\x53\xe6\x58\x5d\x27\xb4\x12\xea\x38\x2a\x2f\xce\x91\xe2\x19\xe1\xcd\x0c\x42\x25\xf4\x1b\x21\x5e\xf9\x2f\xdd\x19\xff\xe5\x6b\xef\x65\xc1\x55\x4a\x18\x2d\xa6\x18\x55\x4e\xb3\x13\xb7\x82\x3d\x21\xef\xf8\xa3\x2a\xbc\x72\x8f\x77\xb0\xfa\x33\x37\x31\x97\x43\xad\x58\x39\xd1\x85\x30\xb9\xe4\x9b\xad\xd6\x13\x0c\x80\xb3\x47\xa4\x4e\x46\x2a\xe9\x6f\xb5\x46\x7b\xb7\xbb\xdd\x1d\xae\x69\x30\x43\xe0\xd6\xed\x94\x4d\x13\xb0\x01\xab\xae\x49\x25\x2e\xd6\xfb\x72\xdd\x96\xf4\xac\x58\x59\x37\xa7\xa1\xa2\x12\x31\x5d\x75\xb9\x1d\xcf\x7d\x4e\x05\x2f\xdd\xc0\x3f\x16\x10\x45\xf8\x48\xb6\x17\xf8\xad\x90\x12\x29\x59\xf4\x62\x47\xc5\x65\x49\x58\x15\x3a\xf3\x7e\x4c\x1d\x66\x55\xaa\x18\xe3\xec\x28\xa7\xa6\x99\x0c\xf9\xe3\x09\xc6\x3b\xb2\xfb\xed\xa1\x69\xa6\x58\x6a\x2d\x27\x40\xbd\xc7\x55\x53\xe8\xb5\x8b\x26\x0b\xb3\xef\xc7\x4c\x1f\xf7\x63\x7f\x48\xac\xf0\x9f\x5e\x7b\x94\x43\x72\xdf\xa8\xd0\x5f\xb6\xf3\x0f\x72\x2b\xc8\x96\x85\x6a\x9d\xfa\xaa\x29\x56\x5c\x1a\xea\x47\x27\xcd\xe3\x80\xad\xa1\x3b\xfc\x79\x8a\xd3\xaf\xe0\xf0\xd4\xc2\xaa\xb0\x1f\xd0\x64\x0a\x5b\x94\xe4\x1d\xf0\xeb\xbb\x2c\x8d\x6d\x23\x3e\x94\xf5\xd2\x1d\x7a\x97\x78\x3d\xf6\xa6\xf4\xfb\x6b\x8d\x9c\xd0\xde\xd0\xea\x03\x26\xe7\xf7\x1a\x34\x0f\x18\x14\xca\xea\x33\x0d\xce\x07\xe6\xaa\xbe\xb9\xc9\x3d\x87\x3c\xbf\x27\x18\xc5\x0c\xd5\x51\x3e\x83\x6f\xe0\xf8\xa7\xf6\x37\x00\x00\xff\xff\x8b\xaa\x50\xdd\xb8\x08\x00\x00")

func metadataTmplBytes() ([]byte, error) {
	return bindataRead(
		_metadataTmpl,
		"metadata.tmpl",
	)
}

func metadataTmpl() (*asset, error) {
	bytes, err := metadataTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metadata.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfd, 0x23, 0x7, 0x6c, 0x43, 0x3c, 0x66, 0xbd, 0x2b, 0x7e, 0xde, 0x29, 0x70, 0x72, 0x1a, 0xd3, 0x72, 0x2, 0x4c, 0xe7, 0x1c, 0x9e, 0x14, 0x33, 0x60, 0x81, 0xdf, 0xcf, 0x92, 0xf8, 0x1e, 0x3f}}
	return a, nil
}

var _openTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcf\x8e\xda\x40\x0c\xc6\xef\xf3\x14\x16\xe2\x00\x55\x3a\x73\xa7\xe2\x54\x5a\xa9\x87\x92\x4a\xe5\x50\xa9\x5a\xad\x4c\x62\xb2\xa3\x25\x33\x23\x67\x12\x84\x22\xde\x7d\x15\xf2\x67\x03\x1b\x58\xc1\xee\x01\x91\xf1\x67\x7f\xb6\x7f\xb2\x52\xf0\xdd\xc6\x04\x09\x19\x62\xf4\x14\xc3\x7a\x0f\x89\xed\xde\x50\x68\x04\x6d\x3c\xb1\xc1\xad\x8a\xd2\x58\x45\x96\x29\xf7\x7a\x9b\x7d\x83\x45\x08\xcb\x70\x05\x3f\x16\xbf\x56\x52\x38\x8c\x9e\x31\x21\xe8\x74\x21\x74\xea\x2c\x7b\x98\x88\x51\xa2\xfd\x53\xbe\x96\x91\x4d\xd5\xbf\x1c\xcd\xce\xaa\xcc\x5b\xc6\x84\x46\x57\x34\xe5\xf7\x8e\xb2\x91\x28\xcb\xaf\xc0\x68\x12\x82\xf1\x63\x00\xe3\x8c\x0b\x98\xcd\x41\xfe\x25\x2e\x74\x44\x70\x38\x08\x00\x80\x2b\x3e\x59\x9d\x99\xa9\xb2\x3c\x96\xcb\x25\xa6\x55\x5d\x6d\x4d\x26\xae\x3c\xa6\x42\x54\xfd\xc0\x3a\x32\x3f\x73\x13\xc1\x26\x37\xd1\xc4\x3a\x0f\x52\xca\x2f\xc7\x51\xe4\x1f\xd4\x3c\x85\x49\x35\x41\xe3\xdd\x4e\xc1\xc1\x31\x42\xaf\xf1\xfa\x9f\x03\x20\xe6\xea\x67\x79\x2a\x44\x81\xdc\x35\xf8\x8d\x0e\xe6\x90\xa2\xfb\x9f\x79\xd6\x26\x79\x68\x85\xf2\x7c\xe3\x94\x3c\x0e\xad\x5c\xa5\xe9\x4d\xad\x5f\xd0\xd0\xc4\xa7\xba\x0c\x5d\x1b\x68\x26\x0d\x5d\x5b\x53\xd7\x35\x72\xc3\x48\xae\xf6\x8e\x66\x6f\xc3\x4b\xda\x05\x5d\xa3\x06\xe1\xd9\xb3\xf7\x79\xe8\xc1\x6d\x89\xdd\x05\x79\x08\x66\xdf\x70\x10\x6a\x3f\xe1\x53\xe0\x5e\xd2\xcf\x58\xde\xc8\xb3\xdb\xf2\xa4\xc7\x6d\x6c\x9b\xab\x7b\x8f\xed\x0d\xa7\xda\xb7\x1c\xa6\xdb\x4b\xb8\x93\xee\x47\x2f\xb1\xdb\xe0\x2a\xa6\x97\x00\x00\x00\xff\xff\x22\xfc\x6e\x1a\xec\x04\x00\x00")

func openTmplBytes() ([]byte, error) {
	return bindataRead(
		_openTmpl,
		"open.tmpl",
	)
}

func openTmpl() (*asset, error) {
	bytes, err := openTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "open.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xad, 0xc8, 0xcf, 0xd7, 0x74, 0x3a, 0x76, 0x8c, 0x65, 0x19, 0x92, 0xa7, 0x90, 0x56, 0xbb, 0x62, 0x9b, 0xda, 0x54, 0xd8, 0xd1, 0xc3, 0xe6, 0xf4, 0x24, 0xfd, 0x7, 0xbf, 0xa3, 0x6d, 0xbb, 0x99}}
	return a, nil
}

var _pairTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x41\x8b\xeb\x36\x10\xbe\xfb\x57\x4c\x4d\x58\xec\xe2\xb5\x7b\x76\xc9\xa1\x74\x43\x29\xa5\x9b\x3d\x84\xb6\xb0\x2c\x45\x2b\x4f\x1c\x11\x59\x16\x92\xac\x7d\xc1\xcf\xff\xfd\x21\x29\xc9\x3a\x71\xb2\x9b\xcb\x83\xa7\x93\xa5\xf9\x66\xf4\xcd\x37\x33\x4a\x8a\x02\x7e\x6f\x2b\x84\x1a\x05\x2a\x62\xb0\x82\xd7\x1d\xd4\xed\x71\x0f\x4c\x18\x54\x82\xf0\x82\x36\xd5\xaf\xf0\xb0\x84\xc7\xe5\x0a\x16\x0f\x7f\xae\xf2\x48\x12\xba\x25\x35\x82\x24\x4c\xe9\x28\x62\x8d\x6c\x95\x81\x24\x02\x00\x88\x69\x2b\x0c\x7e\x31\x71\x14\xb6\x35\x33\x9b\xee\x35\xa7\x6d\x53\xfc\xd7\x11\xf1\xd6\x16\xda\xb4\x8a\xd4\x18\x7f\x62\x2f\xe4\xb6\x2e\x34\xd6\x0d\x0a\x73\x13\x16\x45\x25\x5b\x76\x23\x98\x2a\xac\x50\x18\x46\xf8\x6d\x3c\xc2\x37\xe5\x44\xeb\x9b\x1c\x36\xc6\x48\xca\xd9\x2d\xdc\xcd\x4e\xa2\x8e\xa3\x34\x8a\x8a\x02\x7e\xe3\x1c\x88\x25\x8c\x93\x57\xbe\x17\x38\x8f\x68\x2b\xb4\xd3\xb7\xef\xef\x41\x11\x51\x23\xcc\xfe\xcf\x60\x66\xa1\x9c\x43\xfe\xe4\x30\x30\x0c\xfe\x1a\x87\x98\x49\x41\x1a\x74\xb6\x99\xcd\x1f\xdd\xe7\x57\x30\xed\x13\xd1\x94\xf0\x03\xae\x28\xa0\xef\x0f\xc8\x61\x80\x37\xc6\xb9\x3f\xb1\xf9\x1f\x87\x86\x78\x40\x4d\x15\x93\x86\xb5\xe2\x3d\xfc\xc8\x67\x0e\x71\xf0\x78\x0c\x07\xb1\xe7\x87\xa2\x72\xe8\x34\xfa\x84\xed\x2d\x4c\x8b\x02\xfe\x65\x66\x33\x65\x4a\xa4\xe4\x3b\x38\xb9\x1d\x2c\xe1\x1d\x82\x69\x61\xe9\x29\x6b\xe7\xbd\xda\x30\xed\x45\x04\xa6\xa1\xd3\x58\x39\xfb\xc7\x69\xae\x3b\x41\x27\xb7\x26\x76\xef\xb5\xda\x49\xb7\x4f\xe1\x67\x5f\x35\x9f\x0e\xf4\x5e\x1b\x85\xa6\x53\x02\xee\xde\x0d\xe1\xdc\xad\xbf\x70\x57\x9e\x88\x97\x1d\x4d\xff\x38\xda\x25\xd8\x70\x32\x44\xc3\x58\x45\x97\xc3\x13\x51\x1a\x43\xda\xd2\x7f\x12\xd8\xde\x5b\x68\x88\x74\xc9\xf8\x0e\x01\xcd\x19\xc5\x3c\x70\xf7\xf8\xa4\x71\x80\x67\x6d\x14\x13\xf5\x8b\x1f\xe5\x35\xa1\xd8\x0f\x29\x24\xcf\x2f\x23\xf2\x19\xa0\x52\xad\x4a\xf7\x49\x84\x70\xe5\x1c\x1a\xb2\xc5\x73\xe4\x2f\x19\x70\x14\x49\x93\xa6\x61\xb6\x2d\x51\xce\x3b\x44\x08\x47\xeb\x56\xc1\x36\x03\x5f\xeb\x50\xfb\x06\xde\x65\x70\x0e\xd2\xc2\x88\xce\xd1\xa4\xdf\x98\xa1\x1b\xd8\x8e\xd0\x9f\x77\xfb\x18\x79\x4b\xd7\x1f\x16\x25\x1a\x4f\xca\x51\x9e\x98\x47\x7c\x94\xbf\xd5\xe6\x89\xd3\x21\x1d\x91\x9b\x84\x3a\xf6\xc6\x34\x96\x17\xd6\xc2\x1c\x94\x9d\xd8\x1c\x75\xb6\x76\xee\xbe\x6e\xea\x9c\xea\xf1\x8e\x50\xca\x6b\xc1\x7d\x19\x61\x0e\x7d\x7f\x8c\x34\x0c\x89\xb2\xe9\x45\x3c\x5b\x7b\xf8\x4f\x73\x10\x8c\x5f\x48\xea\xb0\xf6\x2d\x2d\x18\xcf\xe0\x6e\xe1\xaa\x7c\x1d\xbb\x94\x25\xc4\xbe\x41\xe3\xec\x2a\x68\xa1\x54\xe9\xae\xbe\x8e\xf8\x60\x52\xce\x97\xd3\xbb\x3c\xbc\x41\x7b\xf1\x3f\xb8\xfb\x74\xd0\xce\xd7\x54\xf5\xe9\xc9\x68\x30\xcf\x4d\x15\xae\x49\xc7\xcd\xe5\xf2\x7c\x1f\x19\x17\x4a\xb9\x61\x70\x89\xff\xcd\x74\x43\x0c\xdd\xfc\xe8\xb2\x0e\x27\xb3\x7d\x41\xca\xab\x32\xba\x3f\x15\x4c\x74\x18\x4d\x43\x85\x27\x6b\xee\x7e\x13\x50\x54\x89\xdf\x66\x27\xcf\xb0\x4f\x7e\x9b\x1d\xa8\x4a\x3b\xa4\xfb\xc7\x76\xfc\x70\xef\x1d\x05\xe3\xd1\x10\x7d\x0b\x00\x00\xff\xff\x93\x89\x21\x68\x1e\x09\x00\x00")

func pairTmplBytes() ([]byte, error) {
	return bindataRead(
		_pairTmpl,
		"pair.tmpl",
	)
}

func pairTmpl() (*asset, error) {
	bytes, err := pairTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pair.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x80, 0xbb, 0x9f, 0x2f, 0x82, 0x9b, 0xf2, 0x13, 0xa5, 0x54, 0x7c, 0xb7, 0x3e, 0x6c, 0xad, 0xb9, 0xd, 0x7f, 0x20, 0x8f, 0xcb, 0x17, 0xed, 0x20, 0x81, 0xac, 0x8d, 0xa0, 0xf9, 0x56, 0x4e, 0xd6}}
	return a, nil
}

var _serviceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\xdb\x6f\xdb\xb6\x17\x7e\xd7\x5f\x71\x7e\x42\xf0\x83\x5c\xb8\xd4\xd6\xc7\x16\x7e\xea\x65\x1d\x86\x25\x41\xd3\x5d\x80\xa2\x08\x58\xe9\xd8\x21\x2c\x93\x1c\x49\xab\x09\x34\xfd\xef\x03\x2f\x92\xa9\x4b\xec\x34\xcb\x30\x60\x7e\x89\x2c\x7e\xe7\xc2\xef\x7c\xe7\x90\x71\x9e\xc3\x6b\x51\x22\x6c\x90\xa3\xa2\x06\x4b\xf8\x72\x07\x1b\xd1\x7f\x87\x9a\x51\x60\xdc\xa0\xe2\xb4\xca\x8b\x5d\x99\x6b\x54\x35\x2b\xf0\x15\xbc\xb9\x80\xf3\x8b\x8f\xf0\xf6\xcd\x8f\x1f\x49\x22\x69\xb1\xa5\x1b\x84\xa6\x01\x72\x4e\x77\x08\x6d\x9b\x24\x6c\x27\x85\x32\x90\x25\x69\x21\xb8\xc1\x5b\x93\x26\x29\x13\x69\x92\xa4\x1b\x66\x6e\xf6\x5f\x48\x21\x76\xb9\x90\xc8\x8d\xa2\x05\xe3\x9b\xf8\xf9\xf9\x66\x0c\xfc\x7d\x4f\xf9\x57\x91\x6b\x23\x14\xdd\x60\x7a\x64\x2d\x97\xdb\x4d\xae\x71\xb3\x43\x6e\x4e\xe2\x90\x97\x52\xb0\x07\x00\x0b\x85\x25\x72\xc3\x68\x75\x3a\xb6\x7f\x2e\x2a\xaa\xf5\x49\xf0\x8d\x31\xb2\xa8\xd8\xa9\x5c\x03\xef\xc7\xfd\x99\x3b\x69\x11\x52\xc3\x29\x50\x2e\x29\x53\x0f\x70\x96\xef\xd0\xd0\x92\x1a\x9a\x26\x8b\x24\x69\x9a\xe7\x70\xf6\x86\x1a\x0a\x2f\x57\x40\x5c\x91\x6b\xaa\xe0\x1a\x0e\xe4\x90\x4b\x25\x6a\x56\xa2\x0a\x2b\x1d\xbf\xe3\xf7\xa1\x3e\xe4\xca\xff\xed\xde\xfa\xd8\xe4\xca\xff\x55\xc3\xd7\x8e\x50\xf2\xf1\x4e\x62\xef\xc4\x93\x42\xae\xfc\xc3\x5b\xa5\x44\x67\x73\xe0\x95\x5c\x48\xc3\x04\xd7\x49\x92\xe7\x60\xad\x81\x69\x30\x37\x08\x76\x87\xb0\x16\x6a\x20\xdb\x42\x70\x6d\x3c\x6c\x05\x69\xb4\x92\xfa\xfd\xb3\x35\x74\xe1\x2c\x1c\x00\xc0\xbe\x36\xb8\x93\x95\xed\x98\xd4\x33\x0b\x3b\xba\xc5\xab\xca\xa2\xd2\x90\x66\x7a\x30\x74\x9b\xf8\x99\xca\x79\x0f\xa1\x5d\xae\xd7\x7b\x5e\x9c\x72\xd4\xa5\x6d\x3d\x20\x2f\x5d\x4d\x4e\xe6\x13\x7a\x08\x3a\x9e\x07\xf9\x3c\x34\x97\xa9\x93\xbe\xf3\xad\x8b\x12\xd7\x8c\x1f\xc2\x47\x1b\x3d\x93\xdc\xea\x87\xf1\x12\x6f\x81\xc0\x77\xf0\x27\x18\x71\x49\x75\x41\xab\x01\xac\x0c\x42\xeb\x80\xdf\x0f\x56\x4d\xc8\x38\x02\xbc\x70\xc1\x3b\x84\xa2\x7c\x83\x70\x76\xbd\x84\xb3\xda\xa2\x9c\x3f\x72\xd1\x73\x7e\x48\x67\xeb\x96\x6b\xbb\x36\x4d\xc5\x7e\xac\xa2\xec\x3e\x9a\xc6\x25\xdf\xb6\xee\x61\x0b\x6d\x6b\x33\x58\xc1\x8e\xca\x4f\xda\x28\xc6\x37\x9f\xb5\x51\xfb\xc2\x34\x6d\xd3\x1b\xe7\x39\x7c\xc0\x3f\xf6\x4c\x61\xe9\x9c\xe8\x41\xf4\x90\x65\x1d\x52\xe8\x91\x51\x74\xfb\xb1\x42\x3c\xab\xad\x0a\x5f\x42\x1f\xa2\x5d\x0e\x5c\x85\xf2\x47\x71\xbd\xf0\x69\x75\x3a\x6e\x8f\x7c\x92\xb8\x3f\xf4\xc7\xc9\xc9\xc0\x07\xe8\xdf\x8f\x1c\x8a\x6f\x3f\xae\xb5\xe7\x4b\x16\xbc\xc1\x37\x56\xc8\xea\x68\x8b\x77\x27\xea\x64\xa3\x58\xd4\x40\x47\x61\x21\xf3\x3a\xed\x95\x6b\x81\x8b\xb1\x1a\x1f\x53\xc4\x61\x6a\xf7\x95\xf2\x3d\xd5\xf3\xd9\x7d\x11\xa2\xfa\xa7\x37\xf1\x00\x45\x0c\x77\x71\xaf\x2e\xfe\xbd\x6d\x44\xf2\x6a\x1a\x7b\x0e\xdc\x50\x7d\xa9\x70\xcd\x6e\x9d\xb2\xd2\x73\xfc\x9a\xc2\xf3\x51\xba\x76\x6e\x82\xa4\x4a\x63\xaf\xc4\x4b\xca\xd4\x30\x4e\xa5\x71\xde\x30\xd3\xf0\xac\xb7\x83\x85\x77\x34\xb5\xe7\xe5\xc0\xbc\x97\x7a\x26\xa4\xd1\x40\x08\x79\xe6\x0e\x73\x62\x2d\x17\x90\x3d\x9b\x6f\x8c\x25\xa0\x3d\x3f\x17\x51\x67\x28\xd4\xfb\xca\xd8\x92\xfc\x7f\xde\xa6\x89\x48\xa9\x69\xb5\x47\x6d\xc1\xf6\x98\xc8\xa2\xa1\xe8\x6e\x90\x6b\x5a\x60\xd3\x2e\x7a\xb8\x3d\x78\xaf\x97\xe0\x06\x81\x97\x80\xcb\xb6\x19\x6c\x8d\xad\x81\x0b\x03\xd9\x0c\xd5\x8b\xb1\x32\xd8\xda\xfa\x13\x6e\x9a\xdf\x3b\xad\x3f\xd5\xe4\x27\xbc\xfb\xfc\x0a\xfe\x27\xb6\x51\x2c\xbf\x59\xb3\x57\x1c\x38\xab\x96\x87\x9b\xc5\x39\x7e\xb5\xac\xfd\xc2\xf5\x5e\xda\xeb\x2c\x96\xee\x92\x91\xd5\x8b\x81\xed\x51\xe1\x78\x62\x42\x64\x58\x41\x4d\x7e\xb5\x6f\xe6\x84\x65\x4f\x9a\x1a\x22\xbe\x06\x2b\x62\xeb\x55\x1e\x77\xd6\x7b\xca\xcb\x0a\x41\x3d\xc1\x00\x0b\xa7\x61\xc0\x4c\x5a\xe7\x90\x8a\x63\x79\xd5\xed\x4b\x6a\xe2\x19\xc6\x3b\x68\xdb\xcf\x49\x54\x8f\x6f\x23\xb9\xcb\xc9\x33\x3c\x74\xbb\x48\xa6\x54\xb3\x35\xcc\xf8\xb7\x8a\x8d\x2d\x1d\xe1\xd9\x91\x9e\x9f\x73\x3d\x3f\xc5\x02\xd7\xe2\x09\x26\xf2\xd3\x73\x7d\x1f\x15\x61\x60\x1e\xd8\x30\x2a\xd2\xde\x09\xce\x66\x28\x7b\x0c\x63\x9b\x27\x19\xff\xff\x65\xce\xa2\x91\xeb\x1a\xc4\xfb\x5f\xda\x46\x19\x19\x46\x46\xe1\x71\x7c\xe5\x1e\xde\xd9\xe3\x4b\x33\xb7\x37\xf4\xf8\xee\x3d\xbd\x96\x7b\xcc\xa3\xae\xe4\xa1\x9f\xcf\x47\x41\x5e\x44\x98\x87\x5d\xca\xe1\x6c\xcd\x83\x10\xde\xd9\x63\x70\xa4\x01\xb6\x76\x80\xc9\xd5\xab\x5b\xb1\xe5\x7b\xed\x39\x18\x83\x82\x2c\x7d\x08\x72\x49\x15\x72\x8b\xf9\x8d\x99\x9b\xce\x82\x96\xa5\x86\x40\x21\x84\xa9\xdf\xfd\x97\x38\x30\x22\x13\xcf\xfe\xcc\x0e\xb8\x0f\x58\x20\xab\x51\xd9\xda\x1f\x0b\x98\x15\xe6\xb6\x8b\x47\xc2\xbb\x65\x64\x40\x77\xda\xb9\xc8\xa0\x77\x6c\x15\xe2\x5f\x36\x93\x1c\xb4\xa4\x7c\x09\xd6\xe7\xcb\x15\x44\xbf\xa8\x90\x2b\x43\x95\xb9\x92\x94\xbf\x53\x62\x17\xc5\x5e\x1e\xfb\xb1\xa0\x1b\xd1\xb9\x8d\x1d\xd7\xb7\x6d\x9d\xf6\x79\xf4\x1c\xef\x2f\x5d\x4c\x12\x2b\x71\x8d\xca\xa5\x47\xde\x31\xce\xf4\x4d\xb6\x48\x26\x20\x37\x1e\x60\x05\x54\x4a\xe4\x65\xe6\xbe\x2e\x41\x6a\x32\x22\x6c\x31\xf5\x1f\x1a\x47\x4f\x72\xe9\x0a\xf2\x9a\x56\x95\x2f\xc7\xc4\x76\xaa\xa4\xd1\x28\x1b\xbd\x9a\xf6\x20\xb4\xed\x5f\x01\x00\x00\xff\xff\xdc\x10\xd5\x9d\x4d\x13\x00\x00")

func serviceTmplBytes() ([]byte, error) {
	return bindataRead(
		_serviceTmpl,
		"service.tmpl",
	)
}

func serviceTmpl() (*asset, error) {
	bytes, err := serviceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x61, 0x85, 0xd, 0xba, 0x19, 0x97, 0x49, 0x49, 0xb3, 0xa1, 0x9f, 0xb4, 0x7a, 0xb5, 0x8f, 0x75, 0x81, 0x6a, 0x37, 0x99, 0xa5, 0x6e, 0x4f, 0x5f, 0xa6, 0xad, 0xd0, 0x7c, 0x48, 0xc5, 0x22, 0x83}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"metadata.tmpl": metadataTmpl,
	"open.tmpl":     openTmpl,
	"pair.tmpl":     pairTmpl,
	"service.tmpl":  serviceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"metadata.tmpl": &bintree{metadataTmpl, map[string]*bintree{}},
	"open.tmpl":     &bintree{openTmpl, map[string]*bintree{}},
	"pair.tmpl":     &bintree{pairTmpl, map[string]*bintree{}},
	"service.tmpl":  &bintree{serviceTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
