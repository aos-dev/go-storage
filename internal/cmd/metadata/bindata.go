// Code generated by go-bindata. DO NOT EDIT.
// sources:
// metadata.tmpl (981B)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metadataTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\xc1\x8e\x94\x40\x10\x86\xef\xfd\x14\xbf\x9b\x39\x40\x82\xf4\x5d\x33\x07\xe3\x18\xe3\xc1\x5d\x13\x27\x5e\x8c\x87\x1a\x28\x08\xa1\xe9\xde\x34\x4d\x9b\x95\xe5\xdd\x4d\xf7\x30\x3a\xcc\x10\x9d\xcb\x72\xa2\x0b\xea\xab\xff\x2b\x90\x12\xef\x4d\xc9\xa8\x59\xb3\x25\xc7\x25\x0e\x4f\xa8\xcd\x9f\x33\x1a\xed\xd8\x6a\x52\xb2\xe8\x4a\xd9\xb1\xa3\x92\x1c\xbd\xc5\xee\x01\xf7\x0f\x7b\x7c\xd8\x7d\xda\xe7\xe2\x91\x8a\x96\x6a\xc6\xe9\xb1\x10\xe3\xf8\x1a\x9b\x9e\xad\x6f\x0a\xbe\xa7\x8e\xf1\x66\x8b\x3c\xde\x3c\xc3\x99\x2f\xd4\x17\xa4\x30\x4d\x42\x48\x89\x77\x4a\x81\x3c\x35\x8a\x0e\xea\x2f\x23\x17\x85\xd1\xbd\x43\x12\x59\x96\x74\xcd\xd8\xb4\x19\x36\x3e\xb2\x76\xe4\x28\x00\x00\x60\x1c\x97\xb3\xa6\x29\x54\x7c\x3e\x1f\xb0\xc5\x5d\x28\xb4\x98\xa6\xbb\x48\x63\x5d\x86\xde\x54\xfc\x9b\x2d\x25\x3e\xb2\x5b\xb2\x7e\x36\x4a\xa1\x66\x87\x13\x11\x9e\xd4\xc0\xa8\xac\xe9\xce\xb2\x57\x83\x2e\x90\x74\x2b\xd1\xd2\x2b\x66\x92\x22\x39\x16\xf6\x4f\x8f\xa1\x90\xe1\x60\x8c\x4a\x81\x31\xea\xf9\x0c\xa6\x0d\xc1\xba\xbc\xfb\xfe\x1f\xd7\x1f\xb1\xa3\xa9\xf0\xca\xb4\x73\x7b\xb8\x2c\xbb\xc1\x6a\x9c\x4d\x79\xc6\x2f\xb6\xe6\x5b\xcc\x1e\x26\x56\xa4\x7a\x8e\xef\x1f\x77\x3a\x77\xf8\x7c\x19\x2d\xcd\xe0\xec\xc0\xe2\xf8\xe5\x3e\x0f\xbd\x7b\x89\x0d\xad\x71\x93\x14\x8b\x24\xa7\xed\xcc\x41\x6f\xd9\xcd\xa5\xcb\x6c\xf1\x75\xd5\xa0\xbf\x36\x68\xb4\x33\x37\x1a\x5c\x32\x13\xbf\x4c\x9f\xae\x74\xcd\x42\xb7\x98\x60\x0b\xbf\xb0\x17\xd3\xf9\x8f\xfd\x3b\x00\x00\xff\xff\x73\xf6\x1e\x1a\xd5\x03\x00\x00")

func metadataTmplBytes() ([]byte, error) {
	return bindataRead(
		_metadataTmpl,
		"metadata.tmpl",
	)
}

func metadataTmpl() (*asset, error) {
	bytes, err := metadataTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metadata.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0x1a, 0x27, 0xd9, 0x8e, 0x7b, 0x6d, 0xd8, 0x2d, 0xe1, 0xdd, 0xb4, 0xe6, 0xe9, 0xcf, 0x42, 0x45, 0x1a, 0x3a, 0xcd, 0xde, 0xff, 0x7e, 0xd2, 0x37, 0xab, 0xbf, 0xcd, 0x92, 0x7b, 0x47, 0x18}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"metadata.tmpl": metadataTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"metadata.tmpl": &bintree{metadataTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
