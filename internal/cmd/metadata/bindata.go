// Code generated by go-bindata. DO NOT EDIT.
// sources:
// metadata.tmpl (1.178kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metadataTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x41\x8f\xd3\x30\x10\x85\xef\xfe\x15\x8f\xaa\x87\x44\xea\xc6\x77\x50\x0f\x88\x22\xc4\x81\x5d\x24\x2a\x84\x40\x08\x4d\x93\x69\x88\xe2\xd8\x95\xed\x78\xb5\x64\xf3\xdf\x91\x93\x14\x9a\xdd\xc2\xf6\xb2\x3d\x54\x9e\x49\xde\x97\xf7\x66\x12\x29\xf1\xc6\x14\x8c\x92\x35\x5b\xf2\x5c\x60\x77\x87\xd2\xfc\xa9\x51\x69\xcf\x56\x93\x92\x79\x53\xc8\x86\x3d\x15\xe4\xe9\x15\x36\x37\xb8\xbe\xd9\xe2\xed\xe6\xfd\x36\x13\x07\xca\x6b\x2a\x19\xc7\xcb\x42\x54\xcd\xc1\x58\x8f\x44\x00\xc0\xa2\xac\xfc\xcf\x76\x97\xe5\xa6\x91\x5f\x5a\xd2\xb7\x46\x3a\x6f\x2c\x95\x2c\x0f\x75\x79\x3c\xe7\x8a\x9c\x5b\x88\x54\x88\x40\x16\x3f\x70\xda\xce\xb6\x77\x07\x16\xa2\xeb\xae\xb0\x74\x6c\x43\x95\xf3\x35\x35\x8c\x97\x6b\x64\xc3\xe1\x1e\xde\x7c\x24\x97\x93\x42\xdf\x0b\x21\x25\x5e\x2b\x05\x0a\x54\x29\xda\xa9\xbf\xce\x32\x91\x1b\xed\xa2\xb1\xc8\xb2\xa4\x4b\xc6\xb2\x5e\x61\x19\x06\xd6\x86\x3c\x45\x40\x74\xdd\x75\xf3\x67\xf5\x7d\xec\x84\x6c\x2a\xb0\xc6\x22\x36\x6a\xf4\xfd\x62\xa0\xb1\x2e\xa2\x36\x15\xff\x67\x4b\x89\x77\xec\xe7\xac\xdb\x4a\x29\x94\xec\x71\x24\x22\x90\x6a\x19\x7b\x6b\x9a\x13\xef\xfb\x56\xe7\x48\x9a\x33\xd6\xd2\x47\xcc\x24\x45\x32\x36\xe2\xec\xd0\xf7\x2b\xec\x8c\x51\x29\xd0\x0d\xf1\xc2\x0a\xa6\x8e\xc6\x9a\xac\xf9\xf6\x44\xd6\xef\x83\xa2\xda\xe3\x85\xa9\x27\xf9\x38\xa1\xab\xd8\x5c\x86\xec\x2b\x5b\xf3\x79\x70\x3c\x0d\x2f\xfe\x2c\xfb\xd6\x6a\x8c\xa4\xd3\x3b\x56\xd8\x93\x72\x3c\xe3\xb0\x72\xff\x16\x0f\x09\xee\xf1\xeb\x29\xc6\xb8\x80\x58\x8e\xff\x13\x24\x64\xf3\x49\xa4\x2b\x78\xdb\xb2\x18\x5f\x94\x0f\xad\xf3\xcf\xb1\x90\x73\xdc\x24\xc5\xcc\xc9\x71\x19\x93\xd1\x4b\x56\xf1\x30\xcb\x94\xe2\xd3\xd9\x04\xee\x71\x82\x4a\x7b\x73\x61\x82\x87\xcc\x24\xcc\xdd\xa7\x67\x54\x53\xa0\x4b\x92\x60\x8d\x30\x4b\x2f\xfa\xd3\xef\xe8\x77\x00\x00\x00\xff\xff\x8f\xee\x9b\x75\x9a\x04\x00\x00")

func metadataTmplBytes() ([]byte, error) {
	return bindataRead(
		_metadataTmpl,
		"metadata.tmpl",
	)
}

func metadataTmpl() (*asset, error) {
	bytes, err := metadataTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metadata.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xda, 0x95, 0xfa, 0xfe, 0x82, 0x1d, 0xd, 0x87, 0x8b, 0xc3, 0x2b, 0x2f, 0x7f, 0x7b, 0x32, 0xe8, 0x9, 0x74, 0x69, 0x73, 0x6d, 0x7b, 0xb5, 0xfa, 0xa7, 0xff, 0xd7, 0x7d, 0x84, 0x58, 0xee, 0xba}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"metadata.tmpl": metadataTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"metadata.tmpl": &bintree{metadataTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
