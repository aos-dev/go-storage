// Code generated by go-bindata. DO NOT EDIT.
// sources:
// metadata.tmpl (988B)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metadataTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x3f\x8f\xd3\x40\x10\xc5\xfb\xfd\x14\x8f\x53\x0a\x5b\x32\xde\x1e\x94\x02\x5d\x10\xa2\xe0\xae\x20\xa2\x41\x14\x13\x7b\x6c\x59\xde\x3f\xa7\xf5\x7a\xd1\xe1\xdb\xef\x8e\xec\x38\x10\xe7\x0f\x0a\xc5\xb9\xf3\xcc\xce\x9b\xf7\x7b\xab\x95\x12\xf7\xb6\x64\xd4\x6c\xd8\x91\xe7\x12\xbb\x67\xd4\xf6\xcf\x3f\x1a\xe3\xd9\x19\x52\xb2\xd0\xa5\xd4\xec\xa9\x24\x4f\xef\xb1\x79\xc4\xc3\xe3\x16\x1f\x37\x9f\xb7\xb9\x78\xa2\xa2\xa5\x9a\x71\x68\x0b\x21\x25\x3e\x28\x05\x0a\xd4\x28\xda\xa9\xbf\xad\x5c\x14\xd6\x74\x1e\x89\x18\x86\xb7\x70\x64\x6a\xc6\xaa\xcd\xb0\x0a\x78\xb7\x46\xbe\x21\x4f\x88\x51\x00\xc0\x30\x60\x95\x3f\x90\x66\xbc\xa0\x20\xcd\xea\x9e\x3a\x46\x8c\x63\x3d\xec\x1b\x31\x62\x8d\xbb\xb1\xd0\x22\xc6\xbb\x49\x93\x4d\x39\x2a\xa4\xe2\xdf\x1b\xa4\xc4\x27\xf6\x4b\xad\x9f\x8d\x52\xa8\xd9\xe3\xa0\x88\x40\xaa\x67\x54\xce\xea\x23\x82\xaa\x37\x05\x12\x7d\xd5\x60\x7a\xa6\x9c\xa4\x48\xf6\x85\xed\xf3\xd3\x58\xc8\xb0\xb3\x56\xa5\xc0\x30\xa1\x86\x0c\xb6\x1d\xed\xe9\x5c\x7f\xbf\x89\xfb\xc7\x34\xd7\x54\x78\x63\xdb\x59\x64\xfc\x1c\xfb\xde\x19\x1c\xed\x7a\xc1\x2f\x76\xf6\xdb\xc4\x31\xee\xad\x48\x75\x3c\x9d\xdf\xa7\x3c\x4f\x84\x7c\x69\x30\xcd\xe0\x5d\xcf\x22\x4e\x77\xf9\xa5\xef\xfc\xeb\xa5\x75\x49\x3d\x49\xb1\xf0\x73\x48\x6a\xb6\x7b\x7b\x4e\xa7\x5c\x33\xd1\xd7\x8b\x34\xdd\x39\x4d\x63\xbc\xfd\x2f\x9a\x53\xe5\x24\x2c\x49\xd2\xab\xb3\x33\xe2\xed\x6c\x58\x23\x2c\x52\x11\xf1\xf8\x09\xfc\x0e\x00\x00\xff\xff\x59\x55\xbf\xe4\xdc\x03\x00\x00")

func metadataTmplBytes() ([]byte, error) {
	return bindataRead(
		_metadataTmpl,
		"metadata.tmpl",
	)
}

func metadataTmpl() (*asset, error) {
	bytes, err := metadataTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metadata.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0x15, 0x7c, 0x12, 0xd, 0x10, 0xe9, 0x8b, 0xd, 0xf8, 0x71, 0xf4, 0x5d, 0x52, 0xeb, 0xa, 0xca, 0x1, 0x15, 0x18, 0x9f, 0x7a, 0x6a, 0xa6, 0xbd, 0x53, 0x50, 0xfd, 0x20, 0x77, 0x11, 0x4e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"metadata.tmpl": metadataTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"metadata.tmpl": &bintree{metadataTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
