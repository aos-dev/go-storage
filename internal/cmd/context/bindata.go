// Code generated by go-bindata. DO NOT EDIT.
// sources:
// context.tmpl (865B)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contextTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x6b\xdc\x30\x10\xbd\xeb\x57\x0c\x66\x0f\x36\x38\xd2\xbd\x25\xa7\xdd\x06\x7a\x49\x4a\x37\xd0\xde\xca\x44\x9a\xf5\x8a\xac\x25\x21\x8d\xdd\x0d\x46\xff\xbd\xd8\xda\x0d\x26\x94\x24\x27\xbd\xd1\xbc\xf9\xd0\x7b\x52\x0a\xb6\xde\x10\x74\xe4\x28\x22\x93\x81\xa7\x17\xe8\xfc\x6b\x0c\xa3\x45\xb0\x8e\x29\x3a\x3c\x29\xdd\x1b\xa5\xbd\x63\x3a\xf3\x57\xd8\x3d\xc0\xfd\xc3\x23\x7c\xdb\x7d\x7f\x94\x22\xa0\x7e\xc6\x8e\x60\x9a\x40\xde\x63\x4f\x90\xb3\x10\xb6\x0f\x3e\x32\xd4\x02\x00\xa0\xba\x14\x56\x25\xb2\xbe\x12\x05\x75\x96\x8f\xc3\x93\xd4\xbe\x57\x3e\x90\xe3\x88\xda\xba\x6e\x8d\x6f\xba\xff\x91\x7f\x0f\xe8\xfe\x7a\x95\xd8\x47\xec\xa8\xfa\x20\xaf\xf8\x25\x50\xfa\x1c\x4b\xf5\xc4\x68\x90\xb1\xd0\x43\xfa\xb8\x22\xa0\x8d\xa9\x12\x8d\x10\x23\x46\xf8\x03\x97\xac\xdc\x97\x33\x0a\x21\xa6\xe9\x06\x22\xba\x8e\x60\xe3\xb0\xa7\x16\x36\xf3\x08\xf8\x72\x0b\x72\x37\x83\x9c\xd7\x94\xe7\x16\x36\xe3\x9c\x2c\xac\x9c\x85\x52\xb3\xba\x9b\x51\xfe\xc0\x48\x8e\x21\xe7\x5f\x96\x8f\xdb\xa2\x2a\xa0\x31\x09\x2e\x12\x43\x1a\xc2\xa2\xfc\xc1\xc7\xb7\x35\x52\x1c\x06\xa7\xa1\x2e\xd7\x3f\x49\x93\x1d\x29\x42\xce\xcd\x3b\xdd\xeb\xd7\x14\xf6\x69\xe1\xd6\x70\x6d\xc0\x43\x74\xe5\x6e\x5a\xd4\x4a\x01\x5d\x0b\x9a\xcf\xf3\xf2\x2b\x13\xe5\x9e\x31\xf2\x3e\xa0\xbb\x8b\xbe\xbf\x36\xd6\x7c\x6e\xdf\x53\x37\x51\x1c\xad\xa6\xa4\xe6\x71\xd7\x9f\x25\xe7\xc0\xad\xf0\x6a\xeb\xaa\x59\xb6\x30\x74\xa0\xb8\xec\x22\xef\xac\xb3\xe9\x58\x37\xe5\x07\x2d\x46\xc1\x2d\x60\x08\xe4\x4c\xbd\x84\x2d\x84\x24\xd7\xcf\xd5\x7c\x6e\x4a\x9f\xb8\xbc\x0f\xd2\xdb\x31\x17\x45\xb6\x78\x3a\x15\xf5\x44\x71\x8f\x9c\xb9\x1a\x59\xe0\xbf\x00\x00\x00\xff\xff\xd1\x16\x7c\x25\x61\x03\x00\x00")

func contextTmplBytes() ([]byte, error) {
	return bindataRead(
		_contextTmpl,
		"context.tmpl",
	)
}

func contextTmpl() (*asset, error) {
	bytes, err := contextTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "context.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1b, 0x75, 0x64, 0xd6, 0x67, 0x61, 0x9d, 0x9d, 0x85, 0xe2, 0x1f, 0x58, 0xbf, 0x19, 0x55, 0x3d, 0x67, 0x69, 0xf3, 0x53, 0xd5, 0xba, 0x7f, 0x35, 0x20, 0x7a, 0x6e, 0xfe, 0xef, 0xf1, 0xfa, 0xd1}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"context.tmpl": contextTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"context.tmpl": &bintree{contextTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
